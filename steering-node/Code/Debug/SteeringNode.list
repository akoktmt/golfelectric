
SteeringNode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bfe8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000324  0800c0f8  0800c0f8  0001c0f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c41c  0800c41c  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  0800c41c  0800c41c  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c41c  0800c41c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c41c  0800c41c  0001c41c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c420  0800c420  0001c420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800c424  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002f9c  20000060  0800c484  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002ffc  0800c484  00022ffc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002353c  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004c97  00000000  00000000  00043608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b98  00000000  00000000  000482a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001588  00000000  00000000  00049e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ca9a  00000000  00000000  0004b3c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023bc8  00000000  00000000  00067e5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009cf06  00000000  00000000  0008ba22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007b1c  00000000  00000000  00128928  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  00130444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c0e0 	.word	0x0800c0e0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	0800c0e0 	.word	0x0800c0e0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2iz>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d215      	bcs.n	8000922 <__aeabi_d2iz+0x36>
 80008f6:	d511      	bpl.n	800091c <__aeabi_d2iz+0x30>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d912      	bls.n	8000928 <__aeabi_d2iz+0x3c>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000912:	fa23 f002 	lsr.w	r0, r3, r2
 8000916:	bf18      	it	ne
 8000918:	4240      	negne	r0, r0
 800091a:	4770      	bx	lr
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	4770      	bx	lr
 8000922:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000926:	d105      	bne.n	8000934 <__aeabi_d2iz+0x48>
 8000928:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800092c:	bf08      	it	eq
 800092e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <__aeabi_d2f>:
 800093c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000940:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000944:	bf24      	itt	cs
 8000946:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800094a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800094e:	d90d      	bls.n	800096c <__aeabi_d2f+0x30>
 8000950:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000954:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000958:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800095c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000960:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000964:	bf08      	it	eq
 8000966:	f020 0001 	biceq.w	r0, r0, #1
 800096a:	4770      	bx	lr
 800096c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000970:	d121      	bne.n	80009b6 <__aeabi_d2f+0x7a>
 8000972:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000976:	bfbc      	itt	lt
 8000978:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800097c:	4770      	bxlt	lr
 800097e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000982:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000986:	f1c2 0218 	rsb	r2, r2, #24
 800098a:	f1c2 0c20 	rsb	ip, r2, #32
 800098e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000992:	fa20 f002 	lsr.w	r0, r0, r2
 8000996:	bf18      	it	ne
 8000998:	f040 0001 	orrne.w	r0, r0, #1
 800099c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009a4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009a8:	ea40 000c 	orr.w	r0, r0, ip
 80009ac:	fa23 f302 	lsr.w	r3, r3, r2
 80009b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009b4:	e7cc      	b.n	8000950 <__aeabi_d2f+0x14>
 80009b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ba:	d107      	bne.n	80009cc <__aeabi_d2f+0x90>
 80009bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009c0:	bf1e      	ittt	ne
 80009c2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009c6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009ca:	4770      	bxne	lr
 80009cc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <__gesf2>:
 80009dc:	f04f 3cff 	mov.w	ip, #4294967295
 80009e0:	e006      	b.n	80009f0 <__cmpsf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__lesf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	e002      	b.n	80009f0 <__cmpsf2+0x4>
 80009ea:	bf00      	nop

080009ec <__cmpsf2>:
 80009ec:	f04f 0c01 	mov.w	ip, #1
 80009f0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009f4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80009f8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80009fc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a00:	bf18      	it	ne
 8000a02:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a06:	d011      	beq.n	8000a2c <__cmpsf2+0x40>
 8000a08:	b001      	add	sp, #4
 8000a0a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000a0e:	bf18      	it	ne
 8000a10:	ea90 0f01 	teqne	r0, r1
 8000a14:	bf58      	it	pl
 8000a16:	ebb2 0003 	subspl.w	r0, r2, r3
 8000a1a:	bf88      	it	hi
 8000a1c:	17c8      	asrhi	r0, r1, #31
 8000a1e:	bf38      	it	cc
 8000a20:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000a24:	bf18      	it	ne
 8000a26:	f040 0001 	orrne.w	r0, r0, #1
 8000a2a:	4770      	bx	lr
 8000a2c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a30:	d102      	bne.n	8000a38 <__cmpsf2+0x4c>
 8000a32:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000a36:	d105      	bne.n	8000a44 <__cmpsf2+0x58>
 8000a38:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000a3c:	d1e4      	bne.n	8000a08 <__cmpsf2+0x1c>
 8000a3e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000a42:	d0e1      	beq.n	8000a08 <__cmpsf2+0x1c>
 8000a44:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_cfrcmple>:
 8000a4c:	4684      	mov	ip, r0
 8000a4e:	4608      	mov	r0, r1
 8000a50:	4661      	mov	r1, ip
 8000a52:	e7ff      	b.n	8000a54 <__aeabi_cfcmpeq>

08000a54 <__aeabi_cfcmpeq>:
 8000a54:	b50f      	push	{r0, r1, r2, r3, lr}
 8000a56:	f7ff ffc9 	bl	80009ec <__cmpsf2>
 8000a5a:	2800      	cmp	r0, #0
 8000a5c:	bf48      	it	mi
 8000a5e:	f110 0f00 	cmnmi.w	r0, #0
 8000a62:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000a64 <__aeabi_fcmpeq>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff fff4 	bl	8000a54 <__aeabi_cfcmpeq>
 8000a6c:	bf0c      	ite	eq
 8000a6e:	2001      	moveq	r0, #1
 8000a70:	2000      	movne	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_fcmplt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffea 	bl	8000a54 <__aeabi_cfcmpeq>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_fcmple>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffe0 	bl	8000a54 <__aeabi_cfcmpeq>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_fcmpge>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffd2 	bl	8000a4c <__aeabi_cfrcmple>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_fcmpgt>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffc8 	bl	8000a4c <__aeabi_cfrcmple>
 8000abc:	bf34      	ite	cc
 8000abe:	2001      	movcc	r0, #1
 8000ac0:	2000      	movcs	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <CAN_Config_filtering>:
	else{
		 return HAL_OK;
	}
}
void CAN_Config_filtering(uint8_t FilterBank, uint16_t NodeID)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08c      	sub	sp, #48	; 0x30
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	460a      	mov	r2, r1
 8000ad2:	71fb      	strb	r3, [r7, #7]
 8000ad4:	4613      	mov	r3, r2
 8000ad6:	80bb      	strh	r3, [r7, #4]
	CAN_FilterTypeDef Can_filter_init;
	Can_filter_init.FilterActivation=ENABLE;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	62bb      	str	r3, [r7, #40]	; 0x28
	Can_filter_init.FilterBank=FilterBank;
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	61fb      	str	r3, [r7, #28]
	Can_filter_init.FilterFIFOAssignment=CAN_RX_FIFO0;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	61bb      	str	r3, [r7, #24]
	Can_filter_init.FilterIdHigh=(NodeID << 5) & 0xFFFF;;
 8000ae4:	88bb      	ldrh	r3, [r7, #4]
 8000ae6:	015b      	lsls	r3, r3, #5
 8000ae8:	b29b      	uxth	r3, r3
 8000aea:	60bb      	str	r3, [r7, #8]
	Can_filter_init.FilterIdLow= 0x0000;
 8000aec:	2300      	movs	r3, #0
 8000aee:	60fb      	str	r3, [r7, #12]
	Can_filter_init.FilterMaskIdHigh= 0xFFF8;
 8000af0:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000af4:	613b      	str	r3, [r7, #16]
	Can_filter_init.FilterMaskIdLow= 0x0000;
 8000af6:	2300      	movs	r3, #0
 8000af8:	617b      	str	r3, [r7, #20]
	Can_filter_init.FilterMode=CAN_FILTERMODE_IDMASK;
 8000afa:	2300      	movs	r3, #0
 8000afc:	623b      	str	r3, [r7, #32]
	Can_filter_init.FilterScale=CAN_FILTERSCALE_32BIT;
 8000afe:	2301      	movs	r3, #1
 8000b00:	627b      	str	r3, [r7, #36]	; 0x24
	if(HAL_CAN_ConfigFilter(&hcan,&Can_filter_init)!=HAL_OK)
 8000b02:	f107 0308 	add.w	r3, r7, #8
 8000b06:	4619      	mov	r1, r3
 8000b08:	4805      	ldr	r0, [pc, #20]	; (8000b20 <CAN_Config_filtering+0x58>)
 8000b0a:	f001 f83f 	bl	8001b8c <HAL_CAN_ConfigFilter>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <CAN_Config_filtering+0x50>
	{
		Error_Handler();
 8000b14:	f000 fb26 	bl	8001164 <Error_Handler>
	}
}
 8000b18:	bf00      	nop
 8000b1a:	3730      	adds	r7, #48	; 0x30
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	200000a4 	.word	0x200000a4

08000b24 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback (CAN_HandleTypeDef *hcan){
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &Rxheader, rcdata)==HAL_OK){
 8000b2c:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000b2e:	4a0a      	ldr	r2, [pc, #40]	; (8000b58 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000b30:	2100      	movs	r1, #0
 8000b32:	6878      	ldr	r0, [r7, #4]
 8000b34:	f001 f937 	bl	8001da6 <HAL_CAN_GetRxMessage>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d103      	bne.n	8000b46 <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
		Can_RecFlag=1;
 8000b3e:	4b07      	ldr	r3, [pc, #28]	; (8000b5c <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8000b40:	2201      	movs	r2, #1
 8000b42:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		Can_RecFlag=0;
	}
}
 8000b44:	e002      	b.n	8000b4c <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
		Can_RecFlag=0;
 8000b46:	4b05      	ldr	r3, [pc, #20]	; (8000b5c <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	701a      	strb	r2, [r3, #0]
}
 8000b4c:	bf00      	nop
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	20000098 	.word	0x20000098
 8000b58:	2000007c 	.word	0x2000007c
 8000b5c:	200000a0 	.word	0x200000a0

08000b60 <HAL_CAN_RxFifo1MsgPendingCallback>:
void HAL_CAN_RxFifo1MsgPendingCallback (CAN_HandleTypeDef *hcan){
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &Rxheader, rcdata)==HAL_OK){
 8000b68:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <HAL_CAN_RxFifo1MsgPendingCallback+0x30>)
 8000b6a:	4a0a      	ldr	r2, [pc, #40]	; (8000b94 <HAL_CAN_RxFifo1MsgPendingCallback+0x34>)
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	6878      	ldr	r0, [r7, #4]
 8000b70:	f001 f919 	bl	8001da6 <HAL_CAN_GetRxMessage>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d103      	bne.n	8000b82 <HAL_CAN_RxFifo1MsgPendingCallback+0x22>
		Can_RecFlag=1;
 8000b7a:	4b07      	ldr	r3, [pc, #28]	; (8000b98 <HAL_CAN_RxFifo1MsgPendingCallback+0x38>)
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		Can_RecFlag=0;
	}
}
 8000b80:	e002      	b.n	8000b88 <HAL_CAN_RxFifo1MsgPendingCallback+0x28>
		Can_RecFlag=0;
 8000b82:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <HAL_CAN_RxFifo1MsgPendingCallback+0x38>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	701a      	strb	r2, [r3, #0]
}
 8000b88:	bf00      	nop
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20000098 	.word	0x20000098
 8000b94:	2000007c 	.word	0x2000007c
 8000b98:	200000a0 	.word	0x200000a0

08000b9c <bytes2Float>:
float bytes2Float(uint8_t bytes[4])
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b085      	sub	sp, #20
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
  union
  {
    uint8_t bytes[4];
    float a;
  } thing;
  memcpy(thing.bytes, bytes, 4);
 8000ba8:	60fb      	str	r3, [r7, #12]
  return thing.a;
 8000baa:	68fb      	ldr	r3, [r7, #12]
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3714      	adds	r7, #20
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bc80      	pop	{r7}
 8000bb4:	4770      	bx	lr
	...

08000bb8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000bbc:	f000 fe6e 	bl	800189c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000bc0:	f000 f83c 	bl	8000c3c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000bc4:	f000 f992 	bl	8000eec <MX_GPIO_Init>
	MX_DMA_Init();
 8000bc8:	f000 f936 	bl	8000e38 <MX_DMA_Init>
	MX_CAN_Init();
 8000bcc:	f000 f87c 	bl	8000cc8 <MX_CAN_Init>
	MX_I2C1_Init();
 8000bd0:	f000 f8b0 	bl	8000d34 <MX_I2C1_Init>
	MX_USART1_UART_Init();
 8000bd4:	f000 f8dc 	bl	8000d90 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8000bd8:	f000 f904 	bl	8000de4 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */

	CAN_Config_filtering(0, 0x102);
 8000bdc:	f44f 7181 	mov.w	r1, #258	; 0x102
 8000be0:	2000      	movs	r0, #0
 8000be2:	f7ff ff71 	bl	8000ac8 <CAN_Config_filtering>
	if (HAL_CAN_ActivateNotification(&hcan,
 8000be6:	2113      	movs	r1, #19
 8000be8:	4810      	ldr	r0, [pc, #64]	; (8000c2c <main+0x74>)
 8000bea:	f001 f9fd 	bl	8001fe8 <HAL_CAN_ActivateNotification>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d002      	beq.n	8000bfa <main+0x42>
			CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING
					| CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK) {
		HAL_CAN_ResetError(&hcan);
 8000bf4:	480d      	ldr	r0, [pc, #52]	; (8000c2c <main+0x74>)
 8000bf6:	f001 fc44 	bl	8002482 <HAL_CAN_ResetError>
	}
	if (HAL_CAN_Start(&hcan) != HAL_OK) {
 8000bfa:	480c      	ldr	r0, [pc, #48]	; (8000c2c <main+0x74>)
 8000bfc:	f001 f88f 	bl	8001d1e <HAL_CAN_Start>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d002      	beq.n	8000c0c <main+0x54>
		HAL_CAN_ResetError(&hcan);
 8000c06:	4809      	ldr	r0, [pc, #36]	; (8000c2c <main+0x74>)
 8000c08:	f001 fc3b 	bl	8002482 <HAL_CAN_ResetError>
	}

	/* USER CODE END 2 */

	/* Init scheduler */
	 osKernelInitialize();
 8000c0c:	f005 ffc2 	bl	8006b94 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000c10:	4a07      	ldr	r2, [pc, #28]	; (8000c30 <main+0x78>)
 8000c12:	2100      	movs	r1, #0
 8000c14:	4807      	ldr	r0, [pc, #28]	; (8000c34 <main+0x7c>)
 8000c16:	f006 f823 	bl	8006c60 <osThreadNew>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	4a06      	ldr	r2, [pc, #24]	; (8000c38 <main+0x80>)
 8000c1e:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	SyncPrintf_Init();
 8000c20:	f00a fbd6 	bl	800b3d0 <SyncPrintf_Init>
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	 osKernelStart();
 8000c24:	f005 ffe8 	bl	8006bf8 <osKernelStart>
	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while (1) {
 8000c28:	e7fe      	b.n	8000c28 <main+0x70>
 8000c2a:	bf00      	nop
 8000c2c:	200000a4 	.word	0x200000a4
 8000c30:	0800c17c 	.word	0x0800c17c
 8000c34:	080010b9 	.word	0x080010b9
 8000c38:	20000340 	.word	0x20000340

08000c3c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b090      	sub	sp, #64	; 0x40
 8000c40:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000c42:	f107 0318 	add.w	r3, r7, #24
 8000c46:	2228      	movs	r2, #40	; 0x28
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f00a fd7a 	bl	800b744 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000c50:	1d3b      	adds	r3, r7, #4
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	605a      	str	r2, [r3, #4]
 8000c58:	609a      	str	r2, [r3, #8]
 8000c5a:	60da      	str	r2, [r3, #12]
 8000c5c:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c66:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c70:	2302      	movs	r3, #2
 8000c72:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c78:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c7a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000c80:	f107 0318 	add.w	r3, r7, #24
 8000c84:	4618      	mov	r0, r3
 8000c86:	f003 ff59 	bl	8004b3c <HAL_RCC_OscConfig>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <SystemClock_Config+0x58>
		Error_Handler();
 8000c90:	f000 fa68 	bl	8001164 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000c94:	230f      	movs	r3, #15
 8000c96:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ca0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ca4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000caa:	1d3b      	adds	r3, r7, #4
 8000cac:	2102      	movs	r1, #2
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f004 f9c6 	bl	8005040 <HAL_RCC_ClockConfig>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <SystemClock_Config+0x82>
		Error_Handler();
 8000cba:	f000 fa53 	bl	8001164 <Error_Handler>
	}
}
 8000cbe:	bf00      	nop
 8000cc0:	3740      	adds	r7, #64	; 0x40
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
	...

08000cc8 <MX_CAN_Init>:
/**
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void) {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
	/* USER CODE END CAN_Init 0 */

	/* USER CODE BEGIN CAN_Init 1 */

	/* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN1;
 8000ccc:	4b17      	ldr	r3, [pc, #92]	; (8000d2c <MX_CAN_Init+0x64>)
 8000cce:	4a18      	ldr	r2, [pc, #96]	; (8000d30 <MX_CAN_Init+0x68>)
 8000cd0:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 4;
 8000cd2:	4b16      	ldr	r3, [pc, #88]	; (8000d2c <MX_CAN_Init+0x64>)
 8000cd4:	2204      	movs	r2, #4
 8000cd6:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 8000cd8:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <MX_CAN_Init+0x64>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000cde:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <MX_CAN_Init+0x64>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000ce4:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <MX_CAN_Init+0x64>)
 8000ce6:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000cea:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000cec:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <MX_CAN_Init+0x64>)
 8000cee:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000cf2:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 8000cf4:	4b0d      	ldr	r3, [pc, #52]	; (8000d2c <MX_CAN_Init+0x64>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <MX_CAN_Init+0x64>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 8000d00:	4b0a      	ldr	r3, [pc, #40]	; (8000d2c <MX_CAN_Init+0x64>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 8000d06:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <MX_CAN_Init+0x64>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 8000d0c:	4b07      	ldr	r3, [pc, #28]	; (8000d2c <MX_CAN_Init+0x64>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = ENABLE;
 8000d12:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <MX_CAN_Init+0x64>)
 8000d14:	2201      	movs	r2, #1
 8000d16:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK) {
 8000d18:	4804      	ldr	r0, [pc, #16]	; (8000d2c <MX_CAN_Init+0x64>)
 8000d1a:	f000 fdf1 	bl	8001900 <HAL_CAN_Init>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_CAN_Init+0x60>
		Error_Handler();
 8000d24:	f000 fa1e 	bl	8001164 <Error_Handler>
	}
	/* USER CODE BEGIN CAN_Init 2 */

	/* USER CODE END CAN_Init 2 */

}
 8000d28:	bf00      	nop
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	200000a4 	.word	0x200000a4
 8000d30:	40006400 	.word	0x40006400

08000d34 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000d38:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <MX_I2C1_Init+0x50>)
 8000d3a:	4a13      	ldr	r2, [pc, #76]	; (8000d88 <MX_I2C1_Init+0x54>)
 8000d3c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 8000d3e:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <MX_I2C1_Init+0x50>)
 8000d40:	4a12      	ldr	r2, [pc, #72]	; (8000d8c <MX_I2C1_Init+0x58>)
 8000d42:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d44:	4b0f      	ldr	r3, [pc, #60]	; (8000d84 <MX_I2C1_Init+0x50>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <MX_I2C1_Init+0x50>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d50:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <MX_I2C1_Init+0x50>)
 8000d52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d56:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d58:	4b0a      	ldr	r3, [pc, #40]	; (8000d84 <MX_I2C1_Init+0x50>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000d5e:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <MX_I2C1_Init+0x50>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d64:	4b07      	ldr	r3, [pc, #28]	; (8000d84 <MX_I2C1_Init+0x50>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d6a:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <MX_I2C1_Init+0x50>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000d70:	4804      	ldr	r0, [pc, #16]	; (8000d84 <MX_I2C1_Init+0x50>)
 8000d72:	f002 f8df 	bl	8002f34 <HAL_I2C_Init>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8000d7c:	f000 f9f2 	bl	8001164 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	20000108 	.word	0x20000108
 8000d88:	40005400 	.word	0x40005400
 8000d8c:	00061a80 	.word	0x00061a80

08000d90 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000d94:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <MX_USART1_UART_Init+0x4c>)
 8000d96:	4a12      	ldr	r2, [pc, #72]	; (8000de0 <MX_USART1_UART_Init+0x50>)
 8000d98:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000d9a:	4b10      	ldr	r3, [pc, #64]	; (8000ddc <MX_USART1_UART_Init+0x4c>)
 8000d9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000da0:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000da2:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <MX_USART1_UART_Init+0x4c>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000da8:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <MX_USART1_UART_Init+0x4c>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000dae:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <MX_USART1_UART_Init+0x4c>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000db4:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <MX_USART1_UART_Init+0x4c>)
 8000db6:	220c      	movs	r2, #12
 8000db8:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dba:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <MX_USART1_UART_Init+0x4c>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <MX_USART1_UART_Init+0x4c>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000dc6:	4805      	ldr	r0, [pc, #20]	; (8000ddc <MX_USART1_UART_Init+0x4c>)
 8000dc8:	f004 fd42 	bl	8005850 <HAL_UART_Init>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8000dd2:	f000 f9c7 	bl	8001164 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	2000015c 	.word	0x2000015c
 8000de0:	40013800 	.word	0x40013800

08000de4 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000de8:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <MX_USART2_UART_Init+0x4c>)
 8000dea:	4a12      	ldr	r2, [pc, #72]	; (8000e34 <MX_USART2_UART_Init+0x50>)
 8000dec:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000dee:	4b10      	ldr	r3, [pc, #64]	; (8000e30 <MX_USART2_UART_Init+0x4c>)
 8000df0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000df4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000df6:	4b0e      	ldr	r3, [pc, #56]	; (8000e30 <MX_USART2_UART_Init+0x4c>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000dfc:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <MX_USART2_UART_Init+0x4c>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000e02:	4b0b      	ldr	r3, [pc, #44]	; (8000e30 <MX_USART2_UART_Init+0x4c>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000e08:	4b09      	ldr	r3, [pc, #36]	; (8000e30 <MX_USART2_UART_Init+0x4c>)
 8000e0a:	220c      	movs	r2, #12
 8000e0c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e0e:	4b08      	ldr	r3, [pc, #32]	; (8000e30 <MX_USART2_UART_Init+0x4c>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e14:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <MX_USART2_UART_Init+0x4c>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000e1a:	4805      	ldr	r0, [pc, #20]	; (8000e30 <MX_USART2_UART_Init+0x4c>)
 8000e1c:	f004 fd18 	bl	8005850 <HAL_UART_Init>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8000e26:	f000 f99d 	bl	8001164 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	200001a4 	.word	0x200001a4
 8000e34:	40004400 	.word	0x40004400

08000e38 <MX_DMA_Init>:
/**
 * Enable DMA controller clock
 * Configure DMA for memory to memory transfers
 *   hdma_memtomem_dma1_channel1
 */
static void MX_DMA_Init(void) {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000e3e:	4b28      	ldr	r3, [pc, #160]	; (8000ee0 <MX_DMA_Init+0xa8>)
 8000e40:	695b      	ldr	r3, [r3, #20]
 8000e42:	4a27      	ldr	r2, [pc, #156]	; (8000ee0 <MX_DMA_Init+0xa8>)
 8000e44:	f043 0301 	orr.w	r3, r3, #1
 8000e48:	6153      	str	r3, [r2, #20]
 8000e4a:	4b25      	ldr	r3, [pc, #148]	; (8000ee0 <MX_DMA_Init+0xa8>)
 8000e4c:	695b      	ldr	r3, [r3, #20]
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	607b      	str	r3, [r7, #4]
 8000e54:	687b      	ldr	r3, [r7, #4]

	/* Configure DMA request hdma_memtomem_dma1_channel1 on DMA1_Channel1 */
	hdma_memtomem_dma1_channel1.Instance = DMA1_Channel1;
 8000e56:	4b23      	ldr	r3, [pc, #140]	; (8000ee4 <MX_DMA_Init+0xac>)
 8000e58:	4a23      	ldr	r2, [pc, #140]	; (8000ee8 <MX_DMA_Init+0xb0>)
 8000e5a:	601a      	str	r2, [r3, #0]
	hdma_memtomem_dma1_channel1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000e5c:	4b21      	ldr	r3, [pc, #132]	; (8000ee4 <MX_DMA_Init+0xac>)
 8000e5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e62:	605a      	str	r2, [r3, #4]
	hdma_memtomem_dma1_channel1.Init.PeriphInc = DMA_PINC_ENABLE;
 8000e64:	4b1f      	ldr	r3, [pc, #124]	; (8000ee4 <MX_DMA_Init+0xac>)
 8000e66:	2240      	movs	r2, #64	; 0x40
 8000e68:	609a      	str	r2, [r3, #8]
	hdma_memtomem_dma1_channel1.Init.MemInc = DMA_MINC_ENABLE;
 8000e6a:	4b1e      	ldr	r3, [pc, #120]	; (8000ee4 <MX_DMA_Init+0xac>)
 8000e6c:	2280      	movs	r2, #128	; 0x80
 8000e6e:	60da      	str	r2, [r3, #12]
	hdma_memtomem_dma1_channel1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e70:	4b1c      	ldr	r3, [pc, #112]	; (8000ee4 <MX_DMA_Init+0xac>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	611a      	str	r2, [r3, #16]
	hdma_memtomem_dma1_channel1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e76:	4b1b      	ldr	r3, [pc, #108]	; (8000ee4 <MX_DMA_Init+0xac>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	615a      	str	r2, [r3, #20]
	hdma_memtomem_dma1_channel1.Init.Mode = DMA_NORMAL;
 8000e7c:	4b19      	ldr	r3, [pc, #100]	; (8000ee4 <MX_DMA_Init+0xac>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	619a      	str	r2, [r3, #24]
	hdma_memtomem_dma1_channel1.Init.Priority = DMA_PRIORITY_LOW;
 8000e82:	4b18      	ldr	r3, [pc, #96]	; (8000ee4 <MX_DMA_Init+0xac>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	61da      	str	r2, [r3, #28]
	if (HAL_DMA_Init(&hdma_memtomem_dma1_channel1) != HAL_OK) {
 8000e88:	4816      	ldr	r0, [pc, #88]	; (8000ee4 <MX_DMA_Init+0xac>)
 8000e8a:	f001 fbfd 	bl	8002688 <HAL_DMA_Init>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_DMA_Init+0x60>
		Error_Handler();
 8000e94:	f000 f966 	bl	8001164 <Error_Handler>
	}

	/* DMA interrupt init */
	/* DMA1_Channel4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	2105      	movs	r1, #5
 8000e9c:	200e      	movs	r0, #14
 8000e9e:	f001 fbc8 	bl	8002632 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000ea2:	200e      	movs	r0, #14
 8000ea4:	f001 fbe1 	bl	800266a <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2105      	movs	r1, #5
 8000eac:	200f      	movs	r0, #15
 8000eae:	f001 fbc0 	bl	8002632 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000eb2:	200f      	movs	r0, #15
 8000eb4:	f001 fbd9 	bl	800266a <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	2105      	movs	r1, #5
 8000ebc:	2010      	movs	r0, #16
 8000ebe:	f001 fbb8 	bl	8002632 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000ec2:	2010      	movs	r0, #16
 8000ec4:	f001 fbd1 	bl	800266a <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	2105      	movs	r1, #5
 8000ecc:	2011      	movs	r0, #17
 8000ece:	f001 fbb0 	bl	8002632 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000ed2:	2011      	movs	r0, #17
 8000ed4:	f001 fbc9 	bl	800266a <HAL_NVIC_EnableIRQ>

}
 8000ed8:	bf00      	nop
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	40021000 	.word	0x40021000
 8000ee4:	200002fc 	.word	0x200002fc
 8000ee8:	40020008 	.word	0x40020008

08000eec <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b088      	sub	sp, #32
 8000ef0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000ef2:	f107 0310 	add.w	r3, r7, #16
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	605a      	str	r2, [r3, #4]
 8000efc:	609a      	str	r2, [r3, #8]
 8000efe:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000f00:	4b3a      	ldr	r3, [pc, #232]	; (8000fec <MX_GPIO_Init+0x100>)
 8000f02:	699b      	ldr	r3, [r3, #24]
 8000f04:	4a39      	ldr	r2, [pc, #228]	; (8000fec <MX_GPIO_Init+0x100>)
 8000f06:	f043 0310 	orr.w	r3, r3, #16
 8000f0a:	6193      	str	r3, [r2, #24]
 8000f0c:	4b37      	ldr	r3, [pc, #220]	; (8000fec <MX_GPIO_Init+0x100>)
 8000f0e:	699b      	ldr	r3, [r3, #24]
 8000f10:	f003 0310 	and.w	r3, r3, #16
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000f18:	4b34      	ldr	r3, [pc, #208]	; (8000fec <MX_GPIO_Init+0x100>)
 8000f1a:	699b      	ldr	r3, [r3, #24]
 8000f1c:	4a33      	ldr	r2, [pc, #204]	; (8000fec <MX_GPIO_Init+0x100>)
 8000f1e:	f043 0320 	orr.w	r3, r3, #32
 8000f22:	6193      	str	r3, [r2, #24]
 8000f24:	4b31      	ldr	r3, [pc, #196]	; (8000fec <MX_GPIO_Init+0x100>)
 8000f26:	699b      	ldr	r3, [r3, #24]
 8000f28:	f003 0320 	and.w	r3, r3, #32
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000f30:	4b2e      	ldr	r3, [pc, #184]	; (8000fec <MX_GPIO_Init+0x100>)
 8000f32:	699b      	ldr	r3, [r3, #24]
 8000f34:	4a2d      	ldr	r2, [pc, #180]	; (8000fec <MX_GPIO_Init+0x100>)
 8000f36:	f043 0304 	orr.w	r3, r3, #4
 8000f3a:	6193      	str	r3, [r2, #24]
 8000f3c:	4b2b      	ldr	r3, [pc, #172]	; (8000fec <MX_GPIO_Init+0x100>)
 8000f3e:	699b      	ldr	r3, [r3, #24]
 8000f40:	f003 0304 	and.w	r3, r3, #4
 8000f44:	607b      	str	r3, [r7, #4]
 8000f46:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000f48:	4b28      	ldr	r3, [pc, #160]	; (8000fec <MX_GPIO_Init+0x100>)
 8000f4a:	699b      	ldr	r3, [r3, #24]
 8000f4c:	4a27      	ldr	r2, [pc, #156]	; (8000fec <MX_GPIO_Init+0x100>)
 8000f4e:	f043 0308 	orr.w	r3, r3, #8
 8000f52:	6193      	str	r3, [r2, #24]
 8000f54:	4b25      	ldr	r3, [pc, #148]	; (8000fec <MX_GPIO_Init+0x100>)
 8000f56:	699b      	ldr	r3, [r3, #24]
 8000f58:	f003 0308 	and.w	r3, r3, #8
 8000f5c:	603b      	str	r3, [r7, #0]
 8000f5e:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Blinker_GPIO_Port, Blinker_Pin, GPIO_PIN_RESET);
 8000f60:	2200      	movs	r2, #0
 8000f62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f66:	4822      	ldr	r0, [pc, #136]	; (8000ff0 <MX_GPIO_Init+0x104>)
 8000f68:	f001 ffcc 	bl	8002f04 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LED_B_Pin | LED_G_Pin | LED_R_Pin, GPIO_PIN_RESET);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f640 4102 	movw	r1, #3074	; 0xc02
 8000f72:	4820      	ldr	r0, [pc, #128]	; (8000ff4 <MX_GPIO_Init+0x108>)
 8000f74:	f001 ffc6 	bl	8002f04 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : Blinker_Pin */
	GPIO_InitStruct.Pin = Blinker_Pin;
 8000f78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f7c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f86:	2302      	movs	r3, #2
 8000f88:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(Blinker_GPIO_Port, &GPIO_InitStruct);
 8000f8a:	f107 0310 	add.w	r3, r7, #16
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4817      	ldr	r0, [pc, #92]	; (8000ff0 <MX_GPIO_Init+0x104>)
 8000f92:	f001 fe33 	bl	8002bfc <HAL_GPIO_Init>

	/*Configure GPIO pin : BTN_2_Pin */
	GPIO_InitStruct.Pin = BTN_2_Pin;
 8000f96:	2380      	movs	r3, #128	; 0x80
 8000f98:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(BTN_2_GPIO_Port, &GPIO_InitStruct);
 8000fa2:	f107 0310 	add.w	r3, r7, #16
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4813      	ldr	r0, [pc, #76]	; (8000ff8 <MX_GPIO_Init+0x10c>)
 8000faa:	f001 fe27 	bl	8002bfc <HAL_GPIO_Init>

	/*Configure GPIO pin : BTN_1_Pin */
	GPIO_InitStruct.Pin = BTN_1_Pin;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(BTN_1_GPIO_Port, &GPIO_InitStruct);
 8000fba:	f107 0310 	add.w	r3, r7, #16
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	480c      	ldr	r0, [pc, #48]	; (8000ff4 <MX_GPIO_Init+0x108>)
 8000fc2:	f001 fe1b 	bl	8002bfc <HAL_GPIO_Init>

	/*Configure GPIO pins : LED_B_Pin LED_G_Pin LED_R_Pin */
	GPIO_InitStruct.Pin = LED_B_Pin | LED_G_Pin | LED_R_Pin;
 8000fc6:	f640 4302 	movw	r3, #3074	; 0xc02
 8000fca:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd8:	f107 0310 	add.w	r3, r7, #16
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4805      	ldr	r0, [pc, #20]	; (8000ff4 <MX_GPIO_Init+0x108>)
 8000fe0:	f001 fe0c 	bl	8002bfc <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000fe4:	bf00      	nop
 8000fe6:	3720      	adds	r7, #32
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	40011000 	.word	0x40011000
 8000ff4:	40010c00 	.word	0x40010c00
 8000ff8:	40010800 	.word	0x40010800

08000ffc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
	if (Ezi_UART.huart == huart) {
 8001004:	4b05      	ldr	r3, [pc, #20]	; (800101c <HAL_UART_RxCpltCallback+0x20>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	429a      	cmp	r2, r3
 800100c:	d102      	bne.n	8001014 <HAL_UART_RxCpltCallback+0x18>
		UART_OS_RxCplt_CB(&Ezi_UART);
 800100e:	4803      	ldr	r0, [pc, #12]	; (800101c <HAL_UART_RxCpltCallback+0x20>)
 8001010:	f00a fb15 	bl	800b63e <UART_OS_RxCplt_CB>
	}
}
 8001014:	bf00      	nop
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20000344 	.word	0x20000344

08001020 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
	if (Ezi_UART.huart == huart) {
 8001028:	4b05      	ldr	r3, [pc, #20]	; (8001040 <HAL_UART_TxCpltCallback+0x20>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	429a      	cmp	r2, r3
 8001030:	d102      	bne.n	8001038 <HAL_UART_TxCpltCallback+0x18>
		UART_OS_TxCplt_CB(&Ezi_UART);
 8001032:	4803      	ldr	r0, [pc, #12]	; (8001040 <HAL_UART_TxCpltCallback+0x20>)
 8001034:	f00a fb11 	bl	800b65a <UART_OS_TxCplt_CB>
	}
}
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20000344 	.word	0x20000344

08001044 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	460b      	mov	r3, r1
 800104e:	807b      	strh	r3, [r7, #2]
	if (Ezi_UART.huart == huart) {
 8001050:	4b06      	ldr	r3, [pc, #24]	; (800106c <HAL_UARTEx_RxEventCallback+0x28>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	687a      	ldr	r2, [r7, #4]
 8001056:	429a      	cmp	r2, r3
 8001058:	d104      	bne.n	8001064 <HAL_UARTEx_RxEventCallback+0x20>
		UART_OS_RcvToIdle_CB(&Ezi_UART, Size);
 800105a:	887b      	ldrh	r3, [r7, #2]
 800105c:	4619      	mov	r1, r3
 800105e:	4803      	ldr	r0, [pc, #12]	; (800106c <HAL_UARTEx_RxEventCallback+0x28>)
 8001060:	f00a fada 	bl	800b618 <UART_OS_RcvToIdle_CB>
	}
}
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20000344 	.word	0x20000344

08001070 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
	if (mainI2C.hi2c == hi2c) {
 8001078:	4b05      	ldr	r3, [pc, #20]	; (8001090 <HAL_I2C_MemRxCpltCallback+0x20>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	687a      	ldr	r2, [r7, #4]
 800107e:	429a      	cmp	r2, r3
 8001080:	d102      	bne.n	8001088 <HAL_I2C_MemRxCpltCallback+0x18>
		I2C_OS_MEM_RxCpltCB(&mainI2C);
 8001082:	4803      	ldr	r0, [pc, #12]	; (8001090 <HAL_I2C_MemRxCpltCallback+0x20>)
 8001084:	f00a f988 	bl	800b398 <I2C_OS_MEM_RxCpltCB>
	}
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000358 	.word	0x20000358

08001094 <HAL_I2C_MemTxCpltCallback>:
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
	if (mainI2C.hi2c == hi2c) {
 800109c:	4b05      	ldr	r3, [pc, #20]	; (80010b4 <HAL_I2C_MemTxCpltCallback+0x20>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	429a      	cmp	r2, r3
 80010a4:	d102      	bne.n	80010ac <HAL_I2C_MemTxCpltCallback+0x18>
		I2C_OS_MEM_TxCpltCB(&mainI2C);
 80010a6:	4803      	ldr	r0, [pc, #12]	; (80010b4 <HAL_I2C_MemTxCpltCallback+0x20>)
 80010a8:	f00a f984 	bl	800b3b4 <I2C_OS_MEM_TxCpltCB>
	}
}
 80010ac:	bf00      	nop
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20000358 	.word	0x20000358

080010b8 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */

	UART_OS_Init(&Ezi_UART, &huart2);
 80010c0:	4918      	ldr	r1, [pc, #96]	; (8001124 <StartDefaultTask+0x6c>)
 80010c2:	4819      	ldr	r0, [pc, #100]	; (8001128 <StartDefaultTask+0x70>)
 80010c4:	f00a f9d6 	bl	800b474 <UART_OS_Init>
//	PowerPublisher_Init(&EZIPowerPub, &INA219_EZI, &CANFrame_Handler, 50);

//	PowerPublisher_SetName(&EZIPowerPub, "MOTORPWR");
//	PowerPublisher_SetName(&mainPowerPub, "MAINPWR");

	Wheel_Init(&Steering, &Ezi_UART);
 80010c8:	4917      	ldr	r1, [pc, #92]	; (8001128 <StartDefaultTask+0x70>)
 80010ca:	4818      	ldr	r0, [pc, #96]	; (800112c <StartDefaultTask+0x74>)
 80010cc:	f009 fcd8 	bl	800aa80 <Wheel_Init>
	Wheel_setLimit(&Steering, 25, 25);
 80010d0:	4a17      	ldr	r2, [pc, #92]	; (8001130 <StartDefaultTask+0x78>)
 80010d2:	4917      	ldr	r1, [pc, #92]	; (8001130 <StartDefaultTask+0x78>)
 80010d4:	4815      	ldr	r0, [pc, #84]	; (800112c <StartDefaultTask+0x74>)
 80010d6:	f009 fcef 	bl	800aab8 <Wheel_setLimit>

//	PowerPublisher_Start(&EZIPowerPub, 1);
//	PowerPublisher_Start(&mainPowerPub, 1);

	//TestTask = osThreadNew(testTask, 0, &tesTask_attributes);
	osThreadSetPriority(defaultTaskHandle, osPriorityRealtime);
 80010da:	4b16      	ldr	r3, [pc, #88]	; (8001134 <StartDefaultTask+0x7c>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	2130      	movs	r1, #48	; 0x30
 80010e0:	4618      	mov	r0, r3
 80010e2:	f005 fe67 	bl	8006db4 <osThreadSetPriority>
	float Angle;
	/* Infinite loop */
	for (;;) {
		if (Can_RecFlag == 1) {
 80010e6:	4b14      	ldr	r3, [pc, #80]	; (8001138 <StartDefaultTask+0x80>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d116      	bne.n	800111c <StartDefaultTask+0x64>
			Can_RecFlag = 0;
 80010ee:	4b12      	ldr	r3, [pc, #72]	; (8001138 <StartDefaultTask+0x80>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	701a      	strb	r2, [r3, #0]
			Angle = bytes2Float(rcdata);
 80010f4:	4811      	ldr	r0, [pc, #68]	; (800113c <StartDefaultTask+0x84>)
 80010f6:	f7ff fd51 	bl	8000b9c <bytes2Float>
 80010fa:	60f8      	str	r0, [r7, #12]
			Wheel_SetAngle_ABS(&Steering, -1.0 * Angle);
 80010fc:	68f8      	ldr	r0, [r7, #12]
 80010fe:	f7ff f98b 	bl	8000418 <__aeabi_f2d>
 8001102:	4602      	mov	r2, r0
 8001104:	460b      	mov	r3, r1
 8001106:	4610      	mov	r0, r2
 8001108:	4619      	mov	r1, r3
 800110a:	f7ff fc17 	bl	800093c <__aeabi_d2f>
 800110e:	4603      	mov	r3, r0
 8001110:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001114:	4619      	mov	r1, r3
 8001116:	4805      	ldr	r0, [pc, #20]	; (800112c <StartDefaultTask+0x74>)
 8001118:	f009 fce2 	bl	800aae0 <Wheel_SetAngle_ABS>
			//HAL_GPIO_TogglePin(LED_B_GPIO_Port, LED_B_Pin);
		}
		osDelay(1);
 800111c:	2001      	movs	r0, #1
 800111e:	f005 fe85 	bl	8006e2c <osDelay>
		if (Can_RecFlag == 1) {
 8001122:	e7e0      	b.n	80010e6 <StartDefaultTask+0x2e>
 8001124:	200001a4 	.word	0x200001a4
 8001128:	20000344 	.word	0x20000344
 800112c:	20000364 	.word	0x20000364
 8001130:	41c80000 	.word	0x41c80000
 8001134:	20000340 	.word	0x20000340
 8001138:	200000a0 	.word	0x200000a0
 800113c:	20000098 	.word	0x20000098

08001140 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM4) {
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a04      	ldr	r2, [pc, #16]	; (8001160 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d101      	bne.n	8001156 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001152:	f000 fbb9 	bl	80018c8 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40000800 	.word	0x40000800

08001164 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001168:	b672      	cpsid	i
}
 800116a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800116c:	e7fe      	b.n	800116c <Error_Handler+0x8>
	...

08001170 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001176:	4b18      	ldr	r3, [pc, #96]	; (80011d8 <HAL_MspInit+0x68>)
 8001178:	699b      	ldr	r3, [r3, #24]
 800117a:	4a17      	ldr	r2, [pc, #92]	; (80011d8 <HAL_MspInit+0x68>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	6193      	str	r3, [r2, #24]
 8001182:	4b15      	ldr	r3, [pc, #84]	; (80011d8 <HAL_MspInit+0x68>)
 8001184:	699b      	ldr	r3, [r3, #24]
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	60bb      	str	r3, [r7, #8]
 800118c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800118e:	4b12      	ldr	r3, [pc, #72]	; (80011d8 <HAL_MspInit+0x68>)
 8001190:	69db      	ldr	r3, [r3, #28]
 8001192:	4a11      	ldr	r2, [pc, #68]	; (80011d8 <HAL_MspInit+0x68>)
 8001194:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001198:	61d3      	str	r3, [r2, #28]
 800119a:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <HAL_MspInit+0x68>)
 800119c:	69db      	ldr	r3, [r3, #28]
 800119e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011a6:	2200      	movs	r2, #0
 80011a8:	210f      	movs	r1, #15
 80011aa:	f06f 0001 	mvn.w	r0, #1
 80011ae:	f001 fa40 	bl	8002632 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80011b2:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <HAL_MspInit+0x6c>)
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	4a04      	ldr	r2, [pc, #16]	; (80011dc <HAL_MspInit+0x6c>)
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ce:	bf00      	nop
 80011d0:	3710      	adds	r7, #16
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40021000 	.word	0x40021000
 80011dc:	40010000 	.word	0x40010000

080011e0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b088      	sub	sp, #32
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e8:	f107 0310 	add.w	r3, r7, #16
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a28      	ldr	r2, [pc, #160]	; (800129c <HAL_CAN_MspInit+0xbc>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d149      	bne.n	8001294 <HAL_CAN_MspInit+0xb4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001200:	4b27      	ldr	r3, [pc, #156]	; (80012a0 <HAL_CAN_MspInit+0xc0>)
 8001202:	69db      	ldr	r3, [r3, #28]
 8001204:	4a26      	ldr	r2, [pc, #152]	; (80012a0 <HAL_CAN_MspInit+0xc0>)
 8001206:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800120a:	61d3      	str	r3, [r2, #28]
 800120c:	4b24      	ldr	r3, [pc, #144]	; (80012a0 <HAL_CAN_MspInit+0xc0>)
 800120e:	69db      	ldr	r3, [r3, #28]
 8001210:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001218:	4b21      	ldr	r3, [pc, #132]	; (80012a0 <HAL_CAN_MspInit+0xc0>)
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	4a20      	ldr	r2, [pc, #128]	; (80012a0 <HAL_CAN_MspInit+0xc0>)
 800121e:	f043 0304 	orr.w	r3, r3, #4
 8001222:	6193      	str	r3, [r2, #24]
 8001224:	4b1e      	ldr	r3, [pc, #120]	; (80012a0 <HAL_CAN_MspInit+0xc0>)
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	f003 0304 	and.w	r3, r3, #4
 800122c:	60bb      	str	r3, [r7, #8]
 800122e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001230:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001234:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001236:	2300      	movs	r3, #0
 8001238:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123e:	f107 0310 	add.w	r3, r7, #16
 8001242:	4619      	mov	r1, r3
 8001244:	4817      	ldr	r0, [pc, #92]	; (80012a4 <HAL_CAN_MspInit+0xc4>)
 8001246:	f001 fcd9 	bl	8002bfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800124a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800124e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001250:	2302      	movs	r3, #2
 8001252:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001254:	2303      	movs	r3, #3
 8001256:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001258:	f107 0310 	add.w	r3, r7, #16
 800125c:	4619      	mov	r1, r3
 800125e:	4811      	ldr	r0, [pc, #68]	; (80012a4 <HAL_CAN_MspInit+0xc4>)
 8001260:	f001 fccc 	bl	8002bfc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 5, 0);
 8001264:	2200      	movs	r2, #0
 8001266:	2105      	movs	r1, #5
 8001268:	2013      	movs	r0, #19
 800126a:	f001 f9e2 	bl	8002632 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 800126e:	2013      	movs	r0, #19
 8001270:	f001 f9fb 	bl	800266a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8001274:	2200      	movs	r2, #0
 8001276:	2105      	movs	r1, #5
 8001278:	2014      	movs	r0, #20
 800127a:	f001 f9da 	bl	8002632 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800127e:	2014      	movs	r0, #20
 8001280:	f001 f9f3 	bl	800266a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8001284:	2200      	movs	r2, #0
 8001286:	2105      	movs	r1, #5
 8001288:	2015      	movs	r0, #21
 800128a:	f001 f9d2 	bl	8002632 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800128e:	2015      	movs	r0, #21
 8001290:	f001 f9eb 	bl	800266a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001294:	bf00      	nop
 8001296:	3720      	adds	r7, #32
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	40006400 	.word	0x40006400
 80012a0:	40021000 	.word	0x40021000
 80012a4:	40010800 	.word	0x40010800

080012a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b088      	sub	sp, #32
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b0:	f107 0310 	add.w	r3, r7, #16
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a1d      	ldr	r2, [pc, #116]	; (8001338 <HAL_I2C_MspInit+0x90>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d133      	bne.n	8001330 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c8:	4b1c      	ldr	r3, [pc, #112]	; (800133c <HAL_I2C_MspInit+0x94>)
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	4a1b      	ldr	r2, [pc, #108]	; (800133c <HAL_I2C_MspInit+0x94>)
 80012ce:	f043 0308 	orr.w	r3, r3, #8
 80012d2:	6193      	str	r3, [r2, #24]
 80012d4:	4b19      	ldr	r3, [pc, #100]	; (800133c <HAL_I2C_MspInit+0x94>)
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	f003 0308 	and.w	r3, r3, #8
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012e0:	23c0      	movs	r3, #192	; 0xc0
 80012e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012e4:	2312      	movs	r3, #18
 80012e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012e8:	2303      	movs	r3, #3
 80012ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ec:	f107 0310 	add.w	r3, r7, #16
 80012f0:	4619      	mov	r1, r3
 80012f2:	4813      	ldr	r0, [pc, #76]	; (8001340 <HAL_I2C_MspInit+0x98>)
 80012f4:	f001 fc82 	bl	8002bfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012f8:	4b10      	ldr	r3, [pc, #64]	; (800133c <HAL_I2C_MspInit+0x94>)
 80012fa:	69db      	ldr	r3, [r3, #28]
 80012fc:	4a0f      	ldr	r2, [pc, #60]	; (800133c <HAL_I2C_MspInit+0x94>)
 80012fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001302:	61d3      	str	r3, [r2, #28]
 8001304:	4b0d      	ldr	r3, [pc, #52]	; (800133c <HAL_I2C_MspInit+0x94>)
 8001306:	69db      	ldr	r3, [r3, #28]
 8001308:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800130c:	60bb      	str	r3, [r7, #8]
 800130e:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001310:	2200      	movs	r2, #0
 8001312:	2105      	movs	r1, #5
 8001314:	201f      	movs	r0, #31
 8001316:	f001 f98c 	bl	8002632 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800131a:	201f      	movs	r0, #31
 800131c:	f001 f9a5 	bl	800266a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8001320:	2200      	movs	r2, #0
 8001322:	2105      	movs	r1, #5
 8001324:	2020      	movs	r0, #32
 8001326:	f001 f984 	bl	8002632 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800132a:	2020      	movs	r0, #32
 800132c:	f001 f99d 	bl	800266a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001330:	bf00      	nop
 8001332:	3720      	adds	r7, #32
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40005400 	.word	0x40005400
 800133c:	40021000 	.word	0x40021000
 8001340:	40010c00 	.word	0x40010c00

08001344 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08a      	sub	sp, #40	; 0x28
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134c:	f107 0318 	add.w	r3, r7, #24
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a8c      	ldr	r2, [pc, #560]	; (8001590 <HAL_UART_MspInit+0x24c>)
 8001360:	4293      	cmp	r3, r2
 8001362:	f040 8087 	bne.w	8001474 <HAL_UART_MspInit+0x130>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001366:	4b8b      	ldr	r3, [pc, #556]	; (8001594 <HAL_UART_MspInit+0x250>)
 8001368:	699b      	ldr	r3, [r3, #24]
 800136a:	4a8a      	ldr	r2, [pc, #552]	; (8001594 <HAL_UART_MspInit+0x250>)
 800136c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001370:	6193      	str	r3, [r2, #24]
 8001372:	4b88      	ldr	r3, [pc, #544]	; (8001594 <HAL_UART_MspInit+0x250>)
 8001374:	699b      	ldr	r3, [r3, #24]
 8001376:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800137a:	617b      	str	r3, [r7, #20]
 800137c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137e:	4b85      	ldr	r3, [pc, #532]	; (8001594 <HAL_UART_MspInit+0x250>)
 8001380:	699b      	ldr	r3, [r3, #24]
 8001382:	4a84      	ldr	r2, [pc, #528]	; (8001594 <HAL_UART_MspInit+0x250>)
 8001384:	f043 0304 	orr.w	r3, r3, #4
 8001388:	6193      	str	r3, [r2, #24]
 800138a:	4b82      	ldr	r3, [pc, #520]	; (8001594 <HAL_UART_MspInit+0x250>)
 800138c:	699b      	ldr	r3, [r3, #24]
 800138e:	f003 0304 	and.w	r3, r3, #4
 8001392:	613b      	str	r3, [r7, #16]
 8001394:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001396:	f44f 7300 	mov.w	r3, #512	; 0x200
 800139a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139c:	2302      	movs	r3, #2
 800139e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013a0:	2303      	movs	r3, #3
 80013a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a4:	f107 0318 	add.w	r3, r7, #24
 80013a8:	4619      	mov	r1, r3
 80013aa:	487b      	ldr	r0, [pc, #492]	; (8001598 <HAL_UART_MspInit+0x254>)
 80013ac:	f001 fc26 	bl	8002bfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80013b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013b6:	2300      	movs	r3, #0
 80013b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013be:	f107 0318 	add.w	r3, r7, #24
 80013c2:	4619      	mov	r1, r3
 80013c4:	4874      	ldr	r0, [pc, #464]	; (8001598 <HAL_UART_MspInit+0x254>)
 80013c6:	f001 fc19 	bl	8002bfc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80013ca:	4b74      	ldr	r3, [pc, #464]	; (800159c <HAL_UART_MspInit+0x258>)
 80013cc:	4a74      	ldr	r2, [pc, #464]	; (80015a0 <HAL_UART_MspInit+0x25c>)
 80013ce:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013d0:	4b72      	ldr	r3, [pc, #456]	; (800159c <HAL_UART_MspInit+0x258>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013d6:	4b71      	ldr	r3, [pc, #452]	; (800159c <HAL_UART_MspInit+0x258>)
 80013d8:	2200      	movs	r2, #0
 80013da:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013dc:	4b6f      	ldr	r3, [pc, #444]	; (800159c <HAL_UART_MspInit+0x258>)
 80013de:	2280      	movs	r2, #128	; 0x80
 80013e0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013e2:	4b6e      	ldr	r3, [pc, #440]	; (800159c <HAL_UART_MspInit+0x258>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013e8:	4b6c      	ldr	r3, [pc, #432]	; (800159c <HAL_UART_MspInit+0x258>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80013ee:	4b6b      	ldr	r3, [pc, #428]	; (800159c <HAL_UART_MspInit+0x258>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80013f4:	4b69      	ldr	r3, [pc, #420]	; (800159c <HAL_UART_MspInit+0x258>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80013fa:	4868      	ldr	r0, [pc, #416]	; (800159c <HAL_UART_MspInit+0x258>)
 80013fc:	f001 f944 	bl	8002688 <HAL_DMA_Init>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8001406:	f7ff fead 	bl	8001164 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a63      	ldr	r2, [pc, #396]	; (800159c <HAL_UART_MspInit+0x258>)
 800140e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001410:	4a62      	ldr	r2, [pc, #392]	; (800159c <HAL_UART_MspInit+0x258>)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001416:	4b63      	ldr	r3, [pc, #396]	; (80015a4 <HAL_UART_MspInit+0x260>)
 8001418:	4a63      	ldr	r2, [pc, #396]	; (80015a8 <HAL_UART_MspInit+0x264>)
 800141a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800141c:	4b61      	ldr	r3, [pc, #388]	; (80015a4 <HAL_UART_MspInit+0x260>)
 800141e:	2210      	movs	r2, #16
 8001420:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001422:	4b60      	ldr	r3, [pc, #384]	; (80015a4 <HAL_UART_MspInit+0x260>)
 8001424:	2200      	movs	r2, #0
 8001426:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001428:	4b5e      	ldr	r3, [pc, #376]	; (80015a4 <HAL_UART_MspInit+0x260>)
 800142a:	2280      	movs	r2, #128	; 0x80
 800142c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800142e:	4b5d      	ldr	r3, [pc, #372]	; (80015a4 <HAL_UART_MspInit+0x260>)
 8001430:	2200      	movs	r2, #0
 8001432:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001434:	4b5b      	ldr	r3, [pc, #364]	; (80015a4 <HAL_UART_MspInit+0x260>)
 8001436:	2200      	movs	r2, #0
 8001438:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800143a:	4b5a      	ldr	r3, [pc, #360]	; (80015a4 <HAL_UART_MspInit+0x260>)
 800143c:	2200      	movs	r2, #0
 800143e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001440:	4b58      	ldr	r3, [pc, #352]	; (80015a4 <HAL_UART_MspInit+0x260>)
 8001442:	2200      	movs	r2, #0
 8001444:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001446:	4857      	ldr	r0, [pc, #348]	; (80015a4 <HAL_UART_MspInit+0x260>)
 8001448:	f001 f91e 	bl	8002688 <HAL_DMA_Init>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8001452:	f7ff fe87 	bl	8001164 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a52      	ldr	r2, [pc, #328]	; (80015a4 <HAL_UART_MspInit+0x260>)
 800145a:	639a      	str	r2, [r3, #56]	; 0x38
 800145c:	4a51      	ldr	r2, [pc, #324]	; (80015a4 <HAL_UART_MspInit+0x260>)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001462:	2200      	movs	r2, #0
 8001464:	2105      	movs	r1, #5
 8001466:	2025      	movs	r0, #37	; 0x25
 8001468:	f001 f8e3 	bl	8002632 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800146c:	2025      	movs	r0, #37	; 0x25
 800146e:	f001 f8fc 	bl	800266a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001472:	e089      	b.n	8001588 <HAL_UART_MspInit+0x244>
  else if(huart->Instance==USART2)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a4c      	ldr	r2, [pc, #304]	; (80015ac <HAL_UART_MspInit+0x268>)
 800147a:	4293      	cmp	r3, r2
 800147c:	f040 8084 	bne.w	8001588 <HAL_UART_MspInit+0x244>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001480:	4b44      	ldr	r3, [pc, #272]	; (8001594 <HAL_UART_MspInit+0x250>)
 8001482:	69db      	ldr	r3, [r3, #28]
 8001484:	4a43      	ldr	r2, [pc, #268]	; (8001594 <HAL_UART_MspInit+0x250>)
 8001486:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800148a:	61d3      	str	r3, [r2, #28]
 800148c:	4b41      	ldr	r3, [pc, #260]	; (8001594 <HAL_UART_MspInit+0x250>)
 800148e:	69db      	ldr	r3, [r3, #28]
 8001490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001494:	60fb      	str	r3, [r7, #12]
 8001496:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001498:	4b3e      	ldr	r3, [pc, #248]	; (8001594 <HAL_UART_MspInit+0x250>)
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	4a3d      	ldr	r2, [pc, #244]	; (8001594 <HAL_UART_MspInit+0x250>)
 800149e:	f043 0304 	orr.w	r3, r3, #4
 80014a2:	6193      	str	r3, [r2, #24]
 80014a4:	4b3b      	ldr	r3, [pc, #236]	; (8001594 <HAL_UART_MspInit+0x250>)
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	f003 0304 	and.w	r3, r3, #4
 80014ac:	60bb      	str	r3, [r7, #8]
 80014ae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014b0:	2304      	movs	r3, #4
 80014b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b4:	2302      	movs	r3, #2
 80014b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014b8:	2303      	movs	r3, #3
 80014ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014bc:	f107 0318 	add.w	r3, r7, #24
 80014c0:	4619      	mov	r1, r3
 80014c2:	4835      	ldr	r0, [pc, #212]	; (8001598 <HAL_UART_MspInit+0x254>)
 80014c4:	f001 fb9a 	bl	8002bfc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014c8:	2308      	movs	r3, #8
 80014ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014cc:	2300      	movs	r3, #0
 80014ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d4:	f107 0318 	add.w	r3, r7, #24
 80014d8:	4619      	mov	r1, r3
 80014da:	482f      	ldr	r0, [pc, #188]	; (8001598 <HAL_UART_MspInit+0x254>)
 80014dc:	f001 fb8e 	bl	8002bfc <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80014e0:	4b33      	ldr	r3, [pc, #204]	; (80015b0 <HAL_UART_MspInit+0x26c>)
 80014e2:	4a34      	ldr	r2, [pc, #208]	; (80015b4 <HAL_UART_MspInit+0x270>)
 80014e4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014e6:	4b32      	ldr	r3, [pc, #200]	; (80015b0 <HAL_UART_MspInit+0x26c>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014ec:	4b30      	ldr	r3, [pc, #192]	; (80015b0 <HAL_UART_MspInit+0x26c>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014f2:	4b2f      	ldr	r3, [pc, #188]	; (80015b0 <HAL_UART_MspInit+0x26c>)
 80014f4:	2280      	movs	r2, #128	; 0x80
 80014f6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014f8:	4b2d      	ldr	r3, [pc, #180]	; (80015b0 <HAL_UART_MspInit+0x26c>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014fe:	4b2c      	ldr	r3, [pc, #176]	; (80015b0 <HAL_UART_MspInit+0x26c>)
 8001500:	2200      	movs	r2, #0
 8001502:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001504:	4b2a      	ldr	r3, [pc, #168]	; (80015b0 <HAL_UART_MspInit+0x26c>)
 8001506:	2200      	movs	r2, #0
 8001508:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800150a:	4b29      	ldr	r3, [pc, #164]	; (80015b0 <HAL_UART_MspInit+0x26c>)
 800150c:	2200      	movs	r2, #0
 800150e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001510:	4827      	ldr	r0, [pc, #156]	; (80015b0 <HAL_UART_MspInit+0x26c>)
 8001512:	f001 f8b9 	bl	8002688 <HAL_DMA_Init>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <HAL_UART_MspInit+0x1dc>
      Error_Handler();
 800151c:	f7ff fe22 	bl	8001164 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4a23      	ldr	r2, [pc, #140]	; (80015b0 <HAL_UART_MspInit+0x26c>)
 8001524:	63da      	str	r2, [r3, #60]	; 0x3c
 8001526:	4a22      	ldr	r2, [pc, #136]	; (80015b0 <HAL_UART_MspInit+0x26c>)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 800152c:	4b22      	ldr	r3, [pc, #136]	; (80015b8 <HAL_UART_MspInit+0x274>)
 800152e:	4a23      	ldr	r2, [pc, #140]	; (80015bc <HAL_UART_MspInit+0x278>)
 8001530:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001532:	4b21      	ldr	r3, [pc, #132]	; (80015b8 <HAL_UART_MspInit+0x274>)
 8001534:	2210      	movs	r2, #16
 8001536:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001538:	4b1f      	ldr	r3, [pc, #124]	; (80015b8 <HAL_UART_MspInit+0x274>)
 800153a:	2200      	movs	r2, #0
 800153c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800153e:	4b1e      	ldr	r3, [pc, #120]	; (80015b8 <HAL_UART_MspInit+0x274>)
 8001540:	2280      	movs	r2, #128	; 0x80
 8001542:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001544:	4b1c      	ldr	r3, [pc, #112]	; (80015b8 <HAL_UART_MspInit+0x274>)
 8001546:	2200      	movs	r2, #0
 8001548:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800154a:	4b1b      	ldr	r3, [pc, #108]	; (80015b8 <HAL_UART_MspInit+0x274>)
 800154c:	2200      	movs	r2, #0
 800154e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001550:	4b19      	ldr	r3, [pc, #100]	; (80015b8 <HAL_UART_MspInit+0x274>)
 8001552:	2200      	movs	r2, #0
 8001554:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001556:	4b18      	ldr	r3, [pc, #96]	; (80015b8 <HAL_UART_MspInit+0x274>)
 8001558:	2200      	movs	r2, #0
 800155a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800155c:	4816      	ldr	r0, [pc, #88]	; (80015b8 <HAL_UART_MspInit+0x274>)
 800155e:	f001 f893 	bl	8002688 <HAL_DMA_Init>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <HAL_UART_MspInit+0x228>
      Error_Handler();
 8001568:	f7ff fdfc 	bl	8001164 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4a12      	ldr	r2, [pc, #72]	; (80015b8 <HAL_UART_MspInit+0x274>)
 8001570:	639a      	str	r2, [r3, #56]	; 0x38
 8001572:	4a11      	ldr	r2, [pc, #68]	; (80015b8 <HAL_UART_MspInit+0x274>)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001578:	2200      	movs	r2, #0
 800157a:	2105      	movs	r1, #5
 800157c:	2026      	movs	r0, #38	; 0x26
 800157e:	f001 f858 	bl	8002632 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001582:	2026      	movs	r0, #38	; 0x26
 8001584:	f001 f871 	bl	800266a <HAL_NVIC_EnableIRQ>
}
 8001588:	bf00      	nop
 800158a:	3728      	adds	r7, #40	; 0x28
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	40013800 	.word	0x40013800
 8001594:	40021000 	.word	0x40021000
 8001598:	40010800 	.word	0x40010800
 800159c:	200001ec 	.word	0x200001ec
 80015a0:	40020058 	.word	0x40020058
 80015a4:	20000230 	.word	0x20000230
 80015a8:	40020044 	.word	0x40020044
 80015ac:	40004400 	.word	0x40004400
 80015b0:	20000274 	.word	0x20000274
 80015b4:	4002006c 	.word	0x4002006c
 80015b8:	200002b8 	.word	0x200002b8
 80015bc:	40020080 	.word	0x40020080

080015c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b08e      	sub	sp, #56	; 0x38
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80015c8:	2300      	movs	r3, #0
 80015ca:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80015cc:	2300      	movs	r3, #0
 80015ce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80015d0:	2300      	movs	r3, #0
 80015d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80015d6:	4b34      	ldr	r3, [pc, #208]	; (80016a8 <HAL_InitTick+0xe8>)
 80015d8:	69db      	ldr	r3, [r3, #28]
 80015da:	4a33      	ldr	r2, [pc, #204]	; (80016a8 <HAL_InitTick+0xe8>)
 80015dc:	f043 0304 	orr.w	r3, r3, #4
 80015e0:	61d3      	str	r3, [r2, #28]
 80015e2:	4b31      	ldr	r3, [pc, #196]	; (80016a8 <HAL_InitTick+0xe8>)
 80015e4:	69db      	ldr	r3, [r3, #28]
 80015e6:	f003 0304 	and.w	r3, r3, #4
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015ee:	f107 0210 	add.w	r2, r7, #16
 80015f2:	f107 0314 	add.w	r3, r7, #20
 80015f6:	4611      	mov	r1, r2
 80015f8:	4618      	mov	r0, r3
 80015fa:	f003 fe91 	bl	8005320 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80015fe:	6a3b      	ldr	r3, [r7, #32]
 8001600:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001604:	2b00      	cmp	r3, #0
 8001606:	d103      	bne.n	8001610 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001608:	f003 fe62 	bl	80052d0 <HAL_RCC_GetPCLK1Freq>
 800160c:	6378      	str	r0, [r7, #52]	; 0x34
 800160e:	e004      	b.n	800161a <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001610:	f003 fe5e 	bl	80052d0 <HAL_RCC_GetPCLK1Freq>
 8001614:	4603      	mov	r3, r0
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800161a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800161c:	4a23      	ldr	r2, [pc, #140]	; (80016ac <HAL_InitTick+0xec>)
 800161e:	fba2 2303 	umull	r2, r3, r2, r3
 8001622:	0c9b      	lsrs	r3, r3, #18
 8001624:	3b01      	subs	r3, #1
 8001626:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001628:	4b21      	ldr	r3, [pc, #132]	; (80016b0 <HAL_InitTick+0xf0>)
 800162a:	4a22      	ldr	r2, [pc, #136]	; (80016b4 <HAL_InitTick+0xf4>)
 800162c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800162e:	4b20      	ldr	r3, [pc, #128]	; (80016b0 <HAL_InitTick+0xf0>)
 8001630:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001634:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001636:	4a1e      	ldr	r2, [pc, #120]	; (80016b0 <HAL_InitTick+0xf0>)
 8001638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800163a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800163c:	4b1c      	ldr	r3, [pc, #112]	; (80016b0 <HAL_InitTick+0xf0>)
 800163e:	2200      	movs	r2, #0
 8001640:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001642:	4b1b      	ldr	r3, [pc, #108]	; (80016b0 <HAL_InitTick+0xf0>)
 8001644:	2200      	movs	r2, #0
 8001646:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001648:	4b19      	ldr	r3, [pc, #100]	; (80016b0 <HAL_InitTick+0xf0>)
 800164a:	2200      	movs	r2, #0
 800164c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 800164e:	4818      	ldr	r0, [pc, #96]	; (80016b0 <HAL_InitTick+0xf0>)
 8001650:	f003 feb4 	bl	80053bc <HAL_TIM_Base_Init>
 8001654:	4603      	mov	r3, r0
 8001656:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800165a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800165e:	2b00      	cmp	r3, #0
 8001660:	d11b      	bne.n	800169a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8001662:	4813      	ldr	r0, [pc, #76]	; (80016b0 <HAL_InitTick+0xf0>)
 8001664:	f003 ff02 	bl	800546c <HAL_TIM_Base_Start_IT>
 8001668:	4603      	mov	r3, r0
 800166a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800166e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001672:	2b00      	cmp	r3, #0
 8001674:	d111      	bne.n	800169a <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001676:	201e      	movs	r0, #30
 8001678:	f000 fff7 	bl	800266a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2b0f      	cmp	r3, #15
 8001680:	d808      	bhi.n	8001694 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001682:	2200      	movs	r2, #0
 8001684:	6879      	ldr	r1, [r7, #4]
 8001686:	201e      	movs	r0, #30
 8001688:	f000 ffd3 	bl	8002632 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800168c:	4a0a      	ldr	r2, [pc, #40]	; (80016b8 <HAL_InitTick+0xf8>)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6013      	str	r3, [r2, #0]
 8001692:	e002      	b.n	800169a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800169a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3738      	adds	r7, #56	; 0x38
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40021000 	.word	0x40021000
 80016ac:	431bde83 	.word	0x431bde83
 80016b0:	2000037c 	.word	0x2000037c
 80016b4:	40000800 	.word	0x40000800
 80016b8:	20000004 	.word	0x20000004

080016bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016c0:	e7fe      	b.n	80016c0 <NMI_Handler+0x4>

080016c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016c2:	b480      	push	{r7}
 80016c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016c6:	e7fe      	b.n	80016c6 <HardFault_Handler+0x4>

080016c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016cc:	e7fe      	b.n	80016cc <MemManage_Handler+0x4>

080016ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ce:	b480      	push	{r7}
 80016d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016d2:	e7fe      	b.n	80016d2 <BusFault_Handler+0x4>

080016d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016d8:	e7fe      	b.n	80016d8 <UsageFault_Handler+0x4>

080016da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016da:	b480      	push	{r7}
 80016dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bc80      	pop	{r7}
 80016e4:	4770      	bx	lr
	...

080016e8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80016ec:	4802      	ldr	r0, [pc, #8]	; (80016f8 <DMA1_Channel4_IRQHandler+0x10>)
 80016ee:	f001 f939 	bl	8002964 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	20000230 	.word	0x20000230

080016fc <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001700:	4802      	ldr	r0, [pc, #8]	; (800170c <DMA1_Channel5_IRQHandler+0x10>)
 8001702:	f001 f92f 	bl	8002964 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	200001ec 	.word	0x200001ec

08001710 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001714:	4802      	ldr	r0, [pc, #8]	; (8001720 <DMA1_Channel6_IRQHandler+0x10>)
 8001716:	f001 f925 	bl	8002964 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	20000274 	.word	0x20000274

08001724 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001728:	4802      	ldr	r0, [pc, #8]	; (8001734 <DMA1_Channel7_IRQHandler+0x10>)
 800172a:	f001 f91b 	bl	8002964 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	200002b8 	.word	0x200002b8

08001738 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800173c:	4802      	ldr	r0, [pc, #8]	; (8001748 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 800173e:	f000 fc78 	bl	8002032 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	200000a4 	.word	0x200000a4

0800174c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001750:	4802      	ldr	r0, [pc, #8]	; (800175c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001752:	f000 fc6e 	bl	8002032 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	200000a4 	.word	0x200000a4

08001760 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001764:	4802      	ldr	r0, [pc, #8]	; (8001770 <CAN1_RX1_IRQHandler+0x10>)
 8001766:	f000 fc64 	bl	8002032 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	200000a4 	.word	0x200000a4

08001774 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001778:	4802      	ldr	r0, [pc, #8]	; (8001784 <TIM4_IRQHandler+0x10>)
 800177a:	f003 fec9 	bl	8005510 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	2000037c 	.word	0x2000037c

08001788 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800178c:	4802      	ldr	r0, [pc, #8]	; (8001798 <I2C1_EV_IRQHandler+0x10>)
 800178e:	f001 fd29 	bl	80031e4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	20000108 	.word	0x20000108

0800179c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80017a0:	4802      	ldr	r0, [pc, #8]	; (80017ac <I2C1_ER_IRQHandler+0x10>)
 80017a2:	f001 fe72 	bl	800348a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000108 	.word	0x20000108

080017b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80017b4:	4802      	ldr	r0, [pc, #8]	; (80017c0 <USART1_IRQHandler+0x10>)
 80017b6:	f004 fa8f 	bl	8005cd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	2000015c 	.word	0x2000015c

080017c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017c8:	4802      	ldr	r0, [pc, #8]	; (80017d4 <USART2_IRQHandler+0x10>)
 80017ca:	f004 fa85 	bl	8005cd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	200001a4 	.word	0x200001a4

080017d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017e0:	4a14      	ldr	r2, [pc, #80]	; (8001834 <_sbrk+0x5c>)
 80017e2:	4b15      	ldr	r3, [pc, #84]	; (8001838 <_sbrk+0x60>)
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017ec:	4b13      	ldr	r3, [pc, #76]	; (800183c <_sbrk+0x64>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d102      	bne.n	80017fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017f4:	4b11      	ldr	r3, [pc, #68]	; (800183c <_sbrk+0x64>)
 80017f6:	4a12      	ldr	r2, [pc, #72]	; (8001840 <_sbrk+0x68>)
 80017f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017fa:	4b10      	ldr	r3, [pc, #64]	; (800183c <_sbrk+0x64>)
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4413      	add	r3, r2
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	429a      	cmp	r2, r3
 8001806:	d207      	bcs.n	8001818 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001808:	f009 fffa 	bl	800b800 <__errno>
 800180c:	4603      	mov	r3, r0
 800180e:	220c      	movs	r2, #12
 8001810:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001812:	f04f 33ff 	mov.w	r3, #4294967295
 8001816:	e009      	b.n	800182c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001818:	4b08      	ldr	r3, [pc, #32]	; (800183c <_sbrk+0x64>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800181e:	4b07      	ldr	r3, [pc, #28]	; (800183c <_sbrk+0x64>)
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4413      	add	r3, r2
 8001826:	4a05      	ldr	r2, [pc, #20]	; (800183c <_sbrk+0x64>)
 8001828:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800182a:	68fb      	ldr	r3, [r7, #12]
}
 800182c:	4618      	mov	r0, r3
 800182e:	3718      	adds	r7, #24
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	20005000 	.word	0x20005000
 8001838:	00000400 	.word	0x00000400
 800183c:	200003c4 	.word	0x200003c4
 8001840:	20003000 	.word	0x20003000

08001844 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr

08001850 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001850:	f7ff fff8 	bl	8001844 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001854:	480b      	ldr	r0, [pc, #44]	; (8001884 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001856:	490c      	ldr	r1, [pc, #48]	; (8001888 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001858:	4a0c      	ldr	r2, [pc, #48]	; (800188c <LoopFillZerobss+0x16>)
  movs r3, #0
 800185a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800185c:	e002      	b.n	8001864 <LoopCopyDataInit>

0800185e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800185e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001860:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001862:	3304      	adds	r3, #4

08001864 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001864:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001866:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001868:	d3f9      	bcc.n	800185e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800186a:	4a09      	ldr	r2, [pc, #36]	; (8001890 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800186c:	4c09      	ldr	r4, [pc, #36]	; (8001894 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800186e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001870:	e001      	b.n	8001876 <LoopFillZerobss>

08001872 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001872:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001874:	3204      	adds	r2, #4

08001876 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001876:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001878:	d3fb      	bcc.n	8001872 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800187a:	f009 ffc7 	bl	800b80c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800187e:	f7ff f99b 	bl	8000bb8 <main>
  bx lr
 8001882:	4770      	bx	lr
  ldr r0, =_sdata
 8001884:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001888:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800188c:	0800c424 	.word	0x0800c424
  ldr r2, =_sbss
 8001890:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001894:	20002ffc 	.word	0x20002ffc

08001898 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001898:	e7fe      	b.n	8001898 <ADC1_2_IRQHandler>
	...

0800189c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018a0:	4b08      	ldr	r3, [pc, #32]	; (80018c4 <HAL_Init+0x28>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a07      	ldr	r2, [pc, #28]	; (80018c4 <HAL_Init+0x28>)
 80018a6:	f043 0310 	orr.w	r3, r3, #16
 80018aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018ac:	2003      	movs	r0, #3
 80018ae:	f000 feb5 	bl	800261c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018b2:	200f      	movs	r0, #15
 80018b4:	f7ff fe84 	bl	80015c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018b8:	f7ff fc5a 	bl	8001170 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018bc:	2300      	movs	r3, #0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40022000 	.word	0x40022000

080018c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018cc:	4b05      	ldr	r3, [pc, #20]	; (80018e4 <HAL_IncTick+0x1c>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	461a      	mov	r2, r3
 80018d2:	4b05      	ldr	r3, [pc, #20]	; (80018e8 <HAL_IncTick+0x20>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4413      	add	r3, r2
 80018d8:	4a03      	ldr	r2, [pc, #12]	; (80018e8 <HAL_IncTick+0x20>)
 80018da:	6013      	str	r3, [r2, #0]
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	bc80      	pop	{r7}
 80018e2:	4770      	bx	lr
 80018e4:	20000008 	.word	0x20000008
 80018e8:	200003c8 	.word	0x200003c8

080018ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  return uwTick;
 80018f0:	4b02      	ldr	r3, [pc, #8]	; (80018fc <HAL_GetTick+0x10>)
 80018f2:	681b      	ldr	r3, [r3, #0]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bc80      	pop	{r7}
 80018fa:	4770      	bx	lr
 80018fc:	200003c8 	.word	0x200003c8

08001900 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d101      	bne.n	8001912 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e11c      	b.n	8001b4c <HAL_CAN_Init+0x24c>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001918:	b2db      	uxtb	r3, r3
 800191a:	2b00      	cmp	r3, #0
 800191c:	d131      	bne.n	8001982 <HAL_CAN_Init+0x82>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a8c      	ldr	r2, [pc, #560]	; (8001b54 <HAL_CAN_Init+0x254>)
 8001922:	641a      	str	r2, [r3, #64]	; 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4a8c      	ldr	r2, [pc, #560]	; (8001b58 <HAL_CAN_Init+0x258>)
 8001928:	645a      	str	r2, [r3, #68]	; 0x44
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a8b      	ldr	r2, [pc, #556]	; (8001b5c <HAL_CAN_Init+0x25c>)
 800192e:	649a      	str	r2, [r3, #72]	; 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4a8b      	ldr	r2, [pc, #556]	; (8001b60 <HAL_CAN_Init+0x260>)
 8001934:	64da      	str	r2, [r3, #76]	; 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a8a      	ldr	r2, [pc, #552]	; (8001b64 <HAL_CAN_Init+0x264>)
 800193a:	629a      	str	r2, [r3, #40]	; 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4a8a      	ldr	r2, [pc, #552]	; (8001b68 <HAL_CAN_Init+0x268>)
 8001940:	62da      	str	r2, [r3, #44]	; 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a89      	ldr	r2, [pc, #548]	; (8001b6c <HAL_CAN_Init+0x26c>)
 8001946:	631a      	str	r2, [r3, #48]	; 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	4a89      	ldr	r2, [pc, #548]	; (8001b70 <HAL_CAN_Init+0x270>)
 800194c:	635a      	str	r2, [r3, #52]	; 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a88      	ldr	r2, [pc, #544]	; (8001b74 <HAL_CAN_Init+0x274>)
 8001952:	639a      	str	r2, [r3, #56]	; 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	4a88      	ldr	r2, [pc, #544]	; (8001b78 <HAL_CAN_Init+0x278>)
 8001958:	63da      	str	r2, [r3, #60]	; 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a87      	ldr	r2, [pc, #540]	; (8001b7c <HAL_CAN_Init+0x27c>)
 800195e:	651a      	str	r2, [r3, #80]	; 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	4a87      	ldr	r2, [pc, #540]	; (8001b80 <HAL_CAN_Init+0x280>)
 8001964:	655a      	str	r2, [r3, #84]	; 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a86      	ldr	r2, [pc, #536]	; (8001b84 <HAL_CAN_Init+0x284>)
 800196a:	659a      	str	r2, [r3, #88]	; 0x58

    if (hcan->MspInitCallback == NULL)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001970:	2b00      	cmp	r3, #0
 8001972:	d102      	bne.n	800197a <HAL_CAN_Init+0x7a>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4a84      	ldr	r2, [pc, #528]	; (8001b88 <HAL_CAN_Init+0x288>)
 8001978:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	4798      	blx	r3
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f042 0201 	orr.w	r2, r2, #1
 8001990:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001992:	f7ff ffab 	bl	80018ec <HAL_GetTick>
 8001996:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001998:	e012      	b.n	80019c0 <HAL_CAN_Init+0xc0>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800199a:	f7ff ffa7 	bl	80018ec <HAL_GetTick>
 800199e:	4602      	mov	r2, r0
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	2b0a      	cmp	r3, #10
 80019a6:	d90b      	bls.n	80019c0 <HAL_CAN_Init+0xc0>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ac:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2205      	movs	r2, #5
 80019b8:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e0c5      	b.n	8001b4c <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d0e5      	beq.n	800199a <HAL_CAN_Init+0x9a>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f022 0202 	bic.w	r2, r2, #2
 80019dc:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019de:	f7ff ff85 	bl	80018ec <HAL_GetTick>
 80019e2:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80019e4:	e012      	b.n	8001a0c <HAL_CAN_Init+0x10c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80019e6:	f7ff ff81 	bl	80018ec <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b0a      	cmp	r3, #10
 80019f2:	d90b      	bls.n	8001a0c <HAL_CAN_Init+0x10c>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2205      	movs	r2, #5
 8001a04:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e09f      	b.n	8001b4c <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d1e5      	bne.n	80019e6 <HAL_CAN_Init+0xe6>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	7e1b      	ldrb	r3, [r3, #24]
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d108      	bne.n	8001a34 <HAL_CAN_Init+0x134>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	e007      	b.n	8001a44 <HAL_CAN_Init+0x144>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a42:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	7e5b      	ldrb	r3, [r3, #25]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d108      	bne.n	8001a5e <HAL_CAN_Init+0x15e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	e007      	b.n	8001a6e <HAL_CAN_Init+0x16e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a6c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	7e9b      	ldrb	r3, [r3, #26]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d108      	bne.n	8001a88 <HAL_CAN_Init+0x188>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f042 0220 	orr.w	r2, r2, #32
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	e007      	b.n	8001a98 <HAL_CAN_Init+0x198>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f022 0220 	bic.w	r2, r2, #32
 8001a96:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	7edb      	ldrb	r3, [r3, #27]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d108      	bne.n	8001ab2 <HAL_CAN_Init+0x1b2>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f022 0210 	bic.w	r2, r2, #16
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	e007      	b.n	8001ac2 <HAL_CAN_Init+0x1c2>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f042 0210 	orr.w	r2, r2, #16
 8001ac0:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	7f1b      	ldrb	r3, [r3, #28]
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d108      	bne.n	8001adc <HAL_CAN_Init+0x1dc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f042 0208 	orr.w	r2, r2, #8
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	e007      	b.n	8001aec <HAL_CAN_Init+0x1ec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f022 0208 	bic.w	r2, r2, #8
 8001aea:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	7f5b      	ldrb	r3, [r3, #29]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d108      	bne.n	8001b06 <HAL_CAN_Init+0x206>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f042 0204 	orr.w	r2, r2, #4
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	e007      	b.n	8001b16 <HAL_CAN_Init+0x216>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f022 0204 	bic.w	r2, r2, #4
 8001b14:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	689a      	ldr	r2, [r3, #8]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	431a      	orrs	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	691b      	ldr	r3, [r3, #16]
 8001b24:	431a      	orrs	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	695b      	ldr	r3, [r3, #20]
 8001b2a:	ea42 0103 	orr.w	r1, r2, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	1e5a      	subs	r2, r3, #1
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	430a      	orrs	r2, r1
 8001b3a:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2201      	movs	r2, #1
 8001b46:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001b4a:	2300      	movs	r3, #0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3710      	adds	r7, #16
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	08000b25 	.word	0x08000b25
 8001b58:	08002429 	.word	0x08002429
 8001b5c:	08000b61 	.word	0x08000b61
 8001b60:	0800243b 	.word	0x0800243b
 8001b64:	080023bd 	.word	0x080023bd
 8001b68:	080023cf 	.word	0x080023cf
 8001b6c:	080023e1 	.word	0x080023e1
 8001b70:	080023f3 	.word	0x080023f3
 8001b74:	08002405 	.word	0x08002405
 8001b78:	08002417 	.word	0x08002417
 8001b7c:	0800244d 	.word	0x0800244d
 8001b80:	0800245f 	.word	0x0800245f
 8001b84:	08002471 	.word	0x08002471
 8001b88:	080011e1 	.word	0x080011e1

08001b8c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b087      	sub	sp, #28
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ba2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001ba4:	7cfb      	ldrb	r3, [r7, #19]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d003      	beq.n	8001bb2 <HAL_CAN_ConfigFilter+0x26>
 8001baa:	7cfb      	ldrb	r3, [r7, #19]
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	f040 80aa 	bne.w	8001d06 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001bb8:	f043 0201 	orr.w	r2, r3, #1
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	695b      	ldr	r3, [r3, #20]
 8001bc6:	f003 031f 	and.w	r3, r3, #31
 8001bca:	2201      	movs	r2, #1
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	401a      	ands	r2, r3
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	69db      	ldr	r3, [r3, #28]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d123      	bne.n	8001c34 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	401a      	ands	r2, r3
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c0a:	683a      	ldr	r2, [r7, #0]
 8001c0c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001c0e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	3248      	adds	r2, #72	; 0x48
 8001c14:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c28:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c2a:	6979      	ldr	r1, [r7, #20]
 8001c2c:	3348      	adds	r3, #72	; 0x48
 8001c2e:	00db      	lsls	r3, r3, #3
 8001c30:	440b      	add	r3, r1
 8001c32:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	69db      	ldr	r3, [r3, #28]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d122      	bne.n	8001c82 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	431a      	orrs	r2, r3
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c58:	683a      	ldr	r2, [r7, #0]
 8001c5a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001c5c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	3248      	adds	r2, #72	; 0x48
 8001c62:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c76:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c78:	6979      	ldr	r1, [r7, #20]
 8001c7a:	3348      	adds	r3, #72	; 0x48
 8001c7c:	00db      	lsls	r3, r3, #3
 8001c7e:	440b      	add	r3, r1
 8001c80:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	699b      	ldr	r3, [r3, #24]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d109      	bne.n	8001c9e <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	43db      	mvns	r3, r3
 8001c94:	401a      	ands	r2, r3
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001c9c:	e007      	b.n	8001cae <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	431a      	orrs	r2, r3
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d109      	bne.n	8001cca <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	401a      	ands	r2, r3
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001cc8:	e007      	b.n	8001cda <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	431a      	orrs	r2, r3
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	6a1b      	ldr	r3, [r3, #32]
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d107      	bne.n	8001cf2 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	431a      	orrs	r2, r3
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001cf8:	f023 0201 	bic.w	r2, r3, #1
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001d02:	2300      	movs	r3, #0
 8001d04:	e006      	b.n	8001d14 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
  }
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	371c      	adds	r7, #28
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bc80      	pop	{r7}
 8001d1c:	4770      	bx	lr

08001d1e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b084      	sub	sp, #16
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d12e      	bne.n	8001d90 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2202      	movs	r2, #2
 8001d36:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f022 0201 	bic.w	r2, r2, #1
 8001d48:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001d4a:	f7ff fdcf 	bl	80018ec <HAL_GetTick>
 8001d4e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001d50:	e012      	b.n	8001d78 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d52:	f7ff fdcb 	bl	80018ec <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	2b0a      	cmp	r3, #10
 8001d5e:	d90b      	bls.n	8001d78 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d64:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2205      	movs	r2, #5
 8001d70:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e012      	b.n	8001d9e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d1e5      	bne.n	8001d52 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	e006      	b.n	8001d9e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d94:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
  }
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3710      	adds	r7, #16
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001da6:	b480      	push	{r7}
 8001da8:	b087      	sub	sp, #28
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	60f8      	str	r0, [r7, #12]
 8001dae:	60b9      	str	r1, [r7, #8]
 8001db0:	607a      	str	r2, [r7, #4]
 8001db2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dba:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001dbc:	7dfb      	ldrb	r3, [r7, #23]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d003      	beq.n	8001dca <HAL_CAN_GetRxMessage+0x24>
 8001dc2:	7dfb      	ldrb	r3, [r7, #23]
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	f040 8103 	bne.w	8001fd0 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d10e      	bne.n	8001dee <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	f003 0303 	and.w	r3, r3, #3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d116      	bne.n	8001e0c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e0f7      	b.n	8001fde <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	f003 0303 	and.w	r3, r3, #3
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d107      	bne.n	8001e0c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e00:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e0e8      	b.n	8001fde <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	331b      	adds	r3, #27
 8001e14:	011b      	lsls	r3, r3, #4
 8001e16:	4413      	add	r3, r2
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0204 	and.w	r2, r3, #4
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d10c      	bne.n	8001e44 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	331b      	adds	r3, #27
 8001e32:	011b      	lsls	r3, r3, #4
 8001e34:	4413      	add	r3, r2
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	0d5b      	lsrs	r3, r3, #21
 8001e3a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	601a      	str	r2, [r3, #0]
 8001e42:	e00b      	b.n	8001e5c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	331b      	adds	r3, #27
 8001e4c:	011b      	lsls	r3, r3, #4
 8001e4e:	4413      	add	r3, r2
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	08db      	lsrs	r3, r3, #3
 8001e54:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	331b      	adds	r3, #27
 8001e64:	011b      	lsls	r3, r3, #4
 8001e66:	4413      	add	r3, r2
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0202 	and.w	r2, r3, #2
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	331b      	adds	r3, #27
 8001e7a:	011b      	lsls	r3, r3, #4
 8001e7c:	4413      	add	r3, r2
 8001e7e:	3304      	adds	r3, #4
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0308 	and.w	r3, r3, #8
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2208      	movs	r2, #8
 8001e8e:	611a      	str	r2, [r3, #16]
 8001e90:	e00b      	b.n	8001eaa <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	331b      	adds	r3, #27
 8001e9a:	011b      	lsls	r3, r3, #4
 8001e9c:	4413      	add	r3, r2
 8001e9e:	3304      	adds	r3, #4
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 020f 	and.w	r2, r3, #15
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	331b      	adds	r3, #27
 8001eb2:	011b      	lsls	r3, r3, #4
 8001eb4:	4413      	add	r3, r2
 8001eb6:	3304      	adds	r3, #4
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	0a1b      	lsrs	r3, r3, #8
 8001ebc:	b2da      	uxtb	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	331b      	adds	r3, #27
 8001eca:	011b      	lsls	r3, r3, #4
 8001ecc:	4413      	add	r3, r2
 8001ece:	3304      	adds	r3, #4
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	0c1b      	lsrs	r3, r3, #16
 8001ed4:	b29a      	uxth	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	011b      	lsls	r3, r3, #4
 8001ee2:	4413      	add	r3, r2
 8001ee4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	b2da      	uxtb	r2, r3
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	011b      	lsls	r3, r3, #4
 8001ef8:	4413      	add	r3, r2
 8001efa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	0a1a      	lsrs	r2, r3, #8
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	3301      	adds	r3, #1
 8001f06:	b2d2      	uxtb	r2, r2
 8001f08:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	011b      	lsls	r3, r3, #4
 8001f12:	4413      	add	r3, r2
 8001f14:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	0c1a      	lsrs	r2, r3, #16
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	3302      	adds	r3, #2
 8001f20:	b2d2      	uxtb	r2, r2
 8001f22:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	011b      	lsls	r3, r3, #4
 8001f2c:	4413      	add	r3, r2
 8001f2e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	0e1a      	lsrs	r2, r3, #24
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	3303      	adds	r3, #3
 8001f3a:	b2d2      	uxtb	r2, r2
 8001f3c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	011b      	lsls	r3, r3, #4
 8001f46:	4413      	add	r3, r2
 8001f48:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	3304      	adds	r3, #4
 8001f52:	b2d2      	uxtb	r2, r2
 8001f54:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	011b      	lsls	r3, r3, #4
 8001f5e:	4413      	add	r3, r2
 8001f60:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	0a1a      	lsrs	r2, r3, #8
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	3305      	adds	r3, #5
 8001f6c:	b2d2      	uxtb	r2, r2
 8001f6e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	011b      	lsls	r3, r3, #4
 8001f78:	4413      	add	r3, r2
 8001f7a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	0c1a      	lsrs	r2, r3, #16
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	3306      	adds	r3, #6
 8001f86:	b2d2      	uxtb	r2, r2
 8001f88:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	011b      	lsls	r3, r3, #4
 8001f92:	4413      	add	r3, r2
 8001f94:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	0e1a      	lsrs	r2, r3, #24
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	3307      	adds	r3, #7
 8001fa0:	b2d2      	uxtb	r2, r2
 8001fa2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d108      	bne.n	8001fbc <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	68da      	ldr	r2, [r3, #12]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f042 0220 	orr.w	r2, r2, #32
 8001fb8:	60da      	str	r2, [r3, #12]
 8001fba:	e007      	b.n	8001fcc <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	691a      	ldr	r2, [r3, #16]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f042 0220 	orr.w	r2, r2, #32
 8001fca:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	e006      	b.n	8001fde <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
  }
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	371c      	adds	r7, #28
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bc80      	pop	{r7}
 8001fe6:	4770      	bx	lr

08001fe8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ff8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ffa:	7bfb      	ldrb	r3, [r7, #15]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d002      	beq.n	8002006 <HAL_CAN_ActivateNotification+0x1e>
 8002000:	7bfb      	ldrb	r3, [r7, #15]
 8002002:	2b02      	cmp	r3, #2
 8002004:	d109      	bne.n	800201a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	6959      	ldr	r1, [r3, #20]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	683a      	ldr	r2, [r7, #0]
 8002012:	430a      	orrs	r2, r1
 8002014:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002016:	2300      	movs	r3, #0
 8002018:	e006      	b.n	8002028 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
  }
}
 8002028:	4618      	mov	r0, r3
 800202a:	3714      	adds	r7, #20
 800202c:	46bd      	mov	sp, r7
 800202e:	bc80      	pop	{r7}
 8002030:	4770      	bx	lr

08002032 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b08a      	sub	sp, #40	; 0x28
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800203a:	2300      	movs	r3, #0
 800203c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	695b      	ldr	r3, [r3, #20]
 8002044:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	691b      	ldr	r3, [r3, #16]
 8002064:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800206e:	6a3b      	ldr	r3, [r7, #32]
 8002070:	f003 0301 	and.w	r3, r3, #1
 8002074:	2b00      	cmp	r3, #0
 8002076:	f000 8083 	beq.w	8002180 <HAL_CAN_IRQHandler+0x14e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	f003 0301 	and.w	r3, r3, #1
 8002080:	2b00      	cmp	r3, #0
 8002082:	d025      	beq.n	80020d0 <HAL_CAN_IRQHandler+0x9e>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2201      	movs	r2, #1
 800208a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d004      	beq.n	80020a0 <HAL_CAN_IRQHandler+0x6e>
      {
        /* Transmission Mailbox 0 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	4798      	blx	r3
 800209e:	e017      	b.n	80020d0 <HAL_CAN_IRQHandler+0x9e>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	f003 0304 	and.w	r3, r3, #4
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d004      	beq.n	80020b4 <HAL_CAN_IRQHandler+0x82>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80020aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80020b0:	627b      	str	r3, [r7, #36]	; 0x24
 80020b2:	e00d      	b.n	80020d0 <HAL_CAN_IRQHandler+0x9e>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	f003 0308 	and.w	r3, r3, #8
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d004      	beq.n	80020c8 <HAL_CAN_IRQHandler+0x96>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80020be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020c4:	627b      	str	r3, [r7, #36]	; 0x24
 80020c6:	e003      	b.n	80020d0 <HAL_CAN_IRQHandler+0x9e>
        else
        {
          /* Transmission Mailbox 0 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d026      	beq.n	8002128 <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020e2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d004      	beq.n	80020f8 <HAL_CAN_IRQHandler+0xc6>
      {
        /* Transmission Mailbox 1 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	4798      	blx	r3
 80020f6:	e017      	b.n	8002128 <HAL_CAN_IRQHandler+0xf6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d004      	beq.n	800210c <HAL_CAN_IRQHandler+0xda>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002104:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002108:	627b      	str	r3, [r7, #36]	; 0x24
 800210a:	e00d      	b.n	8002128 <HAL_CAN_IRQHandler+0xf6>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002112:	2b00      	cmp	r3, #0
 8002114:	d004      	beq.n	8002120 <HAL_CAN_IRQHandler+0xee>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002118:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800211c:	627b      	str	r3, [r7, #36]	; 0x24
 800211e:	e003      	b.n	8002128 <HAL_CAN_IRQHandler+0xf6>
        else
        {
          /* Transmission Mailbox 1 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d026      	beq.n	8002180 <HAL_CAN_IRQHandler+0x14e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800213a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d004      	beq.n	8002150 <HAL_CAN_IRQHandler+0x11e>
      {
        /* Transmission Mailbox 2 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	4798      	blx	r3
 800214e:	e017      	b.n	8002180 <HAL_CAN_IRQHandler+0x14e>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d004      	beq.n	8002164 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800215a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002160:	627b      	str	r3, [r7, #36]	; 0x24
 8002162:	e00d      	b.n	8002180 <HAL_CAN_IRQHandler+0x14e>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d004      	beq.n	8002178 <HAL_CAN_IRQHandler+0x146>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800216e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002170:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002174:	627b      	str	r3, [r7, #36]	; 0x24
 8002176:	e003      	b.n	8002180 <HAL_CAN_IRQHandler+0x14e>
        else
        {
          /* Transmission Mailbox 2 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	4798      	blx	r3
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002180:	6a3b      	ldr	r3, [r7, #32]
 8002182:	f003 0308 	and.w	r3, r3, #8
 8002186:	2b00      	cmp	r3, #0
 8002188:	d00c      	beq.n	80021a4 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	f003 0310 	and.w	r3, r3, #16
 8002190:	2b00      	cmp	r3, #0
 8002192:	d007      	beq.n	80021a4 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002196:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800219a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2210      	movs	r2, #16
 80021a2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80021a4:	6a3b      	ldr	r3, [r7, #32]
 80021a6:	f003 0304 	and.w	r3, r3, #4
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d00c      	beq.n	80021c8 <HAL_CAN_IRQHandler+0x196>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	f003 0308 	and.w	r3, r3, #8
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d007      	beq.n	80021c8 <HAL_CAN_IRQHandler+0x196>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2208      	movs	r2, #8
 80021be:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80021c8:	6a3b      	ldr	r3, [r7, #32]
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d00a      	beq.n	80021e8 <HAL_CAN_IRQHandler+0x1b6>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	f003 0303 	and.w	r3, r3, #3
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d003      	beq.n	80021e8 <HAL_CAN_IRQHandler+0x1b6>
    {
      /* Receive FIFO 0 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80021e8:	6a3b      	ldr	r3, [r7, #32]
 80021ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00c      	beq.n	800220c <HAL_CAN_IRQHandler+0x1da>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	f003 0310 	and.w	r3, r3, #16
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d007      	beq.n	800220c <HAL_CAN_IRQHandler+0x1da>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80021fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002202:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2210      	movs	r2, #16
 800220a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800220c:	6a3b      	ldr	r3, [r7, #32]
 800220e:	f003 0320 	and.w	r3, r3, #32
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00c      	beq.n	8002230 <HAL_CAN_IRQHandler+0x1fe>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	f003 0308 	and.w	r3, r3, #8
 800221c:	2b00      	cmp	r3, #0
 800221e:	d007      	beq.n	8002230 <HAL_CAN_IRQHandler+0x1fe>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2208      	movs	r2, #8
 8002226:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002230:	6a3b      	ldr	r3, [r7, #32]
 8002232:	f003 0310 	and.w	r3, r3, #16
 8002236:	2b00      	cmp	r3, #0
 8002238:	d00a      	beq.n	8002250 <HAL_CAN_IRQHandler+0x21e>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	691b      	ldr	r3, [r3, #16]
 8002240:	f003 0303 	and.w	r3, r3, #3
 8002244:	2b00      	cmp	r3, #0
 8002246:	d003      	beq.n	8002250 <HAL_CAN_IRQHandler+0x21e>
    {
      /* Receive FIFO 1 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002250:	6a3b      	ldr	r3, [r7, #32]
 8002252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d00c      	beq.n	8002274 <HAL_CAN_IRQHandler+0x242>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	f003 0310 	and.w	r3, r3, #16
 8002260:	2b00      	cmp	r3, #0
 8002262:	d007      	beq.n	8002274 <HAL_CAN_IRQHandler+0x242>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2210      	movs	r2, #16
 800226a:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002274:	6a3b      	ldr	r3, [r7, #32]
 8002276:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00c      	beq.n	8002298 <HAL_CAN_IRQHandler+0x266>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	f003 0308 	and.w	r3, r3, #8
 8002284:	2b00      	cmp	r3, #0
 8002286:	d007      	beq.n	8002298 <HAL_CAN_IRQHandler+0x266>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2208      	movs	r2, #8
 800228e:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002298:	6a3b      	ldr	r3, [r7, #32]
 800229a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d07b      	beq.n	800239a <HAL_CAN_IRQHandler+0x368>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	f003 0304 	and.w	r3, r3, #4
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d072      	beq.n	8002392 <HAL_CAN_IRQHandler+0x360>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80022ac:	6a3b      	ldr	r3, [r7, #32]
 80022ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d008      	beq.n	80022c8 <HAL_CAN_IRQHandler+0x296>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d003      	beq.n	80022c8 <HAL_CAN_IRQHandler+0x296>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80022c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c2:	f043 0301 	orr.w	r3, r3, #1
 80022c6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80022c8:	6a3b      	ldr	r3, [r7, #32]
 80022ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d008      	beq.n	80022e4 <HAL_CAN_IRQHandler+0x2b2>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d003      	beq.n	80022e4 <HAL_CAN_IRQHandler+0x2b2>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80022dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022de:	f043 0302 	orr.w	r3, r3, #2
 80022e2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80022e4:	6a3b      	ldr	r3, [r7, #32]
 80022e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d008      	beq.n	8002300 <HAL_CAN_IRQHandler+0x2ce>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d003      	beq.n	8002300 <HAL_CAN_IRQHandler+0x2ce>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80022f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fa:	f043 0304 	orr.w	r3, r3, #4
 80022fe:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002300:	6a3b      	ldr	r3, [r7, #32]
 8002302:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002306:	2b00      	cmp	r3, #0
 8002308:	d043      	beq.n	8002392 <HAL_CAN_IRQHandler+0x360>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002310:	2b00      	cmp	r3, #0
 8002312:	d03e      	beq.n	8002392 <HAL_CAN_IRQHandler+0x360>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800231a:	2b60      	cmp	r3, #96	; 0x60
 800231c:	d02b      	beq.n	8002376 <HAL_CAN_IRQHandler+0x344>
 800231e:	2b60      	cmp	r3, #96	; 0x60
 8002320:	d82e      	bhi.n	8002380 <HAL_CAN_IRQHandler+0x34e>
 8002322:	2b50      	cmp	r3, #80	; 0x50
 8002324:	d022      	beq.n	800236c <HAL_CAN_IRQHandler+0x33a>
 8002326:	2b50      	cmp	r3, #80	; 0x50
 8002328:	d82a      	bhi.n	8002380 <HAL_CAN_IRQHandler+0x34e>
 800232a:	2b40      	cmp	r3, #64	; 0x40
 800232c:	d019      	beq.n	8002362 <HAL_CAN_IRQHandler+0x330>
 800232e:	2b40      	cmp	r3, #64	; 0x40
 8002330:	d826      	bhi.n	8002380 <HAL_CAN_IRQHandler+0x34e>
 8002332:	2b30      	cmp	r3, #48	; 0x30
 8002334:	d010      	beq.n	8002358 <HAL_CAN_IRQHandler+0x326>
 8002336:	2b30      	cmp	r3, #48	; 0x30
 8002338:	d822      	bhi.n	8002380 <HAL_CAN_IRQHandler+0x34e>
 800233a:	2b10      	cmp	r3, #16
 800233c:	d002      	beq.n	8002344 <HAL_CAN_IRQHandler+0x312>
 800233e:	2b20      	cmp	r3, #32
 8002340:	d005      	beq.n	800234e <HAL_CAN_IRQHandler+0x31c>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002342:	e01d      	b.n	8002380 <HAL_CAN_IRQHandler+0x34e>
            errorcode |= HAL_CAN_ERROR_STF;
 8002344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002346:	f043 0308 	orr.w	r3, r3, #8
 800234a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800234c:	e019      	b.n	8002382 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_FOR;
 800234e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002350:	f043 0310 	orr.w	r3, r3, #16
 8002354:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002356:	e014      	b.n	8002382 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235a:	f043 0320 	orr.w	r3, r3, #32
 800235e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002360:	e00f      	b.n	8002382 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BR;
 8002362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002364:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002368:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800236a:	e00a      	b.n	8002382 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BD;
 800236c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002372:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002374:	e005      	b.n	8002382 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800237c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800237e:	e000      	b.n	8002382 <HAL_CAN_IRQHandler+0x350>
            break;
 8002380:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	699a      	ldr	r2, [r3, #24]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002390:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2204      	movs	r2, #4
 8002398:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800239a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239c:	2b00      	cmp	r3, #0
 800239e:	d009      	beq.n	80023b4 <HAL_CAN_IRQHandler+0x382>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a6:	431a      	orrs	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	4798      	blx	r3
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80023b4:	bf00      	nop
 80023b6:	3728      	adds	r7, #40	; 0x28
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bc80      	pop	{r7}
 80023cc:	4770      	bx	lr

080023ce <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80023ce:	b480      	push	{r7}
 80023d0:	b083      	sub	sp, #12
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80023d6:	bf00      	nop
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	bc80      	pop	{r7}
 80023de:	4770      	bx	lr

080023e0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bc80      	pop	{r7}
 80023f0:	4770      	bx	lr

080023f2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80023f2:	b480      	push	{r7}
 80023f4:	b083      	sub	sp, #12
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80023fa:	bf00      	nop
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	bc80      	pop	{r7}
 8002402:	4770      	bx	lr

08002404 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	bc80      	pop	{r7}
 8002414:	4770      	bx	lr

08002416 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002416:	b480      	push	{r7}
 8002418:	b083      	sub	sp, #12
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800241e:	bf00      	nop
 8002420:	370c      	adds	r7, #12
 8002422:	46bd      	mov	sp, r7
 8002424:	bc80      	pop	{r7}
 8002426:	4770      	bx	lr

08002428 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	bc80      	pop	{r7}
 8002438:	4770      	bx	lr

0800243a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800243a:	b480      	push	{r7}
 800243c:	b083      	sub	sp, #12
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002442:	bf00      	nop
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	bc80      	pop	{r7}
 800244a:	4770      	bx	lr

0800244c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	bc80      	pop	{r7}
 800245c:	4770      	bx	lr

0800245e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800245e:	b480      	push	{r7}
 8002460:	b083      	sub	sp, #12
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002466:	bf00      	nop
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	bc80      	pop	{r7}
 800246e:	4770      	bx	lr

08002470 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	bc80      	pop	{r7}
 8002480:	4770      	bx	lr

08002482 <HAL_CAN_ResetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan)
{
 8002482:	b480      	push	{r7}
 8002484:	b085      	sub	sp, #20
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800248a:	2300      	movs	r3, #0
 800248c:	73fb      	strb	r3, [r7, #15]
  HAL_CAN_StateTypeDef state = hcan->State;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002494:	73bb      	strb	r3, [r7, #14]

  if ((state == HAL_CAN_STATE_READY) ||
 8002496:	7bbb      	ldrb	r3, [r7, #14]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d002      	beq.n	80024a2 <HAL_CAN_ResetError+0x20>
 800249c:	7bbb      	ldrb	r3, [r7, #14]
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d103      	bne.n	80024aa <HAL_CAN_ResetError+0x28>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Reset CAN error code */
    hcan->ErrorCode = 0U;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	625a      	str	r2, [r3, #36]	; 0x24
 80024a8:	e007      	b.n	80024ba <HAL_CAN_ResetError+0x38>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ae:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	625a      	str	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the status */
  return status;
 80024ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3714      	adds	r7, #20
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bc80      	pop	{r7}
 80024c4:	4770      	bx	lr
	...

080024c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f003 0307 	and.w	r3, r3, #7
 80024d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024d8:	4b0c      	ldr	r3, [pc, #48]	; (800250c <__NVIC_SetPriorityGrouping+0x44>)
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024de:	68ba      	ldr	r2, [r7, #8]
 80024e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024e4:	4013      	ands	r3, r2
 80024e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024fa:	4a04      	ldr	r2, [pc, #16]	; (800250c <__NVIC_SetPriorityGrouping+0x44>)
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	60d3      	str	r3, [r2, #12]
}
 8002500:	bf00      	nop
 8002502:	3714      	adds	r7, #20
 8002504:	46bd      	mov	sp, r7
 8002506:	bc80      	pop	{r7}
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	e000ed00 	.word	0xe000ed00

08002510 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002514:	4b04      	ldr	r3, [pc, #16]	; (8002528 <__NVIC_GetPriorityGrouping+0x18>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	0a1b      	lsrs	r3, r3, #8
 800251a:	f003 0307 	and.w	r3, r3, #7
}
 800251e:	4618      	mov	r0, r3
 8002520:	46bd      	mov	sp, r7
 8002522:	bc80      	pop	{r7}
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	e000ed00 	.word	0xe000ed00

0800252c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253a:	2b00      	cmp	r3, #0
 800253c:	db0b      	blt.n	8002556 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800253e:	79fb      	ldrb	r3, [r7, #7]
 8002540:	f003 021f 	and.w	r2, r3, #31
 8002544:	4906      	ldr	r1, [pc, #24]	; (8002560 <__NVIC_EnableIRQ+0x34>)
 8002546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254a:	095b      	lsrs	r3, r3, #5
 800254c:	2001      	movs	r0, #1
 800254e:	fa00 f202 	lsl.w	r2, r0, r2
 8002552:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002556:	bf00      	nop
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	bc80      	pop	{r7}
 800255e:	4770      	bx	lr
 8002560:	e000e100 	.word	0xe000e100

08002564 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	4603      	mov	r3, r0
 800256c:	6039      	str	r1, [r7, #0]
 800256e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002574:	2b00      	cmp	r3, #0
 8002576:	db0a      	blt.n	800258e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	b2da      	uxtb	r2, r3
 800257c:	490c      	ldr	r1, [pc, #48]	; (80025b0 <__NVIC_SetPriority+0x4c>)
 800257e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002582:	0112      	lsls	r2, r2, #4
 8002584:	b2d2      	uxtb	r2, r2
 8002586:	440b      	add	r3, r1
 8002588:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800258c:	e00a      	b.n	80025a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	b2da      	uxtb	r2, r3
 8002592:	4908      	ldr	r1, [pc, #32]	; (80025b4 <__NVIC_SetPriority+0x50>)
 8002594:	79fb      	ldrb	r3, [r7, #7]
 8002596:	f003 030f 	and.w	r3, r3, #15
 800259a:	3b04      	subs	r3, #4
 800259c:	0112      	lsls	r2, r2, #4
 800259e:	b2d2      	uxtb	r2, r2
 80025a0:	440b      	add	r3, r1
 80025a2:	761a      	strb	r2, [r3, #24]
}
 80025a4:	bf00      	nop
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bc80      	pop	{r7}
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	e000e100 	.word	0xe000e100
 80025b4:	e000ed00 	.word	0xe000ed00

080025b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b089      	sub	sp, #36	; 0x24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f003 0307 	and.w	r3, r3, #7
 80025ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	f1c3 0307 	rsb	r3, r3, #7
 80025d2:	2b04      	cmp	r3, #4
 80025d4:	bf28      	it	cs
 80025d6:	2304      	movcs	r3, #4
 80025d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	3304      	adds	r3, #4
 80025de:	2b06      	cmp	r3, #6
 80025e0:	d902      	bls.n	80025e8 <NVIC_EncodePriority+0x30>
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	3b03      	subs	r3, #3
 80025e6:	e000      	b.n	80025ea <NVIC_EncodePriority+0x32>
 80025e8:	2300      	movs	r3, #0
 80025ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025ec:	f04f 32ff 	mov.w	r2, #4294967295
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	fa02 f303 	lsl.w	r3, r2, r3
 80025f6:	43da      	mvns	r2, r3
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	401a      	ands	r2, r3
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002600:	f04f 31ff 	mov.w	r1, #4294967295
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	fa01 f303 	lsl.w	r3, r1, r3
 800260a:	43d9      	mvns	r1, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002610:	4313      	orrs	r3, r2
         );
}
 8002612:	4618      	mov	r0, r3
 8002614:	3724      	adds	r7, #36	; 0x24
 8002616:	46bd      	mov	sp, r7
 8002618:	bc80      	pop	{r7}
 800261a:	4770      	bx	lr

0800261c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f7ff ff4f 	bl	80024c8 <__NVIC_SetPriorityGrouping>
}
 800262a:	bf00      	nop
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002632:	b580      	push	{r7, lr}
 8002634:	b086      	sub	sp, #24
 8002636:	af00      	add	r7, sp, #0
 8002638:	4603      	mov	r3, r0
 800263a:	60b9      	str	r1, [r7, #8]
 800263c:	607a      	str	r2, [r7, #4]
 800263e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002640:	2300      	movs	r3, #0
 8002642:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002644:	f7ff ff64 	bl	8002510 <__NVIC_GetPriorityGrouping>
 8002648:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	68b9      	ldr	r1, [r7, #8]
 800264e:	6978      	ldr	r0, [r7, #20]
 8002650:	f7ff ffb2 	bl	80025b8 <NVIC_EncodePriority>
 8002654:	4602      	mov	r2, r0
 8002656:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800265a:	4611      	mov	r1, r2
 800265c:	4618      	mov	r0, r3
 800265e:	f7ff ff81 	bl	8002564 <__NVIC_SetPriority>
}
 8002662:	bf00      	nop
 8002664:	3718      	adds	r7, #24
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b082      	sub	sp, #8
 800266e:	af00      	add	r7, sp, #0
 8002670:	4603      	mov	r3, r0
 8002672:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002678:	4618      	mov	r0, r3
 800267a:	f7ff ff57 	bl	800252c <__NVIC_EnableIRQ>
}
 800267e:	bf00      	nop
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
	...

08002688 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002690:	2300      	movs	r3, #0
 8002692:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e043      	b.n	8002726 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	461a      	mov	r2, r3
 80026a4:	4b22      	ldr	r3, [pc, #136]	; (8002730 <HAL_DMA_Init+0xa8>)
 80026a6:	4413      	add	r3, r2
 80026a8:	4a22      	ldr	r2, [pc, #136]	; (8002734 <HAL_DMA_Init+0xac>)
 80026aa:	fba2 2303 	umull	r2, r3, r2, r3
 80026ae:	091b      	lsrs	r3, r3, #4
 80026b0:	009a      	lsls	r2, r3, #2
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a1f      	ldr	r2, [pc, #124]	; (8002738 <HAL_DMA_Init+0xb0>)
 80026ba:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2202      	movs	r2, #2
 80026c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80026d2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80026d6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80026e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	69db      	ldr	r3, [r3, #28]
 80026fe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002700:	68fa      	ldr	r2, [r7, #12]
 8002702:	4313      	orrs	r3, r2
 8002704:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68fa      	ldr	r2, [r7, #12]
 800270c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3714      	adds	r7, #20
 800272a:	46bd      	mov	sp, r7
 800272c:	bc80      	pop	{r7}
 800272e:	4770      	bx	lr
 8002730:	bffdfff8 	.word	0xbffdfff8
 8002734:	cccccccd 	.word	0xcccccccd
 8002738:	40020000 	.word	0x40020000

0800273c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b086      	sub	sp, #24
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]
 8002748:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800274a:	2300      	movs	r3, #0
 800274c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d101      	bne.n	800275c <HAL_DMA_Start_IT+0x20>
 8002758:	2302      	movs	r3, #2
 800275a:	e04b      	b.n	80027f4 <HAL_DMA_Start_IT+0xb8>
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800276a:	b2db      	uxtb	r3, r3
 800276c:	2b01      	cmp	r3, #1
 800276e:	d13a      	bne.n	80027e6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2202      	movs	r2, #2
 8002774:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2200      	movs	r2, #0
 800277c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f022 0201 	bic.w	r2, r2, #1
 800278c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	68b9      	ldr	r1, [r7, #8]
 8002794:	68f8      	ldr	r0, [r7, #12]
 8002796:	f000 fa03 	bl	8002ba0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d008      	beq.n	80027b4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f042 020e 	orr.w	r2, r2, #14
 80027b0:	601a      	str	r2, [r3, #0]
 80027b2:	e00f      	b.n	80027d4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f022 0204 	bic.w	r2, r2, #4
 80027c2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f042 020a 	orr.w	r2, r2, #10
 80027d2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f042 0201 	orr.w	r2, r2, #1
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	e005      	b.n	80027f2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80027ee:	2302      	movs	r3, #2
 80027f0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80027f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3718      	adds	r7, #24
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b085      	sub	sp, #20
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002804:	2300      	movs	r3, #0
 8002806:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800280e:	b2db      	uxtb	r3, r3
 8002810:	2b02      	cmp	r3, #2
 8002812:	d008      	beq.n	8002826 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2204      	movs	r2, #4
 8002818:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e020      	b.n	8002868 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 020e 	bic.w	r2, r2, #14
 8002834:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 0201 	bic.w	r2, r2, #1
 8002844:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800284e:	2101      	movs	r1, #1
 8002850:	fa01 f202 	lsl.w	r2, r1, r2
 8002854:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2201      	movs	r2, #1
 800285a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002866:	7bfb      	ldrb	r3, [r7, #15]
}
 8002868:	4618      	mov	r0, r3
 800286a:	3714      	adds	r7, #20
 800286c:	46bd      	mov	sp, r7
 800286e:	bc80      	pop	{r7}
 8002870:	4770      	bx	lr
	...

08002874 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800287c:	2300      	movs	r3, #0
 800287e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002886:	b2db      	uxtb	r3, r3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d005      	beq.n	8002898 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2204      	movs	r2, #4
 8002890:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	73fb      	strb	r3, [r7, #15]
 8002896:	e051      	b.n	800293c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f022 020e 	bic.w	r2, r2, #14
 80028a6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f022 0201 	bic.w	r2, r2, #1
 80028b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a22      	ldr	r2, [pc, #136]	; (8002948 <HAL_DMA_Abort_IT+0xd4>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d029      	beq.n	8002916 <HAL_DMA_Abort_IT+0xa2>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a21      	ldr	r2, [pc, #132]	; (800294c <HAL_DMA_Abort_IT+0xd8>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d022      	beq.n	8002912 <HAL_DMA_Abort_IT+0x9e>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a1f      	ldr	r2, [pc, #124]	; (8002950 <HAL_DMA_Abort_IT+0xdc>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d01a      	beq.n	800290c <HAL_DMA_Abort_IT+0x98>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a1e      	ldr	r2, [pc, #120]	; (8002954 <HAL_DMA_Abort_IT+0xe0>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d012      	beq.n	8002906 <HAL_DMA_Abort_IT+0x92>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a1c      	ldr	r2, [pc, #112]	; (8002958 <HAL_DMA_Abort_IT+0xe4>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d00a      	beq.n	8002900 <HAL_DMA_Abort_IT+0x8c>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a1b      	ldr	r2, [pc, #108]	; (800295c <HAL_DMA_Abort_IT+0xe8>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d102      	bne.n	80028fa <HAL_DMA_Abort_IT+0x86>
 80028f4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80028f8:	e00e      	b.n	8002918 <HAL_DMA_Abort_IT+0xa4>
 80028fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028fe:	e00b      	b.n	8002918 <HAL_DMA_Abort_IT+0xa4>
 8002900:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002904:	e008      	b.n	8002918 <HAL_DMA_Abort_IT+0xa4>
 8002906:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800290a:	e005      	b.n	8002918 <HAL_DMA_Abort_IT+0xa4>
 800290c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002910:	e002      	b.n	8002918 <HAL_DMA_Abort_IT+0xa4>
 8002912:	2310      	movs	r3, #16
 8002914:	e000      	b.n	8002918 <HAL_DMA_Abort_IT+0xa4>
 8002916:	2301      	movs	r3, #1
 8002918:	4a11      	ldr	r2, [pc, #68]	; (8002960 <HAL_DMA_Abort_IT+0xec>)
 800291a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002930:	2b00      	cmp	r3, #0
 8002932:	d003      	beq.n	800293c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	4798      	blx	r3
    } 
  }
  return status;
 800293c:	7bfb      	ldrb	r3, [r7, #15]
}
 800293e:	4618      	mov	r0, r3
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	40020008 	.word	0x40020008
 800294c:	4002001c 	.word	0x4002001c
 8002950:	40020030 	.word	0x40020030
 8002954:	40020044 	.word	0x40020044
 8002958:	40020058 	.word	0x40020058
 800295c:	4002006c 	.word	0x4002006c
 8002960:	40020000 	.word	0x40020000

08002964 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002980:	2204      	movs	r2, #4
 8002982:	409a      	lsls	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	4013      	ands	r3, r2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d04f      	beq.n	8002a2c <HAL_DMA_IRQHandler+0xc8>
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	f003 0304 	and.w	r3, r3, #4
 8002992:	2b00      	cmp	r3, #0
 8002994:	d04a      	beq.n	8002a2c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0320 	and.w	r3, r3, #32
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d107      	bne.n	80029b4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f022 0204 	bic.w	r2, r2, #4
 80029b2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a66      	ldr	r2, [pc, #408]	; (8002b54 <HAL_DMA_IRQHandler+0x1f0>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d029      	beq.n	8002a12 <HAL_DMA_IRQHandler+0xae>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a65      	ldr	r2, [pc, #404]	; (8002b58 <HAL_DMA_IRQHandler+0x1f4>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d022      	beq.n	8002a0e <HAL_DMA_IRQHandler+0xaa>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a63      	ldr	r2, [pc, #396]	; (8002b5c <HAL_DMA_IRQHandler+0x1f8>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d01a      	beq.n	8002a08 <HAL_DMA_IRQHandler+0xa4>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a62      	ldr	r2, [pc, #392]	; (8002b60 <HAL_DMA_IRQHandler+0x1fc>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d012      	beq.n	8002a02 <HAL_DMA_IRQHandler+0x9e>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a60      	ldr	r2, [pc, #384]	; (8002b64 <HAL_DMA_IRQHandler+0x200>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d00a      	beq.n	80029fc <HAL_DMA_IRQHandler+0x98>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a5f      	ldr	r2, [pc, #380]	; (8002b68 <HAL_DMA_IRQHandler+0x204>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d102      	bne.n	80029f6 <HAL_DMA_IRQHandler+0x92>
 80029f0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80029f4:	e00e      	b.n	8002a14 <HAL_DMA_IRQHandler+0xb0>
 80029f6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80029fa:	e00b      	b.n	8002a14 <HAL_DMA_IRQHandler+0xb0>
 80029fc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002a00:	e008      	b.n	8002a14 <HAL_DMA_IRQHandler+0xb0>
 8002a02:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002a06:	e005      	b.n	8002a14 <HAL_DMA_IRQHandler+0xb0>
 8002a08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a0c:	e002      	b.n	8002a14 <HAL_DMA_IRQHandler+0xb0>
 8002a0e:	2340      	movs	r3, #64	; 0x40
 8002a10:	e000      	b.n	8002a14 <HAL_DMA_IRQHandler+0xb0>
 8002a12:	2304      	movs	r3, #4
 8002a14:	4a55      	ldr	r2, [pc, #340]	; (8002b6c <HAL_DMA_IRQHandler+0x208>)
 8002a16:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f000 8094 	beq.w	8002b4a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002a2a:	e08e      	b.n	8002b4a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a30:	2202      	movs	r2, #2
 8002a32:	409a      	lsls	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	4013      	ands	r3, r2
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d056      	beq.n	8002aea <HAL_DMA_IRQHandler+0x186>
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d051      	beq.n	8002aea <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0320 	and.w	r3, r3, #32
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d10b      	bne.n	8002a6c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f022 020a 	bic.w	r2, r2, #10
 8002a62:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a38      	ldr	r2, [pc, #224]	; (8002b54 <HAL_DMA_IRQHandler+0x1f0>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d029      	beq.n	8002aca <HAL_DMA_IRQHandler+0x166>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a37      	ldr	r2, [pc, #220]	; (8002b58 <HAL_DMA_IRQHandler+0x1f4>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d022      	beq.n	8002ac6 <HAL_DMA_IRQHandler+0x162>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a35      	ldr	r2, [pc, #212]	; (8002b5c <HAL_DMA_IRQHandler+0x1f8>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d01a      	beq.n	8002ac0 <HAL_DMA_IRQHandler+0x15c>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a34      	ldr	r2, [pc, #208]	; (8002b60 <HAL_DMA_IRQHandler+0x1fc>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d012      	beq.n	8002aba <HAL_DMA_IRQHandler+0x156>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a32      	ldr	r2, [pc, #200]	; (8002b64 <HAL_DMA_IRQHandler+0x200>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d00a      	beq.n	8002ab4 <HAL_DMA_IRQHandler+0x150>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a31      	ldr	r2, [pc, #196]	; (8002b68 <HAL_DMA_IRQHandler+0x204>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d102      	bne.n	8002aae <HAL_DMA_IRQHandler+0x14a>
 8002aa8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002aac:	e00e      	b.n	8002acc <HAL_DMA_IRQHandler+0x168>
 8002aae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ab2:	e00b      	b.n	8002acc <HAL_DMA_IRQHandler+0x168>
 8002ab4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ab8:	e008      	b.n	8002acc <HAL_DMA_IRQHandler+0x168>
 8002aba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002abe:	e005      	b.n	8002acc <HAL_DMA_IRQHandler+0x168>
 8002ac0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ac4:	e002      	b.n	8002acc <HAL_DMA_IRQHandler+0x168>
 8002ac6:	2320      	movs	r3, #32
 8002ac8:	e000      	b.n	8002acc <HAL_DMA_IRQHandler+0x168>
 8002aca:	2302      	movs	r3, #2
 8002acc:	4a27      	ldr	r2, [pc, #156]	; (8002b6c <HAL_DMA_IRQHandler+0x208>)
 8002ace:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d034      	beq.n	8002b4a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002ae8:	e02f      	b.n	8002b4a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aee:	2208      	movs	r2, #8
 8002af0:	409a      	lsls	r2, r3
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	4013      	ands	r3, r2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d028      	beq.n	8002b4c <HAL_DMA_IRQHandler+0x1e8>
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	f003 0308 	and.w	r3, r3, #8
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d023      	beq.n	8002b4c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f022 020e 	bic.w	r2, r2, #14
 8002b12:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b1c:	2101      	movs	r1, #1
 8002b1e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b22:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d004      	beq.n	8002b4c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	4798      	blx	r3
    }
  }
  return;
 8002b4a:	bf00      	nop
 8002b4c:	bf00      	nop
}
 8002b4e:	3710      	adds	r7, #16
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	40020008 	.word	0x40020008
 8002b58:	4002001c 	.word	0x4002001c
 8002b5c:	40020030 	.word	0x40020030
 8002b60:	40020044 	.word	0x40020044
 8002b64:	40020058 	.word	0x40020058
 8002b68:	4002006c 	.word	0x4002006c
 8002b6c:	40020000 	.word	0x40020000

08002b70 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b7e:	b2db      	uxtb	r3, r3
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bc80      	pop	{r7}
 8002b88:	4770      	bx	lr

08002b8a <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	b083      	sub	sp, #12
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bc80      	pop	{r7}
 8002b9e:	4770      	bx	lr

08002ba0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b085      	sub	sp, #20
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	607a      	str	r2, [r7, #4]
 8002bac:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	fa01 f202 	lsl.w	r2, r1, r2
 8002bbc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	683a      	ldr	r2, [r7, #0]
 8002bc4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	2b10      	cmp	r3, #16
 8002bcc:	d108      	bne.n	8002be0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68ba      	ldr	r2, [r7, #8]
 8002bdc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002bde:	e007      	b.n	8002bf0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68ba      	ldr	r2, [r7, #8]
 8002be6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	60da      	str	r2, [r3, #12]
}
 8002bf0:	bf00      	nop
 8002bf2:	3714      	adds	r7, #20
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bc80      	pop	{r7}
 8002bf8:	4770      	bx	lr
	...

08002bfc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b08b      	sub	sp, #44	; 0x2c
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c06:	2300      	movs	r3, #0
 8002c08:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c0e:	e169      	b.n	8002ee4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002c10:	2201      	movs	r2, #1
 8002c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	69fa      	ldr	r2, [r7, #28]
 8002c20:	4013      	ands	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	f040 8158 	bne.w	8002ede <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	4a9a      	ldr	r2, [pc, #616]	; (8002e9c <HAL_GPIO_Init+0x2a0>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d05e      	beq.n	8002cf6 <HAL_GPIO_Init+0xfa>
 8002c38:	4a98      	ldr	r2, [pc, #608]	; (8002e9c <HAL_GPIO_Init+0x2a0>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d875      	bhi.n	8002d2a <HAL_GPIO_Init+0x12e>
 8002c3e:	4a98      	ldr	r2, [pc, #608]	; (8002ea0 <HAL_GPIO_Init+0x2a4>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d058      	beq.n	8002cf6 <HAL_GPIO_Init+0xfa>
 8002c44:	4a96      	ldr	r2, [pc, #600]	; (8002ea0 <HAL_GPIO_Init+0x2a4>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d86f      	bhi.n	8002d2a <HAL_GPIO_Init+0x12e>
 8002c4a:	4a96      	ldr	r2, [pc, #600]	; (8002ea4 <HAL_GPIO_Init+0x2a8>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d052      	beq.n	8002cf6 <HAL_GPIO_Init+0xfa>
 8002c50:	4a94      	ldr	r2, [pc, #592]	; (8002ea4 <HAL_GPIO_Init+0x2a8>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d869      	bhi.n	8002d2a <HAL_GPIO_Init+0x12e>
 8002c56:	4a94      	ldr	r2, [pc, #592]	; (8002ea8 <HAL_GPIO_Init+0x2ac>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d04c      	beq.n	8002cf6 <HAL_GPIO_Init+0xfa>
 8002c5c:	4a92      	ldr	r2, [pc, #584]	; (8002ea8 <HAL_GPIO_Init+0x2ac>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d863      	bhi.n	8002d2a <HAL_GPIO_Init+0x12e>
 8002c62:	4a92      	ldr	r2, [pc, #584]	; (8002eac <HAL_GPIO_Init+0x2b0>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d046      	beq.n	8002cf6 <HAL_GPIO_Init+0xfa>
 8002c68:	4a90      	ldr	r2, [pc, #576]	; (8002eac <HAL_GPIO_Init+0x2b0>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d85d      	bhi.n	8002d2a <HAL_GPIO_Init+0x12e>
 8002c6e:	2b12      	cmp	r3, #18
 8002c70:	d82a      	bhi.n	8002cc8 <HAL_GPIO_Init+0xcc>
 8002c72:	2b12      	cmp	r3, #18
 8002c74:	d859      	bhi.n	8002d2a <HAL_GPIO_Init+0x12e>
 8002c76:	a201      	add	r2, pc, #4	; (adr r2, 8002c7c <HAL_GPIO_Init+0x80>)
 8002c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c7c:	08002cf7 	.word	0x08002cf7
 8002c80:	08002cd1 	.word	0x08002cd1
 8002c84:	08002ce3 	.word	0x08002ce3
 8002c88:	08002d25 	.word	0x08002d25
 8002c8c:	08002d2b 	.word	0x08002d2b
 8002c90:	08002d2b 	.word	0x08002d2b
 8002c94:	08002d2b 	.word	0x08002d2b
 8002c98:	08002d2b 	.word	0x08002d2b
 8002c9c:	08002d2b 	.word	0x08002d2b
 8002ca0:	08002d2b 	.word	0x08002d2b
 8002ca4:	08002d2b 	.word	0x08002d2b
 8002ca8:	08002d2b 	.word	0x08002d2b
 8002cac:	08002d2b 	.word	0x08002d2b
 8002cb0:	08002d2b 	.word	0x08002d2b
 8002cb4:	08002d2b 	.word	0x08002d2b
 8002cb8:	08002d2b 	.word	0x08002d2b
 8002cbc:	08002d2b 	.word	0x08002d2b
 8002cc0:	08002cd9 	.word	0x08002cd9
 8002cc4:	08002ced 	.word	0x08002ced
 8002cc8:	4a79      	ldr	r2, [pc, #484]	; (8002eb0 <HAL_GPIO_Init+0x2b4>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d013      	beq.n	8002cf6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002cce:	e02c      	b.n	8002d2a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	623b      	str	r3, [r7, #32]
          break;
 8002cd6:	e029      	b.n	8002d2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	3304      	adds	r3, #4
 8002cde:	623b      	str	r3, [r7, #32]
          break;
 8002ce0:	e024      	b.n	8002d2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	3308      	adds	r3, #8
 8002ce8:	623b      	str	r3, [r7, #32]
          break;
 8002cea:	e01f      	b.n	8002d2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	330c      	adds	r3, #12
 8002cf2:	623b      	str	r3, [r7, #32]
          break;
 8002cf4:	e01a      	b.n	8002d2c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d102      	bne.n	8002d04 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002cfe:	2304      	movs	r3, #4
 8002d00:	623b      	str	r3, [r7, #32]
          break;
 8002d02:	e013      	b.n	8002d2c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d105      	bne.n	8002d18 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d0c:	2308      	movs	r3, #8
 8002d0e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	69fa      	ldr	r2, [r7, #28]
 8002d14:	611a      	str	r2, [r3, #16]
          break;
 8002d16:	e009      	b.n	8002d2c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d18:	2308      	movs	r3, #8
 8002d1a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	69fa      	ldr	r2, [r7, #28]
 8002d20:	615a      	str	r2, [r3, #20]
          break;
 8002d22:	e003      	b.n	8002d2c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002d24:	2300      	movs	r3, #0
 8002d26:	623b      	str	r3, [r7, #32]
          break;
 8002d28:	e000      	b.n	8002d2c <HAL_GPIO_Init+0x130>
          break;
 8002d2a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	2bff      	cmp	r3, #255	; 0xff
 8002d30:	d801      	bhi.n	8002d36 <HAL_GPIO_Init+0x13a>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	e001      	b.n	8002d3a <HAL_GPIO_Init+0x13e>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	3304      	adds	r3, #4
 8002d3a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	2bff      	cmp	r3, #255	; 0xff
 8002d40:	d802      	bhi.n	8002d48 <HAL_GPIO_Init+0x14c>
 8002d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	e002      	b.n	8002d4e <HAL_GPIO_Init+0x152>
 8002d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4a:	3b08      	subs	r3, #8
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	210f      	movs	r1, #15
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	fa01 f303 	lsl.w	r3, r1, r3
 8002d5c:	43db      	mvns	r3, r3
 8002d5e:	401a      	ands	r2, r3
 8002d60:	6a39      	ldr	r1, [r7, #32]
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	fa01 f303 	lsl.w	r3, r1, r3
 8002d68:	431a      	orrs	r2, r3
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	f000 80b1 	beq.w	8002ede <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002d7c:	4b4d      	ldr	r3, [pc, #308]	; (8002eb4 <HAL_GPIO_Init+0x2b8>)
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	4a4c      	ldr	r2, [pc, #304]	; (8002eb4 <HAL_GPIO_Init+0x2b8>)
 8002d82:	f043 0301 	orr.w	r3, r3, #1
 8002d86:	6193      	str	r3, [r2, #24]
 8002d88:	4b4a      	ldr	r3, [pc, #296]	; (8002eb4 <HAL_GPIO_Init+0x2b8>)
 8002d8a:	699b      	ldr	r3, [r3, #24]
 8002d8c:	f003 0301 	and.w	r3, r3, #1
 8002d90:	60bb      	str	r3, [r7, #8]
 8002d92:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002d94:	4a48      	ldr	r2, [pc, #288]	; (8002eb8 <HAL_GPIO_Init+0x2bc>)
 8002d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d98:	089b      	lsrs	r3, r3, #2
 8002d9a:	3302      	adds	r3, #2
 8002d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002da0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da4:	f003 0303 	and.w	r3, r3, #3
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	220f      	movs	r2, #15
 8002dac:	fa02 f303 	lsl.w	r3, r2, r3
 8002db0:	43db      	mvns	r3, r3
 8002db2:	68fa      	ldr	r2, [r7, #12]
 8002db4:	4013      	ands	r3, r2
 8002db6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4a40      	ldr	r2, [pc, #256]	; (8002ebc <HAL_GPIO_Init+0x2c0>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d013      	beq.n	8002de8 <HAL_GPIO_Init+0x1ec>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4a3f      	ldr	r2, [pc, #252]	; (8002ec0 <HAL_GPIO_Init+0x2c4>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d00d      	beq.n	8002de4 <HAL_GPIO_Init+0x1e8>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	4a3e      	ldr	r2, [pc, #248]	; (8002ec4 <HAL_GPIO_Init+0x2c8>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d007      	beq.n	8002de0 <HAL_GPIO_Init+0x1e4>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4a3d      	ldr	r2, [pc, #244]	; (8002ec8 <HAL_GPIO_Init+0x2cc>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d101      	bne.n	8002ddc <HAL_GPIO_Init+0x1e0>
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e006      	b.n	8002dea <HAL_GPIO_Init+0x1ee>
 8002ddc:	2304      	movs	r3, #4
 8002dde:	e004      	b.n	8002dea <HAL_GPIO_Init+0x1ee>
 8002de0:	2302      	movs	r3, #2
 8002de2:	e002      	b.n	8002dea <HAL_GPIO_Init+0x1ee>
 8002de4:	2301      	movs	r3, #1
 8002de6:	e000      	b.n	8002dea <HAL_GPIO_Init+0x1ee>
 8002de8:	2300      	movs	r3, #0
 8002dea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dec:	f002 0203 	and.w	r2, r2, #3
 8002df0:	0092      	lsls	r2, r2, #2
 8002df2:	4093      	lsls	r3, r2
 8002df4:	68fa      	ldr	r2, [r7, #12]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002dfa:	492f      	ldr	r1, [pc, #188]	; (8002eb8 <HAL_GPIO_Init+0x2bc>)
 8002dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfe:	089b      	lsrs	r3, r3, #2
 8002e00:	3302      	adds	r3, #2
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d006      	beq.n	8002e22 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e14:	4b2d      	ldr	r3, [pc, #180]	; (8002ecc <HAL_GPIO_Init+0x2d0>)
 8002e16:	689a      	ldr	r2, [r3, #8]
 8002e18:	492c      	ldr	r1, [pc, #176]	; (8002ecc <HAL_GPIO_Init+0x2d0>)
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	608b      	str	r3, [r1, #8]
 8002e20:	e006      	b.n	8002e30 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e22:	4b2a      	ldr	r3, [pc, #168]	; (8002ecc <HAL_GPIO_Init+0x2d0>)
 8002e24:	689a      	ldr	r2, [r3, #8]
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	43db      	mvns	r3, r3
 8002e2a:	4928      	ldr	r1, [pc, #160]	; (8002ecc <HAL_GPIO_Init+0x2d0>)
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d006      	beq.n	8002e4a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e3c:	4b23      	ldr	r3, [pc, #140]	; (8002ecc <HAL_GPIO_Init+0x2d0>)
 8002e3e:	68da      	ldr	r2, [r3, #12]
 8002e40:	4922      	ldr	r1, [pc, #136]	; (8002ecc <HAL_GPIO_Init+0x2d0>)
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	60cb      	str	r3, [r1, #12]
 8002e48:	e006      	b.n	8002e58 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002e4a:	4b20      	ldr	r3, [pc, #128]	; (8002ecc <HAL_GPIO_Init+0x2d0>)
 8002e4c:	68da      	ldr	r2, [r3, #12]
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	43db      	mvns	r3, r3
 8002e52:	491e      	ldr	r1, [pc, #120]	; (8002ecc <HAL_GPIO_Init+0x2d0>)
 8002e54:	4013      	ands	r3, r2
 8002e56:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d006      	beq.n	8002e72 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002e64:	4b19      	ldr	r3, [pc, #100]	; (8002ecc <HAL_GPIO_Init+0x2d0>)
 8002e66:	685a      	ldr	r2, [r3, #4]
 8002e68:	4918      	ldr	r1, [pc, #96]	; (8002ecc <HAL_GPIO_Init+0x2d0>)
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	604b      	str	r3, [r1, #4]
 8002e70:	e006      	b.n	8002e80 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002e72:	4b16      	ldr	r3, [pc, #88]	; (8002ecc <HAL_GPIO_Init+0x2d0>)
 8002e74:	685a      	ldr	r2, [r3, #4]
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	43db      	mvns	r3, r3
 8002e7a:	4914      	ldr	r1, [pc, #80]	; (8002ecc <HAL_GPIO_Init+0x2d0>)
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d021      	beq.n	8002ed0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002e8c:	4b0f      	ldr	r3, [pc, #60]	; (8002ecc <HAL_GPIO_Init+0x2d0>)
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	490e      	ldr	r1, [pc, #56]	; (8002ecc <HAL_GPIO_Init+0x2d0>)
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	600b      	str	r3, [r1, #0]
 8002e98:	e021      	b.n	8002ede <HAL_GPIO_Init+0x2e2>
 8002e9a:	bf00      	nop
 8002e9c:	10320000 	.word	0x10320000
 8002ea0:	10310000 	.word	0x10310000
 8002ea4:	10220000 	.word	0x10220000
 8002ea8:	10210000 	.word	0x10210000
 8002eac:	10120000 	.word	0x10120000
 8002eb0:	10110000 	.word	0x10110000
 8002eb4:	40021000 	.word	0x40021000
 8002eb8:	40010000 	.word	0x40010000
 8002ebc:	40010800 	.word	0x40010800
 8002ec0:	40010c00 	.word	0x40010c00
 8002ec4:	40011000 	.word	0x40011000
 8002ec8:	40011400 	.word	0x40011400
 8002ecc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002ed0:	4b0b      	ldr	r3, [pc, #44]	; (8002f00 <HAL_GPIO_Init+0x304>)
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	43db      	mvns	r3, r3
 8002ed8:	4909      	ldr	r1, [pc, #36]	; (8002f00 <HAL_GPIO_Init+0x304>)
 8002eda:	4013      	ands	r3, r2
 8002edc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eea:	fa22 f303 	lsr.w	r3, r2, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	f47f ae8e 	bne.w	8002c10 <HAL_GPIO_Init+0x14>
  }
}
 8002ef4:	bf00      	nop
 8002ef6:	bf00      	nop
 8002ef8:	372c      	adds	r7, #44	; 0x2c
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bc80      	pop	{r7}
 8002efe:	4770      	bx	lr
 8002f00:	40010400 	.word	0x40010400

08002f04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	807b      	strh	r3, [r7, #2]
 8002f10:	4613      	mov	r3, r2
 8002f12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f14:	787b      	ldrb	r3, [r7, #1]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d003      	beq.n	8002f22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f1a:	887a      	ldrh	r2, [r7, #2]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002f20:	e003      	b.n	8002f2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f22:	887b      	ldrh	r3, [r7, #2]
 8002f24:	041a      	lsls	r2, r3, #16
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	611a      	str	r2, [r3, #16]
}
 8002f2a:	bf00      	nop
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bc80      	pop	{r7}
 8002f32:	4770      	bx	lr

08002f34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d101      	bne.n	8002f46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e12b      	b.n	800319e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d106      	bne.n	8002f60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f7fe f9a4 	bl	80012a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2224      	movs	r2, #36	; 0x24
 8002f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f022 0201 	bic.w	r2, r2, #1
 8002f76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f98:	f002 f99a 	bl	80052d0 <HAL_RCC_GetPCLK1Freq>
 8002f9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	4a81      	ldr	r2, [pc, #516]	; (80031a8 <HAL_I2C_Init+0x274>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d807      	bhi.n	8002fb8 <HAL_I2C_Init+0x84>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	4a80      	ldr	r2, [pc, #512]	; (80031ac <HAL_I2C_Init+0x278>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	bf94      	ite	ls
 8002fb0:	2301      	movls	r3, #1
 8002fb2:	2300      	movhi	r3, #0
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	e006      	b.n	8002fc6 <HAL_I2C_Init+0x92>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	4a7d      	ldr	r2, [pc, #500]	; (80031b0 <HAL_I2C_Init+0x27c>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	bf94      	ite	ls
 8002fc0:	2301      	movls	r3, #1
 8002fc2:	2300      	movhi	r3, #0
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e0e7      	b.n	800319e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	4a78      	ldr	r2, [pc, #480]	; (80031b4 <HAL_I2C_Init+0x280>)
 8002fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd6:	0c9b      	lsrs	r3, r3, #18
 8002fd8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	68ba      	ldr	r2, [r7, #8]
 8002fea:	430a      	orrs	r2, r1
 8002fec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	6a1b      	ldr	r3, [r3, #32]
 8002ff4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	4a6a      	ldr	r2, [pc, #424]	; (80031a8 <HAL_I2C_Init+0x274>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d802      	bhi.n	8003008 <HAL_I2C_Init+0xd4>
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	3301      	adds	r3, #1
 8003006:	e009      	b.n	800301c <HAL_I2C_Init+0xe8>
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800300e:	fb02 f303 	mul.w	r3, r2, r3
 8003012:	4a69      	ldr	r2, [pc, #420]	; (80031b8 <HAL_I2C_Init+0x284>)
 8003014:	fba2 2303 	umull	r2, r3, r2, r3
 8003018:	099b      	lsrs	r3, r3, #6
 800301a:	3301      	adds	r3, #1
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	6812      	ldr	r2, [r2, #0]
 8003020:	430b      	orrs	r3, r1
 8003022:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	69db      	ldr	r3, [r3, #28]
 800302a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800302e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	495c      	ldr	r1, [pc, #368]	; (80031a8 <HAL_I2C_Init+0x274>)
 8003038:	428b      	cmp	r3, r1
 800303a:	d819      	bhi.n	8003070 <HAL_I2C_Init+0x13c>
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	1e59      	subs	r1, r3, #1
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	005b      	lsls	r3, r3, #1
 8003046:	fbb1 f3f3 	udiv	r3, r1, r3
 800304a:	1c59      	adds	r1, r3, #1
 800304c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003050:	400b      	ands	r3, r1
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00a      	beq.n	800306c <HAL_I2C_Init+0x138>
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	1e59      	subs	r1, r3, #1
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	fbb1 f3f3 	udiv	r3, r1, r3
 8003064:	3301      	adds	r3, #1
 8003066:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800306a:	e051      	b.n	8003110 <HAL_I2C_Init+0x1dc>
 800306c:	2304      	movs	r3, #4
 800306e:	e04f      	b.n	8003110 <HAL_I2C_Init+0x1dc>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d111      	bne.n	800309c <HAL_I2C_Init+0x168>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	1e58      	subs	r0, r3, #1
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6859      	ldr	r1, [r3, #4]
 8003080:	460b      	mov	r3, r1
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	440b      	add	r3, r1
 8003086:	fbb0 f3f3 	udiv	r3, r0, r3
 800308a:	3301      	adds	r3, #1
 800308c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003090:	2b00      	cmp	r3, #0
 8003092:	bf0c      	ite	eq
 8003094:	2301      	moveq	r3, #1
 8003096:	2300      	movne	r3, #0
 8003098:	b2db      	uxtb	r3, r3
 800309a:	e012      	b.n	80030c2 <HAL_I2C_Init+0x18e>
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	1e58      	subs	r0, r3, #1
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6859      	ldr	r1, [r3, #4]
 80030a4:	460b      	mov	r3, r1
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	440b      	add	r3, r1
 80030aa:	0099      	lsls	r1, r3, #2
 80030ac:	440b      	add	r3, r1
 80030ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80030b2:	3301      	adds	r3, #1
 80030b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	bf0c      	ite	eq
 80030bc:	2301      	moveq	r3, #1
 80030be:	2300      	movne	r3, #0
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <HAL_I2C_Init+0x196>
 80030c6:	2301      	movs	r3, #1
 80030c8:	e022      	b.n	8003110 <HAL_I2C_Init+0x1dc>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d10e      	bne.n	80030f0 <HAL_I2C_Init+0x1bc>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	1e58      	subs	r0, r3, #1
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6859      	ldr	r1, [r3, #4]
 80030da:	460b      	mov	r3, r1
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	440b      	add	r3, r1
 80030e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80030e4:	3301      	adds	r3, #1
 80030e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030ee:	e00f      	b.n	8003110 <HAL_I2C_Init+0x1dc>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	1e58      	subs	r0, r3, #1
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6859      	ldr	r1, [r3, #4]
 80030f8:	460b      	mov	r3, r1
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	440b      	add	r3, r1
 80030fe:	0099      	lsls	r1, r3, #2
 8003100:	440b      	add	r3, r1
 8003102:	fbb0 f3f3 	udiv	r3, r0, r3
 8003106:	3301      	adds	r3, #1
 8003108:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800310c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003110:	6879      	ldr	r1, [r7, #4]
 8003112:	6809      	ldr	r1, [r1, #0]
 8003114:	4313      	orrs	r3, r2
 8003116:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	69da      	ldr	r2, [r3, #28]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a1b      	ldr	r3, [r3, #32]
 800312a:	431a      	orrs	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	430a      	orrs	r2, r1
 8003132:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800313e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	6911      	ldr	r1, [r2, #16]
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	68d2      	ldr	r2, [r2, #12]
 800314a:	4311      	orrs	r1, r2
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	6812      	ldr	r2, [r2, #0]
 8003150:	430b      	orrs	r3, r1
 8003152:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	695a      	ldr	r2, [r3, #20]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	431a      	orrs	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	430a      	orrs	r2, r1
 800316e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f042 0201 	orr.w	r2, r2, #1
 800317e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2220      	movs	r2, #32
 800318a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3710      	adds	r7, #16
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	000186a0 	.word	0x000186a0
 80031ac:	001e847f 	.word	0x001e847f
 80031b0:	003d08ff 	.word	0x003d08ff
 80031b4:	431bde83 	.word	0x431bde83
 80031b8:	10624dd3 	.word	0x10624dd3

080031bc <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ce:	2b80      	cmp	r3, #128	; 0x80
 80031d0:	d103      	bne.n	80031da <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2200      	movs	r2, #0
 80031d8:	611a      	str	r2, [r3, #16]
  }
}
 80031da:	bf00      	nop
 80031dc:	370c      	adds	r7, #12
 80031de:	46bd      	mov	sp, r7
 80031e0:	bc80      	pop	{r7}
 80031e2:	4770      	bx	lr

080031e4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b088      	sub	sp, #32
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80031ec:	2300      	movs	r3, #0
 80031ee:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031fc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003204:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800320c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800320e:	7bfb      	ldrb	r3, [r7, #15]
 8003210:	2b10      	cmp	r3, #16
 8003212:	d003      	beq.n	800321c <HAL_I2C_EV_IRQHandler+0x38>
 8003214:	7bfb      	ldrb	r3, [r7, #15]
 8003216:	2b40      	cmp	r3, #64	; 0x40
 8003218:	f040 80b1 	bne.w	800337e <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	699b      	ldr	r3, [r3, #24]
 8003222:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	695b      	ldr	r3, [r3, #20]
 800322a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	2b00      	cmp	r3, #0
 8003234:	d10d      	bne.n	8003252 <HAL_I2C_EV_IRQHandler+0x6e>
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800323c:	d003      	beq.n	8003246 <HAL_I2C_EV_IRQHandler+0x62>
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003244:	d101      	bne.n	800324a <HAL_I2C_EV_IRQHandler+0x66>
 8003246:	2301      	movs	r3, #1
 8003248:	e000      	b.n	800324c <HAL_I2C_EV_IRQHandler+0x68>
 800324a:	2300      	movs	r3, #0
 800324c:	2b01      	cmp	r3, #1
 800324e:	f000 8114 	beq.w	800347a <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	f003 0301 	and.w	r3, r3, #1
 8003258:	2b00      	cmp	r3, #0
 800325a:	d00b      	beq.n	8003274 <HAL_I2C_EV_IRQHandler+0x90>
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003262:	2b00      	cmp	r3, #0
 8003264:	d006      	beq.n	8003274 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f001 fc4e 	bl	8004b08 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f000 fd4e 	bl	8003d0e <I2C_Master_SB>
 8003272:	e083      	b.n	800337c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	f003 0308 	and.w	r3, r3, #8
 800327a:	2b00      	cmp	r3, #0
 800327c:	d008      	beq.n	8003290 <HAL_I2C_EV_IRQHandler+0xac>
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003284:	2b00      	cmp	r3, #0
 8003286:	d003      	beq.n	8003290 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f000 fdc5 	bl	8003e18 <I2C_Master_ADD10>
 800328e:	e075      	b.n	800337c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	f003 0302 	and.w	r3, r3, #2
 8003296:	2b00      	cmp	r3, #0
 8003298:	d008      	beq.n	80032ac <HAL_I2C_EV_IRQHandler+0xc8>
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d003      	beq.n	80032ac <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f000 fde0 	bl	8003e6a <I2C_Master_ADDR>
 80032aa:	e067      	b.n	800337c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	f003 0304 	and.w	r3, r3, #4
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d036      	beq.n	8003324 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032c4:	f000 80db 	beq.w	800347e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00d      	beq.n	80032ee <HAL_I2C_EV_IRQHandler+0x10a>
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d008      	beq.n	80032ee <HAL_I2C_EV_IRQHandler+0x10a>
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	f003 0304 	and.w	r3, r3, #4
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d103      	bne.n	80032ee <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 f9c2 	bl	8003670 <I2C_MasterTransmit_TXE>
 80032ec:	e046      	b.n	800337c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	f003 0304 	and.w	r3, r3, #4
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	f000 80c2 	beq.w	800347e <HAL_I2C_EV_IRQHandler+0x29a>
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003300:	2b00      	cmp	r3, #0
 8003302:	f000 80bc 	beq.w	800347e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003306:	7bbb      	ldrb	r3, [r7, #14]
 8003308:	2b21      	cmp	r3, #33	; 0x21
 800330a:	d103      	bne.n	8003314 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f000 fa4b 	bl	80037a8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003312:	e0b4      	b.n	800347e <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003314:	7bfb      	ldrb	r3, [r7, #15]
 8003316:	2b40      	cmp	r3, #64	; 0x40
 8003318:	f040 80b1 	bne.w	800347e <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f000 fab9 	bl	8003894 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003322:	e0ac      	b.n	800347e <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800332e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003332:	f000 80a4 	beq.w	800347e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00d      	beq.n	800335c <HAL_I2C_EV_IRQHandler+0x178>
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003346:	2b00      	cmp	r3, #0
 8003348:	d008      	beq.n	800335c <HAL_I2C_EV_IRQHandler+0x178>
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	f003 0304 	and.w	r3, r3, #4
 8003350:	2b00      	cmp	r3, #0
 8003352:	d103      	bne.n	800335c <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f000 fb35 	bl	80039c4 <I2C_MasterReceive_RXNE>
 800335a:	e00f      	b.n	800337c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	f003 0304 	and.w	r3, r3, #4
 8003362:	2b00      	cmp	r3, #0
 8003364:	f000 808b 	beq.w	800347e <HAL_I2C_EV_IRQHandler+0x29a>
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800336e:	2b00      	cmp	r3, #0
 8003370:	f000 8085 	beq.w	800347e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f000 fbe0 	bl	8003b3a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800337a:	e080      	b.n	800347e <HAL_I2C_EV_IRQHandler+0x29a>
 800337c:	e07f      	b.n	800347e <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003382:	2b00      	cmp	r3, #0
 8003384:	d004      	beq.n	8003390 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	695b      	ldr	r3, [r3, #20]
 800338c:	61fb      	str	r3, [r7, #28]
 800338e:	e007      	b.n	80033a0 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d011      	beq.n	80033ce <HAL_I2C_EV_IRQHandler+0x1ea>
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d00c      	beq.n	80033ce <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d003      	beq.n	80033c4 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80033c4:	69b9      	ldr	r1, [r7, #24]
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 ffa6 	bl	8004318 <I2C_Slave_ADDR>
 80033cc:	e05a      	b.n	8003484 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	f003 0310 	and.w	r3, r3, #16
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d008      	beq.n	80033ea <HAL_I2C_EV_IRQHandler+0x206>
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d003      	beq.n	80033ea <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 ffe0 	bl	80043a8 <I2C_Slave_STOPF>
 80033e8:	e04c      	b.n	8003484 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80033ea:	7bbb      	ldrb	r3, [r7, #14]
 80033ec:	2b21      	cmp	r3, #33	; 0x21
 80033ee:	d002      	beq.n	80033f6 <HAL_I2C_EV_IRQHandler+0x212>
 80033f0:	7bbb      	ldrb	r3, [r7, #14]
 80033f2:	2b29      	cmp	r3, #41	; 0x29
 80033f4:	d120      	bne.n	8003438 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00d      	beq.n	800341c <HAL_I2C_EV_IRQHandler+0x238>
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003406:	2b00      	cmp	r3, #0
 8003408:	d008      	beq.n	800341c <HAL_I2C_EV_IRQHandler+0x238>
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	f003 0304 	and.w	r3, r3, #4
 8003410:	2b00      	cmp	r3, #0
 8003412:	d103      	bne.n	800341c <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f000 fec3 	bl	80041a0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800341a:	e032      	b.n	8003482 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	f003 0304 	and.w	r3, r3, #4
 8003422:	2b00      	cmp	r3, #0
 8003424:	d02d      	beq.n	8003482 <HAL_I2C_EV_IRQHandler+0x29e>
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800342c:	2b00      	cmp	r3, #0
 800342e:	d028      	beq.n	8003482 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f000 fef2 	bl	800421a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003436:	e024      	b.n	8003482 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00d      	beq.n	800345e <HAL_I2C_EV_IRQHandler+0x27a>
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003448:	2b00      	cmp	r3, #0
 800344a:	d008      	beq.n	800345e <HAL_I2C_EV_IRQHandler+0x27a>
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	f003 0304 	and.w	r3, r3, #4
 8003452:	2b00      	cmp	r3, #0
 8003454:	d103      	bne.n	800345e <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 feff 	bl	800425a <I2C_SlaveReceive_RXNE>
 800345c:	e012      	b.n	8003484 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	f003 0304 	and.w	r3, r3, #4
 8003464:	2b00      	cmp	r3, #0
 8003466:	d00d      	beq.n	8003484 <HAL_I2C_EV_IRQHandler+0x2a0>
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800346e:	2b00      	cmp	r3, #0
 8003470:	d008      	beq.n	8003484 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 ff2f 	bl	80042d6 <I2C_SlaveReceive_BTF>
 8003478:	e004      	b.n	8003484 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800347a:	bf00      	nop
 800347c:	e002      	b.n	8003484 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800347e:	bf00      	nop
 8003480:	e000      	b.n	8003484 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003482:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003484:	3720      	adds	r7, #32
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}

0800348a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800348a:	b580      	push	{r7, lr}
 800348c:	b08a      	sub	sp, #40	; 0x28
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	695b      	ldr	r3, [r3, #20]
 8003498:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80034a2:	2300      	movs	r3, #0
 80034a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034ac:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80034ae:	6a3b      	ldr	r3, [r7, #32]
 80034b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d015      	beq.n	80034e4 <HAL_I2C_ER_IRQHandler+0x5a>
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d010      	beq.n	80034e4 <HAL_I2C_ER_IRQHandler+0x5a>
  {
    error |= HAL_I2C_ERROR_BERR;
 80034c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c4:	f043 0301 	orr.w	r3, r3, #1
 80034c8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80034d2:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034e2:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80034e4:	6a3b      	ldr	r3, [r7, #32]
 80034e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d00d      	beq.n	800350a <HAL_I2C_ER_IRQHandler+0x80>
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d008      	beq.n	800350a <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80034f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fa:	f043 0302 	orr.w	r3, r3, #2
 80034fe:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003508:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800350a:	6a3b      	ldr	r3, [r7, #32]
 800350c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003510:	2b00      	cmp	r3, #0
 8003512:	d03e      	beq.n	8003592 <HAL_I2C_ER_IRQHandler+0x108>
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800351a:	2b00      	cmp	r3, #0
 800351c:	d039      	beq.n	8003592 <HAL_I2C_ER_IRQHandler+0x108>
  {
    tmp1 = CurrentMode;
 800351e:	7efb      	ldrb	r3, [r7, #27]
 8003520:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003526:	b29b      	uxth	r3, r3
 8003528:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003530:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003536:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003538:	7ebb      	ldrb	r3, [r7, #26]
 800353a:	2b20      	cmp	r3, #32
 800353c:	d112      	bne.n	8003564 <HAL_I2C_ER_IRQHandler+0xda>
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d10f      	bne.n	8003564 <HAL_I2C_ER_IRQHandler+0xda>
 8003544:	7cfb      	ldrb	r3, [r7, #19]
 8003546:	2b21      	cmp	r3, #33	; 0x21
 8003548:	d008      	beq.n	800355c <HAL_I2C_ER_IRQHandler+0xd2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800354a:	7cfb      	ldrb	r3, [r7, #19]
 800354c:	2b29      	cmp	r3, #41	; 0x29
 800354e:	d005      	beq.n	800355c <HAL_I2C_ER_IRQHandler+0xd2>
 8003550:	7cfb      	ldrb	r3, [r7, #19]
 8003552:	2b28      	cmp	r3, #40	; 0x28
 8003554:	d106      	bne.n	8003564 <HAL_I2C_ER_IRQHandler+0xda>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2b21      	cmp	r3, #33	; 0x21
 800355a:	d103      	bne.n	8003564 <HAL_I2C_ER_IRQHandler+0xda>
    {
      I2C_Slave_AF(hi2c);
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f001 f853 	bl	8004608 <I2C_Slave_AF>
 8003562:	e016      	b.n	8003592 <HAL_I2C_ER_IRQHandler+0x108>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800356c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800356e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003570:	f043 0304 	orr.w	r3, r3, #4
 8003574:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003576:	7efb      	ldrb	r3, [r7, #27]
 8003578:	2b10      	cmp	r3, #16
 800357a:	d002      	beq.n	8003582 <HAL_I2C_ER_IRQHandler+0xf8>
 800357c:	7efb      	ldrb	r3, [r7, #27]
 800357e:	2b40      	cmp	r3, #64	; 0x40
 8003580:	d107      	bne.n	8003592 <HAL_I2C_ER_IRQHandler+0x108>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003590:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003592:	6a3b      	ldr	r3, [r7, #32]
 8003594:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003598:	2b00      	cmp	r3, #0
 800359a:	d00d      	beq.n	80035b8 <HAL_I2C_ER_IRQHandler+0x12e>
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d008      	beq.n	80035b8 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80035a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a8:	f043 0308 	orr.w	r3, r3, #8
 80035ac:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80035b6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80035b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d008      	beq.n	80035d0 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c4:	431a      	orrs	r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f001 f890 	bl	80046f0 <I2C_ITError>
  }
}
 80035d0:	bf00      	nop
 80035d2:	3728      	adds	r7, #40	; 0x28
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80035e0:	bf00      	nop
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bc80      	pop	{r7}
 80035e8:	4770      	bx	lr

080035ea <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035ea:	b480      	push	{r7}
 80035ec:	b083      	sub	sp, #12
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80035f2:	bf00      	nop
 80035f4:	370c      	adds	r7, #12
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bc80      	pop	{r7}
 80035fa:	4770      	bx	lr

080035fc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003604:	bf00      	nop
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	bc80      	pop	{r7}
 800360c:	4770      	bx	lr

0800360e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800360e:	b480      	push	{r7}
 8003610:	b083      	sub	sp, #12
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003616:	bf00      	nop
 8003618:	370c      	adds	r7, #12
 800361a:	46bd      	mov	sp, r7
 800361c:	bc80      	pop	{r7}
 800361e:	4770      	bx	lr

08003620 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	460b      	mov	r3, r1
 800362a:	70fb      	strb	r3, [r7, #3]
 800362c:	4613      	mov	r3, r2
 800362e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	bc80      	pop	{r7}
 8003638:	4770      	bx	lr

0800363a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800363a:	b480      	push	{r7}
 800363c:	b083      	sub	sp, #12
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003642:	bf00      	nop
 8003644:	370c      	adds	r7, #12
 8003646:	46bd      	mov	sp, r7
 8003648:	bc80      	pop	{r7}
 800364a:	4770      	bx	lr

0800364c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003654:	bf00      	nop
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	bc80      	pop	{r7}
 800365c:	4770      	bx	lr

0800365e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800365e:	b480      	push	{r7}
 8003660:	b083      	sub	sp, #12
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003666:	bf00      	nop
 8003668:	370c      	adds	r7, #12
 800366a:	46bd      	mov	sp, r7
 800366c:	bc80      	pop	{r7}
 800366e:	4770      	bx	lr

08003670 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800367e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003686:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003692:	2b00      	cmp	r3, #0
 8003694:	d150      	bne.n	8003738 <I2C_MasterTransmit_TXE+0xc8>
 8003696:	7bfb      	ldrb	r3, [r7, #15]
 8003698:	2b21      	cmp	r3, #33	; 0x21
 800369a:	d14d      	bne.n	8003738 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	2b08      	cmp	r3, #8
 80036a0:	d01d      	beq.n	80036de <I2C_MasterTransmit_TXE+0x6e>
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	2b20      	cmp	r3, #32
 80036a6:	d01a      	beq.n	80036de <I2C_MasterTransmit_TXE+0x6e>
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80036ae:	d016      	beq.n	80036de <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	685a      	ldr	r2, [r3, #4]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80036be:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2211      	movs	r2, #17
 80036c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2220      	movs	r2, #32
 80036d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f7ff ff7e 	bl	80035d8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80036dc:	e060      	b.n	80037a0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	685a      	ldr	r2, [r3, #4]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80036ec:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036fc:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2220      	movs	r2, #32
 8003708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003712:	b2db      	uxtb	r3, r3
 8003714:	2b40      	cmp	r3, #64	; 0x40
 8003716:	d107      	bne.n	8003728 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f7fd fcb7 	bl	8001094 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003726:	e03b      	b.n	80037a0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f7ff ff51 	bl	80035d8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003736:	e033      	b.n	80037a0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003738:	7bfb      	ldrb	r3, [r7, #15]
 800373a:	2b21      	cmp	r3, #33	; 0x21
 800373c:	d005      	beq.n	800374a <I2C_MasterTransmit_TXE+0xda>
 800373e:	7bbb      	ldrb	r3, [r7, #14]
 8003740:	2b40      	cmp	r3, #64	; 0x40
 8003742:	d12d      	bne.n	80037a0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003744:	7bfb      	ldrb	r3, [r7, #15]
 8003746:	2b22      	cmp	r3, #34	; 0x22
 8003748:	d12a      	bne.n	80037a0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800374e:	b29b      	uxth	r3, r3
 8003750:	2b00      	cmp	r3, #0
 8003752:	d108      	bne.n	8003766 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	685a      	ldr	r2, [r3, #4]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003762:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003764:	e01c      	b.n	80037a0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b40      	cmp	r3, #64	; 0x40
 8003770:	d103      	bne.n	800377a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 f88e 	bl	8003894 <I2C_MemoryTransmit_TXE_BTF>
}
 8003778:	e012      	b.n	80037a0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377e:	781a      	ldrb	r2, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378a:	1c5a      	adds	r2, r3, #1
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003794:	b29b      	uxth	r3, r3
 8003796:	3b01      	subs	r3, #1
 8003798:	b29a      	uxth	r2, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800379e:	e7ff      	b.n	80037a0 <I2C_MasterTransmit_TXE+0x130>
 80037a0:	bf00      	nop
 80037a2:	3710      	adds	r7, #16
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b21      	cmp	r3, #33	; 0x21
 80037c0:	d164      	bne.n	800388c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d012      	beq.n	80037f2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d0:	781a      	ldrb	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037dc:	1c5a      	adds	r2, r3, #1
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	3b01      	subs	r3, #1
 80037ea:	b29a      	uxth	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80037f0:	e04c      	b.n	800388c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2b08      	cmp	r3, #8
 80037f6:	d01d      	beq.n	8003834 <I2C_MasterTransmit_BTF+0x8c>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2b20      	cmp	r3, #32
 80037fc:	d01a      	beq.n	8003834 <I2C_MasterTransmit_BTF+0x8c>
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003804:	d016      	beq.n	8003834 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	685a      	ldr	r2, [r3, #4]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003814:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2211      	movs	r2, #17
 800381a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2220      	movs	r2, #32
 8003828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f7ff fed3 	bl	80035d8 <HAL_I2C_MasterTxCpltCallback>
}
 8003832:	e02b      	b.n	800388c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	685a      	ldr	r2, [r3, #4]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003842:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003852:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2220      	movs	r2, #32
 800385e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b40      	cmp	r3, #64	; 0x40
 800386c:	d107      	bne.n	800387e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f7fd fc0c 	bl	8001094 <HAL_I2C_MemTxCpltCallback>
}
 800387c:	e006      	b.n	800388c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f7ff fea6 	bl	80035d8 <HAL_I2C_MasterTxCpltCallback>
}
 800388c:	bf00      	nop
 800388e:	3710      	adds	r7, #16
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038a2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d11d      	bne.n	80038e8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d10b      	bne.n	80038cc <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038b8:	b2da      	uxtb	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038c4:	1c9a      	adds	r2, r3, #2
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80038ca:	e077      	b.n	80039bc <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	121b      	asrs	r3, r3, #8
 80038d4:	b2da      	uxtb	r2, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038e0:	1c5a      	adds	r2, r3, #1
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80038e6:	e069      	b.n	80039bc <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d10b      	bne.n	8003908 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038f4:	b2da      	uxtb	r2, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003900:	1c5a      	adds	r2, r3, #1
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003906:	e059      	b.n	80039bc <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800390c:	2b02      	cmp	r3, #2
 800390e:	d152      	bne.n	80039b6 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003910:	7bfb      	ldrb	r3, [r7, #15]
 8003912:	2b22      	cmp	r3, #34	; 0x22
 8003914:	d10d      	bne.n	8003932 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003924:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800392a:	1c5a      	adds	r2, r3, #1
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003930:	e044      	b.n	80039bc <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003936:	b29b      	uxth	r3, r3
 8003938:	2b00      	cmp	r3, #0
 800393a:	d015      	beq.n	8003968 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800393c:	7bfb      	ldrb	r3, [r7, #15]
 800393e:	2b21      	cmp	r3, #33	; 0x21
 8003940:	d112      	bne.n	8003968 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003946:	781a      	ldrb	r2, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003952:	1c5a      	adds	r2, r3, #1
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800395c:	b29b      	uxth	r3, r3
 800395e:	3b01      	subs	r3, #1
 8003960:	b29a      	uxth	r2, r3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003966:	e029      	b.n	80039bc <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800396c:	b29b      	uxth	r3, r3
 800396e:	2b00      	cmp	r3, #0
 8003970:	d124      	bne.n	80039bc <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003972:	7bfb      	ldrb	r3, [r7, #15]
 8003974:	2b21      	cmp	r3, #33	; 0x21
 8003976:	d121      	bne.n	80039bc <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	685a      	ldr	r2, [r3, #4]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003986:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003996:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2220      	movs	r2, #32
 80039a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f7fd fb70 	bl	8001094 <HAL_I2C_MemTxCpltCallback>
}
 80039b4:	e002      	b.n	80039bc <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f7ff fc00 	bl	80031bc <I2C_Flush_DR>
}
 80039bc:	bf00      	nop
 80039be:	3710      	adds	r7, #16
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	2b22      	cmp	r3, #34	; 0x22
 80039d6:	f040 80ac 	bne.w	8003b32 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039de:	b29b      	uxth	r3, r3
 80039e0:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2b03      	cmp	r3, #3
 80039e6:	d921      	bls.n	8003a2c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	691a      	ldr	r2, [r3, #16]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f2:	b2d2      	uxtb	r2, r2
 80039f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fa:	1c5a      	adds	r2, r3, #1
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	3b01      	subs	r3, #1
 8003a08:	b29a      	uxth	r2, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	2b03      	cmp	r3, #3
 8003a16:	f040 808c 	bne.w	8003b32 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	685a      	ldr	r2, [r3, #4]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a28:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003a2a:	e082      	b.n	8003b32 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d075      	beq.n	8003b20 <I2C_MasterReceive_RXNE+0x15c>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d002      	beq.n	8003a40 <I2C_MasterReceive_RXNE+0x7c>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d16f      	bne.n	8003b20 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f001 f82f 	bl	8004aa4 <I2C_WaitOnSTOPRequestThroughIT>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d142      	bne.n	8003ad2 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a5a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	685a      	ldr	r2, [r3, #4]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a6a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	691a      	ldr	r2, [r3, #16]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a76:	b2d2      	uxtb	r2, r2
 8003a78:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7e:	1c5a      	adds	r2, r3, #1
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2220      	movs	r2, #32
 8003a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b40      	cmp	r3, #64	; 0x40
 8003aa4:	d10a      	bne.n	8003abc <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f7fd fadb 	bl	8001070 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003aba:	e03a      	b.n	8003b32 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2212      	movs	r2, #18
 8003ac8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f7ff fd8d 	bl	80035ea <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003ad0:	e02f      	b.n	8003b32 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	685a      	ldr	r2, [r3, #4]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003ae0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	691a      	ldr	r2, [r3, #16]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aec:	b2d2      	uxtb	r2, r2
 8003aee:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af4:	1c5a      	adds	r2, r3, #1
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	3b01      	subs	r3, #1
 8003b02:	b29a      	uxth	r2, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2220      	movs	r2, #32
 8003b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f7ff fd97 	bl	800364c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003b1e:	e008      	b.n	8003b32 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	685a      	ldr	r2, [r3, #4]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b2e:	605a      	str	r2, [r3, #4]
}
 8003b30:	e7ff      	b.n	8003b32 <I2C_MasterReceive_RXNE+0x16e>
 8003b32:	bf00      	nop
 8003b34:	3710      	adds	r7, #16
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}

08003b3a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003b3a:	b580      	push	{r7, lr}
 8003b3c:	b084      	sub	sp, #16
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b46:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	2b04      	cmp	r3, #4
 8003b50:	d11b      	bne.n	8003b8a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	685a      	ldr	r2, [r3, #4]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b60:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	691a      	ldr	r2, [r3, #16]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6c:	b2d2      	uxtb	r2, r2
 8003b6e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b74:	1c5a      	adds	r2, r3, #1
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	3b01      	subs	r3, #1
 8003b82:	b29a      	uxth	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003b88:	e0bd      	b.n	8003d06 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	2b03      	cmp	r3, #3
 8003b92:	d129      	bne.n	8003be8 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	685a      	ldr	r2, [r3, #4]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ba2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2b04      	cmp	r3, #4
 8003ba8:	d00a      	beq.n	8003bc0 <I2C_MasterReceive_BTF+0x86>
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d007      	beq.n	8003bc0 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bbe:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	691a      	ldr	r2, [r3, #16]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bca:	b2d2      	uxtb	r2, r2
 8003bcc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd2:	1c5a      	adds	r2, r3, #1
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	3b01      	subs	r3, #1
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003be6:	e08e      	b.n	8003d06 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d176      	bne.n	8003ce0 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d002      	beq.n	8003bfe <I2C_MasterReceive_BTF+0xc4>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2b10      	cmp	r3, #16
 8003bfc:	d108      	bne.n	8003c10 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c0c:	601a      	str	r2, [r3, #0]
 8003c0e:	e019      	b.n	8003c44 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2b04      	cmp	r3, #4
 8003c14:	d002      	beq.n	8003c1c <I2C_MasterReceive_BTF+0xe2>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d108      	bne.n	8003c2e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c2a:	601a      	str	r2, [r3, #0]
 8003c2c:	e00a      	b.n	8003c44 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2b10      	cmp	r3, #16
 8003c32:	d007      	beq.n	8003c44 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c42:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	691a      	ldr	r2, [r3, #16]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4e:	b2d2      	uxtb	r2, r2
 8003c50:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c56:	1c5a      	adds	r2, r3, #1
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	3b01      	subs	r3, #1
 8003c64:	b29a      	uxth	r2, r3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	691a      	ldr	r2, [r3, #16]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c74:	b2d2      	uxtb	r2, r2
 8003c76:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7c:	1c5a      	adds	r2, r3, #1
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	b29a      	uxth	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	685a      	ldr	r2, [r3, #4]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003c9e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2220      	movs	r2, #32
 8003ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	2b40      	cmp	r3, #64	; 0x40
 8003cb2:	d10a      	bne.n	8003cca <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f7fd f9d4 	bl	8001070 <HAL_I2C_MemRxCpltCallback>
}
 8003cc8:	e01d      	b.n	8003d06 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2212      	movs	r2, #18
 8003cd6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f7ff fc86 	bl	80035ea <HAL_I2C_MasterRxCpltCallback>
}
 8003cde:	e012      	b.n	8003d06 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	691a      	ldr	r2, [r3, #16]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cea:	b2d2      	uxtb	r2, r2
 8003cec:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf2:	1c5a      	adds	r2, r3, #1
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	b29a      	uxth	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003d06:	bf00      	nop
 8003d08:	3710      	adds	r7, #16
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003d0e:	b480      	push	{r7}
 8003d10:	b083      	sub	sp, #12
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b40      	cmp	r3, #64	; 0x40
 8003d20:	d117      	bne.n	8003d52 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d109      	bne.n	8003d3e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	461a      	mov	r2, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d3a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003d3c:	e067      	b.n	8003e0e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	f043 0301 	orr.w	r3, r3, #1
 8003d48:	b2da      	uxtb	r2, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	611a      	str	r2, [r3, #16]
}
 8003d50:	e05d      	b.n	8003e0e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d5a:	d133      	bne.n	8003dc4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	2b21      	cmp	r3, #33	; 0x21
 8003d66:	d109      	bne.n	8003d7c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	461a      	mov	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d78:	611a      	str	r2, [r3, #16]
 8003d7a:	e008      	b.n	8003d8e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	f043 0301 	orr.w	r3, r3, #1
 8003d86:	b2da      	uxtb	r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d004      	beq.n	8003da0 <I2C_Master_SB+0x92>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d108      	bne.n	8003db2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d032      	beq.n	8003e0e <I2C_Master_SB+0x100>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d02d      	beq.n	8003e0e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	685a      	ldr	r2, [r3, #4]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dc0:	605a      	str	r2, [r3, #4]
}
 8003dc2:	e024      	b.n	8003e0e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d10e      	bne.n	8003dea <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	11db      	asrs	r3, r3, #7
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	f003 0306 	and.w	r3, r3, #6
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	f063 030f 	orn	r3, r3, #15
 8003de0:	b2da      	uxtb	r2, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	611a      	str	r2, [r3, #16]
}
 8003de8:	e011      	b.n	8003e0e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d10d      	bne.n	8003e0e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	11db      	asrs	r3, r3, #7
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	f003 0306 	and.w	r3, r3, #6
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	f063 030e 	orn	r3, r3, #14
 8003e06:	b2da      	uxtb	r2, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	611a      	str	r2, [r3, #16]
}
 8003e0e:	bf00      	nop
 8003e10:	370c      	adds	r7, #12
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bc80      	pop	{r7}
 8003e16:	4770      	bx	lr

08003e18 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e24:	b2da      	uxtb	r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d004      	beq.n	8003e3e <I2C_Master_ADD10+0x26>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d108      	bne.n	8003e50 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00c      	beq.n	8003e60 <I2C_Master_ADD10+0x48>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d007      	beq.n	8003e60 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	685a      	ldr	r2, [r3, #4]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e5e:	605a      	str	r2, [r3, #4]
  }
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bc80      	pop	{r7}
 8003e68:	4770      	bx	lr

08003e6a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003e6a:	b480      	push	{r7}
 8003e6c:	b091      	sub	sp, #68	; 0x44
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e78:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e80:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e86:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	2b22      	cmp	r3, #34	; 0x22
 8003e92:	f040 8174 	bne.w	800417e <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d10f      	bne.n	8003ebe <I2C_Master_ADDR+0x54>
 8003e9e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003ea2:	2b40      	cmp	r3, #64	; 0x40
 8003ea4:	d10b      	bne.n	8003ebe <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	633b      	str	r3, [r7, #48]	; 0x30
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	695b      	ldr	r3, [r3, #20]
 8003eb0:	633b      	str	r3, [r7, #48]	; 0x30
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	633b      	str	r3, [r7, #48]	; 0x30
 8003eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ebc:	e16b      	b.n	8004196 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d11d      	bne.n	8003f02 <I2C_Master_ADDR+0x98>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003ece:	d118      	bne.n	8003f02 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	699b      	ldr	r3, [r3, #24]
 8003ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ef4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003efa:	1c5a      	adds	r2, r3, #1
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	651a      	str	r2, [r3, #80]	; 0x50
 8003f00:	e149      	b.n	8004196 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d113      	bne.n	8003f34 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f20:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f30:	601a      	str	r2, [r3, #0]
 8003f32:	e120      	b.n	8004176 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	f040 808a 	bne.w	8004054 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f42:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f46:	d137      	bne.n	8003fb8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f56:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f66:	d113      	bne.n	8003f90 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f76:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f78:	2300      	movs	r3, #0
 8003f7a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	627b      	str	r3, [r7, #36]	; 0x24
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8e:	e0f2      	b.n	8004176 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f90:	2300      	movs	r3, #0
 8003f92:	623b      	str	r3, [r7, #32]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	695b      	ldr	r3, [r3, #20]
 8003f9a:	623b      	str	r3, [r7, #32]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	623b      	str	r3, [r7, #32]
 8003fa4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fb4:	601a      	str	r2, [r3, #0]
 8003fb6:	e0de      	b.n	8004176 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fba:	2b08      	cmp	r3, #8
 8003fbc:	d02e      	beq.n	800401c <I2C_Master_ADDR+0x1b2>
 8003fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fc0:	2b20      	cmp	r3, #32
 8003fc2:	d02b      	beq.n	800401c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fc6:	2b12      	cmp	r3, #18
 8003fc8:	d102      	bne.n	8003fd0 <I2C_Master_ADDR+0x166>
 8003fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d125      	bne.n	800401c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd2:	2b04      	cmp	r3, #4
 8003fd4:	d00e      	beq.n	8003ff4 <I2C_Master_ADDR+0x18a>
 8003fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d00b      	beq.n	8003ff4 <I2C_Master_ADDR+0x18a>
 8003fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fde:	2b10      	cmp	r3, #16
 8003fe0:	d008      	beq.n	8003ff4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ff0:	601a      	str	r2, [r3, #0]
 8003ff2:	e007      	b.n	8004004 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004002:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004004:	2300      	movs	r3, #0
 8004006:	61fb      	str	r3, [r7, #28]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	61fb      	str	r3, [r7, #28]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	61fb      	str	r3, [r7, #28]
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	e0ac      	b.n	8004176 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800402a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800402c:	2300      	movs	r3, #0
 800402e:	61bb      	str	r3, [r7, #24]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	695b      	ldr	r3, [r3, #20]
 8004036:	61bb      	str	r3, [r7, #24]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	61bb      	str	r3, [r7, #24]
 8004040:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004050:	601a      	str	r2, [r3, #0]
 8004052:	e090      	b.n	8004176 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004058:	b29b      	uxth	r3, r3
 800405a:	2b02      	cmp	r3, #2
 800405c:	d158      	bne.n	8004110 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800405e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004060:	2b04      	cmp	r3, #4
 8004062:	d021      	beq.n	80040a8 <I2C_Master_ADDR+0x23e>
 8004064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004066:	2b02      	cmp	r3, #2
 8004068:	d01e      	beq.n	80040a8 <I2C_Master_ADDR+0x23e>
 800406a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800406c:	2b10      	cmp	r3, #16
 800406e:	d01b      	beq.n	80040a8 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800407e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004080:	2300      	movs	r3, #0
 8004082:	617b      	str	r3, [r7, #20]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	617b      	str	r3, [r7, #20]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	699b      	ldr	r3, [r3, #24]
 8004092:	617b      	str	r3, [r7, #20]
 8004094:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040a4:	601a      	str	r2, [r3, #0]
 80040a6:	e012      	b.n	80040ce <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040b6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040b8:	2300      	movs	r3, #0
 80040ba:	613b      	str	r3, [r7, #16]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	613b      	str	r3, [r7, #16]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	613b      	str	r3, [r7, #16]
 80040cc:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040dc:	d14b      	bne.n	8004176 <I2C_Master_ADDR+0x30c>
 80040de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80040e4:	d00b      	beq.n	80040fe <I2C_Master_ADDR+0x294>
 80040e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d008      	beq.n	80040fe <I2C_Master_ADDR+0x294>
 80040ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ee:	2b08      	cmp	r3, #8
 80040f0:	d005      	beq.n	80040fe <I2C_Master_ADDR+0x294>
 80040f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f4:	2b10      	cmp	r3, #16
 80040f6:	d002      	beq.n	80040fe <I2C_Master_ADDR+0x294>
 80040f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040fa:	2b20      	cmp	r3, #32
 80040fc:	d13b      	bne.n	8004176 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	685a      	ldr	r2, [r3, #4]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800410c:	605a      	str	r2, [r3, #4]
 800410e:	e032      	b.n	8004176 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800411e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800412a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800412e:	d117      	bne.n	8004160 <I2C_Master_ADDR+0x2f6>
 8004130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004132:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004136:	d00b      	beq.n	8004150 <I2C_Master_ADDR+0x2e6>
 8004138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800413a:	2b01      	cmp	r3, #1
 800413c:	d008      	beq.n	8004150 <I2C_Master_ADDR+0x2e6>
 800413e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004140:	2b08      	cmp	r3, #8
 8004142:	d005      	beq.n	8004150 <I2C_Master_ADDR+0x2e6>
 8004144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004146:	2b10      	cmp	r3, #16
 8004148:	d002      	beq.n	8004150 <I2C_Master_ADDR+0x2e6>
 800414a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800414c:	2b20      	cmp	r3, #32
 800414e:	d107      	bne.n	8004160 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	685a      	ldr	r2, [r3, #4]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800415e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004160:	2300      	movs	r3, #0
 8004162:	60fb      	str	r3, [r7, #12]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	60fb      	str	r3, [r7, #12]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	60fb      	str	r3, [r7, #12]
 8004174:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800417c:	e00b      	b.n	8004196 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800417e:	2300      	movs	r3, #0
 8004180:	60bb      	str	r3, [r7, #8]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	695b      	ldr	r3, [r3, #20]
 8004188:	60bb      	str	r3, [r7, #8]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	60bb      	str	r3, [r7, #8]
 8004192:	68bb      	ldr	r3, [r7, #8]
}
 8004194:	e7ff      	b.n	8004196 <I2C_Master_ADDR+0x32c>
 8004196:	bf00      	nop
 8004198:	3744      	adds	r7, #68	; 0x44
 800419a:	46bd      	mov	sp, r7
 800419c:	bc80      	pop	{r7}
 800419e:	4770      	bx	lr

080041a0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ae:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d02b      	beq.n	8004212 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041be:	781a      	ldrb	r2, [r3, #0]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ca:	1c5a      	adds	r2, r3, #1
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	3b01      	subs	r3, #1
 80041d8:	b29a      	uxth	r2, r3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d114      	bne.n	8004212 <I2C_SlaveTransmit_TXE+0x72>
 80041e8:	7bfb      	ldrb	r3, [r7, #15]
 80041ea:	2b29      	cmp	r3, #41	; 0x29
 80041ec:	d111      	bne.n	8004212 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	685a      	ldr	r2, [r3, #4]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041fc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2221      	movs	r2, #33	; 0x21
 8004202:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2228      	movs	r2, #40	; 0x28
 8004208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f7ff f9f5 	bl	80035fc <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004212:	bf00      	nop
 8004214:	3710      	adds	r7, #16
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}

0800421a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800421a:	b480      	push	{r7}
 800421c:	b083      	sub	sp, #12
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004226:	b29b      	uxth	r3, r3
 8004228:	2b00      	cmp	r3, #0
 800422a:	d011      	beq.n	8004250 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004230:	781a      	ldrb	r2, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423c:	1c5a      	adds	r2, r3, #1
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004246:	b29b      	uxth	r3, r3
 8004248:	3b01      	subs	r3, #1
 800424a:	b29a      	uxth	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004250:	bf00      	nop
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	bc80      	pop	{r7}
 8004258:	4770      	bx	lr

0800425a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800425a:	b580      	push	{r7, lr}
 800425c:	b084      	sub	sp, #16
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004268:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800426e:	b29b      	uxth	r3, r3
 8004270:	2b00      	cmp	r3, #0
 8004272:	d02c      	beq.n	80042ce <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	691a      	ldr	r2, [r3, #16]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427e:	b2d2      	uxtb	r2, r2
 8004280:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004286:	1c5a      	adds	r2, r3, #1
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004290:	b29b      	uxth	r3, r3
 8004292:	3b01      	subs	r3, #1
 8004294:	b29a      	uxth	r2, r3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800429e:	b29b      	uxth	r3, r3
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d114      	bne.n	80042ce <I2C_SlaveReceive_RXNE+0x74>
 80042a4:	7bfb      	ldrb	r3, [r7, #15]
 80042a6:	2b2a      	cmp	r3, #42	; 0x2a
 80042a8:	d111      	bne.n	80042ce <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	685a      	ldr	r2, [r3, #4]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042b8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2222      	movs	r2, #34	; 0x22
 80042be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2228      	movs	r2, #40	; 0x28
 80042c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f7ff f9a0 	bl	800360e <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80042ce:	bf00      	nop
 80042d0:	3710      	adds	r7, #16
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}

080042d6 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80042d6:	b480      	push	{r7}
 80042d8:	b083      	sub	sp, #12
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d012      	beq.n	800430e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	691a      	ldr	r2, [r3, #16]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f2:	b2d2      	uxtb	r2, r2
 80042f4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fa:	1c5a      	adds	r2, r3, #1
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004304:	b29b      	uxth	r3, r3
 8004306:	3b01      	subs	r3, #1
 8004308:	b29a      	uxth	r2, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800430e:	bf00      	nop
 8004310:	370c      	adds	r7, #12
 8004312:	46bd      	mov	sp, r7
 8004314:	bc80      	pop	{r7}
 8004316:	4770      	bx	lr

08004318 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004322:	2300      	movs	r3, #0
 8004324:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800432c:	b2db      	uxtb	r3, r3
 800432e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004332:	2b28      	cmp	r3, #40	; 0x28
 8004334:	d125      	bne.n	8004382 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	685a      	ldr	r2, [r3, #4]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004344:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	f003 0304 	and.w	r3, r3, #4
 800434c:	2b00      	cmp	r3, #0
 800434e:	d101      	bne.n	8004354 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004350:	2301      	movs	r3, #1
 8004352:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800435a:	2b00      	cmp	r3, #0
 800435c:	d103      	bne.n	8004366 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	81bb      	strh	r3, [r7, #12]
 8004364:	e002      	b.n	800436c <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004374:	89ba      	ldrh	r2, [r7, #12]
 8004376:	7bfb      	ldrb	r3, [r7, #15]
 8004378:	4619      	mov	r1, r3
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f7ff f950 	bl	8003620 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004380:	e00e      	b.n	80043a0 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004382:	2300      	movs	r3, #0
 8004384:	60bb      	str	r3, [r7, #8]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	695b      	ldr	r3, [r3, #20]
 800438c:	60bb      	str	r3, [r7, #8]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	699b      	ldr	r3, [r3, #24]
 8004394:	60bb      	str	r3, [r7, #8]
 8004396:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80043a0:	bf00      	nop
 80043a2:	3710      	adds	r7, #16
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043b6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	685a      	ldr	r2, [r3, #4]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80043c6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80043c8:	2300      	movs	r3, #0
 80043ca:	60bb      	str	r3, [r7, #8]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	695b      	ldr	r3, [r3, #20]
 80043d2:	60bb      	str	r3, [r7, #8]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f042 0201 	orr.w	r2, r2, #1
 80043e2:	601a      	str	r2, [r3, #0]
 80043e4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043f4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004400:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004404:	d172      	bne.n	80044ec <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004406:	7bfb      	ldrb	r3, [r7, #15]
 8004408:	2b22      	cmp	r3, #34	; 0x22
 800440a:	d002      	beq.n	8004412 <I2C_Slave_STOPF+0x6a>
 800440c:	7bfb      	ldrb	r3, [r7, #15]
 800440e:	2b2a      	cmp	r3, #42	; 0x2a
 8004410:	d135      	bne.n	800447e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	b29a      	uxth	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004424:	b29b      	uxth	r3, r3
 8004426:	2b00      	cmp	r3, #0
 8004428:	d005      	beq.n	8004436 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442e:	f043 0204 	orr.w	r2, r3, #4
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	685a      	ldr	r2, [r3, #4]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004444:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800444a:	4618      	mov	r0, r3
 800444c:	f7fe fb90 	bl	8002b70 <HAL_DMA_GetState>
 8004450:	4603      	mov	r3, r0
 8004452:	2b01      	cmp	r3, #1
 8004454:	d049      	beq.n	80044ea <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800445a:	4a69      	ldr	r2, [pc, #420]	; (8004600 <I2C_Slave_STOPF+0x258>)
 800445c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004462:	4618      	mov	r0, r3
 8004464:	f7fe fa06 	bl	8002874 <HAL_DMA_Abort_IT>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d03d      	beq.n	80044ea <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004478:	4610      	mov	r0, r2
 800447a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800447c:	e035      	b.n	80044ea <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	b29a      	uxth	r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004490:	b29b      	uxth	r3, r3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d005      	beq.n	80044a2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449a:	f043 0204 	orr.w	r2, r3, #4
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	685a      	ldr	r2, [r3, #4]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044b0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7fe fb5a 	bl	8002b70 <HAL_DMA_GetState>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d014      	beq.n	80044ec <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044c6:	4a4e      	ldr	r2, [pc, #312]	; (8004600 <I2C_Slave_STOPF+0x258>)
 80044c8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7fe f9d0 	bl	8002874 <HAL_DMA_Abort_IT>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d008      	beq.n	80044ec <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80044e4:	4610      	mov	r0, r2
 80044e6:	4798      	blx	r3
 80044e8:	e000      	b.n	80044ec <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80044ea:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d03e      	beq.n	8004574 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	695b      	ldr	r3, [r3, #20]
 80044fc:	f003 0304 	and.w	r3, r3, #4
 8004500:	2b04      	cmp	r3, #4
 8004502:	d112      	bne.n	800452a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	691a      	ldr	r2, [r3, #16]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450e:	b2d2      	uxtb	r2, r2
 8004510:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004516:	1c5a      	adds	r2, r3, #1
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004520:	b29b      	uxth	r3, r3
 8004522:	3b01      	subs	r3, #1
 8004524:	b29a      	uxth	r2, r3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	695b      	ldr	r3, [r3, #20]
 8004530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004534:	2b40      	cmp	r3, #64	; 0x40
 8004536:	d112      	bne.n	800455e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	691a      	ldr	r2, [r3, #16]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004542:	b2d2      	uxtb	r2, r2
 8004544:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454a:	1c5a      	adds	r2, r3, #1
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004554:	b29b      	uxth	r3, r3
 8004556:	3b01      	subs	r3, #1
 8004558:	b29a      	uxth	r2, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004562:	b29b      	uxth	r3, r3
 8004564:	2b00      	cmp	r3, #0
 8004566:	d005      	beq.n	8004574 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456c:	f043 0204 	orr.w	r2, r3, #4
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004578:	2b00      	cmp	r3, #0
 800457a:	d003      	beq.n	8004584 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f000 f8b7 	bl	80046f0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004582:	e039      	b.n	80045f8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004584:	7bfb      	ldrb	r3, [r7, #15]
 8004586:	2b2a      	cmp	r3, #42	; 0x2a
 8004588:	d109      	bne.n	800459e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2228      	movs	r2, #40	; 0x28
 8004594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f7ff f838 	bl	800360e <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	2b28      	cmp	r3, #40	; 0x28
 80045a8:	d111      	bne.n	80045ce <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a15      	ldr	r2, [pc, #84]	; (8004604 <I2C_Slave_STOPF+0x25c>)
 80045ae:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2220      	movs	r2, #32
 80045ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f7ff f837 	bl	800363a <HAL_I2C_ListenCpltCallback>
}
 80045cc:	e014      	b.n	80045f8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d2:	2b22      	cmp	r3, #34	; 0x22
 80045d4:	d002      	beq.n	80045dc <I2C_Slave_STOPF+0x234>
 80045d6:	7bfb      	ldrb	r3, [r7, #15]
 80045d8:	2b22      	cmp	r3, #34	; 0x22
 80045da:	d10d      	bne.n	80045f8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2220      	movs	r2, #32
 80045e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f7ff f80b 	bl	800360e <HAL_I2C_SlaveRxCpltCallback>
}
 80045f8:	bf00      	nop
 80045fa:	3710      	adds	r7, #16
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	08004955 	.word	0x08004955
 8004604:	ffff0000 	.word	0xffff0000

08004608 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004616:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	2b08      	cmp	r3, #8
 8004622:	d002      	beq.n	800462a <I2C_Slave_AF+0x22>
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	2b20      	cmp	r3, #32
 8004628:	d129      	bne.n	800467e <I2C_Slave_AF+0x76>
 800462a:	7bfb      	ldrb	r3, [r7, #15]
 800462c:	2b28      	cmp	r3, #40	; 0x28
 800462e:	d126      	bne.n	800467e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a2e      	ldr	r2, [pc, #184]	; (80046ec <I2C_Slave_AF+0xe4>)
 8004634:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	685a      	ldr	r2, [r3, #4]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004644:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800464e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800465e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2220      	movs	r2, #32
 800466a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f7fe ffdf 	bl	800363a <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800467c:	e031      	b.n	80046e2 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800467e:	7bfb      	ldrb	r3, [r7, #15]
 8004680:	2b21      	cmp	r3, #33	; 0x21
 8004682:	d129      	bne.n	80046d8 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a19      	ldr	r2, [pc, #100]	; (80046ec <I2C_Slave_AF+0xe4>)
 8004688:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2221      	movs	r2, #33	; 0x21
 800468e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2220      	movs	r2, #32
 8004694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	685a      	ldr	r2, [r3, #4]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80046ae:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80046b8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046c8:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f7fe fd76 	bl	80031bc <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f7fe ff93 	bl	80035fc <HAL_I2C_SlaveTxCpltCallback>
}
 80046d6:	e004      	b.n	80046e2 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80046e0:	615a      	str	r2, [r3, #20]
}
 80046e2:	bf00      	nop
 80046e4:	3710      	adds	r7, #16
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	ffff0000 	.word	0xffff0000

080046f0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046fe:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004706:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004708:	7bbb      	ldrb	r3, [r7, #14]
 800470a:	2b10      	cmp	r3, #16
 800470c:	d002      	beq.n	8004714 <I2C_ITError+0x24>
 800470e:	7bbb      	ldrb	r3, [r7, #14]
 8004710:	2b40      	cmp	r3, #64	; 0x40
 8004712:	d10a      	bne.n	800472a <I2C_ITError+0x3a>
 8004714:	7bfb      	ldrb	r3, [r7, #15]
 8004716:	2b22      	cmp	r3, #34	; 0x22
 8004718:	d107      	bne.n	800472a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004728:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800472a:	7bfb      	ldrb	r3, [r7, #15]
 800472c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004730:	2b28      	cmp	r3, #40	; 0x28
 8004732:	d107      	bne.n	8004744 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2228      	movs	r2, #40	; 0x28
 800473e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004742:	e015      	b.n	8004770 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800474e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004752:	d00a      	beq.n	800476a <I2C_ITError+0x7a>
 8004754:	7bfb      	ldrb	r3, [r7, #15]
 8004756:	2b60      	cmp	r3, #96	; 0x60
 8004758:	d007      	beq.n	800476a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2220      	movs	r2, #32
 800475e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800477a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800477e:	d162      	bne.n	8004846 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	685a      	ldr	r2, [r3, #4]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800478e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004794:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004798:	b2db      	uxtb	r3, r3
 800479a:	2b01      	cmp	r3, #1
 800479c:	d020      	beq.n	80047e0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047a2:	4a6a      	ldr	r2, [pc, #424]	; (800494c <I2C_ITError+0x25c>)
 80047a4:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047aa:	4618      	mov	r0, r3
 80047ac:	f7fe f862 	bl	8002874 <HAL_DMA_Abort_IT>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	f000 8089 	beq.w	80048ca <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f022 0201 	bic.w	r2, r2, #1
 80047c6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2220      	movs	r2, #32
 80047cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80047da:	4610      	mov	r0, r2
 80047dc:	4798      	blx	r3
 80047de:	e074      	b.n	80048ca <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e4:	4a59      	ldr	r2, [pc, #356]	; (800494c <I2C_ITError+0x25c>)
 80047e6:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ec:	4618      	mov	r0, r3
 80047ee:	f7fe f841 	bl	8002874 <HAL_DMA_Abort_IT>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d068      	beq.n	80048ca <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	695b      	ldr	r3, [r3, #20]
 80047fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004802:	2b40      	cmp	r3, #64	; 0x40
 8004804:	d10b      	bne.n	800481e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	691a      	ldr	r2, [r3, #16]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004810:	b2d2      	uxtb	r2, r2
 8004812:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004818:	1c5a      	adds	r2, r3, #1
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f022 0201 	bic.w	r2, r2, #1
 800482c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2220      	movs	r2, #32
 8004832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800483a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004840:	4610      	mov	r0, r2
 8004842:	4798      	blx	r3
 8004844:	e041      	b.n	80048ca <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800484c:	b2db      	uxtb	r3, r3
 800484e:	2b60      	cmp	r3, #96	; 0x60
 8004850:	d125      	bne.n	800489e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2220      	movs	r2, #32
 8004856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	695b      	ldr	r3, [r3, #20]
 8004866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800486a:	2b40      	cmp	r3, #64	; 0x40
 800486c:	d10b      	bne.n	8004886 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	691a      	ldr	r2, [r3, #16]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004878:	b2d2      	uxtb	r2, r2
 800487a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004880:	1c5a      	adds	r2, r3, #1
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f022 0201 	bic.w	r2, r2, #1
 8004894:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f7fe fee1 	bl	800365e <HAL_I2C_AbortCpltCallback>
 800489c:	e015      	b.n	80048ca <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	695b      	ldr	r3, [r3, #20]
 80048a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048a8:	2b40      	cmp	r3, #64	; 0x40
 80048aa:	d10b      	bne.n	80048c4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	691a      	ldr	r2, [r3, #16]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b6:	b2d2      	uxtb	r2, r2
 80048b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048be:	1c5a      	adds	r2, r3, #1
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f7fe fec1 	bl	800364c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ce:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	f003 0301 	and.w	r3, r3, #1
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d10e      	bne.n	80048f8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d109      	bne.n	80048f8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d104      	bne.n	80048f8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d007      	beq.n	8004908 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	685a      	ldr	r2, [r3, #4]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004906:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800490e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004914:	f003 0304 	and.w	r3, r3, #4
 8004918:	2b04      	cmp	r3, #4
 800491a:	d113      	bne.n	8004944 <I2C_ITError+0x254>
 800491c:	7bfb      	ldrb	r3, [r7, #15]
 800491e:	2b28      	cmp	r3, #40	; 0x28
 8004920:	d110      	bne.n	8004944 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a0a      	ldr	r2, [pc, #40]	; (8004950 <I2C_ITError+0x260>)
 8004926:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2220      	movs	r2, #32
 8004932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f7fe fe7b 	bl	800363a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004944:	bf00      	nop
 8004946:	3710      	adds	r7, #16
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}
 800494c:	08004955 	.word	0x08004955
 8004950:	ffff0000 	.word	0xffff0000

08004954 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b086      	sub	sp, #24
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800495c:	2300      	movs	r3, #0
 800495e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004964:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800496c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800496e:	4b4b      	ldr	r3, [pc, #300]	; (8004a9c <I2C_DMAAbort+0x148>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	08db      	lsrs	r3, r3, #3
 8004974:	4a4a      	ldr	r2, [pc, #296]	; (8004aa0 <I2C_DMAAbort+0x14c>)
 8004976:	fba2 2303 	umull	r2, r3, r2, r3
 800497a:	0a1a      	lsrs	r2, r3, #8
 800497c:	4613      	mov	r3, r2
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	4413      	add	r3, r2
 8004982:	00da      	lsls	r2, r3, #3
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d106      	bne.n	800499c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004992:	f043 0220 	orr.w	r2, r3, #32
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800499a:	e00a      	b.n	80049b2 <I2C_DMAAbort+0x5e>
    }
    count--;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	3b01      	subs	r3, #1
 80049a0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049b0:	d0ea      	beq.n	8004988 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d003      	beq.n	80049c2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049be:	2200      	movs	r2, #0
 80049c0:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d003      	beq.n	80049d2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ce:	2200      	movs	r2, #0
 80049d0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049e0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	2200      	movs	r2, #0
 80049e6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d003      	beq.n	80049f8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049f4:	2200      	movs	r2, #0
 80049f6:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d003      	beq.n	8004a08 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a04:	2200      	movs	r2, #0
 8004a06:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f022 0201 	bic.w	r2, r2, #1
 8004a16:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	2b60      	cmp	r3, #96	; 0x60
 8004a22:	d10e      	bne.n	8004a42 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	2220      	movs	r2, #32
 8004a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	2200      	movs	r2, #0
 8004a38:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004a3a:	6978      	ldr	r0, [r7, #20]
 8004a3c:	f7fe fe0f 	bl	800365e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004a40:	e027      	b.n	8004a92 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a42:	7cfb      	ldrb	r3, [r7, #19]
 8004a44:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004a48:	2b28      	cmp	r3, #40	; 0x28
 8004a4a:	d117      	bne.n	8004a7c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f042 0201 	orr.w	r2, r2, #1
 8004a5a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a6a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	2228      	movs	r2, #40	; 0x28
 8004a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004a7a:	e007      	b.n	8004a8c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	2220      	movs	r2, #32
 8004a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004a8c:	6978      	ldr	r0, [r7, #20]
 8004a8e:	f7fe fddd 	bl	800364c <HAL_I2C_ErrorCallback>
}
 8004a92:	bf00      	nop
 8004a94:	3718      	adds	r7, #24
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	20000000 	.word	0x20000000
 8004aa0:	14f8b589 	.word	0x14f8b589

08004aa4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b085      	sub	sp, #20
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004aac:	2300      	movs	r3, #0
 8004aae:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004ab0:	4b13      	ldr	r3, [pc, #76]	; (8004b00 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	08db      	lsrs	r3, r3, #3
 8004ab6:	4a13      	ldr	r2, [pc, #76]	; (8004b04 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8004abc:	0a1a      	lsrs	r2, r3, #8
 8004abe:	4613      	mov	r3, r2
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	4413      	add	r3, r2
 8004ac4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d107      	bne.n	8004ae2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad6:	f043 0220 	orr.w	r2, r3, #32
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e008      	b.n	8004af4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004aec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004af0:	d0e9      	beq.n	8004ac6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004af2:	2300      	movs	r3, #0
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3714      	adds	r7, #20
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bc80      	pop	{r7}
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	20000000 	.word	0x20000000
 8004b04:	14f8b589 	.word	0x14f8b589

08004b08 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b14:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004b18:	d103      	bne.n	8004b22 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004b20:	e007      	b.n	8004b32 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b26:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004b2a:	d102      	bne.n	8004b32 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2208      	movs	r2, #8
 8004b30:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004b32:	bf00      	nop
 8004b34:	370c      	adds	r7, #12
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bc80      	pop	{r7}
 8004b3a:	4770      	bx	lr

08004b3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b086      	sub	sp, #24
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d101      	bne.n	8004b4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e272      	b.n	8005034 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0301 	and.w	r3, r3, #1
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	f000 8087 	beq.w	8004c6a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b5c:	4b92      	ldr	r3, [pc, #584]	; (8004da8 <HAL_RCC_OscConfig+0x26c>)
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	f003 030c 	and.w	r3, r3, #12
 8004b64:	2b04      	cmp	r3, #4
 8004b66:	d00c      	beq.n	8004b82 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004b68:	4b8f      	ldr	r3, [pc, #572]	; (8004da8 <HAL_RCC_OscConfig+0x26c>)
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	f003 030c 	and.w	r3, r3, #12
 8004b70:	2b08      	cmp	r3, #8
 8004b72:	d112      	bne.n	8004b9a <HAL_RCC_OscConfig+0x5e>
 8004b74:	4b8c      	ldr	r3, [pc, #560]	; (8004da8 <HAL_RCC_OscConfig+0x26c>)
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b80:	d10b      	bne.n	8004b9a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b82:	4b89      	ldr	r3, [pc, #548]	; (8004da8 <HAL_RCC_OscConfig+0x26c>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d06c      	beq.n	8004c68 <HAL_RCC_OscConfig+0x12c>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d168      	bne.n	8004c68 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e24c      	b.n	8005034 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ba2:	d106      	bne.n	8004bb2 <HAL_RCC_OscConfig+0x76>
 8004ba4:	4b80      	ldr	r3, [pc, #512]	; (8004da8 <HAL_RCC_OscConfig+0x26c>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a7f      	ldr	r2, [pc, #508]	; (8004da8 <HAL_RCC_OscConfig+0x26c>)
 8004baa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bae:	6013      	str	r3, [r2, #0]
 8004bb0:	e02e      	b.n	8004c10 <HAL_RCC_OscConfig+0xd4>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d10c      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x98>
 8004bba:	4b7b      	ldr	r3, [pc, #492]	; (8004da8 <HAL_RCC_OscConfig+0x26c>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a7a      	ldr	r2, [pc, #488]	; (8004da8 <HAL_RCC_OscConfig+0x26c>)
 8004bc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bc4:	6013      	str	r3, [r2, #0]
 8004bc6:	4b78      	ldr	r3, [pc, #480]	; (8004da8 <HAL_RCC_OscConfig+0x26c>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a77      	ldr	r2, [pc, #476]	; (8004da8 <HAL_RCC_OscConfig+0x26c>)
 8004bcc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bd0:	6013      	str	r3, [r2, #0]
 8004bd2:	e01d      	b.n	8004c10 <HAL_RCC_OscConfig+0xd4>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004bdc:	d10c      	bne.n	8004bf8 <HAL_RCC_OscConfig+0xbc>
 8004bde:	4b72      	ldr	r3, [pc, #456]	; (8004da8 <HAL_RCC_OscConfig+0x26c>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a71      	ldr	r2, [pc, #452]	; (8004da8 <HAL_RCC_OscConfig+0x26c>)
 8004be4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004be8:	6013      	str	r3, [r2, #0]
 8004bea:	4b6f      	ldr	r3, [pc, #444]	; (8004da8 <HAL_RCC_OscConfig+0x26c>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a6e      	ldr	r2, [pc, #440]	; (8004da8 <HAL_RCC_OscConfig+0x26c>)
 8004bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bf4:	6013      	str	r3, [r2, #0]
 8004bf6:	e00b      	b.n	8004c10 <HAL_RCC_OscConfig+0xd4>
 8004bf8:	4b6b      	ldr	r3, [pc, #428]	; (8004da8 <HAL_RCC_OscConfig+0x26c>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a6a      	ldr	r2, [pc, #424]	; (8004da8 <HAL_RCC_OscConfig+0x26c>)
 8004bfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c02:	6013      	str	r3, [r2, #0]
 8004c04:	4b68      	ldr	r3, [pc, #416]	; (8004da8 <HAL_RCC_OscConfig+0x26c>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a67      	ldr	r2, [pc, #412]	; (8004da8 <HAL_RCC_OscConfig+0x26c>)
 8004c0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c0e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d013      	beq.n	8004c40 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c18:	f7fc fe68 	bl	80018ec <HAL_GetTick>
 8004c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c1e:	e008      	b.n	8004c32 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c20:	f7fc fe64 	bl	80018ec <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	2b64      	cmp	r3, #100	; 0x64
 8004c2c:	d901      	bls.n	8004c32 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e200      	b.n	8005034 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c32:	4b5d      	ldr	r3, [pc, #372]	; (8004da8 <HAL_RCC_OscConfig+0x26c>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d0f0      	beq.n	8004c20 <HAL_RCC_OscConfig+0xe4>
 8004c3e:	e014      	b.n	8004c6a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c40:	f7fc fe54 	bl	80018ec <HAL_GetTick>
 8004c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c46:	e008      	b.n	8004c5a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c48:	f7fc fe50 	bl	80018ec <HAL_GetTick>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	2b64      	cmp	r3, #100	; 0x64
 8004c54:	d901      	bls.n	8004c5a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e1ec      	b.n	8005034 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c5a:	4b53      	ldr	r3, [pc, #332]	; (8004da8 <HAL_RCC_OscConfig+0x26c>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d1f0      	bne.n	8004c48 <HAL_RCC_OscConfig+0x10c>
 8004c66:	e000      	b.n	8004c6a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0302 	and.w	r3, r3, #2
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d063      	beq.n	8004d3e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c76:	4b4c      	ldr	r3, [pc, #304]	; (8004da8 <HAL_RCC_OscConfig+0x26c>)
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	f003 030c 	and.w	r3, r3, #12
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00b      	beq.n	8004c9a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004c82:	4b49      	ldr	r3, [pc, #292]	; (8004da8 <HAL_RCC_OscConfig+0x26c>)
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	f003 030c 	and.w	r3, r3, #12
 8004c8a:	2b08      	cmp	r3, #8
 8004c8c:	d11c      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x18c>
 8004c8e:	4b46      	ldr	r3, [pc, #280]	; (8004da8 <HAL_RCC_OscConfig+0x26c>)
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d116      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c9a:	4b43      	ldr	r3, [pc, #268]	; (8004da8 <HAL_RCC_OscConfig+0x26c>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0302 	and.w	r3, r3, #2
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d005      	beq.n	8004cb2 <HAL_RCC_OscConfig+0x176>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d001      	beq.n	8004cb2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e1c0      	b.n	8005034 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cb2:	4b3d      	ldr	r3, [pc, #244]	; (8004da8 <HAL_RCC_OscConfig+0x26c>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	695b      	ldr	r3, [r3, #20]
 8004cbe:	00db      	lsls	r3, r3, #3
 8004cc0:	4939      	ldr	r1, [pc, #228]	; (8004da8 <HAL_RCC_OscConfig+0x26c>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cc6:	e03a      	b.n	8004d3e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	691b      	ldr	r3, [r3, #16]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d020      	beq.n	8004d12 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cd0:	4b36      	ldr	r3, [pc, #216]	; (8004dac <HAL_RCC_OscConfig+0x270>)
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cd6:	f7fc fe09 	bl	80018ec <HAL_GetTick>
 8004cda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cdc:	e008      	b.n	8004cf0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cde:	f7fc fe05 	bl	80018ec <HAL_GetTick>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d901      	bls.n	8004cf0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e1a1      	b.n	8005034 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cf0:	4b2d      	ldr	r3, [pc, #180]	; (8004da8 <HAL_RCC_OscConfig+0x26c>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0302 	and.w	r3, r3, #2
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d0f0      	beq.n	8004cde <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cfc:	4b2a      	ldr	r3, [pc, #168]	; (8004da8 <HAL_RCC_OscConfig+0x26c>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	695b      	ldr	r3, [r3, #20]
 8004d08:	00db      	lsls	r3, r3, #3
 8004d0a:	4927      	ldr	r1, [pc, #156]	; (8004da8 <HAL_RCC_OscConfig+0x26c>)
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	600b      	str	r3, [r1, #0]
 8004d10:	e015      	b.n	8004d3e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d12:	4b26      	ldr	r3, [pc, #152]	; (8004dac <HAL_RCC_OscConfig+0x270>)
 8004d14:	2200      	movs	r2, #0
 8004d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d18:	f7fc fde8 	bl	80018ec <HAL_GetTick>
 8004d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d1e:	e008      	b.n	8004d32 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d20:	f7fc fde4 	bl	80018ec <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d901      	bls.n	8004d32 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e180      	b.n	8005034 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d32:	4b1d      	ldr	r3, [pc, #116]	; (8004da8 <HAL_RCC_OscConfig+0x26c>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 0302 	and.w	r3, r3, #2
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1f0      	bne.n	8004d20 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0308 	and.w	r3, r3, #8
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d03a      	beq.n	8004dc0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	699b      	ldr	r3, [r3, #24]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d019      	beq.n	8004d86 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d52:	4b17      	ldr	r3, [pc, #92]	; (8004db0 <HAL_RCC_OscConfig+0x274>)
 8004d54:	2201      	movs	r2, #1
 8004d56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d58:	f7fc fdc8 	bl	80018ec <HAL_GetTick>
 8004d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d5e:	e008      	b.n	8004d72 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d60:	f7fc fdc4 	bl	80018ec <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d901      	bls.n	8004d72 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	e160      	b.n	8005034 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d72:	4b0d      	ldr	r3, [pc, #52]	; (8004da8 <HAL_RCC_OscConfig+0x26c>)
 8004d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d76:	f003 0302 	and.w	r3, r3, #2
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d0f0      	beq.n	8004d60 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004d7e:	2001      	movs	r0, #1
 8004d80:	f000 fafe 	bl	8005380 <RCC_Delay>
 8004d84:	e01c      	b.n	8004dc0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d86:	4b0a      	ldr	r3, [pc, #40]	; (8004db0 <HAL_RCC_OscConfig+0x274>)
 8004d88:	2200      	movs	r2, #0
 8004d8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d8c:	f7fc fdae 	bl	80018ec <HAL_GetTick>
 8004d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d92:	e00f      	b.n	8004db4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d94:	f7fc fdaa 	bl	80018ec <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d908      	bls.n	8004db4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e146      	b.n	8005034 <HAL_RCC_OscConfig+0x4f8>
 8004da6:	bf00      	nop
 8004da8:	40021000 	.word	0x40021000
 8004dac:	42420000 	.word	0x42420000
 8004db0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004db4:	4b92      	ldr	r3, [pc, #584]	; (8005000 <HAL_RCC_OscConfig+0x4c4>)
 8004db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db8:	f003 0302 	and.w	r3, r3, #2
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d1e9      	bne.n	8004d94 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 0304 	and.w	r3, r3, #4
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	f000 80a6 	beq.w	8004f1a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dd2:	4b8b      	ldr	r3, [pc, #556]	; (8005000 <HAL_RCC_OscConfig+0x4c4>)
 8004dd4:	69db      	ldr	r3, [r3, #28]
 8004dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d10d      	bne.n	8004dfa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dde:	4b88      	ldr	r3, [pc, #544]	; (8005000 <HAL_RCC_OscConfig+0x4c4>)
 8004de0:	69db      	ldr	r3, [r3, #28]
 8004de2:	4a87      	ldr	r2, [pc, #540]	; (8005000 <HAL_RCC_OscConfig+0x4c4>)
 8004de4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004de8:	61d3      	str	r3, [r2, #28]
 8004dea:	4b85      	ldr	r3, [pc, #532]	; (8005000 <HAL_RCC_OscConfig+0x4c4>)
 8004dec:	69db      	ldr	r3, [r3, #28]
 8004dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004df2:	60bb      	str	r3, [r7, #8]
 8004df4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004df6:	2301      	movs	r3, #1
 8004df8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dfa:	4b82      	ldr	r3, [pc, #520]	; (8005004 <HAL_RCC_OscConfig+0x4c8>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d118      	bne.n	8004e38 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e06:	4b7f      	ldr	r3, [pc, #508]	; (8005004 <HAL_RCC_OscConfig+0x4c8>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a7e      	ldr	r2, [pc, #504]	; (8005004 <HAL_RCC_OscConfig+0x4c8>)
 8004e0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e12:	f7fc fd6b 	bl	80018ec <HAL_GetTick>
 8004e16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e18:	e008      	b.n	8004e2c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e1a:	f7fc fd67 	bl	80018ec <HAL_GetTick>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	2b64      	cmp	r3, #100	; 0x64
 8004e26:	d901      	bls.n	8004e2c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e103      	b.n	8005034 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e2c:	4b75      	ldr	r3, [pc, #468]	; (8005004 <HAL_RCC_OscConfig+0x4c8>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d0f0      	beq.n	8004e1a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d106      	bne.n	8004e4e <HAL_RCC_OscConfig+0x312>
 8004e40:	4b6f      	ldr	r3, [pc, #444]	; (8005000 <HAL_RCC_OscConfig+0x4c4>)
 8004e42:	6a1b      	ldr	r3, [r3, #32]
 8004e44:	4a6e      	ldr	r2, [pc, #440]	; (8005000 <HAL_RCC_OscConfig+0x4c4>)
 8004e46:	f043 0301 	orr.w	r3, r3, #1
 8004e4a:	6213      	str	r3, [r2, #32]
 8004e4c:	e02d      	b.n	8004eaa <HAL_RCC_OscConfig+0x36e>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d10c      	bne.n	8004e70 <HAL_RCC_OscConfig+0x334>
 8004e56:	4b6a      	ldr	r3, [pc, #424]	; (8005000 <HAL_RCC_OscConfig+0x4c4>)
 8004e58:	6a1b      	ldr	r3, [r3, #32]
 8004e5a:	4a69      	ldr	r2, [pc, #420]	; (8005000 <HAL_RCC_OscConfig+0x4c4>)
 8004e5c:	f023 0301 	bic.w	r3, r3, #1
 8004e60:	6213      	str	r3, [r2, #32]
 8004e62:	4b67      	ldr	r3, [pc, #412]	; (8005000 <HAL_RCC_OscConfig+0x4c4>)
 8004e64:	6a1b      	ldr	r3, [r3, #32]
 8004e66:	4a66      	ldr	r2, [pc, #408]	; (8005000 <HAL_RCC_OscConfig+0x4c4>)
 8004e68:	f023 0304 	bic.w	r3, r3, #4
 8004e6c:	6213      	str	r3, [r2, #32]
 8004e6e:	e01c      	b.n	8004eaa <HAL_RCC_OscConfig+0x36e>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	2b05      	cmp	r3, #5
 8004e76:	d10c      	bne.n	8004e92 <HAL_RCC_OscConfig+0x356>
 8004e78:	4b61      	ldr	r3, [pc, #388]	; (8005000 <HAL_RCC_OscConfig+0x4c4>)
 8004e7a:	6a1b      	ldr	r3, [r3, #32]
 8004e7c:	4a60      	ldr	r2, [pc, #384]	; (8005000 <HAL_RCC_OscConfig+0x4c4>)
 8004e7e:	f043 0304 	orr.w	r3, r3, #4
 8004e82:	6213      	str	r3, [r2, #32]
 8004e84:	4b5e      	ldr	r3, [pc, #376]	; (8005000 <HAL_RCC_OscConfig+0x4c4>)
 8004e86:	6a1b      	ldr	r3, [r3, #32]
 8004e88:	4a5d      	ldr	r2, [pc, #372]	; (8005000 <HAL_RCC_OscConfig+0x4c4>)
 8004e8a:	f043 0301 	orr.w	r3, r3, #1
 8004e8e:	6213      	str	r3, [r2, #32]
 8004e90:	e00b      	b.n	8004eaa <HAL_RCC_OscConfig+0x36e>
 8004e92:	4b5b      	ldr	r3, [pc, #364]	; (8005000 <HAL_RCC_OscConfig+0x4c4>)
 8004e94:	6a1b      	ldr	r3, [r3, #32]
 8004e96:	4a5a      	ldr	r2, [pc, #360]	; (8005000 <HAL_RCC_OscConfig+0x4c4>)
 8004e98:	f023 0301 	bic.w	r3, r3, #1
 8004e9c:	6213      	str	r3, [r2, #32]
 8004e9e:	4b58      	ldr	r3, [pc, #352]	; (8005000 <HAL_RCC_OscConfig+0x4c4>)
 8004ea0:	6a1b      	ldr	r3, [r3, #32]
 8004ea2:	4a57      	ldr	r2, [pc, #348]	; (8005000 <HAL_RCC_OscConfig+0x4c4>)
 8004ea4:	f023 0304 	bic.w	r3, r3, #4
 8004ea8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d015      	beq.n	8004ede <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004eb2:	f7fc fd1b 	bl	80018ec <HAL_GetTick>
 8004eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eb8:	e00a      	b.n	8004ed0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eba:	f7fc fd17 	bl	80018ec <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d901      	bls.n	8004ed0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e0b1      	b.n	8005034 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ed0:	4b4b      	ldr	r3, [pc, #300]	; (8005000 <HAL_RCC_OscConfig+0x4c4>)
 8004ed2:	6a1b      	ldr	r3, [r3, #32]
 8004ed4:	f003 0302 	and.w	r3, r3, #2
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d0ee      	beq.n	8004eba <HAL_RCC_OscConfig+0x37e>
 8004edc:	e014      	b.n	8004f08 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ede:	f7fc fd05 	bl	80018ec <HAL_GetTick>
 8004ee2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ee4:	e00a      	b.n	8004efc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ee6:	f7fc fd01 	bl	80018ec <HAL_GetTick>
 8004eea:	4602      	mov	r2, r0
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d901      	bls.n	8004efc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	e09b      	b.n	8005034 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004efc:	4b40      	ldr	r3, [pc, #256]	; (8005000 <HAL_RCC_OscConfig+0x4c4>)
 8004efe:	6a1b      	ldr	r3, [r3, #32]
 8004f00:	f003 0302 	and.w	r3, r3, #2
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d1ee      	bne.n	8004ee6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004f08:	7dfb      	ldrb	r3, [r7, #23]
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d105      	bne.n	8004f1a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f0e:	4b3c      	ldr	r3, [pc, #240]	; (8005000 <HAL_RCC_OscConfig+0x4c4>)
 8004f10:	69db      	ldr	r3, [r3, #28]
 8004f12:	4a3b      	ldr	r2, [pc, #236]	; (8005000 <HAL_RCC_OscConfig+0x4c4>)
 8004f14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f18:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	69db      	ldr	r3, [r3, #28]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	f000 8087 	beq.w	8005032 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f24:	4b36      	ldr	r3, [pc, #216]	; (8005000 <HAL_RCC_OscConfig+0x4c4>)
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	f003 030c 	and.w	r3, r3, #12
 8004f2c:	2b08      	cmp	r3, #8
 8004f2e:	d061      	beq.n	8004ff4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	69db      	ldr	r3, [r3, #28]
 8004f34:	2b02      	cmp	r3, #2
 8004f36:	d146      	bne.n	8004fc6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f38:	4b33      	ldr	r3, [pc, #204]	; (8005008 <HAL_RCC_OscConfig+0x4cc>)
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f3e:	f7fc fcd5 	bl	80018ec <HAL_GetTick>
 8004f42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f44:	e008      	b.n	8004f58 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f46:	f7fc fcd1 	bl	80018ec <HAL_GetTick>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	2b02      	cmp	r3, #2
 8004f52:	d901      	bls.n	8004f58 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	e06d      	b.n	8005034 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f58:	4b29      	ldr	r3, [pc, #164]	; (8005000 <HAL_RCC_OscConfig+0x4c4>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d1f0      	bne.n	8004f46 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a1b      	ldr	r3, [r3, #32]
 8004f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f6c:	d108      	bne.n	8004f80 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004f6e:	4b24      	ldr	r3, [pc, #144]	; (8005000 <HAL_RCC_OscConfig+0x4c4>)
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	4921      	ldr	r1, [pc, #132]	; (8005000 <HAL_RCC_OscConfig+0x4c4>)
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f80:	4b1f      	ldr	r3, [pc, #124]	; (8005000 <HAL_RCC_OscConfig+0x4c4>)
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a19      	ldr	r1, [r3, #32]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f90:	430b      	orrs	r3, r1
 8004f92:	491b      	ldr	r1, [pc, #108]	; (8005000 <HAL_RCC_OscConfig+0x4c4>)
 8004f94:	4313      	orrs	r3, r2
 8004f96:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f98:	4b1b      	ldr	r3, [pc, #108]	; (8005008 <HAL_RCC_OscConfig+0x4cc>)
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f9e:	f7fc fca5 	bl	80018ec <HAL_GetTick>
 8004fa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004fa4:	e008      	b.n	8004fb8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fa6:	f7fc fca1 	bl	80018ec <HAL_GetTick>
 8004faa:	4602      	mov	r2, r0
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d901      	bls.n	8004fb8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	e03d      	b.n	8005034 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004fb8:	4b11      	ldr	r3, [pc, #68]	; (8005000 <HAL_RCC_OscConfig+0x4c4>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d0f0      	beq.n	8004fa6 <HAL_RCC_OscConfig+0x46a>
 8004fc4:	e035      	b.n	8005032 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fc6:	4b10      	ldr	r3, [pc, #64]	; (8005008 <HAL_RCC_OscConfig+0x4cc>)
 8004fc8:	2200      	movs	r2, #0
 8004fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fcc:	f7fc fc8e 	bl	80018ec <HAL_GetTick>
 8004fd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fd2:	e008      	b.n	8004fe6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fd4:	f7fc fc8a 	bl	80018ec <HAL_GetTick>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	d901      	bls.n	8004fe6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e026      	b.n	8005034 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fe6:	4b06      	ldr	r3, [pc, #24]	; (8005000 <HAL_RCC_OscConfig+0x4c4>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1f0      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x498>
 8004ff2:	e01e      	b.n	8005032 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	69db      	ldr	r3, [r3, #28]
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d107      	bne.n	800500c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e019      	b.n	8005034 <HAL_RCC_OscConfig+0x4f8>
 8005000:	40021000 	.word	0x40021000
 8005004:	40007000 	.word	0x40007000
 8005008:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800500c:	4b0b      	ldr	r3, [pc, #44]	; (800503c <HAL_RCC_OscConfig+0x500>)
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a1b      	ldr	r3, [r3, #32]
 800501c:	429a      	cmp	r2, r3
 800501e:	d106      	bne.n	800502e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800502a:	429a      	cmp	r2, r3
 800502c:	d001      	beq.n	8005032 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e000      	b.n	8005034 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005032:	2300      	movs	r3, #0
}
 8005034:	4618      	mov	r0, r3
 8005036:	3718      	adds	r7, #24
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}
 800503c:	40021000 	.word	0x40021000

08005040 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d101      	bne.n	8005054 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e0d0      	b.n	80051f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005054:	4b6a      	ldr	r3, [pc, #424]	; (8005200 <HAL_RCC_ClockConfig+0x1c0>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0307 	and.w	r3, r3, #7
 800505c:	683a      	ldr	r2, [r7, #0]
 800505e:	429a      	cmp	r2, r3
 8005060:	d910      	bls.n	8005084 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005062:	4b67      	ldr	r3, [pc, #412]	; (8005200 <HAL_RCC_ClockConfig+0x1c0>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f023 0207 	bic.w	r2, r3, #7
 800506a:	4965      	ldr	r1, [pc, #404]	; (8005200 <HAL_RCC_ClockConfig+0x1c0>)
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	4313      	orrs	r3, r2
 8005070:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005072:	4b63      	ldr	r3, [pc, #396]	; (8005200 <HAL_RCC_ClockConfig+0x1c0>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0307 	and.w	r3, r3, #7
 800507a:	683a      	ldr	r2, [r7, #0]
 800507c:	429a      	cmp	r2, r3
 800507e:	d001      	beq.n	8005084 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e0b8      	b.n	80051f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0302 	and.w	r3, r3, #2
 800508c:	2b00      	cmp	r3, #0
 800508e:	d020      	beq.n	80050d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 0304 	and.w	r3, r3, #4
 8005098:	2b00      	cmp	r3, #0
 800509a:	d005      	beq.n	80050a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800509c:	4b59      	ldr	r3, [pc, #356]	; (8005204 <HAL_RCC_ClockConfig+0x1c4>)
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	4a58      	ldr	r2, [pc, #352]	; (8005204 <HAL_RCC_ClockConfig+0x1c4>)
 80050a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80050a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 0308 	and.w	r3, r3, #8
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d005      	beq.n	80050c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050b4:	4b53      	ldr	r3, [pc, #332]	; (8005204 <HAL_RCC_ClockConfig+0x1c4>)
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	4a52      	ldr	r2, [pc, #328]	; (8005204 <HAL_RCC_ClockConfig+0x1c4>)
 80050ba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80050be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050c0:	4b50      	ldr	r3, [pc, #320]	; (8005204 <HAL_RCC_ClockConfig+0x1c4>)
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	494d      	ldr	r1, [pc, #308]	; (8005204 <HAL_RCC_ClockConfig+0x1c4>)
 80050ce:	4313      	orrs	r3, r2
 80050d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 0301 	and.w	r3, r3, #1
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d040      	beq.n	8005160 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d107      	bne.n	80050f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050e6:	4b47      	ldr	r3, [pc, #284]	; (8005204 <HAL_RCC_ClockConfig+0x1c4>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d115      	bne.n	800511e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e07f      	b.n	80051f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	2b02      	cmp	r3, #2
 80050fc:	d107      	bne.n	800510e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050fe:	4b41      	ldr	r3, [pc, #260]	; (8005204 <HAL_RCC_ClockConfig+0x1c4>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d109      	bne.n	800511e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e073      	b.n	80051f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800510e:	4b3d      	ldr	r3, [pc, #244]	; (8005204 <HAL_RCC_ClockConfig+0x1c4>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 0302 	and.w	r3, r3, #2
 8005116:	2b00      	cmp	r3, #0
 8005118:	d101      	bne.n	800511e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e06b      	b.n	80051f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800511e:	4b39      	ldr	r3, [pc, #228]	; (8005204 <HAL_RCC_ClockConfig+0x1c4>)
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	f023 0203 	bic.w	r2, r3, #3
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	4936      	ldr	r1, [pc, #216]	; (8005204 <HAL_RCC_ClockConfig+0x1c4>)
 800512c:	4313      	orrs	r3, r2
 800512e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005130:	f7fc fbdc 	bl	80018ec <HAL_GetTick>
 8005134:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005136:	e00a      	b.n	800514e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005138:	f7fc fbd8 	bl	80018ec <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	f241 3288 	movw	r2, #5000	; 0x1388
 8005146:	4293      	cmp	r3, r2
 8005148:	d901      	bls.n	800514e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e053      	b.n	80051f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800514e:	4b2d      	ldr	r3, [pc, #180]	; (8005204 <HAL_RCC_ClockConfig+0x1c4>)
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	f003 020c 	and.w	r2, r3, #12
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	429a      	cmp	r2, r3
 800515e:	d1eb      	bne.n	8005138 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005160:	4b27      	ldr	r3, [pc, #156]	; (8005200 <HAL_RCC_ClockConfig+0x1c0>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 0307 	and.w	r3, r3, #7
 8005168:	683a      	ldr	r2, [r7, #0]
 800516a:	429a      	cmp	r2, r3
 800516c:	d210      	bcs.n	8005190 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800516e:	4b24      	ldr	r3, [pc, #144]	; (8005200 <HAL_RCC_ClockConfig+0x1c0>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f023 0207 	bic.w	r2, r3, #7
 8005176:	4922      	ldr	r1, [pc, #136]	; (8005200 <HAL_RCC_ClockConfig+0x1c0>)
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	4313      	orrs	r3, r2
 800517c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800517e:	4b20      	ldr	r3, [pc, #128]	; (8005200 <HAL_RCC_ClockConfig+0x1c0>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 0307 	and.w	r3, r3, #7
 8005186:	683a      	ldr	r2, [r7, #0]
 8005188:	429a      	cmp	r2, r3
 800518a:	d001      	beq.n	8005190 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e032      	b.n	80051f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0304 	and.w	r3, r3, #4
 8005198:	2b00      	cmp	r3, #0
 800519a:	d008      	beq.n	80051ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800519c:	4b19      	ldr	r3, [pc, #100]	; (8005204 <HAL_RCC_ClockConfig+0x1c4>)
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	4916      	ldr	r1, [pc, #88]	; (8005204 <HAL_RCC_ClockConfig+0x1c4>)
 80051aa:	4313      	orrs	r3, r2
 80051ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 0308 	and.w	r3, r3, #8
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d009      	beq.n	80051ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80051ba:	4b12      	ldr	r3, [pc, #72]	; (8005204 <HAL_RCC_ClockConfig+0x1c4>)
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	00db      	lsls	r3, r3, #3
 80051c8:	490e      	ldr	r1, [pc, #56]	; (8005204 <HAL_RCC_ClockConfig+0x1c4>)
 80051ca:	4313      	orrs	r3, r2
 80051cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80051ce:	f000 f821 	bl	8005214 <HAL_RCC_GetSysClockFreq>
 80051d2:	4602      	mov	r2, r0
 80051d4:	4b0b      	ldr	r3, [pc, #44]	; (8005204 <HAL_RCC_ClockConfig+0x1c4>)
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	091b      	lsrs	r3, r3, #4
 80051da:	f003 030f 	and.w	r3, r3, #15
 80051de:	490a      	ldr	r1, [pc, #40]	; (8005208 <HAL_RCC_ClockConfig+0x1c8>)
 80051e0:	5ccb      	ldrb	r3, [r1, r3]
 80051e2:	fa22 f303 	lsr.w	r3, r2, r3
 80051e6:	4a09      	ldr	r2, [pc, #36]	; (800520c <HAL_RCC_ClockConfig+0x1cc>)
 80051e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80051ea:	4b09      	ldr	r3, [pc, #36]	; (8005210 <HAL_RCC_ClockConfig+0x1d0>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4618      	mov	r0, r3
 80051f0:	f7fc f9e6 	bl	80015c0 <HAL_InitTick>

  return HAL_OK;
 80051f4:	2300      	movs	r3, #0
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3710      	adds	r7, #16
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop
 8005200:	40022000 	.word	0x40022000
 8005204:	40021000 	.word	0x40021000
 8005208:	0800c1a0 	.word	0x0800c1a0
 800520c:	20000000 	.word	0x20000000
 8005210:	20000004 	.word	0x20000004

08005214 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005214:	b480      	push	{r7}
 8005216:	b087      	sub	sp, #28
 8005218:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800521a:	2300      	movs	r3, #0
 800521c:	60fb      	str	r3, [r7, #12]
 800521e:	2300      	movs	r3, #0
 8005220:	60bb      	str	r3, [r7, #8]
 8005222:	2300      	movs	r3, #0
 8005224:	617b      	str	r3, [r7, #20]
 8005226:	2300      	movs	r3, #0
 8005228:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800522a:	2300      	movs	r3, #0
 800522c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800522e:	4b1e      	ldr	r3, [pc, #120]	; (80052a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f003 030c 	and.w	r3, r3, #12
 800523a:	2b04      	cmp	r3, #4
 800523c:	d002      	beq.n	8005244 <HAL_RCC_GetSysClockFreq+0x30>
 800523e:	2b08      	cmp	r3, #8
 8005240:	d003      	beq.n	800524a <HAL_RCC_GetSysClockFreq+0x36>
 8005242:	e027      	b.n	8005294 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005244:	4b19      	ldr	r3, [pc, #100]	; (80052ac <HAL_RCC_GetSysClockFreq+0x98>)
 8005246:	613b      	str	r3, [r7, #16]
      break;
 8005248:	e027      	b.n	800529a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	0c9b      	lsrs	r3, r3, #18
 800524e:	f003 030f 	and.w	r3, r3, #15
 8005252:	4a17      	ldr	r2, [pc, #92]	; (80052b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005254:	5cd3      	ldrb	r3, [r2, r3]
 8005256:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800525e:	2b00      	cmp	r3, #0
 8005260:	d010      	beq.n	8005284 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005262:	4b11      	ldr	r3, [pc, #68]	; (80052a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	0c5b      	lsrs	r3, r3, #17
 8005268:	f003 0301 	and.w	r3, r3, #1
 800526c:	4a11      	ldr	r2, [pc, #68]	; (80052b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800526e:	5cd3      	ldrb	r3, [r2, r3]
 8005270:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a0d      	ldr	r2, [pc, #52]	; (80052ac <HAL_RCC_GetSysClockFreq+0x98>)
 8005276:	fb03 f202 	mul.w	r2, r3, r2
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005280:	617b      	str	r3, [r7, #20]
 8005282:	e004      	b.n	800528e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4a0c      	ldr	r2, [pc, #48]	; (80052b8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005288:	fb02 f303 	mul.w	r3, r2, r3
 800528c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	613b      	str	r3, [r7, #16]
      break;
 8005292:	e002      	b.n	800529a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005294:	4b05      	ldr	r3, [pc, #20]	; (80052ac <HAL_RCC_GetSysClockFreq+0x98>)
 8005296:	613b      	str	r3, [r7, #16]
      break;
 8005298:	bf00      	nop
    }
  }
  return sysclockfreq;
 800529a:	693b      	ldr	r3, [r7, #16]
}
 800529c:	4618      	mov	r0, r3
 800529e:	371c      	adds	r7, #28
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bc80      	pop	{r7}
 80052a4:	4770      	bx	lr
 80052a6:	bf00      	nop
 80052a8:	40021000 	.word	0x40021000
 80052ac:	007a1200 	.word	0x007a1200
 80052b0:	0800c1b8 	.word	0x0800c1b8
 80052b4:	0800c1c8 	.word	0x0800c1c8
 80052b8:	003d0900 	.word	0x003d0900

080052bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052bc:	b480      	push	{r7}
 80052be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052c0:	4b02      	ldr	r3, [pc, #8]	; (80052cc <HAL_RCC_GetHCLKFreq+0x10>)
 80052c2:	681b      	ldr	r3, [r3, #0]
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bc80      	pop	{r7}
 80052ca:	4770      	bx	lr
 80052cc:	20000000 	.word	0x20000000

080052d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80052d4:	f7ff fff2 	bl	80052bc <HAL_RCC_GetHCLKFreq>
 80052d8:	4602      	mov	r2, r0
 80052da:	4b05      	ldr	r3, [pc, #20]	; (80052f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	0a1b      	lsrs	r3, r3, #8
 80052e0:	f003 0307 	and.w	r3, r3, #7
 80052e4:	4903      	ldr	r1, [pc, #12]	; (80052f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052e6:	5ccb      	ldrb	r3, [r1, r3]
 80052e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	40021000 	.word	0x40021000
 80052f4:	0800c1b0 	.word	0x0800c1b0

080052f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80052fc:	f7ff ffde 	bl	80052bc <HAL_RCC_GetHCLKFreq>
 8005300:	4602      	mov	r2, r0
 8005302:	4b05      	ldr	r3, [pc, #20]	; (8005318 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	0adb      	lsrs	r3, r3, #11
 8005308:	f003 0307 	and.w	r3, r3, #7
 800530c:	4903      	ldr	r1, [pc, #12]	; (800531c <HAL_RCC_GetPCLK2Freq+0x24>)
 800530e:	5ccb      	ldrb	r3, [r1, r3]
 8005310:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005314:	4618      	mov	r0, r3
 8005316:	bd80      	pop	{r7, pc}
 8005318:	40021000 	.word	0x40021000
 800531c:	0800c1b0 	.word	0x0800c1b0

08005320 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	220f      	movs	r2, #15
 800532e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005330:	4b11      	ldr	r3, [pc, #68]	; (8005378 <HAL_RCC_GetClockConfig+0x58>)
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	f003 0203 	and.w	r2, r3, #3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800533c:	4b0e      	ldr	r3, [pc, #56]	; (8005378 <HAL_RCC_GetClockConfig+0x58>)
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005348:	4b0b      	ldr	r3, [pc, #44]	; (8005378 <HAL_RCC_GetClockConfig+0x58>)
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005354:	4b08      	ldr	r3, [pc, #32]	; (8005378 <HAL_RCC_GetClockConfig+0x58>)
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	08db      	lsrs	r3, r3, #3
 800535a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005362:	4b06      	ldr	r3, [pc, #24]	; (800537c <HAL_RCC_GetClockConfig+0x5c>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 0207 	and.w	r2, r3, #7
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800536e:	bf00      	nop
 8005370:	370c      	adds	r7, #12
 8005372:	46bd      	mov	sp, r7
 8005374:	bc80      	pop	{r7}
 8005376:	4770      	bx	lr
 8005378:	40021000 	.word	0x40021000
 800537c:	40022000 	.word	0x40022000

08005380 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005380:	b480      	push	{r7}
 8005382:	b085      	sub	sp, #20
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005388:	4b0a      	ldr	r3, [pc, #40]	; (80053b4 <RCC_Delay+0x34>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a0a      	ldr	r2, [pc, #40]	; (80053b8 <RCC_Delay+0x38>)
 800538e:	fba2 2303 	umull	r2, r3, r2, r3
 8005392:	0a5b      	lsrs	r3, r3, #9
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	fb02 f303 	mul.w	r3, r2, r3
 800539a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800539c:	bf00      	nop
  }
  while (Delay --);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	1e5a      	subs	r2, r3, #1
 80053a2:	60fa      	str	r2, [r7, #12]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d1f9      	bne.n	800539c <RCC_Delay+0x1c>
}
 80053a8:	bf00      	nop
 80053aa:	bf00      	nop
 80053ac:	3714      	adds	r7, #20
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bc80      	pop	{r7}
 80053b2:	4770      	bx	lr
 80053b4:	20000000 	.word	0x20000000
 80053b8:	10624dd3 	.word	0x10624dd3

080053bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b082      	sub	sp, #8
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d101      	bne.n	80053ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e041      	b.n	8005452 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d106      	bne.n	80053e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 f839 	bl	800545a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2202      	movs	r2, #2
 80053ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	3304      	adds	r3, #4
 80053f8:	4619      	mov	r1, r3
 80053fa:	4610      	mov	r0, r2
 80053fc:	f000 f9b4 	bl	8005768 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	3708      	adds	r7, #8
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}

0800545a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800545a:	b480      	push	{r7}
 800545c:	b083      	sub	sp, #12
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005462:	bf00      	nop
 8005464:	370c      	adds	r7, #12
 8005466:	46bd      	mov	sp, r7
 8005468:	bc80      	pop	{r7}
 800546a:	4770      	bx	lr

0800546c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800546c:	b480      	push	{r7}
 800546e:	b085      	sub	sp, #20
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800547a:	b2db      	uxtb	r3, r3
 800547c:	2b01      	cmp	r3, #1
 800547e:	d001      	beq.n	8005484 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e03a      	b.n	80054fa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2202      	movs	r2, #2
 8005488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	68da      	ldr	r2, [r3, #12]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f042 0201 	orr.w	r2, r2, #1
 800549a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a18      	ldr	r2, [pc, #96]	; (8005504 <HAL_TIM_Base_Start_IT+0x98>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d00e      	beq.n	80054c4 <HAL_TIM_Base_Start_IT+0x58>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054ae:	d009      	beq.n	80054c4 <HAL_TIM_Base_Start_IT+0x58>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a14      	ldr	r2, [pc, #80]	; (8005508 <HAL_TIM_Base_Start_IT+0x9c>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d004      	beq.n	80054c4 <HAL_TIM_Base_Start_IT+0x58>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a13      	ldr	r2, [pc, #76]	; (800550c <HAL_TIM_Base_Start_IT+0xa0>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d111      	bne.n	80054e8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	f003 0307 	and.w	r3, r3, #7
 80054ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2b06      	cmp	r3, #6
 80054d4:	d010      	beq.n	80054f8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f042 0201 	orr.w	r2, r2, #1
 80054e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054e6:	e007      	b.n	80054f8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f042 0201 	orr.w	r2, r2, #1
 80054f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3714      	adds	r7, #20
 80054fe:	46bd      	mov	sp, r7
 8005500:	bc80      	pop	{r7}
 8005502:	4770      	bx	lr
 8005504:	40012c00 	.word	0x40012c00
 8005508:	40000400 	.word	0x40000400
 800550c:	40000800 	.word	0x40000800

08005510 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b082      	sub	sp, #8
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	f003 0302 	and.w	r3, r3, #2
 8005522:	2b02      	cmp	r3, #2
 8005524:	d122      	bne.n	800556c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	f003 0302 	and.w	r3, r3, #2
 8005530:	2b02      	cmp	r3, #2
 8005532:	d11b      	bne.n	800556c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f06f 0202 	mvn.w	r2, #2
 800553c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2201      	movs	r2, #1
 8005542:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	699b      	ldr	r3, [r3, #24]
 800554a:	f003 0303 	and.w	r3, r3, #3
 800554e:	2b00      	cmp	r3, #0
 8005550:	d003      	beq.n	800555a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 f8ed 	bl	8005732 <HAL_TIM_IC_CaptureCallback>
 8005558:	e005      	b.n	8005566 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 f8e0 	bl	8005720 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f000 f8ef 	bl	8005744 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	691b      	ldr	r3, [r3, #16]
 8005572:	f003 0304 	and.w	r3, r3, #4
 8005576:	2b04      	cmp	r3, #4
 8005578:	d122      	bne.n	80055c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	f003 0304 	and.w	r3, r3, #4
 8005584:	2b04      	cmp	r3, #4
 8005586:	d11b      	bne.n	80055c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f06f 0204 	mvn.w	r2, #4
 8005590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2202      	movs	r2, #2
 8005596:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	699b      	ldr	r3, [r3, #24]
 800559e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d003      	beq.n	80055ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 f8c3 	bl	8005732 <HAL_TIM_IC_CaptureCallback>
 80055ac:	e005      	b.n	80055ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 f8b6 	bl	8005720 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f000 f8c5 	bl	8005744 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	f003 0308 	and.w	r3, r3, #8
 80055ca:	2b08      	cmp	r3, #8
 80055cc:	d122      	bne.n	8005614 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	f003 0308 	and.w	r3, r3, #8
 80055d8:	2b08      	cmp	r3, #8
 80055da:	d11b      	bne.n	8005614 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f06f 0208 	mvn.w	r2, #8
 80055e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2204      	movs	r2, #4
 80055ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	69db      	ldr	r3, [r3, #28]
 80055f2:	f003 0303 	and.w	r3, r3, #3
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d003      	beq.n	8005602 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f000 f899 	bl	8005732 <HAL_TIM_IC_CaptureCallback>
 8005600:	e005      	b.n	800560e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 f88c 	bl	8005720 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f000 f89b 	bl	8005744 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	f003 0310 	and.w	r3, r3, #16
 800561e:	2b10      	cmp	r3, #16
 8005620:	d122      	bne.n	8005668 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	f003 0310 	and.w	r3, r3, #16
 800562c:	2b10      	cmp	r3, #16
 800562e:	d11b      	bne.n	8005668 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f06f 0210 	mvn.w	r2, #16
 8005638:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2208      	movs	r2, #8
 800563e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	69db      	ldr	r3, [r3, #28]
 8005646:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800564a:	2b00      	cmp	r3, #0
 800564c:	d003      	beq.n	8005656 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 f86f 	bl	8005732 <HAL_TIM_IC_CaptureCallback>
 8005654:	e005      	b.n	8005662 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 f862 	bl	8005720 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f000 f871 	bl	8005744 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	f003 0301 	and.w	r3, r3, #1
 8005672:	2b01      	cmp	r3, #1
 8005674:	d10e      	bne.n	8005694 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	f003 0301 	and.w	r3, r3, #1
 8005680:	2b01      	cmp	r3, #1
 8005682:	d107      	bne.n	8005694 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f06f 0201 	mvn.w	r2, #1
 800568c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f7fb fd56 	bl	8001140 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800569e:	2b80      	cmp	r3, #128	; 0x80
 80056a0:	d10e      	bne.n	80056c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ac:	2b80      	cmp	r3, #128	; 0x80
 80056ae:	d107      	bne.n	80056c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80056b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 f8bf 	bl	800583e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ca:	2b40      	cmp	r3, #64	; 0x40
 80056cc:	d10e      	bne.n	80056ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056d8:	2b40      	cmp	r3, #64	; 0x40
 80056da:	d107      	bne.n	80056ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80056e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f000 f835 	bl	8005756 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	f003 0320 	and.w	r3, r3, #32
 80056f6:	2b20      	cmp	r3, #32
 80056f8:	d10e      	bne.n	8005718 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	f003 0320 	and.w	r3, r3, #32
 8005704:	2b20      	cmp	r3, #32
 8005706:	d107      	bne.n	8005718 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f06f 0220 	mvn.w	r2, #32
 8005710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 f88a 	bl	800582c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005718:	bf00      	nop
 800571a:	3708      	adds	r7, #8
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}

08005720 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005728:	bf00      	nop
 800572a:	370c      	adds	r7, #12
 800572c:	46bd      	mov	sp, r7
 800572e:	bc80      	pop	{r7}
 8005730:	4770      	bx	lr

08005732 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005732:	b480      	push	{r7}
 8005734:	b083      	sub	sp, #12
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800573a:	bf00      	nop
 800573c:	370c      	adds	r7, #12
 800573e:	46bd      	mov	sp, r7
 8005740:	bc80      	pop	{r7}
 8005742:	4770      	bx	lr

08005744 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800574c:	bf00      	nop
 800574e:	370c      	adds	r7, #12
 8005750:	46bd      	mov	sp, r7
 8005752:	bc80      	pop	{r7}
 8005754:	4770      	bx	lr

08005756 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005756:	b480      	push	{r7}
 8005758:	b083      	sub	sp, #12
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800575e:	bf00      	nop
 8005760:	370c      	adds	r7, #12
 8005762:	46bd      	mov	sp, r7
 8005764:	bc80      	pop	{r7}
 8005766:	4770      	bx	lr

08005768 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005768:	b480      	push	{r7}
 800576a:	b085      	sub	sp, #20
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	4a29      	ldr	r2, [pc, #164]	; (8005820 <TIM_Base_SetConfig+0xb8>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d00b      	beq.n	8005798 <TIM_Base_SetConfig+0x30>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005786:	d007      	beq.n	8005798 <TIM_Base_SetConfig+0x30>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	4a26      	ldr	r2, [pc, #152]	; (8005824 <TIM_Base_SetConfig+0xbc>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d003      	beq.n	8005798 <TIM_Base_SetConfig+0x30>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4a25      	ldr	r2, [pc, #148]	; (8005828 <TIM_Base_SetConfig+0xc0>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d108      	bne.n	80057aa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800579e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	68fa      	ldr	r2, [r7, #12]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4a1c      	ldr	r2, [pc, #112]	; (8005820 <TIM_Base_SetConfig+0xb8>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d00b      	beq.n	80057ca <TIM_Base_SetConfig+0x62>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057b8:	d007      	beq.n	80057ca <TIM_Base_SetConfig+0x62>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a19      	ldr	r2, [pc, #100]	; (8005824 <TIM_Base_SetConfig+0xbc>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d003      	beq.n	80057ca <TIM_Base_SetConfig+0x62>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a18      	ldr	r2, [pc, #96]	; (8005828 <TIM_Base_SetConfig+0xc0>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d108      	bne.n	80057dc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	68fa      	ldr	r2, [r7, #12]
 80057d8:	4313      	orrs	r3, r2
 80057da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	695b      	ldr	r3, [r3, #20]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	68fa      	ldr	r2, [r7, #12]
 80057ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	689a      	ldr	r2, [r3, #8]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	4a07      	ldr	r2, [pc, #28]	; (8005820 <TIM_Base_SetConfig+0xb8>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d103      	bne.n	8005810 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	691a      	ldr	r2, [r3, #16]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	615a      	str	r2, [r3, #20]
}
 8005816:	bf00      	nop
 8005818:	3714      	adds	r7, #20
 800581a:	46bd      	mov	sp, r7
 800581c:	bc80      	pop	{r7}
 800581e:	4770      	bx	lr
 8005820:	40012c00 	.word	0x40012c00
 8005824:	40000400 	.word	0x40000400
 8005828:	40000800 	.word	0x40000800

0800582c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800582c:	b480      	push	{r7}
 800582e:	b083      	sub	sp, #12
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005834:	bf00      	nop
 8005836:	370c      	adds	r7, #12
 8005838:	46bd      	mov	sp, r7
 800583a:	bc80      	pop	{r7}
 800583c:	4770      	bx	lr

0800583e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800583e:	b480      	push	{r7}
 8005840:	b083      	sub	sp, #12
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005846:	bf00      	nop
 8005848:	370c      	adds	r7, #12
 800584a:	46bd      	mov	sp, r7
 800584c:	bc80      	pop	{r7}
 800584e:	4770      	bx	lr

08005850 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d101      	bne.n	8005862 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e042      	b.n	80058e8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005868:	b2db      	uxtb	r3, r3
 800586a:	2b00      	cmp	r3, #0
 800586c:	d106      	bne.n	800587c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f7fb fd64 	bl	8001344 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2224      	movs	r2, #36	; 0x24
 8005880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	68da      	ldr	r2, [r3, #12]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005892:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f001 f8ef 	bl	8006a78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	691a      	ldr	r2, [r3, #16]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	695a      	ldr	r2, [r3, #20]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	68da      	ldr	r2, [r3, #12]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2220      	movs	r2, #32
 80058d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2220      	movs	r2, #32
 80058dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80058e6:	2300      	movs	r3, #0
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3708      	adds	r7, #8
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b08a      	sub	sp, #40	; 0x28
 80058f4:	af02      	add	r7, sp, #8
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	603b      	str	r3, [r7, #0]
 80058fc:	4613      	mov	r3, r2
 80058fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005900:	2300      	movs	r3, #0
 8005902:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800590a:	b2db      	uxtb	r3, r3
 800590c:	2b20      	cmp	r3, #32
 800590e:	d16d      	bne.n	80059ec <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d002      	beq.n	800591c <HAL_UART_Transmit+0x2c>
 8005916:	88fb      	ldrh	r3, [r7, #6]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d101      	bne.n	8005920 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	e066      	b.n	80059ee <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2200      	movs	r2, #0
 8005924:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2221      	movs	r2, #33	; 0x21
 800592a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800592e:	f7fb ffdd 	bl	80018ec <HAL_GetTick>
 8005932:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	88fa      	ldrh	r2, [r7, #6]
 8005938:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	88fa      	ldrh	r2, [r7, #6]
 800593e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005948:	d108      	bne.n	800595c <HAL_UART_Transmit+0x6c>
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d104      	bne.n	800595c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005952:	2300      	movs	r3, #0
 8005954:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	61bb      	str	r3, [r7, #24]
 800595a:	e003      	b.n	8005964 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005960:	2300      	movs	r3, #0
 8005962:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005964:	e02a      	b.n	80059bc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	9300      	str	r3, [sp, #0]
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	2200      	movs	r2, #0
 800596e:	2180      	movs	r1, #128	; 0x80
 8005970:	68f8      	ldr	r0, [r7, #12]
 8005972:	f000 fdb7 	bl	80064e4 <UART_WaitOnFlagUntilTimeout>
 8005976:	4603      	mov	r3, r0
 8005978:	2b00      	cmp	r3, #0
 800597a:	d001      	beq.n	8005980 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800597c:	2303      	movs	r3, #3
 800597e:	e036      	b.n	80059ee <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d10b      	bne.n	800599e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005986:	69bb      	ldr	r3, [r7, #24]
 8005988:	881b      	ldrh	r3, [r3, #0]
 800598a:	461a      	mov	r2, r3
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005994:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	3302      	adds	r3, #2
 800599a:	61bb      	str	r3, [r7, #24]
 800599c:	e007      	b.n	80059ae <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	781a      	ldrb	r2, [r3, #0]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	3301      	adds	r3, #1
 80059ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	3b01      	subs	r3, #1
 80059b6:	b29a      	uxth	r2, r3
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d1cf      	bne.n	8005966 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	9300      	str	r3, [sp, #0]
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	2200      	movs	r2, #0
 80059ce:	2140      	movs	r1, #64	; 0x40
 80059d0:	68f8      	ldr	r0, [r7, #12]
 80059d2:	f000 fd87 	bl	80064e4 <UART_WaitOnFlagUntilTimeout>
 80059d6:	4603      	mov	r3, r0
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d001      	beq.n	80059e0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80059dc:	2303      	movs	r3, #3
 80059de:	e006      	b.n	80059ee <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2220      	movs	r2, #32
 80059e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80059e8:	2300      	movs	r3, #0
 80059ea:	e000      	b.n	80059ee <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80059ec:	2302      	movs	r3, #2
  }
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3720      	adds	r7, #32
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
	...

080059f8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b08c      	sub	sp, #48	; 0x30
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	60f8      	str	r0, [r7, #12]
 8005a00:	60b9      	str	r1, [r7, #8]
 8005a02:	4613      	mov	r3, r2
 8005a04:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	2b20      	cmp	r3, #32
 8005a10:	d156      	bne.n	8005ac0 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d002      	beq.n	8005a1e <HAL_UART_Transmit_DMA+0x26>
 8005a18:	88fb      	ldrh	r3, [r7, #6]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d101      	bne.n	8005a22 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e04f      	b.n	8005ac2 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8005a22:	68ba      	ldr	r2, [r7, #8]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	88fa      	ldrh	r2, [r7, #6]
 8005a2c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	88fa      	ldrh	r2, [r7, #6]
 8005a32:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2200      	movs	r2, #0
 8005a38:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2221      	movs	r2, #33	; 0x21
 8005a3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a46:	4a21      	ldr	r2, [pc, #132]	; (8005acc <HAL_UART_Transmit_DMA+0xd4>)
 8005a48:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a4e:	4a20      	ldr	r2, [pc, #128]	; (8005ad0 <HAL_UART_Transmit_DMA+0xd8>)
 8005a50:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a56:	4a1f      	ldr	r2, [pc, #124]	; (8005ad4 <HAL_UART_Transmit_DMA+0xdc>)
 8005a58:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a5e:	2200      	movs	r2, #0
 8005a60:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8005a62:	f107 0308 	add.w	r3, r7, #8
 8005a66:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a6e:	6819      	ldr	r1, [r3, #0]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	3304      	adds	r3, #4
 8005a76:	461a      	mov	r2, r3
 8005a78:	88fb      	ldrh	r3, [r7, #6]
 8005a7a:	f7fc fe5f 	bl	800273c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a86:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	3314      	adds	r3, #20
 8005a8e:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	e853 3f00 	ldrex	r3, [r3]
 8005a96:	617b      	str	r3, [r7, #20]
   return(result);
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	3314      	adds	r3, #20
 8005aa6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005aa8:	627a      	str	r2, [r7, #36]	; 0x24
 8005aaa:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aac:	6a39      	ldr	r1, [r7, #32]
 8005aae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ab0:	e841 2300 	strex	r3, r2, [r1]
 8005ab4:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d1e5      	bne.n	8005a88 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8005abc:	2300      	movs	r3, #0
 8005abe:	e000      	b.n	8005ac2 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8005ac0:	2302      	movs	r3, #2
  }
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3730      	adds	r7, #48	; 0x30
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	08006233 	.word	0x08006233
 8005ad0:	080062cd 	.word	0x080062cd
 8005ad4:	08006451 	.word	0x08006451

08005ad8 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b08c      	sub	sp, #48	; 0x30
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	60b9      	str	r1, [r7, #8]
 8005ae2:	4613      	mov	r3, r2
 8005ae4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	2b20      	cmp	r3, #32
 8005af0:	d14a      	bne.n	8005b88 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d002      	beq.n	8005afe <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8005af8:	88fb      	ldrh	r3, [r7, #6]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d101      	bne.n	8005b02 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e043      	b.n	8005b8a <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2201      	movs	r2, #1
 8005b06:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005b0e:	88fb      	ldrh	r3, [r7, #6]
 8005b10:	461a      	mov	r2, r3
 8005b12:	68b9      	ldr	r1, [r7, #8]
 8005b14:	68f8      	ldr	r0, [r7, #12]
 8005b16:	f000 fd53 	bl	80065c0 <UART_Start_Receive_DMA>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005b20:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d12c      	bne.n	8005b82 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d125      	bne.n	8005b7c <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b30:	2300      	movs	r3, #0
 8005b32:	613b      	str	r3, [r7, #16]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	613b      	str	r3, [r7, #16]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	613b      	str	r3, [r7, #16]
 8005b44:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	330c      	adds	r3, #12
 8005b4c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b4e:	69bb      	ldr	r3, [r7, #24]
 8005b50:	e853 3f00 	ldrex	r3, [r3]
 8005b54:	617b      	str	r3, [r7, #20]
   return(result);
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	f043 0310 	orr.w	r3, r3, #16
 8005b5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	330c      	adds	r3, #12
 8005b64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b66:	627a      	str	r2, [r7, #36]	; 0x24
 8005b68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b6a:	6a39      	ldr	r1, [r7, #32]
 8005b6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b6e:	e841 2300 	strex	r3, r2, [r1]
 8005b72:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d1e5      	bne.n	8005b46 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8005b7a:	e002      	b.n	8005b82 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8005b82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005b86:	e000      	b.n	8005b8a <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8005b88:	2302      	movs	r3, #2
  }
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3730      	adds	r7, #48	; 0x30
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}

08005b92 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8005b92:	b580      	push	{r7, lr}
 8005b94:	b09a      	sub	sp, #104	; 0x68
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	330c      	adds	r3, #12
 8005ba0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ba4:	e853 3f00 	ldrex	r3, [r3]
 8005ba8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005baa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005bb0:	667b      	str	r3, [r7, #100]	; 0x64
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	330c      	adds	r3, #12
 8005bb8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005bba:	657a      	str	r2, [r7, #84]	; 0x54
 8005bbc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bbe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005bc0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005bc2:	e841 2300 	strex	r3, r2, [r1]
 8005bc6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005bc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d1e5      	bne.n	8005b9a <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	3314      	adds	r3, #20
 8005bd4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bd8:	e853 3f00 	ldrex	r3, [r3]
 8005bdc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be0:	f023 0301 	bic.w	r3, r3, #1
 8005be4:	663b      	str	r3, [r7, #96]	; 0x60
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	3314      	adds	r3, #20
 8005bec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005bee:	643a      	str	r2, [r7, #64]	; 0x40
 8005bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005bf4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005bf6:	e841 2300 	strex	r3, r2, [r1]
 8005bfa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d1e5      	bne.n	8005bce <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d119      	bne.n	8005c3e <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	330c      	adds	r3, #12
 8005c10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c12:	6a3b      	ldr	r3, [r7, #32]
 8005c14:	e853 3f00 	ldrex	r3, [r3]
 8005c18:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	f023 0310 	bic.w	r3, r3, #16
 8005c20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	330c      	adds	r3, #12
 8005c28:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005c2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c2c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c32:	e841 2300 	strex	r3, r2, [r1]
 8005c36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d1e5      	bne.n	8005c0a <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	695b      	ldr	r3, [r3, #20]
 8005c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d036      	beq.n	8005cba <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	3314      	adds	r3, #20
 8005c52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	e853 3f00 	ldrex	r3, [r3]
 8005c5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c62:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	3314      	adds	r3, #20
 8005c6a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c6c:	61ba      	str	r2, [r7, #24]
 8005c6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c70:	6979      	ldr	r1, [r7, #20]
 8005c72:	69ba      	ldr	r2, [r7, #24]
 8005c74:	e841 2300 	strex	r3, r2, [r1]
 8005c78:	613b      	str	r3, [r7, #16]
   return(result);
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d1e5      	bne.n	8005c4c <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d018      	beq.n	8005cba <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c94:	4618      	mov	r0, r3
 8005c96:	f7fc fdb1 	bl	80027fc <HAL_DMA_Abort>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d00c      	beq.n	8005cba <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f7fc ff70 	bl	8002b8a <HAL_DMA_GetError>
 8005caa:	4603      	mov	r3, r0
 8005cac:	2b20      	cmp	r3, #32
 8005cae:	d104      	bne.n	8005cba <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2210      	movs	r2, #16
 8005cb4:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_TIMEOUT;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	e00a      	b.n	8005cd0 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2220      	movs	r2, #32
 8005cc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8005cce:	2300      	movs	r3, #0
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3768      	adds	r7, #104	; 0x68
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b0ba      	sub	sp, #232	; 0xe8
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	695b      	ldr	r3, [r3, #20]
 8005cfa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005d04:	2300      	movs	r3, #0
 8005d06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005d0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d0e:	f003 030f 	and.w	r3, r3, #15
 8005d12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005d16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d10f      	bne.n	8005d3e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d22:	f003 0320 	and.w	r3, r3, #32
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d009      	beq.n	8005d3e <HAL_UART_IRQHandler+0x66>
 8005d2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d2e:	f003 0320 	and.w	r3, r3, #32
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d003      	beq.n	8005d3e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 fde0 	bl	80068fc <UART_Receive_IT>
      return;
 8005d3c:	e25b      	b.n	80061f6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005d3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	f000 80de 	beq.w	8005f04 <HAL_UART_IRQHandler+0x22c>
 8005d48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d4c:	f003 0301 	and.w	r3, r3, #1
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d106      	bne.n	8005d62 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005d54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d58:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	f000 80d1 	beq.w	8005f04 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005d62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d66:	f003 0301 	and.w	r3, r3, #1
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d00b      	beq.n	8005d86 <HAL_UART_IRQHandler+0xae>
 8005d6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d005      	beq.n	8005d86 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d7e:	f043 0201 	orr.w	r2, r3, #1
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d8a:	f003 0304 	and.w	r3, r3, #4
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d00b      	beq.n	8005daa <HAL_UART_IRQHandler+0xd2>
 8005d92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d96:	f003 0301 	and.w	r3, r3, #1
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d005      	beq.n	8005daa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005da2:	f043 0202 	orr.w	r2, r3, #2
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005daa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dae:	f003 0302 	and.w	r3, r3, #2
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d00b      	beq.n	8005dce <HAL_UART_IRQHandler+0xf6>
 8005db6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005dba:	f003 0301 	and.w	r3, r3, #1
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d005      	beq.n	8005dce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dc6:	f043 0204 	orr.w	r2, r3, #4
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005dce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dd2:	f003 0308 	and.w	r3, r3, #8
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d011      	beq.n	8005dfe <HAL_UART_IRQHandler+0x126>
 8005dda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dde:	f003 0320 	and.w	r3, r3, #32
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d105      	bne.n	8005df2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005de6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005dea:	f003 0301 	and.w	r3, r3, #1
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d005      	beq.n	8005dfe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005df6:	f043 0208 	orr.w	r2, r3, #8
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	f000 81f2 	beq.w	80061ec <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e0c:	f003 0320 	and.w	r3, r3, #32
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d008      	beq.n	8005e26 <HAL_UART_IRQHandler+0x14e>
 8005e14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e18:	f003 0320 	and.w	r3, r3, #32
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d002      	beq.n	8005e26 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f000 fd6b 	bl	80068fc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	695b      	ldr	r3, [r3, #20]
 8005e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	bf14      	ite	ne
 8005e34:	2301      	movne	r3, #1
 8005e36:	2300      	moveq	r3, #0
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e42:	f003 0308 	and.w	r3, r3, #8
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d103      	bne.n	8005e52 <HAL_UART_IRQHandler+0x17a>
 8005e4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d04f      	beq.n	8005ef2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 fc75 	bl	8006742 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	695b      	ldr	r3, [r3, #20]
 8005e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d041      	beq.n	8005eea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	3314      	adds	r3, #20
 8005e6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005e74:	e853 3f00 	ldrex	r3, [r3]
 8005e78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005e7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005e80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	3314      	adds	r3, #20
 8005e8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005e92:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005e96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005e9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005ea2:	e841 2300 	strex	r3, r2, [r1]
 8005ea6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005eaa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d1d9      	bne.n	8005e66 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d013      	beq.n	8005ee2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ebe:	4a7e      	ldr	r2, [pc, #504]	; (80060b8 <HAL_UART_IRQHandler+0x3e0>)
 8005ec0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f7fc fcd4 	bl	8002874 <HAL_DMA_Abort_IT>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d016      	beq.n	8005f00 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005edc:	4610      	mov	r0, r2
 8005ede:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ee0:	e00e      	b.n	8005f00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 f99c 	bl	8006220 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ee8:	e00a      	b.n	8005f00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 f998 	bl	8006220 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ef0:	e006      	b.n	8005f00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 f994 	bl	8006220 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005efe:	e175      	b.n	80061ec <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f00:	bf00      	nop
    return;
 8005f02:	e173      	b.n	80061ec <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	f040 814f 	bne.w	80061ac <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f12:	f003 0310 	and.w	r3, r3, #16
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	f000 8148 	beq.w	80061ac <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005f1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f20:	f003 0310 	and.w	r3, r3, #16
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	f000 8141 	beq.w	80061ac <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	60bb      	str	r3, [r7, #8]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	60bb      	str	r3, [r7, #8]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	60bb      	str	r3, [r7, #8]
 8005f3e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	695b      	ldr	r3, [r3, #20]
 8005f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	f000 80b6 	beq.w	80060bc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005f5c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	f000 8145 	beq.w	80061f0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	f080 813e 	bcs.w	80061f0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005f7a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f80:	699b      	ldr	r3, [r3, #24]
 8005f82:	2b20      	cmp	r3, #32
 8005f84:	f000 8088 	beq.w	8006098 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	330c      	adds	r3, #12
 8005f8e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f92:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f96:	e853 3f00 	ldrex	r3, [r3]
 8005f9a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005f9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005fa2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fa6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	330c      	adds	r3, #12
 8005fb0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005fb4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005fb8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fbc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005fc0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005fc4:	e841 2300 	strex	r3, r2, [r1]
 8005fc8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005fcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d1d9      	bne.n	8005f88 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	3314      	adds	r3, #20
 8005fda:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fdc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fde:	e853 3f00 	ldrex	r3, [r3]
 8005fe2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005fe4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005fe6:	f023 0301 	bic.w	r3, r3, #1
 8005fea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	3314      	adds	r3, #20
 8005ff4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005ff8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005ffc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ffe:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006000:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006004:	e841 2300 	strex	r3, r2, [r1]
 8006008:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800600a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800600c:	2b00      	cmp	r3, #0
 800600e:	d1e1      	bne.n	8005fd4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	3314      	adds	r3, #20
 8006016:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006018:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800601a:	e853 3f00 	ldrex	r3, [r3]
 800601e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006020:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006022:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006026:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	3314      	adds	r3, #20
 8006030:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006034:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006036:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006038:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800603a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800603c:	e841 2300 	strex	r3, r2, [r1]
 8006040:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006042:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006044:	2b00      	cmp	r3, #0
 8006046:	d1e3      	bne.n	8006010 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2220      	movs	r2, #32
 800604c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	330c      	adds	r3, #12
 800605c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800605e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006060:	e853 3f00 	ldrex	r3, [r3]
 8006064:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006066:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006068:	f023 0310 	bic.w	r3, r3, #16
 800606c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	330c      	adds	r3, #12
 8006076:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800607a:	65ba      	str	r2, [r7, #88]	; 0x58
 800607c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800607e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006080:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006082:	e841 2300 	strex	r3, r2, [r1]
 8006086:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006088:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800608a:	2b00      	cmp	r3, #0
 800608c:	d1e3      	bne.n	8006056 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006092:	4618      	mov	r0, r3
 8006094:	f7fc fbb2 	bl	80027fc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2202      	movs	r2, #2
 800609c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	1ad3      	subs	r3, r2, r3
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	4619      	mov	r1, r3
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f7fa ffc8 	bl	8001044 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80060b4:	e09c      	b.n	80061f0 <HAL_UART_IRQHandler+0x518>
 80060b6:	bf00      	nop
 80060b8:	08006807 	.word	0x08006807
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	1ad3      	subs	r3, r2, r3
 80060c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	f000 808e 	beq.w	80061f4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80060d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80060dc:	2b00      	cmp	r3, #0
 80060de:	f000 8089 	beq.w	80061f4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	330c      	adds	r3, #12
 80060e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ec:	e853 3f00 	ldrex	r3, [r3]
 80060f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80060f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80060f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	330c      	adds	r3, #12
 8006102:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006106:	647a      	str	r2, [r7, #68]	; 0x44
 8006108:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800610a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800610c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800610e:	e841 2300 	strex	r3, r2, [r1]
 8006112:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006116:	2b00      	cmp	r3, #0
 8006118:	d1e3      	bne.n	80060e2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	3314      	adds	r3, #20
 8006120:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006124:	e853 3f00 	ldrex	r3, [r3]
 8006128:	623b      	str	r3, [r7, #32]
   return(result);
 800612a:	6a3b      	ldr	r3, [r7, #32]
 800612c:	f023 0301 	bic.w	r3, r3, #1
 8006130:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	3314      	adds	r3, #20
 800613a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800613e:	633a      	str	r2, [r7, #48]	; 0x30
 8006140:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006142:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006144:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006146:	e841 2300 	strex	r3, r2, [r1]
 800614a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800614c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800614e:	2b00      	cmp	r3, #0
 8006150:	d1e3      	bne.n	800611a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2220      	movs	r2, #32
 8006156:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	330c      	adds	r3, #12
 8006166:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	e853 3f00 	ldrex	r3, [r3]
 800616e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f023 0310 	bic.w	r3, r3, #16
 8006176:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	330c      	adds	r3, #12
 8006180:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006184:	61fa      	str	r2, [r7, #28]
 8006186:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006188:	69b9      	ldr	r1, [r7, #24]
 800618a:	69fa      	ldr	r2, [r7, #28]
 800618c:	e841 2300 	strex	r3, r2, [r1]
 8006190:	617b      	str	r3, [r7, #20]
   return(result);
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d1e3      	bne.n	8006160 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2202      	movs	r2, #2
 800619c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800619e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80061a2:	4619      	mov	r1, r3
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f7fa ff4d 	bl	8001044 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80061aa:	e023      	b.n	80061f4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80061ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d009      	beq.n	80061cc <HAL_UART_IRQHandler+0x4f4>
 80061b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d003      	beq.n	80061cc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f000 fb32 	bl	800682e <UART_Transmit_IT>
    return;
 80061ca:	e014      	b.n	80061f6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80061cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d00e      	beq.n	80061f6 <HAL_UART_IRQHandler+0x51e>
 80061d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d008      	beq.n	80061f6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f000 fb71 	bl	80068cc <UART_EndTransmit_IT>
    return;
 80061ea:	e004      	b.n	80061f6 <HAL_UART_IRQHandler+0x51e>
    return;
 80061ec:	bf00      	nop
 80061ee:	e002      	b.n	80061f6 <HAL_UART_IRQHandler+0x51e>
      return;
 80061f0:	bf00      	nop
 80061f2:	e000      	b.n	80061f6 <HAL_UART_IRQHandler+0x51e>
      return;
 80061f4:	bf00      	nop
  }
}
 80061f6:	37e8      	adds	r7, #232	; 0xe8
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}

080061fc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b083      	sub	sp, #12
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006204:	bf00      	nop
 8006206:	370c      	adds	r7, #12
 8006208:	46bd      	mov	sp, r7
 800620a:	bc80      	pop	{r7}
 800620c:	4770      	bx	lr

0800620e <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800620e:	b480      	push	{r7}
 8006210:	b083      	sub	sp, #12
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006216:	bf00      	nop
 8006218:	370c      	adds	r7, #12
 800621a:	46bd      	mov	sp, r7
 800621c:	bc80      	pop	{r7}
 800621e:	4770      	bx	lr

08006220 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006228:	bf00      	nop
 800622a:	370c      	adds	r7, #12
 800622c:	46bd      	mov	sp, r7
 800622e:	bc80      	pop	{r7}
 8006230:	4770      	bx	lr

08006232 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006232:	b580      	push	{r7, lr}
 8006234:	b090      	sub	sp, #64	; 0x40
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623e:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f003 0320 	and.w	r3, r3, #32
 800624a:	2b00      	cmp	r3, #0
 800624c:	d137      	bne.n	80062be <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800624e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006250:	2200      	movs	r2, #0
 8006252:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	3314      	adds	r3, #20
 800625a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800625c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625e:	e853 3f00 	ldrex	r3, [r3]
 8006262:	623b      	str	r3, [r7, #32]
   return(result);
 8006264:	6a3b      	ldr	r3, [r7, #32]
 8006266:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800626a:	63bb      	str	r3, [r7, #56]	; 0x38
 800626c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	3314      	adds	r3, #20
 8006272:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006274:	633a      	str	r2, [r7, #48]	; 0x30
 8006276:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006278:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800627a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800627c:	e841 2300 	strex	r3, r2, [r1]
 8006280:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006284:	2b00      	cmp	r3, #0
 8006286:	d1e5      	bne.n	8006254 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	330c      	adds	r3, #12
 800628e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	e853 3f00 	ldrex	r3, [r3]
 8006296:	60fb      	str	r3, [r7, #12]
   return(result);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800629e:	637b      	str	r3, [r7, #52]	; 0x34
 80062a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	330c      	adds	r3, #12
 80062a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062a8:	61fa      	str	r2, [r7, #28]
 80062aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ac:	69b9      	ldr	r1, [r7, #24]
 80062ae:	69fa      	ldr	r2, [r7, #28]
 80062b0:	e841 2300 	strex	r3, r2, [r1]
 80062b4:	617b      	str	r3, [r7, #20]
   return(result);
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d1e5      	bne.n	8006288 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80062bc:	e002      	b.n	80062c4 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80062be:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80062c0:	f7fa feae 	bl	8001020 <HAL_UART_TxCpltCallback>
}
 80062c4:	bf00      	nop
 80062c6:	3740      	adds	r7, #64	; 0x40
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}

080062cc <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80062da:	68f8      	ldr	r0, [r7, #12]
 80062dc:	f7ff ff8e 	bl	80061fc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062e0:	bf00      	nop
 80062e2:	3710      	adds	r7, #16
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b09c      	sub	sp, #112	; 0x70
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f4:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f003 0320 	and.w	r3, r3, #32
 8006300:	2b00      	cmp	r3, #0
 8006302:	d172      	bne.n	80063ea <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006304:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006306:	2200      	movs	r2, #0
 8006308:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800630a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	330c      	adds	r3, #12
 8006310:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006312:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006314:	e853 3f00 	ldrex	r3, [r3]
 8006318:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800631a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800631c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006320:	66bb      	str	r3, [r7, #104]	; 0x68
 8006322:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	330c      	adds	r3, #12
 8006328:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800632a:	65ba      	str	r2, [r7, #88]	; 0x58
 800632c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800632e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006330:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006332:	e841 2300 	strex	r3, r2, [r1]
 8006336:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006338:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800633a:	2b00      	cmp	r3, #0
 800633c:	d1e5      	bne.n	800630a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800633e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	3314      	adds	r3, #20
 8006344:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006348:	e853 3f00 	ldrex	r3, [r3]
 800634c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800634e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006350:	f023 0301 	bic.w	r3, r3, #1
 8006354:	667b      	str	r3, [r7, #100]	; 0x64
 8006356:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	3314      	adds	r3, #20
 800635c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800635e:	647a      	str	r2, [r7, #68]	; 0x44
 8006360:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006362:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006364:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006366:	e841 2300 	strex	r3, r2, [r1]
 800636a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800636c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800636e:	2b00      	cmp	r3, #0
 8006370:	d1e5      	bne.n	800633e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006372:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	3314      	adds	r3, #20
 8006378:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800637a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637c:	e853 3f00 	ldrex	r3, [r3]
 8006380:	623b      	str	r3, [r7, #32]
   return(result);
 8006382:	6a3b      	ldr	r3, [r7, #32]
 8006384:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006388:	663b      	str	r3, [r7, #96]	; 0x60
 800638a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	3314      	adds	r3, #20
 8006390:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006392:	633a      	str	r2, [r7, #48]	; 0x30
 8006394:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006396:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006398:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800639a:	e841 2300 	strex	r3, r2, [r1]
 800639e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80063a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d1e5      	bne.n	8006372 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80063a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063a8:	2220      	movs	r2, #32
 80063aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d119      	bne.n	80063ea <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	330c      	adds	r3, #12
 80063bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	e853 3f00 	ldrex	r3, [r3]
 80063c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	f023 0310 	bic.w	r3, r3, #16
 80063cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80063ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	330c      	adds	r3, #12
 80063d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80063d6:	61fa      	str	r2, [r7, #28]
 80063d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063da:	69b9      	ldr	r1, [r7, #24]
 80063dc:	69fa      	ldr	r2, [r7, #28]
 80063de:	e841 2300 	strex	r3, r2, [r1]
 80063e2:	617b      	str	r3, [r7, #20]
   return(result);
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d1e5      	bne.n	80063b6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063ec:	2200      	movs	r2, #0
 80063ee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d106      	bne.n	8006406 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80063f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063fa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80063fc:	4619      	mov	r1, r3
 80063fe:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006400:	f7fa fe20 	bl	8001044 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006404:	e002      	b.n	800640c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006406:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006408:	f7fa fdf8 	bl	8000ffc <HAL_UART_RxCpltCallback>
}
 800640c:	bf00      	nop
 800640e:	3770      	adds	r7, #112	; 0x70
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}

08006414 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b084      	sub	sp, #16
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006420:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2201      	movs	r2, #1
 8006426:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800642c:	2b01      	cmp	r3, #1
 800642e:	d108      	bne.n	8006442 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006434:	085b      	lsrs	r3, r3, #1
 8006436:	b29b      	uxth	r3, r3
 8006438:	4619      	mov	r1, r3
 800643a:	68f8      	ldr	r0, [r7, #12]
 800643c:	f7fa fe02 	bl	8001044 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006440:	e002      	b.n	8006448 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006442:	68f8      	ldr	r0, [r7, #12]
 8006444:	f7ff fee3 	bl	800620e <HAL_UART_RxHalfCpltCallback>
}
 8006448:	bf00      	nop
 800644a:	3710      	adds	r7, #16
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}

08006450 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b084      	sub	sp, #16
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006458:	2300      	movs	r3, #0
 800645a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006460:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	695b      	ldr	r3, [r3, #20]
 8006468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800646c:	2b00      	cmp	r3, #0
 800646e:	bf14      	ite	ne
 8006470:	2301      	movne	r3, #1
 8006472:	2300      	moveq	r3, #0
 8006474:	b2db      	uxtb	r3, r3
 8006476:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800647e:	b2db      	uxtb	r3, r3
 8006480:	2b21      	cmp	r3, #33	; 0x21
 8006482:	d108      	bne.n	8006496 <UART_DMAError+0x46>
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d005      	beq.n	8006496 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	2200      	movs	r2, #0
 800648e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006490:	68b8      	ldr	r0, [r7, #8]
 8006492:	f000 f92f 	bl	80066f4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	695b      	ldr	r3, [r3, #20]
 800649c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	bf14      	ite	ne
 80064a4:	2301      	movne	r3, #1
 80064a6:	2300      	moveq	r3, #0
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	2b22      	cmp	r3, #34	; 0x22
 80064b6:	d108      	bne.n	80064ca <UART_DMAError+0x7a>
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d005      	beq.n	80064ca <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	2200      	movs	r2, #0
 80064c2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80064c4:	68b8      	ldr	r0, [r7, #8]
 80064c6:	f000 f93c 	bl	8006742 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064ce:	f043 0210 	orr.w	r2, r3, #16
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80064d6:	68b8      	ldr	r0, [r7, #8]
 80064d8:	f7ff fea2 	bl	8006220 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064dc:	bf00      	nop
 80064de:	3710      	adds	r7, #16
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}

080064e4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b090      	sub	sp, #64	; 0x40
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	60f8      	str	r0, [r7, #12]
 80064ec:	60b9      	str	r1, [r7, #8]
 80064ee:	603b      	str	r3, [r7, #0]
 80064f0:	4613      	mov	r3, r2
 80064f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064f4:	e050      	b.n	8006598 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064fc:	d04c      	beq.n	8006598 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80064fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006500:	2b00      	cmp	r3, #0
 8006502:	d007      	beq.n	8006514 <UART_WaitOnFlagUntilTimeout+0x30>
 8006504:	f7fb f9f2 	bl	80018ec <HAL_GetTick>
 8006508:	4602      	mov	r2, r0
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	1ad3      	subs	r3, r2, r3
 800650e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006510:	429a      	cmp	r2, r3
 8006512:	d241      	bcs.n	8006598 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	330c      	adds	r3, #12
 800651a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800651c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800651e:	e853 3f00 	ldrex	r3, [r3]
 8006522:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006526:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800652a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	330c      	adds	r3, #12
 8006532:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006534:	637a      	str	r2, [r7, #52]	; 0x34
 8006536:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006538:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800653a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800653c:	e841 2300 	strex	r3, r2, [r1]
 8006540:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006544:	2b00      	cmp	r3, #0
 8006546:	d1e5      	bne.n	8006514 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	3314      	adds	r3, #20
 800654e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	e853 3f00 	ldrex	r3, [r3]
 8006556:	613b      	str	r3, [r7, #16]
   return(result);
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	f023 0301 	bic.w	r3, r3, #1
 800655e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	3314      	adds	r3, #20
 8006566:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006568:	623a      	str	r2, [r7, #32]
 800656a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800656c:	69f9      	ldr	r1, [r7, #28]
 800656e:	6a3a      	ldr	r2, [r7, #32]
 8006570:	e841 2300 	strex	r3, r2, [r1]
 8006574:	61bb      	str	r3, [r7, #24]
   return(result);
 8006576:	69bb      	ldr	r3, [r7, #24]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d1e5      	bne.n	8006548 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2220      	movs	r2, #32
 8006580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2220      	movs	r2, #32
 8006588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2200      	movs	r2, #0
 8006590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8006594:	2303      	movs	r3, #3
 8006596:	e00f      	b.n	80065b8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	4013      	ands	r3, r2
 80065a2:	68ba      	ldr	r2, [r7, #8]
 80065a4:	429a      	cmp	r2, r3
 80065a6:	bf0c      	ite	eq
 80065a8:	2301      	moveq	r3, #1
 80065aa:	2300      	movne	r3, #0
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	461a      	mov	r2, r3
 80065b0:	79fb      	ldrb	r3, [r7, #7]
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d09f      	beq.n	80064f6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80065b6:	2300      	movs	r3, #0
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3740      	adds	r7, #64	; 0x40
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}

080065c0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b098      	sub	sp, #96	; 0x60
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	60f8      	str	r0, [r7, #12]
 80065c8:	60b9      	str	r1, [r7, #8]
 80065ca:	4613      	mov	r3, r2
 80065cc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80065ce:	68ba      	ldr	r2, [r7, #8]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	88fa      	ldrh	r2, [r7, #6]
 80065d8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2200      	movs	r2, #0
 80065de:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2222      	movs	r2, #34	; 0x22
 80065e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ec:	4a3e      	ldr	r2, [pc, #248]	; (80066e8 <UART_Start_Receive_DMA+0x128>)
 80065ee:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065f4:	4a3d      	ldr	r2, [pc, #244]	; (80066ec <UART_Start_Receive_DMA+0x12c>)
 80065f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065fc:	4a3c      	ldr	r2, [pc, #240]	; (80066f0 <UART_Start_Receive_DMA+0x130>)
 80065fe:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006604:	2200      	movs	r2, #0
 8006606:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006608:	f107 0308 	add.w	r3, r7, #8
 800660c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	3304      	adds	r3, #4
 8006618:	4619      	mov	r1, r3
 800661a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	88fb      	ldrh	r3, [r7, #6]
 8006620:	f7fc f88c 	bl	800273c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006624:	2300      	movs	r3, #0
 8006626:	613b      	str	r3, [r7, #16]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	613b      	str	r3, [r7, #16]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	613b      	str	r3, [r7, #16]
 8006638:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	691b      	ldr	r3, [r3, #16]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d019      	beq.n	8006676 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	330c      	adds	r3, #12
 8006648:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800664a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800664c:	e853 3f00 	ldrex	r3, [r3]
 8006650:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006654:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006658:	65bb      	str	r3, [r7, #88]	; 0x58
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	330c      	adds	r3, #12
 8006660:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006662:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006664:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006666:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006668:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800666a:	e841 2300 	strex	r3, r2, [r1]
 800666e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006670:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006672:	2b00      	cmp	r3, #0
 8006674:	d1e5      	bne.n	8006642 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	3314      	adds	r3, #20
 800667c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800667e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006680:	e853 3f00 	ldrex	r3, [r3]
 8006684:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006688:	f043 0301 	orr.w	r3, r3, #1
 800668c:	657b      	str	r3, [r7, #84]	; 0x54
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	3314      	adds	r3, #20
 8006694:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006696:	63ba      	str	r2, [r7, #56]	; 0x38
 8006698:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800669a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800669c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800669e:	e841 2300 	strex	r3, r2, [r1]
 80066a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80066a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d1e5      	bne.n	8006676 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	3314      	adds	r3, #20
 80066b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b2:	69bb      	ldr	r3, [r7, #24]
 80066b4:	e853 3f00 	ldrex	r3, [r3]
 80066b8:	617b      	str	r3, [r7, #20]
   return(result);
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066c0:	653b      	str	r3, [r7, #80]	; 0x50
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	3314      	adds	r3, #20
 80066c8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80066ca:	627a      	str	r2, [r7, #36]	; 0x24
 80066cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ce:	6a39      	ldr	r1, [r7, #32]
 80066d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066d2:	e841 2300 	strex	r3, r2, [r1]
 80066d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80066d8:	69fb      	ldr	r3, [r7, #28]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d1e5      	bne.n	80066aa <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80066de:	2300      	movs	r3, #0
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3760      	adds	r7, #96	; 0x60
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	080062e9 	.word	0x080062e9
 80066ec:	08006415 	.word	0x08006415
 80066f0:	08006451 	.word	0x08006451

080066f4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b089      	sub	sp, #36	; 0x24
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	330c      	adds	r3, #12
 8006702:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	e853 3f00 	ldrex	r3, [r3]
 800670a:	60bb      	str	r3, [r7, #8]
   return(result);
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006712:	61fb      	str	r3, [r7, #28]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	330c      	adds	r3, #12
 800671a:	69fa      	ldr	r2, [r7, #28]
 800671c:	61ba      	str	r2, [r7, #24]
 800671e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006720:	6979      	ldr	r1, [r7, #20]
 8006722:	69ba      	ldr	r2, [r7, #24]
 8006724:	e841 2300 	strex	r3, r2, [r1]
 8006728:	613b      	str	r3, [r7, #16]
   return(result);
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d1e5      	bne.n	80066fc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2220      	movs	r2, #32
 8006734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8006738:	bf00      	nop
 800673a:	3724      	adds	r7, #36	; 0x24
 800673c:	46bd      	mov	sp, r7
 800673e:	bc80      	pop	{r7}
 8006740:	4770      	bx	lr

08006742 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006742:	b480      	push	{r7}
 8006744:	b095      	sub	sp, #84	; 0x54
 8006746:	af00      	add	r7, sp, #0
 8006748:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	330c      	adds	r3, #12
 8006750:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006754:	e853 3f00 	ldrex	r3, [r3]
 8006758:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800675a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800675c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006760:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	330c      	adds	r3, #12
 8006768:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800676a:	643a      	str	r2, [r7, #64]	; 0x40
 800676c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800676e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006770:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006772:	e841 2300 	strex	r3, r2, [r1]
 8006776:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800677a:	2b00      	cmp	r3, #0
 800677c:	d1e5      	bne.n	800674a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	3314      	adds	r3, #20
 8006784:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006786:	6a3b      	ldr	r3, [r7, #32]
 8006788:	e853 3f00 	ldrex	r3, [r3]
 800678c:	61fb      	str	r3, [r7, #28]
   return(result);
 800678e:	69fb      	ldr	r3, [r7, #28]
 8006790:	f023 0301 	bic.w	r3, r3, #1
 8006794:	64bb      	str	r3, [r7, #72]	; 0x48
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	3314      	adds	r3, #20
 800679c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800679e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80067a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067a6:	e841 2300 	strex	r3, r2, [r1]
 80067aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80067ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d1e5      	bne.n	800677e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d119      	bne.n	80067ee <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	330c      	adds	r3, #12
 80067c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	e853 3f00 	ldrex	r3, [r3]
 80067c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	f023 0310 	bic.w	r3, r3, #16
 80067d0:	647b      	str	r3, [r7, #68]	; 0x44
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	330c      	adds	r3, #12
 80067d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80067da:	61ba      	str	r2, [r7, #24]
 80067dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067de:	6979      	ldr	r1, [r7, #20]
 80067e0:	69ba      	ldr	r2, [r7, #24]
 80067e2:	e841 2300 	strex	r3, r2, [r1]
 80067e6:	613b      	str	r3, [r7, #16]
   return(result);
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d1e5      	bne.n	80067ba <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2220      	movs	r2, #32
 80067f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	631a      	str	r2, [r3, #48]	; 0x30
}
 80067fc:	bf00      	nop
 80067fe:	3754      	adds	r7, #84	; 0x54
 8006800:	46bd      	mov	sp, r7
 8006802:	bc80      	pop	{r7}
 8006804:	4770      	bx	lr

08006806 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006806:	b580      	push	{r7, lr}
 8006808:	b084      	sub	sp, #16
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006812:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2200      	movs	r2, #0
 8006818:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2200      	movs	r2, #0
 800681e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006820:	68f8      	ldr	r0, [r7, #12]
 8006822:	f7ff fcfd 	bl	8006220 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006826:	bf00      	nop
 8006828:	3710      	adds	r7, #16
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}

0800682e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800682e:	b480      	push	{r7}
 8006830:	b085      	sub	sp, #20
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800683c:	b2db      	uxtb	r3, r3
 800683e:	2b21      	cmp	r3, #33	; 0x21
 8006840:	d13e      	bne.n	80068c0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800684a:	d114      	bne.n	8006876 <UART_Transmit_IT+0x48>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	691b      	ldr	r3, [r3, #16]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d110      	bne.n	8006876 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6a1b      	ldr	r3, [r3, #32]
 8006858:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	881b      	ldrh	r3, [r3, #0]
 800685e:	461a      	mov	r2, r3
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006868:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6a1b      	ldr	r3, [r3, #32]
 800686e:	1c9a      	adds	r2, r3, #2
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	621a      	str	r2, [r3, #32]
 8006874:	e008      	b.n	8006888 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6a1b      	ldr	r3, [r3, #32]
 800687a:	1c59      	adds	r1, r3, #1
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	6211      	str	r1, [r2, #32]
 8006880:	781a      	ldrb	r2, [r3, #0]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800688c:	b29b      	uxth	r3, r3
 800688e:	3b01      	subs	r3, #1
 8006890:	b29b      	uxth	r3, r3
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	4619      	mov	r1, r3
 8006896:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006898:	2b00      	cmp	r3, #0
 800689a:	d10f      	bne.n	80068bc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	68da      	ldr	r2, [r3, #12]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80068aa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	68da      	ldr	r2, [r3, #12]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068ba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80068bc:	2300      	movs	r3, #0
 80068be:	e000      	b.n	80068c2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80068c0:	2302      	movs	r3, #2
  }
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3714      	adds	r7, #20
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bc80      	pop	{r7}
 80068ca:	4770      	bx	lr

080068cc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b082      	sub	sp, #8
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	68da      	ldr	r2, [r3, #12]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068e2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2220      	movs	r2, #32
 80068e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f7fa fb97 	bl	8001020 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80068f2:	2300      	movs	r3, #0
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3708      	adds	r7, #8
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b08c      	sub	sp, #48	; 0x30
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800690a:	b2db      	uxtb	r3, r3
 800690c:	2b22      	cmp	r3, #34	; 0x22
 800690e:	f040 80ae 	bne.w	8006a6e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800691a:	d117      	bne.n	800694c <UART_Receive_IT+0x50>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	691b      	ldr	r3, [r3, #16]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d113      	bne.n	800694c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006924:	2300      	movs	r3, #0
 8006926:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800692c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	b29b      	uxth	r3, r3
 8006936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800693a:	b29a      	uxth	r2, r3
 800693c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800693e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006944:	1c9a      	adds	r2, r3, #2
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	629a      	str	r2, [r3, #40]	; 0x28
 800694a:	e026      	b.n	800699a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006950:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006952:	2300      	movs	r3, #0
 8006954:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800695e:	d007      	beq.n	8006970 <UART_Receive_IT+0x74>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d10a      	bne.n	800697e <UART_Receive_IT+0x82>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	691b      	ldr	r3, [r3, #16]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d106      	bne.n	800697e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	b2da      	uxtb	r2, r3
 8006978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800697a:	701a      	strb	r2, [r3, #0]
 800697c:	e008      	b.n	8006990 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	b2db      	uxtb	r3, r3
 8006986:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800698a:	b2da      	uxtb	r2, r3
 800698c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800698e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006994:	1c5a      	adds	r2, r3, #1
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800699e:	b29b      	uxth	r3, r3
 80069a0:	3b01      	subs	r3, #1
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	4619      	mov	r1, r3
 80069a8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d15d      	bne.n	8006a6a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	68da      	ldr	r2, [r3, #12]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f022 0220 	bic.w	r2, r2, #32
 80069bc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	68da      	ldr	r2, [r3, #12]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80069cc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	695a      	ldr	r2, [r3, #20]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f022 0201 	bic.w	r2, r2, #1
 80069dc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2220      	movs	r2, #32
 80069e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2200      	movs	r2, #0
 80069ea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d135      	bne.n	8006a60 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2200      	movs	r2, #0
 80069f8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	330c      	adds	r3, #12
 8006a00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	e853 3f00 	ldrex	r3, [r3]
 8006a08:	613b      	str	r3, [r7, #16]
   return(result);
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	f023 0310 	bic.w	r3, r3, #16
 8006a10:	627b      	str	r3, [r7, #36]	; 0x24
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	330c      	adds	r3, #12
 8006a18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a1a:	623a      	str	r2, [r7, #32]
 8006a1c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a1e:	69f9      	ldr	r1, [r7, #28]
 8006a20:	6a3a      	ldr	r2, [r7, #32]
 8006a22:	e841 2300 	strex	r3, r2, [r1]
 8006a26:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a28:	69bb      	ldr	r3, [r7, #24]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d1e5      	bne.n	80069fa <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f003 0310 	and.w	r3, r3, #16
 8006a38:	2b10      	cmp	r3, #16
 8006a3a:	d10a      	bne.n	8006a52 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	60fb      	str	r3, [r7, #12]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	60fb      	str	r3, [r7, #12]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	60fb      	str	r3, [r7, #12]
 8006a50:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006a56:	4619      	mov	r1, r3
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f7fa faf3 	bl	8001044 <HAL_UARTEx_RxEventCallback>
 8006a5e:	e002      	b.n	8006a66 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f7fa facb 	bl	8000ffc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006a66:	2300      	movs	r3, #0
 8006a68:	e002      	b.n	8006a70 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	e000      	b.n	8006a70 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006a6e:	2302      	movs	r3, #2
  }
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3730      	adds	r7, #48	; 0x30
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}

08006a78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b084      	sub	sp, #16
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	691b      	ldr	r3, [r3, #16]
 8006a86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	68da      	ldr	r2, [r3, #12]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	430a      	orrs	r2, r1
 8006a94:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	689a      	ldr	r2, [r3, #8]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	691b      	ldr	r3, [r3, #16]
 8006a9e:	431a      	orrs	r2, r3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	695b      	ldr	r3, [r3, #20]
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	68db      	ldr	r3, [r3, #12]
 8006aae:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006ab2:	f023 030c 	bic.w	r3, r3, #12
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	6812      	ldr	r2, [r2, #0]
 8006aba:	68b9      	ldr	r1, [r7, #8]
 8006abc:	430b      	orrs	r3, r1
 8006abe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	695b      	ldr	r3, [r3, #20]
 8006ac6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	699a      	ldr	r2, [r3, #24]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	430a      	orrs	r2, r1
 8006ad4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a2c      	ldr	r2, [pc, #176]	; (8006b8c <UART_SetConfig+0x114>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d103      	bne.n	8006ae8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006ae0:	f7fe fc0a 	bl	80052f8 <HAL_RCC_GetPCLK2Freq>
 8006ae4:	60f8      	str	r0, [r7, #12]
 8006ae6:	e002      	b.n	8006aee <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006ae8:	f7fe fbf2 	bl	80052d0 <HAL_RCC_GetPCLK1Freq>
 8006aec:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006aee:	68fa      	ldr	r2, [r7, #12]
 8006af0:	4613      	mov	r3, r2
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	4413      	add	r3, r2
 8006af6:	009a      	lsls	r2, r3, #2
 8006af8:	441a      	add	r2, r3
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b04:	4a22      	ldr	r2, [pc, #136]	; (8006b90 <UART_SetConfig+0x118>)
 8006b06:	fba2 2303 	umull	r2, r3, r2, r3
 8006b0a:	095b      	lsrs	r3, r3, #5
 8006b0c:	0119      	lsls	r1, r3, #4
 8006b0e:	68fa      	ldr	r2, [r7, #12]
 8006b10:	4613      	mov	r3, r2
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	4413      	add	r3, r2
 8006b16:	009a      	lsls	r2, r3, #2
 8006b18:	441a      	add	r2, r3
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	fbb2 f2f3 	udiv	r2, r2, r3
 8006b24:	4b1a      	ldr	r3, [pc, #104]	; (8006b90 <UART_SetConfig+0x118>)
 8006b26:	fba3 0302 	umull	r0, r3, r3, r2
 8006b2a:	095b      	lsrs	r3, r3, #5
 8006b2c:	2064      	movs	r0, #100	; 0x64
 8006b2e:	fb00 f303 	mul.w	r3, r0, r3
 8006b32:	1ad3      	subs	r3, r2, r3
 8006b34:	011b      	lsls	r3, r3, #4
 8006b36:	3332      	adds	r3, #50	; 0x32
 8006b38:	4a15      	ldr	r2, [pc, #84]	; (8006b90 <UART_SetConfig+0x118>)
 8006b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b3e:	095b      	lsrs	r3, r3, #5
 8006b40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b44:	4419      	add	r1, r3
 8006b46:	68fa      	ldr	r2, [r7, #12]
 8006b48:	4613      	mov	r3, r2
 8006b4a:	009b      	lsls	r3, r3, #2
 8006b4c:	4413      	add	r3, r2
 8006b4e:	009a      	lsls	r2, r3, #2
 8006b50:	441a      	add	r2, r3
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	fbb2 f2f3 	udiv	r2, r2, r3
 8006b5c:	4b0c      	ldr	r3, [pc, #48]	; (8006b90 <UART_SetConfig+0x118>)
 8006b5e:	fba3 0302 	umull	r0, r3, r3, r2
 8006b62:	095b      	lsrs	r3, r3, #5
 8006b64:	2064      	movs	r0, #100	; 0x64
 8006b66:	fb00 f303 	mul.w	r3, r0, r3
 8006b6a:	1ad3      	subs	r3, r2, r3
 8006b6c:	011b      	lsls	r3, r3, #4
 8006b6e:	3332      	adds	r3, #50	; 0x32
 8006b70:	4a07      	ldr	r2, [pc, #28]	; (8006b90 <UART_SetConfig+0x118>)
 8006b72:	fba2 2303 	umull	r2, r3, r2, r3
 8006b76:	095b      	lsrs	r3, r3, #5
 8006b78:	f003 020f 	and.w	r2, r3, #15
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	440a      	add	r2, r1
 8006b82:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006b84:	bf00      	nop
 8006b86:	3710      	adds	r7, #16
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}
 8006b8c:	40013800 	.word	0x40013800
 8006b90:	51eb851f 	.word	0x51eb851f

08006b94 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006b94:	b480      	push	{r7}
 8006b96:	b085      	sub	sp, #20
 8006b98:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b9a:	f3ef 8305 	mrs	r3, IPSR
 8006b9e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006ba0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d10f      	bne.n	8006bc6 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ba6:	f3ef 8310 	mrs	r3, PRIMASK
 8006baa:	607b      	str	r3, [r7, #4]
  return(result);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d109      	bne.n	8006bc6 <osKernelInitialize+0x32>
 8006bb2:	4b10      	ldr	r3, [pc, #64]	; (8006bf4 <osKernelInitialize+0x60>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	2b02      	cmp	r3, #2
 8006bb8:	d109      	bne.n	8006bce <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006bba:	f3ef 8311 	mrs	r3, BASEPRI
 8006bbe:	603b      	str	r3, [r7, #0]
  return(result);
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d003      	beq.n	8006bce <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8006bc6:	f06f 0305 	mvn.w	r3, #5
 8006bca:	60fb      	str	r3, [r7, #12]
 8006bcc:	e00c      	b.n	8006be8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006bce:	4b09      	ldr	r3, [pc, #36]	; (8006bf4 <osKernelInitialize+0x60>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d105      	bne.n	8006be2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8006bd6:	4b07      	ldr	r3, [pc, #28]	; (8006bf4 <osKernelInitialize+0x60>)
 8006bd8:	2201      	movs	r2, #1
 8006bda:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	60fb      	str	r3, [r7, #12]
 8006be0:	e002      	b.n	8006be8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006be2:	f04f 33ff 	mov.w	r3, #4294967295
 8006be6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006be8:	68fb      	ldr	r3, [r7, #12]
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3714      	adds	r7, #20
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bc80      	pop	{r7}
 8006bf2:	4770      	bx	lr
 8006bf4:	200003cc 	.word	0x200003cc

08006bf8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b084      	sub	sp, #16
 8006bfc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006bfe:	f3ef 8305 	mrs	r3, IPSR
 8006c02:	60bb      	str	r3, [r7, #8]
  return(result);
 8006c04:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d10f      	bne.n	8006c2a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c0a:	f3ef 8310 	mrs	r3, PRIMASK
 8006c0e:	607b      	str	r3, [r7, #4]
  return(result);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d109      	bne.n	8006c2a <osKernelStart+0x32>
 8006c16:	4b11      	ldr	r3, [pc, #68]	; (8006c5c <osKernelStart+0x64>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	2b02      	cmp	r3, #2
 8006c1c:	d109      	bne.n	8006c32 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006c1e:	f3ef 8311 	mrs	r3, BASEPRI
 8006c22:	603b      	str	r3, [r7, #0]
  return(result);
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d003      	beq.n	8006c32 <osKernelStart+0x3a>
    stat = osErrorISR;
 8006c2a:	f06f 0305 	mvn.w	r3, #5
 8006c2e:	60fb      	str	r3, [r7, #12]
 8006c30:	e00e      	b.n	8006c50 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8006c32:	4b0a      	ldr	r3, [pc, #40]	; (8006c5c <osKernelStart+0x64>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d107      	bne.n	8006c4a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8006c3a:	4b08      	ldr	r3, [pc, #32]	; (8006c5c <osKernelStart+0x64>)
 8006c3c:	2202      	movs	r2, #2
 8006c3e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8006c40:	f002 f89c 	bl	8008d7c <vTaskStartScheduler>
      stat = osOK;
 8006c44:	2300      	movs	r3, #0
 8006c46:	60fb      	str	r3, [r7, #12]
 8006c48:	e002      	b.n	8006c50 <osKernelStart+0x58>
    } else {
      stat = osError;
 8006c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8006c4e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006c50:	68fb      	ldr	r3, [r7, #12]
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3710      	adds	r7, #16
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
 8006c5a:	bf00      	nop
 8006c5c:	200003cc 	.word	0x200003cc

08006c60 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b092      	sub	sp, #72	; 0x48
 8006c64:	af04      	add	r7, sp, #16
 8006c66:	60f8      	str	r0, [r7, #12]
 8006c68:	60b9      	str	r1, [r7, #8]
 8006c6a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c70:	f3ef 8305 	mrs	r3, IPSR
 8006c74:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	f040 8094 	bne.w	8006da6 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c7e:	f3ef 8310 	mrs	r3, PRIMASK
 8006c82:	623b      	str	r3, [r7, #32]
  return(result);
 8006c84:	6a3b      	ldr	r3, [r7, #32]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	f040 808d 	bne.w	8006da6 <osThreadNew+0x146>
 8006c8c:	4b48      	ldr	r3, [pc, #288]	; (8006db0 <osThreadNew+0x150>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	2b02      	cmp	r3, #2
 8006c92:	d106      	bne.n	8006ca2 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006c94:	f3ef 8311 	mrs	r3, BASEPRI
 8006c98:	61fb      	str	r3, [r7, #28]
  return(result);
 8006c9a:	69fb      	ldr	r3, [r7, #28]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	f040 8082 	bne.w	8006da6 <osThreadNew+0x146>
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d07e      	beq.n	8006da6 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8006ca8:	2340      	movs	r3, #64	; 0x40
 8006caa:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8006cac:	2318      	movs	r3, #24
 8006cae:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8006cb4:	f107 031b 	add.w	r3, r7, #27
 8006cb8:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8006cba:	f04f 33ff 	mov.w	r3, #4294967295
 8006cbe:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d045      	beq.n	8006d52 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d002      	beq.n	8006cd4 <osThreadNew+0x74>
        name = attr->name;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	699b      	ldr	r3, [r3, #24]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d002      	beq.n	8006ce2 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	699b      	ldr	r3, [r3, #24]
 8006ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d008      	beq.n	8006cfa <osThreadNew+0x9a>
 8006ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cea:	2b38      	cmp	r3, #56	; 0x38
 8006cec:	d805      	bhi.n	8006cfa <osThreadNew+0x9a>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	f003 0301 	and.w	r3, r3, #1
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d001      	beq.n	8006cfe <osThreadNew+0x9e>
        return (NULL);
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	e054      	b.n	8006da8 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	695b      	ldr	r3, [r3, #20]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d003      	beq.n	8006d0e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	695b      	ldr	r3, [r3, #20]
 8006d0a:	089b      	lsrs	r3, r3, #2
 8006d0c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d00e      	beq.n	8006d34 <osThreadNew+0xd4>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	2ba7      	cmp	r3, #167	; 0xa7
 8006d1c:	d90a      	bls.n	8006d34 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d006      	beq.n	8006d34 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	695b      	ldr	r3, [r3, #20]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d002      	beq.n	8006d34 <osThreadNew+0xd4>
        mem = 1;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d32:	e010      	b.n	8006d56 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d10c      	bne.n	8006d56 <osThreadNew+0xf6>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d108      	bne.n	8006d56 <osThreadNew+0xf6>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	691b      	ldr	r3, [r3, #16]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d104      	bne.n	8006d56 <osThreadNew+0xf6>
          mem = 0;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d50:	e001      	b.n	8006d56 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8006d52:	2300      	movs	r3, #0
 8006d54:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8006d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d110      	bne.n	8006d7e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006d64:	9202      	str	r2, [sp, #8]
 8006d66:	9301      	str	r3, [sp, #4]
 8006d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d6a:	9300      	str	r3, [sp, #0]
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d70:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006d72:	68f8      	ldr	r0, [r7, #12]
 8006d74:	f001 fd7c 	bl	8008870 <xTaskCreateStatic>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	617b      	str	r3, [r7, #20]
 8006d7c:	e013      	b.n	8006da6 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8006d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d110      	bne.n	8006da6 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d86:	b29a      	uxth	r2, r3
 8006d88:	f107 0314 	add.w	r3, r7, #20
 8006d8c:	9301      	str	r3, [sp, #4]
 8006d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d90:	9300      	str	r3, [sp, #0]
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006d96:	68f8      	ldr	r0, [r7, #12]
 8006d98:	f001 fdc6 	bl	8008928 <xTaskCreate>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	d001      	beq.n	8006da6 <osThreadNew+0x146>
          hTask = NULL;
 8006da2:	2300      	movs	r3, #0
 8006da4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006da6:	697b      	ldr	r3, [r7, #20]
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3738      	adds	r7, #56	; 0x38
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}
 8006db0:	200003cc 	.word	0x200003cc

08006db4 <osThreadSetPriority>:
   */
  (void) thread_id;
  return 0;
}

osStatus_t osThreadSetPriority (osThreadId_t thread_id, osPriority_t priority) {
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b088      	sub	sp, #32
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006dc2:	f3ef 8305 	mrs	r3, IPSR
 8006dc6:	617b      	str	r3, [r7, #20]
  return(result);
 8006dc8:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d10f      	bne.n	8006dee <osThreadSetPriority+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006dce:	f3ef 8310 	mrs	r3, PRIMASK
 8006dd2:	613b      	str	r3, [r7, #16]
  return(result);
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d109      	bne.n	8006dee <osThreadSetPriority+0x3a>
 8006dda:	4b13      	ldr	r3, [pc, #76]	; (8006e28 <osThreadSetPriority+0x74>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	2b02      	cmp	r3, #2
 8006de0:	d109      	bne.n	8006df6 <osThreadSetPriority+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006de2:	f3ef 8311 	mrs	r3, BASEPRI
 8006de6:	60fb      	str	r3, [r7, #12]
  return(result);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d003      	beq.n	8006df6 <osThreadSetPriority+0x42>
    stat = osErrorISR;
 8006dee:	f06f 0305 	mvn.w	r3, #5
 8006df2:	61fb      	str	r3, [r7, #28]
 8006df4:	e013      	b.n	8006e1e <osThreadSetPriority+0x6a>
  }
  else if ((hTask == NULL) || (priority < osPriorityIdle) || (priority > osPriorityISR)) {
 8006df6:	69bb      	ldr	r3, [r7, #24]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d005      	beq.n	8006e08 <osThreadSetPriority+0x54>
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	dd02      	ble.n	8006e08 <osThreadSetPriority+0x54>
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	2b38      	cmp	r3, #56	; 0x38
 8006e06:	dd03      	ble.n	8006e10 <osThreadSetPriority+0x5c>
    stat = osErrorParameter;
 8006e08:	f06f 0303 	mvn.w	r3, #3
 8006e0c:	61fb      	str	r3, [r7, #28]
 8006e0e:	e006      	b.n	8006e1e <osThreadSetPriority+0x6a>
  }
  else {
    stat = osOK;
 8006e10:	2300      	movs	r3, #0
 8006e12:	61fb      	str	r3, [r7, #28]
    vTaskPrioritySet (hTask, (UBaseType_t)priority);
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	4619      	mov	r1, r3
 8006e18:	69b8      	ldr	r0, [r7, #24]
 8006e1a:	f001 ff0d 	bl	8008c38 <vTaskPrioritySet>
  }

  return (stat);
 8006e1e:	69fb      	ldr	r3, [r7, #28]
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3720      	adds	r7, #32
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}
 8006e28:	200003cc 	.word	0x200003cc

08006e2c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b086      	sub	sp, #24
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e34:	f3ef 8305 	mrs	r3, IPSR
 8006e38:	613b      	str	r3, [r7, #16]
  return(result);
 8006e3a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d10f      	bne.n	8006e60 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e40:	f3ef 8310 	mrs	r3, PRIMASK
 8006e44:	60fb      	str	r3, [r7, #12]
  return(result);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d109      	bne.n	8006e60 <osDelay+0x34>
 8006e4c:	4b0d      	ldr	r3, [pc, #52]	; (8006e84 <osDelay+0x58>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	2b02      	cmp	r3, #2
 8006e52:	d109      	bne.n	8006e68 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006e54:	f3ef 8311 	mrs	r3, BASEPRI
 8006e58:	60bb      	str	r3, [r7, #8]
  return(result);
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d003      	beq.n	8006e68 <osDelay+0x3c>
    stat = osErrorISR;
 8006e60:	f06f 0305 	mvn.w	r3, #5
 8006e64:	617b      	str	r3, [r7, #20]
 8006e66:	e007      	b.n	8006e78 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d002      	beq.n	8006e78 <osDelay+0x4c>
      vTaskDelay(ticks);
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f001 feac 	bl	8008bd0 <vTaskDelay>
    }
  }

  return (stat);
 8006e78:	697b      	ldr	r3, [r7, #20]
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3718      	adds	r7, #24
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}
 8006e82:	bf00      	nop
 8006e84:	200003cc 	.word	0x200003cc

08006e88 <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b088      	sub	sp, #32
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8006e90:	2300      	movs	r3, #0
 8006e92:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e94:	f3ef 8305 	mrs	r3, IPSR
 8006e98:	617b      	str	r3, [r7, #20]
  return(result);
 8006e9a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d13d      	bne.n	8006f1c <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ea0:	f3ef 8310 	mrs	r3, PRIMASK
 8006ea4:	613b      	str	r3, [r7, #16]
  return(result);
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d137      	bne.n	8006f1c <osEventFlagsNew+0x94>
 8006eac:	4b1e      	ldr	r3, [pc, #120]	; (8006f28 <osEventFlagsNew+0xa0>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	2b02      	cmp	r3, #2
 8006eb2:	d105      	bne.n	8006ec0 <osEventFlagsNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006eb4:	f3ef 8311 	mrs	r3, BASEPRI
 8006eb8:	60fb      	str	r3, [r7, #12]
  return(result);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d12d      	bne.n	8006f1c <osEventFlagsNew+0x94>
    mem = -1;
 8006ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8006ec4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d015      	beq.n	8006ef8 <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d006      	beq.n	8006ee2 <osEventFlagsNew+0x5a>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	68db      	ldr	r3, [r3, #12]
 8006ed8:	2b1f      	cmp	r3, #31
 8006eda:	d902      	bls.n	8006ee2 <osEventFlagsNew+0x5a>
        mem = 1;
 8006edc:	2301      	movs	r3, #1
 8006ede:	61bb      	str	r3, [r7, #24]
 8006ee0:	e00c      	b.n	8006efc <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d108      	bne.n	8006efc <osEventFlagsNew+0x74>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	68db      	ldr	r3, [r3, #12]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d104      	bne.n	8006efc <osEventFlagsNew+0x74>
          mem = 0;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	61bb      	str	r3, [r7, #24]
 8006ef6:	e001      	b.n	8006efc <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006efc:	69bb      	ldr	r3, [r7, #24]
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d106      	bne.n	8006f10 <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	4618      	mov	r0, r3
 8006f08:	f000 fa9a 	bl	8007440 <xEventGroupCreateStatic>
 8006f0c:	61f8      	str	r0, [r7, #28]
 8006f0e:	e005      	b.n	8006f1c <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 8006f10:	69bb      	ldr	r3, [r7, #24]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d102      	bne.n	8006f1c <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 8006f16:	f000 faca 	bl	80074ae <xEventGroupCreate>
 8006f1a:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8006f1c:	69fb      	ldr	r3, [r7, #28]
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3720      	adds	r7, #32
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop
 8006f28:	200003cc 	.word	0x200003cc

08006f2c <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b088      	sub	sp, #32
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8006f3a:	69bb      	ldr	r3, [r7, #24]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d004      	beq.n	8006f4a <osEventFlagsSet+0x1e>
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d003      	beq.n	8006f52 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8006f4a:	f06f 0303 	mvn.w	r3, #3
 8006f4e:	61fb      	str	r3, [r7, #28]
 8006f50:	e03a      	b.n	8006fc8 <osEventFlagsSet+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f52:	f3ef 8305 	mrs	r3, IPSR
 8006f56:	617b      	str	r3, [r7, #20]
  return(result);
 8006f58:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d10f      	bne.n	8006f7e <osEventFlagsSet+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f5e:	f3ef 8310 	mrs	r3, PRIMASK
 8006f62:	613b      	str	r3, [r7, #16]
  return(result);
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d109      	bne.n	8006f7e <osEventFlagsSet+0x52>
 8006f6a:	4b1a      	ldr	r3, [pc, #104]	; (8006fd4 <osEventFlagsSet+0xa8>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	2b02      	cmp	r3, #2
 8006f70:	d123      	bne.n	8006fba <osEventFlagsSet+0x8e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006f72:	f3ef 8311 	mrs	r3, BASEPRI
 8006f76:	60fb      	str	r3, [r7, #12]
  return(result);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d01d      	beq.n	8006fba <osEventFlagsSet+0x8e>
    yield = pdFALSE;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8006f82:	f107 0308 	add.w	r3, r7, #8
 8006f86:	461a      	mov	r2, r3
 8006f88:	6839      	ldr	r1, [r7, #0]
 8006f8a:	69b8      	ldr	r0, [r7, #24]
 8006f8c:	f000 fcae 	bl	80078ec <xEventGroupSetBitsFromISR>
 8006f90:	4603      	mov	r3, r0
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d003      	beq.n	8006f9e <osEventFlagsSet+0x72>
      rflags = (uint32_t)osErrorResource;
 8006f96:	f06f 0302 	mvn.w	r3, #2
 8006f9a:	61fb      	str	r3, [r7, #28]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8006f9c:	e013      	b.n	8006fc6 <osEventFlagsSet+0x9a>
    } else {
      rflags = flags;
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	61fb      	str	r3, [r7, #28]
      portYIELD_FROM_ISR (yield);
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d00e      	beq.n	8006fc6 <osEventFlagsSet+0x9a>
 8006fa8:	4b0b      	ldr	r3, [pc, #44]	; (8006fd8 <osEventFlagsSet+0xac>)
 8006faa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fae:	601a      	str	r2, [r3, #0]
 8006fb0:	f3bf 8f4f 	dsb	sy
 8006fb4:	f3bf 8f6f 	isb	sy
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8006fb8:	e005      	b.n	8006fc6 <osEventFlagsSet+0x9a>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8006fba:	6839      	ldr	r1, [r7, #0]
 8006fbc:	69b8      	ldr	r0, [r7, #24]
 8006fbe:	f000 fbce 	bl	800775e <xEventGroupSetBits>
 8006fc2:	61f8      	str	r0, [r7, #28]
 8006fc4:	e000      	b.n	8006fc8 <osEventFlagsSet+0x9c>
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8006fc6:	bf00      	nop
  }

  return (rflags);
 8006fc8:	69fb      	ldr	r3, [r7, #28]
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3720      	adds	r7, #32
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}
 8006fd2:	bf00      	nop
 8006fd4:	200003cc 	.word	0x200003cc
 8006fd8:	e000ed04 	.word	0xe000ed04

08006fdc <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b088      	sub	sp, #32
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8006fea:	69bb      	ldr	r3, [r7, #24]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d004      	beq.n	8006ffa <osEventFlagsClear+0x1e>
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d003      	beq.n	8007002 <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 8006ffa:	f06f 0303 	mvn.w	r3, #3
 8006ffe:	61fb      	str	r3, [r7, #28]
 8007000:	e029      	b.n	8007056 <osEventFlagsClear+0x7a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007002:	f3ef 8305 	mrs	r3, IPSR
 8007006:	617b      	str	r3, [r7, #20]
  return(result);
 8007008:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800700a:	2b00      	cmp	r3, #0
 800700c:	d10f      	bne.n	800702e <osEventFlagsClear+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800700e:	f3ef 8310 	mrs	r3, PRIMASK
 8007012:	613b      	str	r3, [r7, #16]
  return(result);
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d109      	bne.n	800702e <osEventFlagsClear+0x52>
 800701a:	4b11      	ldr	r3, [pc, #68]	; (8007060 <osEventFlagsClear+0x84>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	2b02      	cmp	r3, #2
 8007020:	d114      	bne.n	800704c <osEventFlagsClear+0x70>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007022:	f3ef 8311 	mrs	r3, BASEPRI
 8007026:	60fb      	str	r3, [r7, #12]
  return(result);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d00e      	beq.n	800704c <osEventFlagsClear+0x70>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 800702e:	69b8      	ldr	r0, [r7, #24]
 8007030:	f000 fb72 	bl	8007718 <xEventGroupGetBitsFromISR>
 8007034:	61f8      	str	r0, [r7, #28]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8007036:	6839      	ldr	r1, [r7, #0]
 8007038:	69b8      	ldr	r0, [r7, #24]
 800703a:	f000 fb59 	bl	80076f0 <xEventGroupClearBitsFromISR>
 800703e:	4603      	mov	r3, r0
 8007040:	2b00      	cmp	r3, #0
 8007042:	d108      	bne.n	8007056 <osEventFlagsClear+0x7a>
      rflags = (uint32_t)osErrorResource;
 8007044:	f06f 0302 	mvn.w	r3, #2
 8007048:	61fb      	str	r3, [r7, #28]
    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 800704a:	e004      	b.n	8007056 <osEventFlagsClear+0x7a>
    }
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 800704c:	6839      	ldr	r1, [r7, #0]
 800704e:	69b8      	ldr	r0, [r7, #24]
 8007050:	f000 fb16 	bl	8007680 <xEventGroupClearBits>
 8007054:	61f8      	str	r0, [r7, #28]
  }

  return (rflags);
 8007056:	69fb      	ldr	r3, [r7, #28]
}
 8007058:	4618      	mov	r0, r3
 800705a:	3720      	adds	r7, #32
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}
 8007060:	200003cc 	.word	0x200003cc

08007064 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8007064:	b580      	push	{r7, lr}
 8007066:	b08e      	sub	sp, #56	; 0x38
 8007068:	af02      	add	r7, sp, #8
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	60b9      	str	r1, [r7, #8]
 800706e:	607a      	str	r2, [r7, #4]
 8007070:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	623b      	str	r3, [r7, #32]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8007076:	6a3b      	ldr	r3, [r7, #32]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d004      	beq.n	8007086 <osEventFlagsWait+0x22>
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007082:	2b00      	cmp	r3, #0
 8007084:	d003      	beq.n	800708e <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8007086:	f06f 0303 	mvn.w	r3, #3
 800708a:	627b      	str	r3, [r7, #36]	; 0x24
 800708c:	e059      	b.n	8007142 <osEventFlagsWait+0xde>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800708e:	f3ef 8305 	mrs	r3, IPSR
 8007092:	61fb      	str	r3, [r7, #28]
  return(result);
 8007094:	69fb      	ldr	r3, [r7, #28]
  }
  else if (IS_IRQ()) {
 8007096:	2b00      	cmp	r3, #0
 8007098:	d10f      	bne.n	80070ba <osEventFlagsWait+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800709a:	f3ef 8310 	mrs	r3, PRIMASK
 800709e:	61bb      	str	r3, [r7, #24]
  return(result);
 80070a0:	69bb      	ldr	r3, [r7, #24]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d109      	bne.n	80070ba <osEventFlagsWait+0x56>
 80070a6:	4b29      	ldr	r3, [pc, #164]	; (800714c <osEventFlagsWait+0xe8>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	2b02      	cmp	r3, #2
 80070ac:	d109      	bne.n	80070c2 <osEventFlagsWait+0x5e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80070ae:	f3ef 8311 	mrs	r3, BASEPRI
 80070b2:	617b      	str	r3, [r7, #20]
  return(result);
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d003      	beq.n	80070c2 <osEventFlagsWait+0x5e>
    rflags = (uint32_t)osErrorISR;
 80070ba:	f06f 0305 	mvn.w	r3, #5
 80070be:	627b      	str	r3, [r7, #36]	; 0x24
 80070c0:	e03f      	b.n	8007142 <osEventFlagsWait+0xde>
  }
  else {
    if (options & osFlagsWaitAll) {
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f003 0301 	and.w	r3, r3, #1
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d002      	beq.n	80070d2 <osEventFlagsWait+0x6e>
      wait_all = pdTRUE;
 80070cc:	2301      	movs	r3, #1
 80070ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070d0:	e001      	b.n	80070d6 <osEventFlagsWait+0x72>
    } else {
      wait_all = pdFAIL;
 80070d2:	2300      	movs	r3, #0
 80070d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    if (options & osFlagsNoClear) {
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f003 0302 	and.w	r3, r3, #2
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d002      	beq.n	80070e6 <osEventFlagsWait+0x82>
      exit_clr = pdFAIL;
 80070e0:	2300      	movs	r3, #0
 80070e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80070e4:	e001      	b.n	80070ea <osEventFlagsWait+0x86>
    } else {
      exit_clr = pdTRUE;
 80070e6:	2301      	movs	r3, #1
 80070e8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	9300      	str	r3, [sp, #0]
 80070ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070f2:	68b9      	ldr	r1, [r7, #8]
 80070f4:	6a38      	ldr	r0, [r7, #32]
 80070f6:	f000 f9f5 	bl	80074e4 <xEventGroupWaitBits>
 80070fa:	6278      	str	r0, [r7, #36]	; 0x24

    if (options & osFlagsWaitAll) {
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f003 0301 	and.w	r3, r3, #1
 8007102:	2b00      	cmp	r3, #0
 8007104:	d00e      	beq.n	8007124 <osEventFlagsWait+0xc0>
      if (flags != rflags) {
 8007106:	68ba      	ldr	r2, [r7, #8]
 8007108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710a:	429a      	cmp	r2, r3
 800710c:	d019      	beq.n	8007142 <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d003      	beq.n	800711c <osEventFlagsWait+0xb8>
          rflags = (uint32_t)osErrorTimeout;
 8007114:	f06f 0301 	mvn.w	r3, #1
 8007118:	627b      	str	r3, [r7, #36]	; 0x24
 800711a:	e012      	b.n	8007142 <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 800711c:	f06f 0302 	mvn.w	r3, #2
 8007120:	627b      	str	r3, [r7, #36]	; 0x24
 8007122:	e00e      	b.n	8007142 <osEventFlagsWait+0xde>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8007124:	68ba      	ldr	r2, [r7, #8]
 8007126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007128:	4013      	ands	r3, r2
 800712a:	2b00      	cmp	r3, #0
 800712c:	d109      	bne.n	8007142 <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d003      	beq.n	800713c <osEventFlagsWait+0xd8>
          rflags = (uint32_t)osErrorTimeout;
 8007134:	f06f 0301 	mvn.w	r3, #1
 8007138:	627b      	str	r3, [r7, #36]	; 0x24
 800713a:	e002      	b.n	8007142 <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 800713c:	f06f 0302 	mvn.w	r3, #2
 8007140:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }
  }

  return (rflags);
 8007142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007144:	4618      	mov	r0, r3
 8007146:	3730      	adds	r7, #48	; 0x30
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}
 800714c:	200003cc 	.word	0x200003cc

08007150 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8007150:	b580      	push	{r7, lr}
 8007152:	b08a      	sub	sp, #40	; 0x28
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8007158:	2300      	movs	r3, #0
 800715a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800715c:	f3ef 8305 	mrs	r3, IPSR
 8007160:	613b      	str	r3, [r7, #16]
  return(result);
 8007162:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8007164:	2b00      	cmp	r3, #0
 8007166:	f040 8085 	bne.w	8007274 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800716a:	f3ef 8310 	mrs	r3, PRIMASK
 800716e:	60fb      	str	r3, [r7, #12]
  return(result);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d17e      	bne.n	8007274 <osMutexNew+0x124>
 8007176:	4b42      	ldr	r3, [pc, #264]	; (8007280 <osMutexNew+0x130>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	2b02      	cmp	r3, #2
 800717c:	d105      	bne.n	800718a <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800717e:	f3ef 8311 	mrs	r3, BASEPRI
 8007182:	60bb      	str	r3, [r7, #8]
  return(result);
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d174      	bne.n	8007274 <osMutexNew+0x124>
    if (attr != NULL) {
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d003      	beq.n	8007198 <osMutexNew+0x48>
      type = attr->attr_bits;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	623b      	str	r3, [r7, #32]
 8007196:	e001      	b.n	800719c <osMutexNew+0x4c>
    } else {
      type = 0U;
 8007198:	2300      	movs	r3, #0
 800719a:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800719c:	6a3b      	ldr	r3, [r7, #32]
 800719e:	f003 0301 	and.w	r3, r3, #1
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d002      	beq.n	80071ac <osMutexNew+0x5c>
      rmtx = 1U;
 80071a6:	2301      	movs	r3, #1
 80071a8:	61fb      	str	r3, [r7, #28]
 80071aa:	e001      	b.n	80071b0 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 80071ac:	2300      	movs	r3, #0
 80071ae:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80071b0:	6a3b      	ldr	r3, [r7, #32]
 80071b2:	f003 0308 	and.w	r3, r3, #8
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d15c      	bne.n	8007274 <osMutexNew+0x124>
      mem = -1;
 80071ba:	f04f 33ff 	mov.w	r3, #4294967295
 80071be:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d015      	beq.n	80071f2 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d006      	beq.n	80071dc <osMutexNew+0x8c>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	68db      	ldr	r3, [r3, #12]
 80071d2:	2b4f      	cmp	r3, #79	; 0x4f
 80071d4:	d902      	bls.n	80071dc <osMutexNew+0x8c>
          mem = 1;
 80071d6:	2301      	movs	r3, #1
 80071d8:	61bb      	str	r3, [r7, #24]
 80071da:	e00c      	b.n	80071f6 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d108      	bne.n	80071f6 <osMutexNew+0xa6>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	68db      	ldr	r3, [r3, #12]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d104      	bne.n	80071f6 <osMutexNew+0xa6>
            mem = 0;
 80071ec:	2300      	movs	r3, #0
 80071ee:	61bb      	str	r3, [r7, #24]
 80071f0:	e001      	b.n	80071f6 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 80071f2:	2300      	movs	r3, #0
 80071f4:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80071f6:	69bb      	ldr	r3, [r7, #24]
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	d112      	bne.n	8007222 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 80071fc:	69fb      	ldr	r3, [r7, #28]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d007      	beq.n	8007212 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	4619      	mov	r1, r3
 8007208:	2004      	movs	r0, #4
 800720a:	f000 fda5 	bl	8007d58 <xQueueCreateMutexStatic>
 800720e:	6278      	str	r0, [r7, #36]	; 0x24
 8007210:	e016      	b.n	8007240 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	4619      	mov	r1, r3
 8007218:	2001      	movs	r0, #1
 800721a:	f000 fd9d 	bl	8007d58 <xQueueCreateMutexStatic>
 800721e:	6278      	str	r0, [r7, #36]	; 0x24
 8007220:	e00e      	b.n	8007240 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8007222:	69bb      	ldr	r3, [r7, #24]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d10b      	bne.n	8007240 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8007228:	69fb      	ldr	r3, [r7, #28]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d004      	beq.n	8007238 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800722e:	2004      	movs	r0, #4
 8007230:	f000 fd7a 	bl	8007d28 <xQueueCreateMutex>
 8007234:	6278      	str	r0, [r7, #36]	; 0x24
 8007236:	e003      	b.n	8007240 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8007238:	2001      	movs	r0, #1
 800723a:	f000 fd75 	bl	8007d28 <xQueueCreateMutex>
 800723e:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8007240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007242:	2b00      	cmp	r3, #0
 8007244:	d00c      	beq.n	8007260 <osMutexNew+0x110>
        if (attr != NULL) {
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d003      	beq.n	8007254 <osMutexNew+0x104>
          name = attr->name;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	617b      	str	r3, [r7, #20]
 8007252:	e001      	b.n	8007258 <osMutexNew+0x108>
        } else {
          name = NULL;
 8007254:	2300      	movs	r3, #0
 8007256:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8007258:	6979      	ldr	r1, [r7, #20]
 800725a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800725c:	f001 faac 	bl	80087b8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8007260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007262:	2b00      	cmp	r3, #0
 8007264:	d006      	beq.n	8007274 <osMutexNew+0x124>
 8007266:	69fb      	ldr	r3, [r7, #28]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d003      	beq.n	8007274 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800726c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800726e:	f043 0301 	orr.w	r3, r3, #1
 8007272:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8007274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007276:	4618      	mov	r0, r3
 8007278:	3728      	adds	r7, #40	; 0x28
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
 800727e:	bf00      	nop
 8007280:	200003cc 	.word	0x200003cc

08007284 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8007284:	b580      	push	{r7, lr}
 8007286:	b088      	sub	sp, #32
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f023 0301 	bic.w	r3, r3, #1
 8007294:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f003 0301 	and.w	r3, r3, #1
 800729c:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800729e:	2300      	movs	r3, #0
 80072a0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80072a2:	f3ef 8305 	mrs	r3, IPSR
 80072a6:	613b      	str	r3, [r7, #16]
  return(result);
 80072a8:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d10f      	bne.n	80072ce <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072ae:	f3ef 8310 	mrs	r3, PRIMASK
 80072b2:	60fb      	str	r3, [r7, #12]
  return(result);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d109      	bne.n	80072ce <osMutexAcquire+0x4a>
 80072ba:	4b20      	ldr	r3, [pc, #128]	; (800733c <osMutexAcquire+0xb8>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	2b02      	cmp	r3, #2
 80072c0:	d109      	bne.n	80072d6 <osMutexAcquire+0x52>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80072c2:	f3ef 8311 	mrs	r3, BASEPRI
 80072c6:	60bb      	str	r3, [r7, #8]
  return(result);
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d003      	beq.n	80072d6 <osMutexAcquire+0x52>
    stat = osErrorISR;
 80072ce:	f06f 0305 	mvn.w	r3, #5
 80072d2:	61fb      	str	r3, [r7, #28]
 80072d4:	e02c      	b.n	8007330 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 80072d6:	69bb      	ldr	r3, [r7, #24]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d103      	bne.n	80072e4 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 80072dc:	f06f 0303 	mvn.w	r3, #3
 80072e0:	61fb      	str	r3, [r7, #28]
 80072e2:	e025      	b.n	8007330 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d011      	beq.n	800730e <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80072ea:	6839      	ldr	r1, [r7, #0]
 80072ec:	69b8      	ldr	r0, [r7, #24]
 80072ee:	f000 fd82 	bl	8007df6 <xQueueTakeMutexRecursive>
 80072f2:	4603      	mov	r3, r0
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d01b      	beq.n	8007330 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d003      	beq.n	8007306 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 80072fe:	f06f 0301 	mvn.w	r3, #1
 8007302:	61fb      	str	r3, [r7, #28]
 8007304:	e014      	b.n	8007330 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8007306:	f06f 0302 	mvn.w	r3, #2
 800730a:	61fb      	str	r3, [r7, #28]
 800730c:	e010      	b.n	8007330 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800730e:	6839      	ldr	r1, [r7, #0]
 8007310:	69b8      	ldr	r0, [r7, #24]
 8007312:	f001 f81d 	bl	8008350 <xQueueSemaphoreTake>
 8007316:	4603      	mov	r3, r0
 8007318:	2b01      	cmp	r3, #1
 800731a:	d009      	beq.n	8007330 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d003      	beq.n	800732a <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8007322:	f06f 0301 	mvn.w	r3, #1
 8007326:	61fb      	str	r3, [r7, #28]
 8007328:	e002      	b.n	8007330 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800732a:	f06f 0302 	mvn.w	r3, #2
 800732e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007330:	69fb      	ldr	r3, [r7, #28]
}
 8007332:	4618      	mov	r0, r3
 8007334:	3720      	adds	r7, #32
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
 800733a:	bf00      	nop
 800733c:	200003cc 	.word	0x200003cc

08007340 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8007340:	b580      	push	{r7, lr}
 8007342:	b088      	sub	sp, #32
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f023 0301 	bic.w	r3, r3, #1
 800734e:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f003 0301 	and.w	r3, r3, #1
 8007356:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8007358:	2300      	movs	r3, #0
 800735a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800735c:	f3ef 8305 	mrs	r3, IPSR
 8007360:	613b      	str	r3, [r7, #16]
  return(result);
 8007362:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8007364:	2b00      	cmp	r3, #0
 8007366:	d10f      	bne.n	8007388 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007368:	f3ef 8310 	mrs	r3, PRIMASK
 800736c:	60fb      	str	r3, [r7, #12]
  return(result);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d109      	bne.n	8007388 <osMutexRelease+0x48>
 8007374:	4b19      	ldr	r3, [pc, #100]	; (80073dc <osMutexRelease+0x9c>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	2b02      	cmp	r3, #2
 800737a:	d109      	bne.n	8007390 <osMutexRelease+0x50>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800737c:	f3ef 8311 	mrs	r3, BASEPRI
 8007380:	60bb      	str	r3, [r7, #8]
  return(result);
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d003      	beq.n	8007390 <osMutexRelease+0x50>
    stat = osErrorISR;
 8007388:	f06f 0305 	mvn.w	r3, #5
 800738c:	61fb      	str	r3, [r7, #28]
 800738e:	e01f      	b.n	80073d0 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8007390:	69bb      	ldr	r3, [r7, #24]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d103      	bne.n	800739e <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8007396:	f06f 0303 	mvn.w	r3, #3
 800739a:	61fb      	str	r3, [r7, #28]
 800739c:	e018      	b.n	80073d0 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d009      	beq.n	80073b8 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80073a4:	69b8      	ldr	r0, [r7, #24]
 80073a6:	f000 fcf2 	bl	8007d8e <xQueueGiveMutexRecursive>
 80073aa:	4603      	mov	r3, r0
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d00f      	beq.n	80073d0 <osMutexRelease+0x90>
        stat = osErrorResource;
 80073b0:	f06f 0302 	mvn.w	r3, #2
 80073b4:	61fb      	str	r3, [r7, #28]
 80073b6:	e00b      	b.n	80073d0 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80073b8:	2300      	movs	r3, #0
 80073ba:	2200      	movs	r2, #0
 80073bc:	2100      	movs	r1, #0
 80073be:	69b8      	ldr	r0, [r7, #24]
 80073c0:	f000 fd50 	bl	8007e64 <xQueueGenericSend>
 80073c4:	4603      	mov	r3, r0
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d002      	beq.n	80073d0 <osMutexRelease+0x90>
        stat = osErrorResource;
 80073ca:	f06f 0302 	mvn.w	r3, #2
 80073ce:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 80073d0:	69fb      	ldr	r3, [r7, #28]
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3720      	adds	r7, #32
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}
 80073da:	bf00      	nop
 80073dc:	200003cc 	.word	0x200003cc

080073e0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80073e0:	b480      	push	{r7}
 80073e2:	b085      	sub	sp, #20
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	60f8      	str	r0, [r7, #12]
 80073e8:	60b9      	str	r1, [r7, #8]
 80073ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	4a06      	ldr	r2, [pc, #24]	; (8007408 <vApplicationGetIdleTaskMemory+0x28>)
 80073f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	4a05      	ldr	r2, [pc, #20]	; (800740c <vApplicationGetIdleTaskMemory+0x2c>)
 80073f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2240      	movs	r2, #64	; 0x40
 80073fc:	601a      	str	r2, [r3, #0]
}
 80073fe:	bf00      	nop
 8007400:	3714      	adds	r7, #20
 8007402:	46bd      	mov	sp, r7
 8007404:	bc80      	pop	{r7}
 8007406:	4770      	bx	lr
 8007408:	200003d0 	.word	0x200003d0
 800740c:	20000478 	.word	0x20000478

08007410 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007410:	b480      	push	{r7}
 8007412:	b085      	sub	sp, #20
 8007414:	af00      	add	r7, sp, #0
 8007416:	60f8      	str	r0, [r7, #12]
 8007418:	60b9      	str	r1, [r7, #8]
 800741a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	4a06      	ldr	r2, [pc, #24]	; (8007438 <vApplicationGetTimerTaskMemory+0x28>)
 8007420:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	4a05      	ldr	r2, [pc, #20]	; (800743c <vApplicationGetTimerTaskMemory+0x2c>)
 8007426:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2280      	movs	r2, #128	; 0x80
 800742c:	601a      	str	r2, [r3, #0]
}
 800742e:	bf00      	nop
 8007430:	3714      	adds	r7, #20
 8007432:	46bd      	mov	sp, r7
 8007434:	bc80      	pop	{r7}
 8007436:	4770      	bx	lr
 8007438:	20000578 	.word	0x20000578
 800743c:	20000620 	.word	0x20000620

08007440 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8007440:	b580      	push	{r7, lr}
 8007442:	b086      	sub	sp, #24
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d10a      	bne.n	8007464 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800744e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007452:	f383 8811 	msr	BASEPRI, r3
 8007456:	f3bf 8f6f 	isb	sy
 800745a:	f3bf 8f4f 	dsb	sy
 800745e:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007460:	bf00      	nop
 8007462:	e7fe      	b.n	8007462 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8007464:	2320      	movs	r3, #32
 8007466:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	2b20      	cmp	r3, #32
 800746c:	d00a      	beq.n	8007484 <xEventGroupCreateStatic+0x44>
	__asm volatile
 800746e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007472:	f383 8811 	msr	BASEPRI, r3
 8007476:	f3bf 8f6f 	isb	sy
 800747a:	f3bf 8f4f 	dsb	sy
 800747e:	60fb      	str	r3, [r7, #12]
}
 8007480:	bf00      	nop
 8007482:	e7fe      	b.n	8007482 <xEventGroupCreateStatic+0x42>
		}
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 EventGroup_t and StaticEventGroup_t are guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d00a      	beq.n	80074a4 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	2200      	movs	r2, #0
 8007492:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	3304      	adds	r3, #4
 8007498:	4618      	mov	r0, r3
 800749a:	f000 fa3b 	bl	8007914 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	2201      	movs	r2, #1
 80074a2:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 80074a4:	697b      	ldr	r3, [r7, #20]
	}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3718      	adds	r7, #24
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}

080074ae <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80074ae:	b580      	push	{r7, lr}
 80074b0:	b082      	sub	sp, #8
 80074b2:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 80074b4:	2020      	movs	r0, #32
 80074b6:	f003 f891 	bl	800a5dc <pvPortMalloc>
 80074ba:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d00a      	beq.n	80074d8 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2200      	movs	r2, #0
 80074c6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	3304      	adds	r3, #4
 80074cc:	4618      	mov	r0, r3
 80074ce:	f000 fa21 	bl	8007914 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 80074d8:	687b      	ldr	r3, [r7, #4]
	}
 80074da:	4618      	mov	r0, r3
 80074dc:	3708      	adds	r7, #8
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}
	...

080074e4 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b090      	sub	sp, #64	; 0x40
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	60f8      	str	r0, [r7, #12]
 80074ec:	60b9      	str	r1, [r7, #8]
 80074ee:	607a      	str	r2, [r7, #4]
 80074f0:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80074f6:	2300      	movs	r3, #0
 80074f8:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80074fa:	2300      	movs	r3, #0
 80074fc:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d10a      	bne.n	800751a <xEventGroupWaitBits+0x36>
	__asm volatile
 8007504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007508:	f383 8811 	msr	BASEPRI, r3
 800750c:	f3bf 8f6f 	isb	sy
 8007510:	f3bf 8f4f 	dsb	sy
 8007514:	623b      	str	r3, [r7, #32]
}
 8007516:	bf00      	nop
 8007518:	e7fe      	b.n	8007518 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007520:	2b00      	cmp	r3, #0
 8007522:	d00a      	beq.n	800753a <xEventGroupWaitBits+0x56>
	__asm volatile
 8007524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007528:	f383 8811 	msr	BASEPRI, r3
 800752c:	f3bf 8f6f 	isb	sy
 8007530:	f3bf 8f4f 	dsb	sy
 8007534:	61fb      	str	r3, [r7, #28]
}
 8007536:	bf00      	nop
 8007538:	e7fe      	b.n	8007538 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d10a      	bne.n	8007556 <xEventGroupWaitBits+0x72>
	__asm volatile
 8007540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007544:	f383 8811 	msr	BASEPRI, r3
 8007548:	f3bf 8f6f 	isb	sy
 800754c:	f3bf 8f4f 	dsb	sy
 8007550:	61bb      	str	r3, [r7, #24]
}
 8007552:	bf00      	nop
 8007554:	e7fe      	b.n	8007554 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007556:	f002 f91f 	bl	8009798 <xTaskGetSchedulerState>
 800755a:	4603      	mov	r3, r0
 800755c:	2b00      	cmp	r3, #0
 800755e:	d102      	bne.n	8007566 <xEventGroupWaitBits+0x82>
 8007560:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007562:	2b00      	cmp	r3, #0
 8007564:	d101      	bne.n	800756a <xEventGroupWaitBits+0x86>
 8007566:	2301      	movs	r3, #1
 8007568:	e000      	b.n	800756c <xEventGroupWaitBits+0x88>
 800756a:	2300      	movs	r3, #0
 800756c:	2b00      	cmp	r3, #0
 800756e:	d10a      	bne.n	8007586 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8007570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007574:	f383 8811 	msr	BASEPRI, r3
 8007578:	f3bf 8f6f 	isb	sy
 800757c:	f3bf 8f4f 	dsb	sy
 8007580:	617b      	str	r3, [r7, #20]
}
 8007582:	bf00      	nop
 8007584:	e7fe      	b.n	8007584 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8007586:	f001 fc69 	bl	8008e5c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800758a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8007590:	683a      	ldr	r2, [r7, #0]
 8007592:	68b9      	ldr	r1, [r7, #8]
 8007594:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007596:	f000 f987 	bl	80078a8 <prvTestWaitCondition>
 800759a:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 800759c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d00e      	beq.n	80075c0 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80075a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075a4:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80075a6:	2300      	movs	r3, #0
 80075a8:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d028      	beq.n	8007602 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80075b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075b2:	681a      	ldr	r2, [r3, #0]
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	43db      	mvns	r3, r3
 80075b8:	401a      	ands	r2, r3
 80075ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075bc:	601a      	str	r2, [r3, #0]
 80075be:	e020      	b.n	8007602 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80075c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d104      	bne.n	80075d0 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80075c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075c8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 80075ca:	2301      	movs	r3, #1
 80075cc:	633b      	str	r3, [r7, #48]	; 0x30
 80075ce:	e018      	b.n	8007602 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d003      	beq.n	80075de <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80075d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80075dc:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d003      	beq.n	80075ec <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80075e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80075ea:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80075ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075ee:	1d18      	adds	r0, r3, #4
 80075f0:	68ba      	ldr	r2, [r7, #8]
 80075f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f4:	4313      	orrs	r3, r2
 80075f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075f8:	4619      	mov	r1, r3
 80075fa:	f001 fe2f 	bl	800925c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80075fe:	2300      	movs	r3, #0
 8007600:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8007602:	f001 fc39 	bl	8008e78 <xTaskResumeAll>
 8007606:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8007608:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800760a:	2b00      	cmp	r3, #0
 800760c:	d031      	beq.n	8007672 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800760e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007610:	2b00      	cmp	r3, #0
 8007612:	d107      	bne.n	8007624 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8007614:	4b19      	ldr	r3, [pc, #100]	; (800767c <xEventGroupWaitBits+0x198>)
 8007616:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800761a:	601a      	str	r2, [r3, #0]
 800761c:	f3bf 8f4f 	dsb	sy
 8007620:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8007624:	f002 fa38 	bl	8009a98 <uxTaskResetEventItemValue>
 8007628:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800762a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800762c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007630:	2b00      	cmp	r3, #0
 8007632:	d11a      	bne.n	800766a <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8007634:	f002 fed2 	bl	800a3dc <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8007638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800763e:	683a      	ldr	r2, [r7, #0]
 8007640:	68b9      	ldr	r1, [r7, #8]
 8007642:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007644:	f000 f930 	bl	80078a8 <prvTestWaitCondition>
 8007648:	4603      	mov	r3, r0
 800764a:	2b00      	cmp	r3, #0
 800764c:	d009      	beq.n	8007662 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d006      	beq.n	8007662 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8007654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007656:	681a      	ldr	r2, [r3, #0]
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	43db      	mvns	r3, r3
 800765c:	401a      	ands	r2, r3
 800765e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007660:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8007662:	2301      	movs	r3, #1
 8007664:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8007666:	f002 fee9 	bl	800a43c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800766a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800766c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007670:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8007672:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007674:	4618      	mov	r0, r3
 8007676:	3740      	adds	r7, #64	; 0x40
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}
 800767c:	e000ed04 	.word	0xe000ed04

08007680 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b086      	sub	sp, #24
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d10a      	bne.n	80076aa <xEventGroupClearBits+0x2a>
	__asm volatile
 8007694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007698:	f383 8811 	msr	BASEPRI, r3
 800769c:	f3bf 8f6f 	isb	sy
 80076a0:	f3bf 8f4f 	dsb	sy
 80076a4:	60fb      	str	r3, [r7, #12]
}
 80076a6:	bf00      	nop
 80076a8:	e7fe      	b.n	80076a8 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d00a      	beq.n	80076ca <xEventGroupClearBits+0x4a>
	__asm volatile
 80076b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b8:	f383 8811 	msr	BASEPRI, r3
 80076bc:	f3bf 8f6f 	isb	sy
 80076c0:	f3bf 8f4f 	dsb	sy
 80076c4:	60bb      	str	r3, [r7, #8]
}
 80076c6:	bf00      	nop
 80076c8:	e7fe      	b.n	80076c8 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 80076ca:	f002 fe87 	bl	800a3dc <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	681a      	ldr	r2, [r3, #0]
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	43db      	mvns	r3, r3
 80076dc:	401a      	ands	r2, r3
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 80076e2:	f002 feab 	bl	800a43c <vPortExitCritical>

	return uxReturn;
 80076e6:	693b      	ldr	r3, [r7, #16]
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3718      	adds	r7, #24
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}

080076f0 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b084      	sub	sp, #16
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL );
 80076fa:	2300      	movs	r3, #0
 80076fc:	683a      	ldr	r2, [r7, #0]
 80076fe:	6879      	ldr	r1, [r7, #4]
 8007700:	4804      	ldr	r0, [pc, #16]	; (8007714 <xEventGroupClearBitsFromISR+0x24>)
 8007702:	f002 fd5b 	bl	800a1bc <xTimerPendFunctionCallFromISR>
 8007706:	60f8      	str	r0, [r7, #12]

		return xReturn;
 8007708:	68fb      	ldr	r3, [r7, #12]
	}
 800770a:	4618      	mov	r0, r3
 800770c:	3710      	adds	r7, #16
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}
 8007712:	bf00      	nop
 8007714:	0800788f 	.word	0x0800788f

08007718 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8007718:	b480      	push	{r7}
 800771a:	b089      	sub	sp, #36	; 0x24
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007724:	f3ef 8211 	mrs	r2, BASEPRI
 8007728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800772c:	f383 8811 	msr	BASEPRI, r3
 8007730:	f3bf 8f6f 	isb	sy
 8007734:	f3bf 8f4f 	dsb	sy
 8007738:	60fa      	str	r2, [r7, #12]
 800773a:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800773c:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800773e:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8007740:	69fb      	ldr	r3, [r7, #28]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	617b      	str	r3, [r7, #20]
 8007746:	69bb      	ldr	r3, [r7, #24]
 8007748:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007750:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 8007752:	697b      	ldr	r3, [r7, #20]
}
 8007754:	4618      	mov	r0, r3
 8007756:	3724      	adds	r7, #36	; 0x24
 8007758:	46bd      	mov	sp, r7
 800775a:	bc80      	pop	{r7}
 800775c:	4770      	bx	lr

0800775e <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800775e:	b580      	push	{r7, lr}
 8007760:	b08e      	sub	sp, #56	; 0x38
 8007762:	af00      	add	r7, sp, #0
 8007764:	6078      	str	r0, [r7, #4]
 8007766:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8007768:	2300      	movs	r3, #0
 800776a:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8007770:	2300      	movs	r3, #0
 8007772:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d10a      	bne.n	8007790 <xEventGroupSetBits+0x32>
	__asm volatile
 800777a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800777e:	f383 8811 	msr	BASEPRI, r3
 8007782:	f3bf 8f6f 	isb	sy
 8007786:	f3bf 8f4f 	dsb	sy
 800778a:	613b      	str	r3, [r7, #16]
}
 800778c:	bf00      	nop
 800778e:	e7fe      	b.n	800778e <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007796:	2b00      	cmp	r3, #0
 8007798:	d00a      	beq.n	80077b0 <xEventGroupSetBits+0x52>
	__asm volatile
 800779a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800779e:	f383 8811 	msr	BASEPRI, r3
 80077a2:	f3bf 8f6f 	isb	sy
 80077a6:	f3bf 8f4f 	dsb	sy
 80077aa:	60fb      	str	r3, [r7, #12]
}
 80077ac:	bf00      	nop
 80077ae:	e7fe      	b.n	80077ae <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80077b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077b2:	3304      	adds	r3, #4
 80077b4:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b8:	3308      	adds	r3, #8
 80077ba:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80077bc:	f001 fb4e 	bl	8008e5c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80077c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c2:	68db      	ldr	r3, [r3, #12]
 80077c4:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80077c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c8:	681a      	ldr	r2, [r3, #0]
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	431a      	orrs	r2, r3
 80077ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d0:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80077d2:	e03c      	b.n	800784e <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80077d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80077da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80077e0:	2300      	movs	r3, #0
 80077e2:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80077e4:	69bb      	ldr	r3, [r7, #24]
 80077e6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80077ea:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80077ec:	69bb      	ldr	r3, [r7, #24]
 80077ee:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80077f2:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d108      	bne.n	8007810 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80077fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	69bb      	ldr	r3, [r7, #24]
 8007804:	4013      	ands	r3, r2
 8007806:	2b00      	cmp	r3, #0
 8007808:	d00b      	beq.n	8007822 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 800780a:	2301      	movs	r3, #1
 800780c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800780e:	e008      	b.n	8007822 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8007810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007812:	681a      	ldr	r2, [r3, #0]
 8007814:	69bb      	ldr	r3, [r7, #24]
 8007816:	4013      	ands	r3, r2
 8007818:	69ba      	ldr	r2, [r7, #24]
 800781a:	429a      	cmp	r2, r3
 800781c:	d101      	bne.n	8007822 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800781e:	2301      	movs	r3, #1
 8007820:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8007822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007824:	2b00      	cmp	r3, #0
 8007826:	d010      	beq.n	800784a <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800782e:	2b00      	cmp	r3, #0
 8007830:	d003      	beq.n	800783a <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8007832:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007834:	69bb      	ldr	r3, [r7, #24]
 8007836:	4313      	orrs	r3, r2
 8007838:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800783a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007842:	4619      	mov	r1, r3
 8007844:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007846:	f001 fdd5 	bl	80093f4 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800784a:	69fb      	ldr	r3, [r7, #28]
 800784c:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 800784e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007850:	6a3b      	ldr	r3, [r7, #32]
 8007852:	429a      	cmp	r2, r3
 8007854:	d1be      	bne.n	80077d4 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8007856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007858:	681a      	ldr	r2, [r3, #0]
 800785a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800785c:	43db      	mvns	r3, r3
 800785e:	401a      	ands	r2, r3
 8007860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007862:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8007864:	f001 fb08 	bl	8008e78 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8007868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800786a:	681b      	ldr	r3, [r3, #0]
}
 800786c:	4618      	mov	r0, r3
 800786e:	3738      	adds	r7, #56	; 0x38
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b082      	sub	sp, #8
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 800787e:	6839      	ldr	r1, [r7, #0]
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f7ff ff6c 	bl	800775e <xEventGroupSetBits>
}
 8007886:	bf00      	nop
 8007888:	3708      	adds	r7, #8
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}

0800788e <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 800788e:	b580      	push	{r7, lr}
 8007890:	b082      	sub	sp, #8
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]
 8007896:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
 8007898:	6839      	ldr	r1, [r7, #0]
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f7ff fef0 	bl	8007680 <xEventGroupClearBits>
}
 80078a0:	bf00      	nop
 80078a2:	3708      	adds	r7, #8
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}

080078a8 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80078a8:	b480      	push	{r7}
 80078aa:	b087      	sub	sp, #28
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	60f8      	str	r0, [r7, #12]
 80078b0:	60b9      	str	r1, [r7, #8]
 80078b2:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80078b4:	2300      	movs	r3, #0
 80078b6:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d107      	bne.n	80078ce <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80078be:	68fa      	ldr	r2, [r7, #12]
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	4013      	ands	r3, r2
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d00a      	beq.n	80078de <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80078c8:	2301      	movs	r3, #1
 80078ca:	617b      	str	r3, [r7, #20]
 80078cc:	e007      	b.n	80078de <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80078ce:	68fa      	ldr	r2, [r7, #12]
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	4013      	ands	r3, r2
 80078d4:	68ba      	ldr	r2, [r7, #8]
 80078d6:	429a      	cmp	r2, r3
 80078d8:	d101      	bne.n	80078de <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80078da:	2301      	movs	r3, #1
 80078dc:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80078de:	697b      	ldr	r3, [r7, #20]
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	371c      	adds	r7, #28
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bc80      	pop	{r7}
 80078e8:	4770      	bx	lr
	...

080078ec <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b086      	sub	sp, #24
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	60f8      	str	r0, [r7, #12]
 80078f4:	60b9      	str	r1, [r7, #8]
 80078f6:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	68ba      	ldr	r2, [r7, #8]
 80078fc:	68f9      	ldr	r1, [r7, #12]
 80078fe:	4804      	ldr	r0, [pc, #16]	; (8007910 <xEventGroupSetBitsFromISR+0x24>)
 8007900:	f002 fc5c 	bl	800a1bc <xTimerPendFunctionCallFromISR>
 8007904:	6178      	str	r0, [r7, #20]

		return xReturn;
 8007906:	697b      	ldr	r3, [r7, #20]
	}
 8007908:	4618      	mov	r0, r3
 800790a:	3718      	adds	r7, #24
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}
 8007910:	08007875 	.word	0x08007875

08007914 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007914:	b480      	push	{r7}
 8007916:	b083      	sub	sp, #12
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f103 0208 	add.w	r2, r3, #8
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f04f 32ff 	mov.w	r2, #4294967295
 800792c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f103 0208 	add.w	r2, r3, #8
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f103 0208 	add.w	r2, r3, #8
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2200      	movs	r2, #0
 8007946:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007948:	bf00      	nop
 800794a:	370c      	adds	r7, #12
 800794c:	46bd      	mov	sp, r7
 800794e:	bc80      	pop	{r7}
 8007950:	4770      	bx	lr

08007952 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007952:	b480      	push	{r7}
 8007954:	b083      	sub	sp, #12
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2200      	movs	r2, #0
 800795e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007960:	bf00      	nop
 8007962:	370c      	adds	r7, #12
 8007964:	46bd      	mov	sp, r7
 8007966:	bc80      	pop	{r7}
 8007968:	4770      	bx	lr

0800796a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800796a:	b480      	push	{r7}
 800796c:	b085      	sub	sp, #20
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
 8007972:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	68fa      	ldr	r2, [r7, #12]
 800797e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	689a      	ldr	r2, [r3, #8]
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	689b      	ldr	r3, [r3, #8]
 800798c:	683a      	ldr	r2, [r7, #0]
 800798e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	683a      	ldr	r2, [r7, #0]
 8007994:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	1c5a      	adds	r2, r3, #1
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	601a      	str	r2, [r3, #0]
}
 80079a6:	bf00      	nop
 80079a8:	3714      	adds	r7, #20
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bc80      	pop	{r7}
 80079ae:	4770      	bx	lr

080079b0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80079b0:	b480      	push	{r7}
 80079b2:	b085      	sub	sp, #20
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079c6:	d103      	bne.n	80079d0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	691b      	ldr	r3, [r3, #16]
 80079cc:	60fb      	str	r3, [r7, #12]
 80079ce:	e00c      	b.n	80079ea <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	3308      	adds	r3, #8
 80079d4:	60fb      	str	r3, [r7, #12]
 80079d6:	e002      	b.n	80079de <vListInsert+0x2e>
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	60fb      	str	r3, [r7, #12]
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	68ba      	ldr	r2, [r7, #8]
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d2f6      	bcs.n	80079d8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	685a      	ldr	r2, [r3, #4]
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	683a      	ldr	r2, [r7, #0]
 80079f8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	68fa      	ldr	r2, [r7, #12]
 80079fe:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	683a      	ldr	r2, [r7, #0]
 8007a04:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	687a      	ldr	r2, [r7, #4]
 8007a0a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	1c5a      	adds	r2, r3, #1
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	601a      	str	r2, [r3, #0]
}
 8007a16:	bf00      	nop
 8007a18:	3714      	adds	r7, #20
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bc80      	pop	{r7}
 8007a1e:	4770      	bx	lr

08007a20 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007a20:	b480      	push	{r7}
 8007a22:	b085      	sub	sp, #20
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	691b      	ldr	r3, [r3, #16]
 8007a2c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	6892      	ldr	r2, [r2, #8]
 8007a36:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	689b      	ldr	r3, [r3, #8]
 8007a3c:	687a      	ldr	r2, [r7, #4]
 8007a3e:	6852      	ldr	r2, [r2, #4]
 8007a40:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	687a      	ldr	r2, [r7, #4]
 8007a48:	429a      	cmp	r2, r3
 8007a4a:	d103      	bne.n	8007a54 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	689a      	ldr	r2, [r3, #8]
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2200      	movs	r2, #0
 8007a58:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	1e5a      	subs	r2, r3, #1
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3714      	adds	r7, #20
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bc80      	pop	{r7}
 8007a70:	4770      	bx	lr
	...

08007a74 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b084      	sub	sp, #16
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d10a      	bne.n	8007a9e <xQueueGenericReset+0x2a>
	__asm volatile
 8007a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a8c:	f383 8811 	msr	BASEPRI, r3
 8007a90:	f3bf 8f6f 	isb	sy
 8007a94:	f3bf 8f4f 	dsb	sy
 8007a98:	60bb      	str	r3, [r7, #8]
}
 8007a9a:	bf00      	nop
 8007a9c:	e7fe      	b.n	8007a9c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007a9e:	f002 fc9d 	bl	800a3dc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aaa:	68f9      	ldr	r1, [r7, #12]
 8007aac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007aae:	fb01 f303 	mul.w	r3, r1, r3
 8007ab2:	441a      	add	r2, r3
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2200      	movs	r2, #0
 8007abc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681a      	ldr	r2, [r3, #0]
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681a      	ldr	r2, [r3, #0]
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ace:	3b01      	subs	r3, #1
 8007ad0:	68f9      	ldr	r1, [r7, #12]
 8007ad2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007ad4:	fb01 f303 	mul.w	r3, r1, r3
 8007ad8:	441a      	add	r2, r3
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	22ff      	movs	r2, #255	; 0xff
 8007ae2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	22ff      	movs	r2, #255	; 0xff
 8007aea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d114      	bne.n	8007b1e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	691b      	ldr	r3, [r3, #16]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d01a      	beq.n	8007b32 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	3310      	adds	r3, #16
 8007b00:	4618      	mov	r0, r3
 8007b02:	f001 fc13 	bl	800932c <xTaskRemoveFromEventList>
 8007b06:	4603      	mov	r3, r0
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d012      	beq.n	8007b32 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007b0c:	4b0c      	ldr	r3, [pc, #48]	; (8007b40 <xQueueGenericReset+0xcc>)
 8007b0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b12:	601a      	str	r2, [r3, #0]
 8007b14:	f3bf 8f4f 	dsb	sy
 8007b18:	f3bf 8f6f 	isb	sy
 8007b1c:	e009      	b.n	8007b32 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	3310      	adds	r3, #16
 8007b22:	4618      	mov	r0, r3
 8007b24:	f7ff fef6 	bl	8007914 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	3324      	adds	r3, #36	; 0x24
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f7ff fef1 	bl	8007914 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007b32:	f002 fc83 	bl	800a43c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007b36:	2301      	movs	r3, #1
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3710      	adds	r7, #16
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}
 8007b40:	e000ed04 	.word	0xe000ed04

08007b44 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b08e      	sub	sp, #56	; 0x38
 8007b48:	af02      	add	r7, sp, #8
 8007b4a:	60f8      	str	r0, [r7, #12]
 8007b4c:	60b9      	str	r1, [r7, #8]
 8007b4e:	607a      	str	r2, [r7, #4]
 8007b50:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d10a      	bne.n	8007b6e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b5c:	f383 8811 	msr	BASEPRI, r3
 8007b60:	f3bf 8f6f 	isb	sy
 8007b64:	f3bf 8f4f 	dsb	sy
 8007b68:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007b6a:	bf00      	nop
 8007b6c:	e7fe      	b.n	8007b6c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d10a      	bne.n	8007b8a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b78:	f383 8811 	msr	BASEPRI, r3
 8007b7c:	f3bf 8f6f 	isb	sy
 8007b80:	f3bf 8f4f 	dsb	sy
 8007b84:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007b86:	bf00      	nop
 8007b88:	e7fe      	b.n	8007b88 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d002      	beq.n	8007b96 <xQueueGenericCreateStatic+0x52>
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d001      	beq.n	8007b9a <xQueueGenericCreateStatic+0x56>
 8007b96:	2301      	movs	r3, #1
 8007b98:	e000      	b.n	8007b9c <xQueueGenericCreateStatic+0x58>
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d10a      	bne.n	8007bb6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba4:	f383 8811 	msr	BASEPRI, r3
 8007ba8:	f3bf 8f6f 	isb	sy
 8007bac:	f3bf 8f4f 	dsb	sy
 8007bb0:	623b      	str	r3, [r7, #32]
}
 8007bb2:	bf00      	nop
 8007bb4:	e7fe      	b.n	8007bb4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d102      	bne.n	8007bc2 <xQueueGenericCreateStatic+0x7e>
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d101      	bne.n	8007bc6 <xQueueGenericCreateStatic+0x82>
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	e000      	b.n	8007bc8 <xQueueGenericCreateStatic+0x84>
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d10a      	bne.n	8007be2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd0:	f383 8811 	msr	BASEPRI, r3
 8007bd4:	f3bf 8f6f 	isb	sy
 8007bd8:	f3bf 8f4f 	dsb	sy
 8007bdc:	61fb      	str	r3, [r7, #28]
}
 8007bde:	bf00      	nop
 8007be0:	e7fe      	b.n	8007be0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007be2:	2350      	movs	r3, #80	; 0x50
 8007be4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	2b50      	cmp	r3, #80	; 0x50
 8007bea:	d00a      	beq.n	8007c02 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bf0:	f383 8811 	msr	BASEPRI, r3
 8007bf4:	f3bf 8f6f 	isb	sy
 8007bf8:	f3bf 8f4f 	dsb	sy
 8007bfc:	61bb      	str	r3, [r7, #24]
}
 8007bfe:	bf00      	nop
 8007c00:	e7fe      	b.n	8007c00 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d00d      	beq.n	8007c28 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c0e:	2201      	movs	r2, #1
 8007c10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007c14:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c1a:	9300      	str	r3, [sp, #0]
 8007c1c:	4613      	mov	r3, r2
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	68b9      	ldr	r1, [r7, #8]
 8007c22:	68f8      	ldr	r0, [r7, #12]
 8007c24:	f000 f843 	bl	8007cae <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3730      	adds	r7, #48	; 0x30
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}

08007c32 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007c32:	b580      	push	{r7, lr}
 8007c34:	b08a      	sub	sp, #40	; 0x28
 8007c36:	af02      	add	r7, sp, #8
 8007c38:	60f8      	str	r0, [r7, #12]
 8007c3a:	60b9      	str	r1, [r7, #8]
 8007c3c:	4613      	mov	r3, r2
 8007c3e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d10a      	bne.n	8007c5c <xQueueGenericCreate+0x2a>
	__asm volatile
 8007c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c4a:	f383 8811 	msr	BASEPRI, r3
 8007c4e:	f3bf 8f6f 	isb	sy
 8007c52:	f3bf 8f4f 	dsb	sy
 8007c56:	613b      	str	r3, [r7, #16]
}
 8007c58:	bf00      	nop
 8007c5a:	e7fe      	b.n	8007c5a <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d102      	bne.n	8007c68 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007c62:	2300      	movs	r3, #0
 8007c64:	61fb      	str	r3, [r7, #28]
 8007c66:	e004      	b.n	8007c72 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	68ba      	ldr	r2, [r7, #8]
 8007c6c:	fb02 f303 	mul.w	r3, r2, r3
 8007c70:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8007c72:	69fb      	ldr	r3, [r7, #28]
 8007c74:	3350      	adds	r3, #80	; 0x50
 8007c76:	4618      	mov	r0, r3
 8007c78:	f002 fcb0 	bl	800a5dc <pvPortMalloc>
 8007c7c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007c7e:	69bb      	ldr	r3, [r7, #24]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d00f      	beq.n	8007ca4 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8007c84:	69bb      	ldr	r3, [r7, #24]
 8007c86:	3350      	adds	r3, #80	; 0x50
 8007c88:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007c8a:	69bb      	ldr	r3, [r7, #24]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007c92:	79fa      	ldrb	r2, [r7, #7]
 8007c94:	69bb      	ldr	r3, [r7, #24]
 8007c96:	9300      	str	r3, [sp, #0]
 8007c98:	4613      	mov	r3, r2
 8007c9a:	697a      	ldr	r2, [r7, #20]
 8007c9c:	68b9      	ldr	r1, [r7, #8]
 8007c9e:	68f8      	ldr	r0, [r7, #12]
 8007ca0:	f000 f805 	bl	8007cae <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007ca4:	69bb      	ldr	r3, [r7, #24]
	}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3720      	adds	r7, #32
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}

08007cae <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007cae:	b580      	push	{r7, lr}
 8007cb0:	b084      	sub	sp, #16
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	60f8      	str	r0, [r7, #12]
 8007cb6:	60b9      	str	r1, [r7, #8]
 8007cb8:	607a      	str	r2, [r7, #4]
 8007cba:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d103      	bne.n	8007cca <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007cc2:	69bb      	ldr	r3, [r7, #24]
 8007cc4:	69ba      	ldr	r2, [r7, #24]
 8007cc6:	601a      	str	r2, [r3, #0]
 8007cc8:	e002      	b.n	8007cd0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007cca:	69bb      	ldr	r3, [r7, #24]
 8007ccc:	687a      	ldr	r2, [r7, #4]
 8007cce:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007cd0:	69bb      	ldr	r3, [r7, #24]
 8007cd2:	68fa      	ldr	r2, [r7, #12]
 8007cd4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007cd6:	69bb      	ldr	r3, [r7, #24]
 8007cd8:	68ba      	ldr	r2, [r7, #8]
 8007cda:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007cdc:	2101      	movs	r1, #1
 8007cde:	69b8      	ldr	r0, [r7, #24]
 8007ce0:	f7ff fec8 	bl	8007a74 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007ce4:	69bb      	ldr	r3, [r7, #24]
 8007ce6:	78fa      	ldrb	r2, [r7, #3]
 8007ce8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007cec:	bf00      	nop
 8007cee:	3710      	adds	r7, #16
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}

08007cf4 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b082      	sub	sp, #8
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d00e      	beq.n	8007d20 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2200      	movs	r2, #0
 8007d06:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2200      	movs	r2, #0
 8007d12:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007d14:	2300      	movs	r3, #0
 8007d16:	2200      	movs	r2, #0
 8007d18:	2100      	movs	r1, #0
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 f8a2 	bl	8007e64 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007d20:	bf00      	nop
 8007d22:	3708      	adds	r7, #8
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}

08007d28 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b086      	sub	sp, #24
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	4603      	mov	r3, r0
 8007d30:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007d32:	2301      	movs	r3, #1
 8007d34:	617b      	str	r3, [r7, #20]
 8007d36:	2300      	movs	r3, #0
 8007d38:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007d3a:	79fb      	ldrb	r3, [r7, #7]
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	6939      	ldr	r1, [r7, #16]
 8007d40:	6978      	ldr	r0, [r7, #20]
 8007d42:	f7ff ff76 	bl	8007c32 <xQueueGenericCreate>
 8007d46:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8007d48:	68f8      	ldr	r0, [r7, #12]
 8007d4a:	f7ff ffd3 	bl	8007cf4 <prvInitialiseMutex>

		return pxNewQueue;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
	}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3718      	adds	r7, #24
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b088      	sub	sp, #32
 8007d5c:	af02      	add	r7, sp, #8
 8007d5e:	4603      	mov	r3, r0
 8007d60:	6039      	str	r1, [r7, #0]
 8007d62:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007d64:	2301      	movs	r3, #1
 8007d66:	617b      	str	r3, [r7, #20]
 8007d68:	2300      	movs	r3, #0
 8007d6a:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007d6c:	79fb      	ldrb	r3, [r7, #7]
 8007d6e:	9300      	str	r3, [sp, #0]
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	2200      	movs	r2, #0
 8007d74:	6939      	ldr	r1, [r7, #16]
 8007d76:	6978      	ldr	r0, [r7, #20]
 8007d78:	f7ff fee4 	bl	8007b44 <xQueueGenericCreateStatic>
 8007d7c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8007d7e:	68f8      	ldr	r0, [r7, #12]
 8007d80:	f7ff ffb8 	bl	8007cf4 <prvInitialiseMutex>

		return pxNewQueue;
 8007d84:	68fb      	ldr	r3, [r7, #12]
	}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3718      	adds	r7, #24
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}

08007d8e <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8007d8e:	b590      	push	{r4, r7, lr}
 8007d90:	b087      	sub	sp, #28
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d10a      	bne.n	8007db6 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8007da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da4:	f383 8811 	msr	BASEPRI, r3
 8007da8:	f3bf 8f6f 	isb	sy
 8007dac:	f3bf 8f4f 	dsb	sy
 8007db0:	60fb      	str	r3, [r7, #12]
}
 8007db2:	bf00      	nop
 8007db4:	e7fe      	b.n	8007db4 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	685c      	ldr	r4, [r3, #4]
 8007dba:	f001 fcdf 	bl	800977c <xTaskGetCurrentTaskHandle>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	429c      	cmp	r4, r3
 8007dc2:	d111      	bne.n	8007de8 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	68db      	ldr	r3, [r3, #12]
 8007dc8:	1e5a      	subs	r2, r3, #1
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	68db      	ldr	r3, [r3, #12]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d105      	bne.n	8007de2 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	2200      	movs	r2, #0
 8007dda:	2100      	movs	r1, #0
 8007ddc:	6938      	ldr	r0, [r7, #16]
 8007dde:	f000 f841 	bl	8007e64 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8007de2:	2301      	movs	r3, #1
 8007de4:	617b      	str	r3, [r7, #20]
 8007de6:	e001      	b.n	8007dec <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8007de8:	2300      	movs	r3, #0
 8007dea:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8007dec:	697b      	ldr	r3, [r7, #20]
	}
 8007dee:	4618      	mov	r0, r3
 8007df0:	371c      	adds	r7, #28
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd90      	pop	{r4, r7, pc}

08007df6 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8007df6:	b590      	push	{r4, r7, lr}
 8007df8:	b087      	sub	sp, #28
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	6078      	str	r0, [r7, #4]
 8007dfe:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d10a      	bne.n	8007e20 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8007e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e0e:	f383 8811 	msr	BASEPRI, r3
 8007e12:	f3bf 8f6f 	isb	sy
 8007e16:	f3bf 8f4f 	dsb	sy
 8007e1a:	60fb      	str	r3, [r7, #12]
}
 8007e1c:	bf00      	nop
 8007e1e:	e7fe      	b.n	8007e1e <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	685c      	ldr	r4, [r3, #4]
 8007e24:	f001 fcaa 	bl	800977c <xTaskGetCurrentTaskHandle>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	429c      	cmp	r4, r3
 8007e2c:	d107      	bne.n	8007e3e <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	68db      	ldr	r3, [r3, #12]
 8007e32:	1c5a      	adds	r2, r3, #1
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	617b      	str	r3, [r7, #20]
 8007e3c:	e00c      	b.n	8007e58 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8007e3e:	6839      	ldr	r1, [r7, #0]
 8007e40:	6938      	ldr	r0, [r7, #16]
 8007e42:	f000 fa85 	bl	8008350 <xQueueSemaphoreTake>
 8007e46:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d004      	beq.n	8007e58 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	68db      	ldr	r3, [r3, #12]
 8007e52:	1c5a      	adds	r2, r3, #1
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8007e58:	697b      	ldr	r3, [r7, #20]
	}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	371c      	adds	r7, #28
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd90      	pop	{r4, r7, pc}
	...

08007e64 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b08e      	sub	sp, #56	; 0x38
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	60f8      	str	r0, [r7, #12]
 8007e6c:	60b9      	str	r1, [r7, #8]
 8007e6e:	607a      	str	r2, [r7, #4]
 8007e70:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007e72:	2300      	movs	r3, #0
 8007e74:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d10a      	bne.n	8007e96 <xQueueGenericSend+0x32>
	__asm volatile
 8007e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e84:	f383 8811 	msr	BASEPRI, r3
 8007e88:	f3bf 8f6f 	isb	sy
 8007e8c:	f3bf 8f4f 	dsb	sy
 8007e90:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007e92:	bf00      	nop
 8007e94:	e7fe      	b.n	8007e94 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d103      	bne.n	8007ea4 <xQueueGenericSend+0x40>
 8007e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d101      	bne.n	8007ea8 <xQueueGenericSend+0x44>
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	e000      	b.n	8007eaa <xQueueGenericSend+0x46>
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d10a      	bne.n	8007ec4 <xQueueGenericSend+0x60>
	__asm volatile
 8007eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb2:	f383 8811 	msr	BASEPRI, r3
 8007eb6:	f3bf 8f6f 	isb	sy
 8007eba:	f3bf 8f4f 	dsb	sy
 8007ebe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007ec0:	bf00      	nop
 8007ec2:	e7fe      	b.n	8007ec2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	2b02      	cmp	r3, #2
 8007ec8:	d103      	bne.n	8007ed2 <xQueueGenericSend+0x6e>
 8007eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ece:	2b01      	cmp	r3, #1
 8007ed0:	d101      	bne.n	8007ed6 <xQueueGenericSend+0x72>
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	e000      	b.n	8007ed8 <xQueueGenericSend+0x74>
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d10a      	bne.n	8007ef2 <xQueueGenericSend+0x8e>
	__asm volatile
 8007edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee0:	f383 8811 	msr	BASEPRI, r3
 8007ee4:	f3bf 8f6f 	isb	sy
 8007ee8:	f3bf 8f4f 	dsb	sy
 8007eec:	623b      	str	r3, [r7, #32]
}
 8007eee:	bf00      	nop
 8007ef0:	e7fe      	b.n	8007ef0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007ef2:	f001 fc51 	bl	8009798 <xTaskGetSchedulerState>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d102      	bne.n	8007f02 <xQueueGenericSend+0x9e>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d101      	bne.n	8007f06 <xQueueGenericSend+0xa2>
 8007f02:	2301      	movs	r3, #1
 8007f04:	e000      	b.n	8007f08 <xQueueGenericSend+0xa4>
 8007f06:	2300      	movs	r3, #0
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d10a      	bne.n	8007f22 <xQueueGenericSend+0xbe>
	__asm volatile
 8007f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f10:	f383 8811 	msr	BASEPRI, r3
 8007f14:	f3bf 8f6f 	isb	sy
 8007f18:	f3bf 8f4f 	dsb	sy
 8007f1c:	61fb      	str	r3, [r7, #28]
}
 8007f1e:	bf00      	nop
 8007f20:	e7fe      	b.n	8007f20 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007f22:	f002 fa5b 	bl	800a3dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f2e:	429a      	cmp	r2, r3
 8007f30:	d302      	bcc.n	8007f38 <xQueueGenericSend+0xd4>
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	2b02      	cmp	r3, #2
 8007f36:	d129      	bne.n	8007f8c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007f38:	683a      	ldr	r2, [r7, #0]
 8007f3a:	68b9      	ldr	r1, [r7, #8]
 8007f3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f3e:	f000 fb2a 	bl	8008596 <prvCopyDataToQueue>
 8007f42:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d010      	beq.n	8007f6e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f4e:	3324      	adds	r3, #36	; 0x24
 8007f50:	4618      	mov	r0, r3
 8007f52:	f001 f9eb 	bl	800932c <xTaskRemoveFromEventList>
 8007f56:	4603      	mov	r3, r0
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d013      	beq.n	8007f84 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007f5c:	4b3f      	ldr	r3, [pc, #252]	; (800805c <xQueueGenericSend+0x1f8>)
 8007f5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f62:	601a      	str	r2, [r3, #0]
 8007f64:	f3bf 8f4f 	dsb	sy
 8007f68:	f3bf 8f6f 	isb	sy
 8007f6c:	e00a      	b.n	8007f84 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d007      	beq.n	8007f84 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007f74:	4b39      	ldr	r3, [pc, #228]	; (800805c <xQueueGenericSend+0x1f8>)
 8007f76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f7a:	601a      	str	r2, [r3, #0]
 8007f7c:	f3bf 8f4f 	dsb	sy
 8007f80:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007f84:	f002 fa5a 	bl	800a43c <vPortExitCritical>
				return pdPASS;
 8007f88:	2301      	movs	r3, #1
 8007f8a:	e063      	b.n	8008054 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d103      	bne.n	8007f9a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007f92:	f002 fa53 	bl	800a43c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007f96:	2300      	movs	r3, #0
 8007f98:	e05c      	b.n	8008054 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d106      	bne.n	8007fae <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007fa0:	f107 0314 	add.w	r3, r7, #20
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f001 fa87 	bl	80094b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007faa:	2301      	movs	r3, #1
 8007fac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007fae:	f002 fa45 	bl	800a43c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007fb2:	f000 ff53 	bl	8008e5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007fb6:	f002 fa11 	bl	800a3dc <vPortEnterCritical>
 8007fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fbc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007fc0:	b25b      	sxtb	r3, r3
 8007fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fc6:	d103      	bne.n	8007fd0 <xQueueGenericSend+0x16c>
 8007fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fca:	2200      	movs	r2, #0
 8007fcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007fd6:	b25b      	sxtb	r3, r3
 8007fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fdc:	d103      	bne.n	8007fe6 <xQueueGenericSend+0x182>
 8007fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007fe6:	f002 fa29 	bl	800a43c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007fea:	1d3a      	adds	r2, r7, #4
 8007fec:	f107 0314 	add.w	r3, r7, #20
 8007ff0:	4611      	mov	r1, r2
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f001 fa76 	bl	80094e4 <xTaskCheckForTimeOut>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d124      	bne.n	8008048 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007ffe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008000:	f000 fbc1 	bl	8008786 <prvIsQueueFull>
 8008004:	4603      	mov	r3, r0
 8008006:	2b00      	cmp	r3, #0
 8008008:	d018      	beq.n	800803c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800800a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800800c:	3310      	adds	r3, #16
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	4611      	mov	r1, r2
 8008012:	4618      	mov	r0, r3
 8008014:	f001 f8fe 	bl	8009214 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008018:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800801a:	f000 fb4c 	bl	80086b6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800801e:	f000 ff2b 	bl	8008e78 <xTaskResumeAll>
 8008022:	4603      	mov	r3, r0
 8008024:	2b00      	cmp	r3, #0
 8008026:	f47f af7c 	bne.w	8007f22 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800802a:	4b0c      	ldr	r3, [pc, #48]	; (800805c <xQueueGenericSend+0x1f8>)
 800802c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008030:	601a      	str	r2, [r3, #0]
 8008032:	f3bf 8f4f 	dsb	sy
 8008036:	f3bf 8f6f 	isb	sy
 800803a:	e772      	b.n	8007f22 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800803c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800803e:	f000 fb3a 	bl	80086b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008042:	f000 ff19 	bl	8008e78 <xTaskResumeAll>
 8008046:	e76c      	b.n	8007f22 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008048:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800804a:	f000 fb34 	bl	80086b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800804e:	f000 ff13 	bl	8008e78 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008052:	2300      	movs	r3, #0
		}
	}
}
 8008054:	4618      	mov	r0, r3
 8008056:	3738      	adds	r7, #56	; 0x38
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}
 800805c:	e000ed04 	.word	0xe000ed04

08008060 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b08e      	sub	sp, #56	; 0x38
 8008064:	af00      	add	r7, sp, #0
 8008066:	60f8      	str	r0, [r7, #12]
 8008068:	60b9      	str	r1, [r7, #8]
 800806a:	607a      	str	r2, [r7, #4]
 800806c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008074:	2b00      	cmp	r3, #0
 8008076:	d10a      	bne.n	800808e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800807c:	f383 8811 	msr	BASEPRI, r3
 8008080:	f3bf 8f6f 	isb	sy
 8008084:	f3bf 8f4f 	dsb	sy
 8008088:	627b      	str	r3, [r7, #36]	; 0x24
}
 800808a:	bf00      	nop
 800808c:	e7fe      	b.n	800808c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d103      	bne.n	800809c <xQueueGenericSendFromISR+0x3c>
 8008094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008098:	2b00      	cmp	r3, #0
 800809a:	d101      	bne.n	80080a0 <xQueueGenericSendFromISR+0x40>
 800809c:	2301      	movs	r3, #1
 800809e:	e000      	b.n	80080a2 <xQueueGenericSendFromISR+0x42>
 80080a0:	2300      	movs	r3, #0
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d10a      	bne.n	80080bc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80080a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080aa:	f383 8811 	msr	BASEPRI, r3
 80080ae:	f3bf 8f6f 	isb	sy
 80080b2:	f3bf 8f4f 	dsb	sy
 80080b6:	623b      	str	r3, [r7, #32]
}
 80080b8:	bf00      	nop
 80080ba:	e7fe      	b.n	80080ba <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	2b02      	cmp	r3, #2
 80080c0:	d103      	bne.n	80080ca <xQueueGenericSendFromISR+0x6a>
 80080c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	d101      	bne.n	80080ce <xQueueGenericSendFromISR+0x6e>
 80080ca:	2301      	movs	r3, #1
 80080cc:	e000      	b.n	80080d0 <xQueueGenericSendFromISR+0x70>
 80080ce:	2300      	movs	r3, #0
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d10a      	bne.n	80080ea <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80080d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d8:	f383 8811 	msr	BASEPRI, r3
 80080dc:	f3bf 8f6f 	isb	sy
 80080e0:	f3bf 8f4f 	dsb	sy
 80080e4:	61fb      	str	r3, [r7, #28]
}
 80080e6:	bf00      	nop
 80080e8:	e7fe      	b.n	80080e8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80080ea:	f002 fa39 	bl	800a560 <vPortValidateInterruptPriority>
	__asm volatile
 80080ee:	f3ef 8211 	mrs	r2, BASEPRI
 80080f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f6:	f383 8811 	msr	BASEPRI, r3
 80080fa:	f3bf 8f6f 	isb	sy
 80080fe:	f3bf 8f4f 	dsb	sy
 8008102:	61ba      	str	r2, [r7, #24]
 8008104:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008106:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008108:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800810a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800810c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800810e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008112:	429a      	cmp	r2, r3
 8008114:	d302      	bcc.n	800811c <xQueueGenericSendFromISR+0xbc>
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	2b02      	cmp	r3, #2
 800811a:	d12c      	bne.n	8008176 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800811c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800811e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008122:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008126:	683a      	ldr	r2, [r7, #0]
 8008128:	68b9      	ldr	r1, [r7, #8]
 800812a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800812c:	f000 fa33 	bl	8008596 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008130:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008138:	d112      	bne.n	8008160 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800813a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800813c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800813e:	2b00      	cmp	r3, #0
 8008140:	d016      	beq.n	8008170 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008144:	3324      	adds	r3, #36	; 0x24
 8008146:	4618      	mov	r0, r3
 8008148:	f001 f8f0 	bl	800932c <xTaskRemoveFromEventList>
 800814c:	4603      	mov	r3, r0
 800814e:	2b00      	cmp	r3, #0
 8008150:	d00e      	beq.n	8008170 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d00b      	beq.n	8008170 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2201      	movs	r2, #1
 800815c:	601a      	str	r2, [r3, #0]
 800815e:	e007      	b.n	8008170 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008160:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008164:	3301      	adds	r3, #1
 8008166:	b2db      	uxtb	r3, r3
 8008168:	b25a      	sxtb	r2, r3
 800816a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800816c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008170:	2301      	movs	r3, #1
 8008172:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008174:	e001      	b.n	800817a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008176:	2300      	movs	r3, #0
 8008178:	637b      	str	r3, [r7, #52]	; 0x34
 800817a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800817c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	f383 8811 	msr	BASEPRI, r3
}
 8008184:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008188:	4618      	mov	r0, r3
 800818a:	3738      	adds	r7, #56	; 0x38
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}

08008190 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b08c      	sub	sp, #48	; 0x30
 8008194:	af00      	add	r7, sp, #0
 8008196:	60f8      	str	r0, [r7, #12]
 8008198:	60b9      	str	r1, [r7, #8]
 800819a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800819c:	2300      	movs	r3, #0
 800819e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80081a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d10a      	bne.n	80081c0 <xQueueReceive+0x30>
	__asm volatile
 80081aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ae:	f383 8811 	msr	BASEPRI, r3
 80081b2:	f3bf 8f6f 	isb	sy
 80081b6:	f3bf 8f4f 	dsb	sy
 80081ba:	623b      	str	r3, [r7, #32]
}
 80081bc:	bf00      	nop
 80081be:	e7fe      	b.n	80081be <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d103      	bne.n	80081ce <xQueueReceive+0x3e>
 80081c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d101      	bne.n	80081d2 <xQueueReceive+0x42>
 80081ce:	2301      	movs	r3, #1
 80081d0:	e000      	b.n	80081d4 <xQueueReceive+0x44>
 80081d2:	2300      	movs	r3, #0
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d10a      	bne.n	80081ee <xQueueReceive+0x5e>
	__asm volatile
 80081d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081dc:	f383 8811 	msr	BASEPRI, r3
 80081e0:	f3bf 8f6f 	isb	sy
 80081e4:	f3bf 8f4f 	dsb	sy
 80081e8:	61fb      	str	r3, [r7, #28]
}
 80081ea:	bf00      	nop
 80081ec:	e7fe      	b.n	80081ec <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80081ee:	f001 fad3 	bl	8009798 <xTaskGetSchedulerState>
 80081f2:	4603      	mov	r3, r0
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d102      	bne.n	80081fe <xQueueReceive+0x6e>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d101      	bne.n	8008202 <xQueueReceive+0x72>
 80081fe:	2301      	movs	r3, #1
 8008200:	e000      	b.n	8008204 <xQueueReceive+0x74>
 8008202:	2300      	movs	r3, #0
 8008204:	2b00      	cmp	r3, #0
 8008206:	d10a      	bne.n	800821e <xQueueReceive+0x8e>
	__asm volatile
 8008208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800820c:	f383 8811 	msr	BASEPRI, r3
 8008210:	f3bf 8f6f 	isb	sy
 8008214:	f3bf 8f4f 	dsb	sy
 8008218:	61bb      	str	r3, [r7, #24]
}
 800821a:	bf00      	nop
 800821c:	e7fe      	b.n	800821c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800821e:	f002 f8dd 	bl	800a3dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008226:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800822a:	2b00      	cmp	r3, #0
 800822c:	d01f      	beq.n	800826e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800822e:	68b9      	ldr	r1, [r7, #8]
 8008230:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008232:	f000 fa1a 	bl	800866a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008238:	1e5a      	subs	r2, r3, #1
 800823a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800823c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800823e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008240:	691b      	ldr	r3, [r3, #16]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d00f      	beq.n	8008266 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008248:	3310      	adds	r3, #16
 800824a:	4618      	mov	r0, r3
 800824c:	f001 f86e 	bl	800932c <xTaskRemoveFromEventList>
 8008250:	4603      	mov	r3, r0
 8008252:	2b00      	cmp	r3, #0
 8008254:	d007      	beq.n	8008266 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008256:	4b3d      	ldr	r3, [pc, #244]	; (800834c <xQueueReceive+0x1bc>)
 8008258:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800825c:	601a      	str	r2, [r3, #0]
 800825e:	f3bf 8f4f 	dsb	sy
 8008262:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008266:	f002 f8e9 	bl	800a43c <vPortExitCritical>
				return pdPASS;
 800826a:	2301      	movs	r3, #1
 800826c:	e069      	b.n	8008342 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d103      	bne.n	800827c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008274:	f002 f8e2 	bl	800a43c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008278:	2300      	movs	r3, #0
 800827a:	e062      	b.n	8008342 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800827c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800827e:	2b00      	cmp	r3, #0
 8008280:	d106      	bne.n	8008290 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008282:	f107 0310 	add.w	r3, r7, #16
 8008286:	4618      	mov	r0, r3
 8008288:	f001 f916 	bl	80094b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800828c:	2301      	movs	r3, #1
 800828e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008290:	f002 f8d4 	bl	800a43c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008294:	f000 fde2 	bl	8008e5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008298:	f002 f8a0 	bl	800a3dc <vPortEnterCritical>
 800829c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800829e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80082a2:	b25b      	sxtb	r3, r3
 80082a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082a8:	d103      	bne.n	80082b2 <xQueueReceive+0x122>
 80082aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ac:	2200      	movs	r2, #0
 80082ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80082b8:	b25b      	sxtb	r3, r3
 80082ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082be:	d103      	bne.n	80082c8 <xQueueReceive+0x138>
 80082c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c2:	2200      	movs	r2, #0
 80082c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80082c8:	f002 f8b8 	bl	800a43c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80082cc:	1d3a      	adds	r2, r7, #4
 80082ce:	f107 0310 	add.w	r3, r7, #16
 80082d2:	4611      	mov	r1, r2
 80082d4:	4618      	mov	r0, r3
 80082d6:	f001 f905 	bl	80094e4 <xTaskCheckForTimeOut>
 80082da:	4603      	mov	r3, r0
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d123      	bne.n	8008328 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80082e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082e2:	f000 fa3a 	bl	800875a <prvIsQueueEmpty>
 80082e6:	4603      	mov	r3, r0
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d017      	beq.n	800831c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80082ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ee:	3324      	adds	r3, #36	; 0x24
 80082f0:	687a      	ldr	r2, [r7, #4]
 80082f2:	4611      	mov	r1, r2
 80082f4:	4618      	mov	r0, r3
 80082f6:	f000 ff8d 	bl	8009214 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80082fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082fc:	f000 f9db 	bl	80086b6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008300:	f000 fdba 	bl	8008e78 <xTaskResumeAll>
 8008304:	4603      	mov	r3, r0
 8008306:	2b00      	cmp	r3, #0
 8008308:	d189      	bne.n	800821e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800830a:	4b10      	ldr	r3, [pc, #64]	; (800834c <xQueueReceive+0x1bc>)
 800830c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008310:	601a      	str	r2, [r3, #0]
 8008312:	f3bf 8f4f 	dsb	sy
 8008316:	f3bf 8f6f 	isb	sy
 800831a:	e780      	b.n	800821e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800831c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800831e:	f000 f9ca 	bl	80086b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008322:	f000 fda9 	bl	8008e78 <xTaskResumeAll>
 8008326:	e77a      	b.n	800821e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008328:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800832a:	f000 f9c4 	bl	80086b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800832e:	f000 fda3 	bl	8008e78 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008332:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008334:	f000 fa11 	bl	800875a <prvIsQueueEmpty>
 8008338:	4603      	mov	r3, r0
 800833a:	2b00      	cmp	r3, #0
 800833c:	f43f af6f 	beq.w	800821e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008340:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8008342:	4618      	mov	r0, r3
 8008344:	3730      	adds	r7, #48	; 0x30
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}
 800834a:	bf00      	nop
 800834c:	e000ed04 	.word	0xe000ed04

08008350 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b08e      	sub	sp, #56	; 0x38
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
 8008358:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800835a:	2300      	movs	r3, #0
 800835c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008362:	2300      	movs	r3, #0
 8008364:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008368:	2b00      	cmp	r3, #0
 800836a:	d10a      	bne.n	8008382 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800836c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008370:	f383 8811 	msr	BASEPRI, r3
 8008374:	f3bf 8f6f 	isb	sy
 8008378:	f3bf 8f4f 	dsb	sy
 800837c:	623b      	str	r3, [r7, #32]
}
 800837e:	bf00      	nop
 8008380:	e7fe      	b.n	8008380 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008386:	2b00      	cmp	r3, #0
 8008388:	d00a      	beq.n	80083a0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800838a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800838e:	f383 8811 	msr	BASEPRI, r3
 8008392:	f3bf 8f6f 	isb	sy
 8008396:	f3bf 8f4f 	dsb	sy
 800839a:	61fb      	str	r3, [r7, #28]
}
 800839c:	bf00      	nop
 800839e:	e7fe      	b.n	800839e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80083a0:	f001 f9fa 	bl	8009798 <xTaskGetSchedulerState>
 80083a4:	4603      	mov	r3, r0
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d102      	bne.n	80083b0 <xQueueSemaphoreTake+0x60>
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d101      	bne.n	80083b4 <xQueueSemaphoreTake+0x64>
 80083b0:	2301      	movs	r3, #1
 80083b2:	e000      	b.n	80083b6 <xQueueSemaphoreTake+0x66>
 80083b4:	2300      	movs	r3, #0
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d10a      	bne.n	80083d0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80083ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083be:	f383 8811 	msr	BASEPRI, r3
 80083c2:	f3bf 8f6f 	isb	sy
 80083c6:	f3bf 8f4f 	dsb	sy
 80083ca:	61bb      	str	r3, [r7, #24]
}
 80083cc:	bf00      	nop
 80083ce:	e7fe      	b.n	80083ce <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80083d0:	f002 f804 	bl	800a3dc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80083d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083d8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80083da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d024      	beq.n	800842a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80083e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e2:	1e5a      	subs	r2, r3, #1
 80083e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083e6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80083e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d104      	bne.n	80083fa <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80083f0:	f001 fb6a 	bl	8009ac8 <pvTaskIncrementMutexHeldCount>
 80083f4:	4602      	mov	r2, r0
 80083f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083f8:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80083fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083fc:	691b      	ldr	r3, [r3, #16]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d00f      	beq.n	8008422 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008404:	3310      	adds	r3, #16
 8008406:	4618      	mov	r0, r3
 8008408:	f000 ff90 	bl	800932c <xTaskRemoveFromEventList>
 800840c:	4603      	mov	r3, r0
 800840e:	2b00      	cmp	r3, #0
 8008410:	d007      	beq.n	8008422 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008412:	4b54      	ldr	r3, [pc, #336]	; (8008564 <xQueueSemaphoreTake+0x214>)
 8008414:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008418:	601a      	str	r2, [r3, #0]
 800841a:	f3bf 8f4f 	dsb	sy
 800841e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008422:	f002 f80b 	bl	800a43c <vPortExitCritical>
				return pdPASS;
 8008426:	2301      	movs	r3, #1
 8008428:	e097      	b.n	800855a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d111      	bne.n	8008454 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008432:	2b00      	cmp	r3, #0
 8008434:	d00a      	beq.n	800844c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8008436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800843a:	f383 8811 	msr	BASEPRI, r3
 800843e:	f3bf 8f6f 	isb	sy
 8008442:	f3bf 8f4f 	dsb	sy
 8008446:	617b      	str	r3, [r7, #20]
}
 8008448:	bf00      	nop
 800844a:	e7fe      	b.n	800844a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800844c:	f001 fff6 	bl	800a43c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008450:	2300      	movs	r3, #0
 8008452:	e082      	b.n	800855a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008456:	2b00      	cmp	r3, #0
 8008458:	d106      	bne.n	8008468 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800845a:	f107 030c 	add.w	r3, r7, #12
 800845e:	4618      	mov	r0, r3
 8008460:	f001 f82a 	bl	80094b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008464:	2301      	movs	r3, #1
 8008466:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008468:	f001 ffe8 	bl	800a43c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800846c:	f000 fcf6 	bl	8008e5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008470:	f001 ffb4 	bl	800a3dc <vPortEnterCritical>
 8008474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008476:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800847a:	b25b      	sxtb	r3, r3
 800847c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008480:	d103      	bne.n	800848a <xQueueSemaphoreTake+0x13a>
 8008482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008484:	2200      	movs	r2, #0
 8008486:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800848a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800848c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008490:	b25b      	sxtb	r3, r3
 8008492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008496:	d103      	bne.n	80084a0 <xQueueSemaphoreTake+0x150>
 8008498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800849a:	2200      	movs	r2, #0
 800849c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80084a0:	f001 ffcc 	bl	800a43c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80084a4:	463a      	mov	r2, r7
 80084a6:	f107 030c 	add.w	r3, r7, #12
 80084aa:	4611      	mov	r1, r2
 80084ac:	4618      	mov	r0, r3
 80084ae:	f001 f819 	bl	80094e4 <xTaskCheckForTimeOut>
 80084b2:	4603      	mov	r3, r0
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d132      	bne.n	800851e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80084b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80084ba:	f000 f94e 	bl	800875a <prvIsQueueEmpty>
 80084be:	4603      	mov	r3, r0
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d026      	beq.n	8008512 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80084c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d109      	bne.n	80084e0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80084cc:	f001 ff86 	bl	800a3dc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80084d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084d2:	685b      	ldr	r3, [r3, #4]
 80084d4:	4618      	mov	r0, r3
 80084d6:	f001 f97d 	bl	80097d4 <xTaskPriorityInherit>
 80084da:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80084dc:	f001 ffae 	bl	800a43c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80084e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084e2:	3324      	adds	r3, #36	; 0x24
 80084e4:	683a      	ldr	r2, [r7, #0]
 80084e6:	4611      	mov	r1, r2
 80084e8:	4618      	mov	r0, r3
 80084ea:	f000 fe93 	bl	8009214 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80084ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80084f0:	f000 f8e1 	bl	80086b6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80084f4:	f000 fcc0 	bl	8008e78 <xTaskResumeAll>
 80084f8:	4603      	mov	r3, r0
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	f47f af68 	bne.w	80083d0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8008500:	4b18      	ldr	r3, [pc, #96]	; (8008564 <xQueueSemaphoreTake+0x214>)
 8008502:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008506:	601a      	str	r2, [r3, #0]
 8008508:	f3bf 8f4f 	dsb	sy
 800850c:	f3bf 8f6f 	isb	sy
 8008510:	e75e      	b.n	80083d0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008512:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008514:	f000 f8cf 	bl	80086b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008518:	f000 fcae 	bl	8008e78 <xTaskResumeAll>
 800851c:	e758      	b.n	80083d0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800851e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008520:	f000 f8c9 	bl	80086b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008524:	f000 fca8 	bl	8008e78 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008528:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800852a:	f000 f916 	bl	800875a <prvIsQueueEmpty>
 800852e:	4603      	mov	r3, r0
 8008530:	2b00      	cmp	r3, #0
 8008532:	f43f af4d 	beq.w	80083d0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008538:	2b00      	cmp	r3, #0
 800853a:	d00d      	beq.n	8008558 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800853c:	f001 ff4e 	bl	800a3dc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008540:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008542:	f000 f811 	bl	8008568 <prvGetDisinheritPriorityAfterTimeout>
 8008546:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8008548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800854e:	4618      	mov	r0, r3
 8008550:	f001 fa1c 	bl	800998c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008554:	f001 ff72 	bl	800a43c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008558:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800855a:	4618      	mov	r0, r3
 800855c:	3738      	adds	r7, #56	; 0x38
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}
 8008562:	bf00      	nop
 8008564:	e000ed04 	.word	0xe000ed04

08008568 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008568:	b480      	push	{r7}
 800856a:	b085      	sub	sp, #20
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008574:	2b00      	cmp	r3, #0
 8008576:	d006      	beq.n	8008586 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008582:	60fb      	str	r3, [r7, #12]
 8008584:	e001      	b.n	800858a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008586:	2300      	movs	r3, #0
 8008588:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800858a:	68fb      	ldr	r3, [r7, #12]
	}
 800858c:	4618      	mov	r0, r3
 800858e:	3714      	adds	r7, #20
 8008590:	46bd      	mov	sp, r7
 8008592:	bc80      	pop	{r7}
 8008594:	4770      	bx	lr

08008596 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008596:	b580      	push	{r7, lr}
 8008598:	b086      	sub	sp, #24
 800859a:	af00      	add	r7, sp, #0
 800859c:	60f8      	str	r0, [r7, #12]
 800859e:	60b9      	str	r1, [r7, #8]
 80085a0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80085a2:	2300      	movs	r3, #0
 80085a4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085aa:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d10d      	bne.n	80085d0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d14d      	bne.n	8008658 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	4618      	mov	r0, r3
 80085c2:	f001 f975 	bl	80098b0 <xTaskPriorityDisinherit>
 80085c6:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	2200      	movs	r2, #0
 80085cc:	605a      	str	r2, [r3, #4]
 80085ce:	e043      	b.n	8008658 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d119      	bne.n	800860a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	6898      	ldr	r0, [r3, #8]
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085de:	461a      	mov	r2, r3
 80085e0:	68b9      	ldr	r1, [r7, #8]
 80085e2:	f003 f939 	bl	800b858 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	689a      	ldr	r2, [r3, #8]
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ee:	441a      	add	r2, r3
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	689a      	ldr	r2, [r3, #8]
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	685b      	ldr	r3, [r3, #4]
 80085fc:	429a      	cmp	r2, r3
 80085fe:	d32b      	bcc.n	8008658 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681a      	ldr	r2, [r3, #0]
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	609a      	str	r2, [r3, #8]
 8008608:	e026      	b.n	8008658 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	68d8      	ldr	r0, [r3, #12]
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008612:	461a      	mov	r2, r3
 8008614:	68b9      	ldr	r1, [r7, #8]
 8008616:	f003 f91f 	bl	800b858 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	68da      	ldr	r2, [r3, #12]
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008622:	425b      	negs	r3, r3
 8008624:	441a      	add	r2, r3
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	68da      	ldr	r2, [r3, #12]
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	429a      	cmp	r2, r3
 8008634:	d207      	bcs.n	8008646 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	685a      	ldr	r2, [r3, #4]
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800863e:	425b      	negs	r3, r3
 8008640:	441a      	add	r2, r3
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2b02      	cmp	r3, #2
 800864a:	d105      	bne.n	8008658 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d002      	beq.n	8008658 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	3b01      	subs	r3, #1
 8008656:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	1c5a      	adds	r2, r3, #1
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008660:	697b      	ldr	r3, [r7, #20]
}
 8008662:	4618      	mov	r0, r3
 8008664:	3718      	adds	r7, #24
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}

0800866a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800866a:	b580      	push	{r7, lr}
 800866c:	b082      	sub	sp, #8
 800866e:	af00      	add	r7, sp, #0
 8008670:	6078      	str	r0, [r7, #4]
 8008672:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008678:	2b00      	cmp	r3, #0
 800867a:	d018      	beq.n	80086ae <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	68da      	ldr	r2, [r3, #12]
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008684:	441a      	add	r2, r3
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	68da      	ldr	r2, [r3, #12]
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	429a      	cmp	r2, r3
 8008694:	d303      	bcc.n	800869e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681a      	ldr	r2, [r3, #0]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	68d9      	ldr	r1, [r3, #12]
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086a6:	461a      	mov	r2, r3
 80086a8:	6838      	ldr	r0, [r7, #0]
 80086aa:	f003 f8d5 	bl	800b858 <memcpy>
	}
}
 80086ae:	bf00      	nop
 80086b0:	3708      	adds	r7, #8
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}

080086b6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80086b6:	b580      	push	{r7, lr}
 80086b8:	b084      	sub	sp, #16
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80086be:	f001 fe8d 	bl	800a3dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80086c8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80086ca:	e011      	b.n	80086f0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d012      	beq.n	80086fa <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	3324      	adds	r3, #36	; 0x24
 80086d8:	4618      	mov	r0, r3
 80086da:	f000 fe27 	bl	800932c <xTaskRemoveFromEventList>
 80086de:	4603      	mov	r3, r0
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d001      	beq.n	80086e8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80086e4:	f000 ff60 	bl	80095a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80086e8:	7bfb      	ldrb	r3, [r7, #15]
 80086ea:	3b01      	subs	r3, #1
 80086ec:	b2db      	uxtb	r3, r3
 80086ee:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80086f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	dce9      	bgt.n	80086cc <prvUnlockQueue+0x16>
 80086f8:	e000      	b.n	80086fc <prvUnlockQueue+0x46>
					break;
 80086fa:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	22ff      	movs	r2, #255	; 0xff
 8008700:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008704:	f001 fe9a 	bl	800a43c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008708:	f001 fe68 	bl	800a3dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008712:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008714:	e011      	b.n	800873a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	691b      	ldr	r3, [r3, #16]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d012      	beq.n	8008744 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	3310      	adds	r3, #16
 8008722:	4618      	mov	r0, r3
 8008724:	f000 fe02 	bl	800932c <xTaskRemoveFromEventList>
 8008728:	4603      	mov	r3, r0
 800872a:	2b00      	cmp	r3, #0
 800872c:	d001      	beq.n	8008732 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800872e:	f000 ff3b 	bl	80095a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008732:	7bbb      	ldrb	r3, [r7, #14]
 8008734:	3b01      	subs	r3, #1
 8008736:	b2db      	uxtb	r3, r3
 8008738:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800873a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800873e:	2b00      	cmp	r3, #0
 8008740:	dce9      	bgt.n	8008716 <prvUnlockQueue+0x60>
 8008742:	e000      	b.n	8008746 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008744:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	22ff      	movs	r2, #255	; 0xff
 800874a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800874e:	f001 fe75 	bl	800a43c <vPortExitCritical>
}
 8008752:	bf00      	nop
 8008754:	3710      	adds	r7, #16
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}

0800875a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800875a:	b580      	push	{r7, lr}
 800875c:	b084      	sub	sp, #16
 800875e:	af00      	add	r7, sp, #0
 8008760:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008762:	f001 fe3b 	bl	800a3dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800876a:	2b00      	cmp	r3, #0
 800876c:	d102      	bne.n	8008774 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800876e:	2301      	movs	r3, #1
 8008770:	60fb      	str	r3, [r7, #12]
 8008772:	e001      	b.n	8008778 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008774:	2300      	movs	r3, #0
 8008776:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008778:	f001 fe60 	bl	800a43c <vPortExitCritical>

	return xReturn;
 800877c:	68fb      	ldr	r3, [r7, #12]
}
 800877e:	4618      	mov	r0, r3
 8008780:	3710      	adds	r7, #16
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}

08008786 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008786:	b580      	push	{r7, lr}
 8008788:	b084      	sub	sp, #16
 800878a:	af00      	add	r7, sp, #0
 800878c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800878e:	f001 fe25 	bl	800a3dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800879a:	429a      	cmp	r2, r3
 800879c:	d102      	bne.n	80087a4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800879e:	2301      	movs	r3, #1
 80087a0:	60fb      	str	r3, [r7, #12]
 80087a2:	e001      	b.n	80087a8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80087a4:	2300      	movs	r3, #0
 80087a6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80087a8:	f001 fe48 	bl	800a43c <vPortExitCritical>

	return xReturn;
 80087ac:	68fb      	ldr	r3, [r7, #12]
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3710      	adds	r7, #16
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}
	...

080087b8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80087b8:	b480      	push	{r7}
 80087ba:	b085      	sub	sp, #20
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80087c2:	2300      	movs	r3, #0
 80087c4:	60fb      	str	r3, [r7, #12]
 80087c6:	e014      	b.n	80087f2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80087c8:	4a0e      	ldr	r2, [pc, #56]	; (8008804 <vQueueAddToRegistry+0x4c>)
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d10b      	bne.n	80087ec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80087d4:	490b      	ldr	r1, [pc, #44]	; (8008804 <vQueueAddToRegistry+0x4c>)
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	683a      	ldr	r2, [r7, #0]
 80087da:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80087de:	4a09      	ldr	r2, [pc, #36]	; (8008804 <vQueueAddToRegistry+0x4c>)
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	00db      	lsls	r3, r3, #3
 80087e4:	4413      	add	r3, r2
 80087e6:	687a      	ldr	r2, [r7, #4]
 80087e8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80087ea:	e006      	b.n	80087fa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	3301      	adds	r3, #1
 80087f0:	60fb      	str	r3, [r7, #12]
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	2b07      	cmp	r3, #7
 80087f6:	d9e7      	bls.n	80087c8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80087f8:	bf00      	nop
 80087fa:	bf00      	nop
 80087fc:	3714      	adds	r7, #20
 80087fe:	46bd      	mov	sp, r7
 8008800:	bc80      	pop	{r7}
 8008802:	4770      	bx	lr
 8008804:	20000820 	.word	0x20000820

08008808 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008808:	b580      	push	{r7, lr}
 800880a:	b086      	sub	sp, #24
 800880c:	af00      	add	r7, sp, #0
 800880e:	60f8      	str	r0, [r7, #12]
 8008810:	60b9      	str	r1, [r7, #8]
 8008812:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008818:	f001 fde0 	bl	800a3dc <vPortEnterCritical>
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008822:	b25b      	sxtb	r3, r3
 8008824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008828:	d103      	bne.n	8008832 <vQueueWaitForMessageRestricted+0x2a>
 800882a:	697b      	ldr	r3, [r7, #20]
 800882c:	2200      	movs	r2, #0
 800882e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008838:	b25b      	sxtb	r3, r3
 800883a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800883e:	d103      	bne.n	8008848 <vQueueWaitForMessageRestricted+0x40>
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	2200      	movs	r2, #0
 8008844:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008848:	f001 fdf8 	bl	800a43c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008850:	2b00      	cmp	r3, #0
 8008852:	d106      	bne.n	8008862 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	3324      	adds	r3, #36	; 0x24
 8008858:	687a      	ldr	r2, [r7, #4]
 800885a:	68b9      	ldr	r1, [r7, #8]
 800885c:	4618      	mov	r0, r3
 800885e:	f000 fd39 	bl	80092d4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008862:	6978      	ldr	r0, [r7, #20]
 8008864:	f7ff ff27 	bl	80086b6 <prvUnlockQueue>
	}
 8008868:	bf00      	nop
 800886a:	3718      	adds	r7, #24
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}

08008870 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008870:	b580      	push	{r7, lr}
 8008872:	b08e      	sub	sp, #56	; 0x38
 8008874:	af04      	add	r7, sp, #16
 8008876:	60f8      	str	r0, [r7, #12]
 8008878:	60b9      	str	r1, [r7, #8]
 800887a:	607a      	str	r2, [r7, #4]
 800887c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800887e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008880:	2b00      	cmp	r3, #0
 8008882:	d10a      	bne.n	800889a <xTaskCreateStatic+0x2a>
	__asm volatile
 8008884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008888:	f383 8811 	msr	BASEPRI, r3
 800888c:	f3bf 8f6f 	isb	sy
 8008890:	f3bf 8f4f 	dsb	sy
 8008894:	623b      	str	r3, [r7, #32]
}
 8008896:	bf00      	nop
 8008898:	e7fe      	b.n	8008898 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800889a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800889c:	2b00      	cmp	r3, #0
 800889e:	d10a      	bne.n	80088b6 <xTaskCreateStatic+0x46>
	__asm volatile
 80088a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a4:	f383 8811 	msr	BASEPRI, r3
 80088a8:	f3bf 8f6f 	isb	sy
 80088ac:	f3bf 8f4f 	dsb	sy
 80088b0:	61fb      	str	r3, [r7, #28]
}
 80088b2:	bf00      	nop
 80088b4:	e7fe      	b.n	80088b4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80088b6:	23a8      	movs	r3, #168	; 0xa8
 80088b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	2ba8      	cmp	r3, #168	; 0xa8
 80088be:	d00a      	beq.n	80088d6 <xTaskCreateStatic+0x66>
	__asm volatile
 80088c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c4:	f383 8811 	msr	BASEPRI, r3
 80088c8:	f3bf 8f6f 	isb	sy
 80088cc:	f3bf 8f4f 	dsb	sy
 80088d0:	61bb      	str	r3, [r7, #24]
}
 80088d2:	bf00      	nop
 80088d4:	e7fe      	b.n	80088d4 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80088d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d01e      	beq.n	800891a <xTaskCreateStatic+0xaa>
 80088dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d01b      	beq.n	800891a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80088e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088e4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80088e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80088ea:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80088ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ee:	2202      	movs	r2, #2
 80088f0:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80088f4:	2300      	movs	r3, #0
 80088f6:	9303      	str	r3, [sp, #12]
 80088f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088fa:	9302      	str	r3, [sp, #8]
 80088fc:	f107 0314 	add.w	r3, r7, #20
 8008900:	9301      	str	r3, [sp, #4]
 8008902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008904:	9300      	str	r3, [sp, #0]
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	687a      	ldr	r2, [r7, #4]
 800890a:	68b9      	ldr	r1, [r7, #8]
 800890c:	68f8      	ldr	r0, [r7, #12]
 800890e:	f000 f851 	bl	80089b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008912:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008914:	f000 f8ec 	bl	8008af0 <prvAddNewTaskToReadyList>
 8008918:	e001      	b.n	800891e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800891a:	2300      	movs	r3, #0
 800891c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800891e:	697b      	ldr	r3, [r7, #20]
	}
 8008920:	4618      	mov	r0, r3
 8008922:	3728      	adds	r7, #40	; 0x28
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}

08008928 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008928:	b580      	push	{r7, lr}
 800892a:	b08c      	sub	sp, #48	; 0x30
 800892c:	af04      	add	r7, sp, #16
 800892e:	60f8      	str	r0, [r7, #12]
 8008930:	60b9      	str	r1, [r7, #8]
 8008932:	603b      	str	r3, [r7, #0]
 8008934:	4613      	mov	r3, r2
 8008936:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008938:	88fb      	ldrh	r3, [r7, #6]
 800893a:	009b      	lsls	r3, r3, #2
 800893c:	4618      	mov	r0, r3
 800893e:	f001 fe4d 	bl	800a5dc <pvPortMalloc>
 8008942:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d00e      	beq.n	8008968 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800894a:	20a8      	movs	r0, #168	; 0xa8
 800894c:	f001 fe46 	bl	800a5dc <pvPortMalloc>
 8008950:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008952:	69fb      	ldr	r3, [r7, #28]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d003      	beq.n	8008960 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008958:	69fb      	ldr	r3, [r7, #28]
 800895a:	697a      	ldr	r2, [r7, #20]
 800895c:	631a      	str	r2, [r3, #48]	; 0x30
 800895e:	e005      	b.n	800896c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008960:	6978      	ldr	r0, [r7, #20]
 8008962:	f001 feff 	bl	800a764 <vPortFree>
 8008966:	e001      	b.n	800896c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008968:	2300      	movs	r3, #0
 800896a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800896c:	69fb      	ldr	r3, [r7, #28]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d017      	beq.n	80089a2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008972:	69fb      	ldr	r3, [r7, #28]
 8008974:	2200      	movs	r2, #0
 8008976:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800897a:	88fa      	ldrh	r2, [r7, #6]
 800897c:	2300      	movs	r3, #0
 800897e:	9303      	str	r3, [sp, #12]
 8008980:	69fb      	ldr	r3, [r7, #28]
 8008982:	9302      	str	r3, [sp, #8]
 8008984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008986:	9301      	str	r3, [sp, #4]
 8008988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800898a:	9300      	str	r3, [sp, #0]
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	68b9      	ldr	r1, [r7, #8]
 8008990:	68f8      	ldr	r0, [r7, #12]
 8008992:	f000 f80f 	bl	80089b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008996:	69f8      	ldr	r0, [r7, #28]
 8008998:	f000 f8aa 	bl	8008af0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800899c:	2301      	movs	r3, #1
 800899e:	61bb      	str	r3, [r7, #24]
 80089a0:	e002      	b.n	80089a8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80089a2:	f04f 33ff 	mov.w	r3, #4294967295
 80089a6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80089a8:	69bb      	ldr	r3, [r7, #24]
	}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3720      	adds	r7, #32
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}
	...

080089b4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b088      	sub	sp, #32
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	60f8      	str	r0, [r7, #12]
 80089bc:	60b9      	str	r1, [r7, #8]
 80089be:	607a      	str	r2, [r7, #4]
 80089c0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80089c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	009b      	lsls	r3, r3, #2
 80089ca:	461a      	mov	r2, r3
 80089cc:	21a5      	movs	r1, #165	; 0xa5
 80089ce:	f002 feb9 	bl	800b744 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80089d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80089dc:	3b01      	subs	r3, #1
 80089de:	009b      	lsls	r3, r3, #2
 80089e0:	4413      	add	r3, r2
 80089e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80089e4:	69bb      	ldr	r3, [r7, #24]
 80089e6:	f023 0307 	bic.w	r3, r3, #7
 80089ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80089ec:	69bb      	ldr	r3, [r7, #24]
 80089ee:	f003 0307 	and.w	r3, r3, #7
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d00a      	beq.n	8008a0c <prvInitialiseNewTask+0x58>
	__asm volatile
 80089f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089fa:	f383 8811 	msr	BASEPRI, r3
 80089fe:	f3bf 8f6f 	isb	sy
 8008a02:	f3bf 8f4f 	dsb	sy
 8008a06:	617b      	str	r3, [r7, #20]
}
 8008a08:	bf00      	nop
 8008a0a:	e7fe      	b.n	8008a0a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	61fb      	str	r3, [r7, #28]
 8008a10:	e012      	b.n	8008a38 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008a12:	68ba      	ldr	r2, [r7, #8]
 8008a14:	69fb      	ldr	r3, [r7, #28]
 8008a16:	4413      	add	r3, r2
 8008a18:	7819      	ldrb	r1, [r3, #0]
 8008a1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a1c:	69fb      	ldr	r3, [r7, #28]
 8008a1e:	4413      	add	r3, r2
 8008a20:	3334      	adds	r3, #52	; 0x34
 8008a22:	460a      	mov	r2, r1
 8008a24:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8008a26:	68ba      	ldr	r2, [r7, #8]
 8008a28:	69fb      	ldr	r3, [r7, #28]
 8008a2a:	4413      	add	r3, r2
 8008a2c:	781b      	ldrb	r3, [r3, #0]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d006      	beq.n	8008a40 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008a32:	69fb      	ldr	r3, [r7, #28]
 8008a34:	3301      	adds	r3, #1
 8008a36:	61fb      	str	r3, [r7, #28]
 8008a38:	69fb      	ldr	r3, [r7, #28]
 8008a3a:	2b0f      	cmp	r3, #15
 8008a3c:	d9e9      	bls.n	8008a12 <prvInitialiseNewTask+0x5e>
 8008a3e:	e000      	b.n	8008a42 <prvInitialiseNewTask+0x8e>
		{
			break;
 8008a40:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a44:	2200      	movs	r2, #0
 8008a46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a4c:	2b37      	cmp	r3, #55	; 0x37
 8008a4e:	d901      	bls.n	8008a54 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008a50:	2337      	movs	r3, #55	; 0x37
 8008a52:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a58:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a5e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a62:	2200      	movs	r2, #0
 8008a64:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a68:	3304      	adds	r3, #4
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f7fe ff71 	bl	8007952 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a72:	3318      	adds	r3, #24
 8008a74:	4618      	mov	r0, r3
 8008a76:	f7fe ff6c 	bl	8007952 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a7e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a82:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a88:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a8e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a92:	2200      	movs	r2, #0
 8008a94:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aa2:	3354      	adds	r3, #84	; 0x54
 8008aa4:	224c      	movs	r2, #76	; 0x4c
 8008aa6:	2100      	movs	r1, #0
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f002 fe4b 	bl	800b744 <memset>
 8008aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab0:	4a0c      	ldr	r2, [pc, #48]	; (8008ae4 <prvInitialiseNewTask+0x130>)
 8008ab2:	659a      	str	r2, [r3, #88]	; 0x58
 8008ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab6:	4a0c      	ldr	r2, [pc, #48]	; (8008ae8 <prvInitialiseNewTask+0x134>)
 8008ab8:	65da      	str	r2, [r3, #92]	; 0x5c
 8008aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008abc:	4a0b      	ldr	r2, [pc, #44]	; (8008aec <prvInitialiseNewTask+0x138>)
 8008abe:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008ac0:	683a      	ldr	r2, [r7, #0]
 8008ac2:	68f9      	ldr	r1, [r7, #12]
 8008ac4:	69b8      	ldr	r0, [r7, #24]
 8008ac6:	f001 fb99 	bl	800a1fc <pxPortInitialiseStack>
 8008aca:	4602      	mov	r2, r0
 8008acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ace:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8008ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d002      	beq.n	8008adc <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ad8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ada:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008adc:	bf00      	nop
 8008ade:	3720      	adds	r7, #32
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}
 8008ae4:	20002eb4 	.word	0x20002eb4
 8008ae8:	20002f1c 	.word	0x20002f1c
 8008aec:	20002f84 	.word	0x20002f84

08008af0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b082      	sub	sp, #8
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008af8:	f001 fc70 	bl	800a3dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008afc:	4b2d      	ldr	r3, [pc, #180]	; (8008bb4 <prvAddNewTaskToReadyList+0xc4>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	3301      	adds	r3, #1
 8008b02:	4a2c      	ldr	r2, [pc, #176]	; (8008bb4 <prvAddNewTaskToReadyList+0xc4>)
 8008b04:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008b06:	4b2c      	ldr	r3, [pc, #176]	; (8008bb8 <prvAddNewTaskToReadyList+0xc8>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d109      	bne.n	8008b22 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008b0e:	4a2a      	ldr	r2, [pc, #168]	; (8008bb8 <prvAddNewTaskToReadyList+0xc8>)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008b14:	4b27      	ldr	r3, [pc, #156]	; (8008bb4 <prvAddNewTaskToReadyList+0xc4>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	2b01      	cmp	r3, #1
 8008b1a:	d110      	bne.n	8008b3e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008b1c:	f000 fd68 	bl	80095f0 <prvInitialiseTaskLists>
 8008b20:	e00d      	b.n	8008b3e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008b22:	4b26      	ldr	r3, [pc, #152]	; (8008bbc <prvAddNewTaskToReadyList+0xcc>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d109      	bne.n	8008b3e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008b2a:	4b23      	ldr	r3, [pc, #140]	; (8008bb8 <prvAddNewTaskToReadyList+0xc8>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b34:	429a      	cmp	r2, r3
 8008b36:	d802      	bhi.n	8008b3e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008b38:	4a1f      	ldr	r2, [pc, #124]	; (8008bb8 <prvAddNewTaskToReadyList+0xc8>)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008b3e:	4b20      	ldr	r3, [pc, #128]	; (8008bc0 <prvAddNewTaskToReadyList+0xd0>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	3301      	adds	r3, #1
 8008b44:	4a1e      	ldr	r2, [pc, #120]	; (8008bc0 <prvAddNewTaskToReadyList+0xd0>)
 8008b46:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008b48:	4b1d      	ldr	r3, [pc, #116]	; (8008bc0 <prvAddNewTaskToReadyList+0xd0>)
 8008b4a:	681a      	ldr	r2, [r3, #0]
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b54:	4b1b      	ldr	r3, [pc, #108]	; (8008bc4 <prvAddNewTaskToReadyList+0xd4>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	429a      	cmp	r2, r3
 8008b5a:	d903      	bls.n	8008b64 <prvAddNewTaskToReadyList+0x74>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b60:	4a18      	ldr	r2, [pc, #96]	; (8008bc4 <prvAddNewTaskToReadyList+0xd4>)
 8008b62:	6013      	str	r3, [r2, #0]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b68:	4613      	mov	r3, r2
 8008b6a:	009b      	lsls	r3, r3, #2
 8008b6c:	4413      	add	r3, r2
 8008b6e:	009b      	lsls	r3, r3, #2
 8008b70:	4a15      	ldr	r2, [pc, #84]	; (8008bc8 <prvAddNewTaskToReadyList+0xd8>)
 8008b72:	441a      	add	r2, r3
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	3304      	adds	r3, #4
 8008b78:	4619      	mov	r1, r3
 8008b7a:	4610      	mov	r0, r2
 8008b7c:	f7fe fef5 	bl	800796a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008b80:	f001 fc5c 	bl	800a43c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008b84:	4b0d      	ldr	r3, [pc, #52]	; (8008bbc <prvAddNewTaskToReadyList+0xcc>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d00e      	beq.n	8008baa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008b8c:	4b0a      	ldr	r3, [pc, #40]	; (8008bb8 <prvAddNewTaskToReadyList+0xc8>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b96:	429a      	cmp	r2, r3
 8008b98:	d207      	bcs.n	8008baa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008b9a:	4b0c      	ldr	r3, [pc, #48]	; (8008bcc <prvAddNewTaskToReadyList+0xdc>)
 8008b9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ba0:	601a      	str	r2, [r3, #0]
 8008ba2:	f3bf 8f4f 	dsb	sy
 8008ba6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008baa:	bf00      	nop
 8008bac:	3708      	adds	r7, #8
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}
 8008bb2:	bf00      	nop
 8008bb4:	20000d34 	.word	0x20000d34
 8008bb8:	20000860 	.word	0x20000860
 8008bbc:	20000d40 	.word	0x20000d40
 8008bc0:	20000d50 	.word	0x20000d50
 8008bc4:	20000d3c 	.word	0x20000d3c
 8008bc8:	20000864 	.word	0x20000864
 8008bcc:	e000ed04 	.word	0xe000ed04

08008bd0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b084      	sub	sp, #16
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d017      	beq.n	8008c12 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008be2:	4b13      	ldr	r3, [pc, #76]	; (8008c30 <vTaskDelay+0x60>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d00a      	beq.n	8008c00 <vTaskDelay+0x30>
	__asm volatile
 8008bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bee:	f383 8811 	msr	BASEPRI, r3
 8008bf2:	f3bf 8f6f 	isb	sy
 8008bf6:	f3bf 8f4f 	dsb	sy
 8008bfa:	60bb      	str	r3, [r7, #8]
}
 8008bfc:	bf00      	nop
 8008bfe:	e7fe      	b.n	8008bfe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008c00:	f000 f92c 	bl	8008e5c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008c04:	2100      	movs	r1, #0
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f000 ff72 	bl	8009af0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008c0c:	f000 f934 	bl	8008e78 <xTaskResumeAll>
 8008c10:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d107      	bne.n	8008c28 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008c18:	4b06      	ldr	r3, [pc, #24]	; (8008c34 <vTaskDelay+0x64>)
 8008c1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c1e:	601a      	str	r2, [r3, #0]
 8008c20:	f3bf 8f4f 	dsb	sy
 8008c24:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008c28:	bf00      	nop
 8008c2a:	3710      	adds	r7, #16
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}
 8008c30:	20000d5c 	.word	0x20000d5c
 8008c34:	e000ed04 	.word	0xe000ed04

08008c38 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b088      	sub	sp, #32
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 8008c42:	2300      	movs	r3, #0
 8008c44:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	2b37      	cmp	r3, #55	; 0x37
 8008c4a:	d90a      	bls.n	8008c62 <vTaskPrioritySet+0x2a>
	__asm volatile
 8008c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c50:	f383 8811 	msr	BASEPRI, r3
 8008c54:	f3bf 8f6f 	isb	sy
 8008c58:	f3bf 8f4f 	dsb	sy
 8008c5c:	60fb      	str	r3, [r7, #12]
}
 8008c5e:	bf00      	nop
 8008c60:	e7fe      	b.n	8008c60 <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	2b37      	cmp	r3, #55	; 0x37
 8008c66:	d901      	bls.n	8008c6c <vTaskPrioritySet+0x34>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008c68:	2337      	movs	r3, #55	; 0x37
 8008c6a:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 8008c6c:	f001 fbb6 	bl	800a3dc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d102      	bne.n	8008c7c <vTaskPrioritySet+0x44>
 8008c76:	4b3d      	ldr	r3, [pc, #244]	; (8008d6c <vTaskPrioritySet+0x134>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	e000      	b.n	8008c7e <vTaskPrioritySet+0x46>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 8008c80:	69bb      	ldr	r3, [r7, #24]
 8008c82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c84:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 8008c86:	697a      	ldr	r2, [r7, #20]
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	429a      	cmp	r2, r3
 8008c8c:	d068      	beq.n	8008d60 <vTaskPrioritySet+0x128>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 8008c8e:	683a      	ldr	r2, [r7, #0]
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	429a      	cmp	r2, r3
 8008c94:	d90d      	bls.n	8008cb2 <vTaskPrioritySet+0x7a>
				{
					if( pxTCB != pxCurrentTCB )
 8008c96:	4b35      	ldr	r3, [pc, #212]	; (8008d6c <vTaskPrioritySet+0x134>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	69ba      	ldr	r2, [r7, #24]
 8008c9c:	429a      	cmp	r2, r3
 8008c9e:	d00f      	beq.n	8008cc0 <vTaskPrioritySet+0x88>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8008ca0:	4b32      	ldr	r3, [pc, #200]	; (8008d6c <vTaskPrioritySet+0x134>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ca6:	683a      	ldr	r2, [r7, #0]
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	d309      	bcc.n	8008cc0 <vTaskPrioritySet+0x88>
						{
							xYieldRequired = pdTRUE;
 8008cac:	2301      	movs	r3, #1
 8008cae:	61fb      	str	r3, [r7, #28]
 8008cb0:	e006      	b.n	8008cc0 <vTaskPrioritySet+0x88>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 8008cb2:	4b2e      	ldr	r3, [pc, #184]	; (8008d6c <vTaskPrioritySet+0x134>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	69ba      	ldr	r2, [r7, #24]
 8008cb8:	429a      	cmp	r2, r3
 8008cba:	d101      	bne.n	8008cc0 <vTaskPrioritySet+0x88>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008cc0:	69bb      	ldr	r3, [r7, #24]
 8008cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cc4:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8008cc6:	69bb      	ldr	r3, [r7, #24]
 8008cc8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008cca:	69bb      	ldr	r3, [r7, #24]
 8008ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cce:	429a      	cmp	r2, r3
 8008cd0:	d102      	bne.n	8008cd8 <vTaskPrioritySet+0xa0>
					{
						pxTCB->uxPriority = uxNewPriority;
 8008cd2:	69bb      	ldr	r3, [r7, #24]
 8008cd4:	683a      	ldr	r2, [r7, #0]
 8008cd6:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 8008cd8:	69bb      	ldr	r3, [r7, #24]
 8008cda:	683a      	ldr	r2, [r7, #0]
 8008cdc:	64da      	str	r2, [r3, #76]	; 0x4c
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008cde:	69bb      	ldr	r3, [r7, #24]
 8008ce0:	699b      	ldr	r3, [r3, #24]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	db04      	blt.n	8008cf0 <vTaskPrioritySet+0xb8>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008cec:	69bb      	ldr	r3, [r7, #24]
 8008cee:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008cf0:	69bb      	ldr	r3, [r7, #24]
 8008cf2:	6959      	ldr	r1, [r3, #20]
 8008cf4:	693a      	ldr	r2, [r7, #16]
 8008cf6:	4613      	mov	r3, r2
 8008cf8:	009b      	lsls	r3, r3, #2
 8008cfa:	4413      	add	r3, r2
 8008cfc:	009b      	lsls	r3, r3, #2
 8008cfe:	4a1c      	ldr	r2, [pc, #112]	; (8008d70 <vTaskPrioritySet+0x138>)
 8008d00:	4413      	add	r3, r2
 8008d02:	4299      	cmp	r1, r3
 8008d04:	d101      	bne.n	8008d0a <vTaskPrioritySet+0xd2>
 8008d06:	2301      	movs	r3, #1
 8008d08:	e000      	b.n	8008d0c <vTaskPrioritySet+0xd4>
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d01c      	beq.n	8008d4a <vTaskPrioritySet+0x112>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d10:	69bb      	ldr	r3, [r7, #24]
 8008d12:	3304      	adds	r3, #4
 8008d14:	4618      	mov	r0, r3
 8008d16:	f7fe fe83 	bl	8007a20 <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 8008d1a:	69bb      	ldr	r3, [r7, #24]
 8008d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d1e:	4b15      	ldr	r3, [pc, #84]	; (8008d74 <vTaskPrioritySet+0x13c>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	429a      	cmp	r2, r3
 8008d24:	d903      	bls.n	8008d2e <vTaskPrioritySet+0xf6>
 8008d26:	69bb      	ldr	r3, [r7, #24]
 8008d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d2a:	4a12      	ldr	r2, [pc, #72]	; (8008d74 <vTaskPrioritySet+0x13c>)
 8008d2c:	6013      	str	r3, [r2, #0]
 8008d2e:	69bb      	ldr	r3, [r7, #24]
 8008d30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d32:	4613      	mov	r3, r2
 8008d34:	009b      	lsls	r3, r3, #2
 8008d36:	4413      	add	r3, r2
 8008d38:	009b      	lsls	r3, r3, #2
 8008d3a:	4a0d      	ldr	r2, [pc, #52]	; (8008d70 <vTaskPrioritySet+0x138>)
 8008d3c:	441a      	add	r2, r3
 8008d3e:	69bb      	ldr	r3, [r7, #24]
 8008d40:	3304      	adds	r3, #4
 8008d42:	4619      	mov	r1, r3
 8008d44:	4610      	mov	r0, r2
 8008d46:	f7fe fe10 	bl	800796a <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 8008d4a:	69fb      	ldr	r3, [r7, #28]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d007      	beq.n	8008d60 <vTaskPrioritySet+0x128>
				{
					taskYIELD_IF_USING_PREEMPTION();
 8008d50:	4b09      	ldr	r3, [pc, #36]	; (8008d78 <vTaskPrioritySet+0x140>)
 8008d52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d56:	601a      	str	r2, [r3, #0]
 8008d58:	f3bf 8f4f 	dsb	sy
 8008d5c:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 8008d60:	f001 fb6c 	bl	800a43c <vPortExitCritical>
	}
 8008d64:	bf00      	nop
 8008d66:	3720      	adds	r7, #32
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}
 8008d6c:	20000860 	.word	0x20000860
 8008d70:	20000864 	.word	0x20000864
 8008d74:	20000d3c 	.word	0x20000d3c
 8008d78:	e000ed04 	.word	0xe000ed04

08008d7c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b08a      	sub	sp, #40	; 0x28
 8008d80:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008d82:	2300      	movs	r3, #0
 8008d84:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008d86:	2300      	movs	r3, #0
 8008d88:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008d8a:	463a      	mov	r2, r7
 8008d8c:	1d39      	adds	r1, r7, #4
 8008d8e:	f107 0308 	add.w	r3, r7, #8
 8008d92:	4618      	mov	r0, r3
 8008d94:	f7fe fb24 	bl	80073e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008d98:	6839      	ldr	r1, [r7, #0]
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	68ba      	ldr	r2, [r7, #8]
 8008d9e:	9202      	str	r2, [sp, #8]
 8008da0:	9301      	str	r3, [sp, #4]
 8008da2:	2300      	movs	r3, #0
 8008da4:	9300      	str	r3, [sp, #0]
 8008da6:	2300      	movs	r3, #0
 8008da8:	460a      	mov	r2, r1
 8008daa:	4924      	ldr	r1, [pc, #144]	; (8008e3c <vTaskStartScheduler+0xc0>)
 8008dac:	4824      	ldr	r0, [pc, #144]	; (8008e40 <vTaskStartScheduler+0xc4>)
 8008dae:	f7ff fd5f 	bl	8008870 <xTaskCreateStatic>
 8008db2:	4603      	mov	r3, r0
 8008db4:	4a23      	ldr	r2, [pc, #140]	; (8008e44 <vTaskStartScheduler+0xc8>)
 8008db6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008db8:	4b22      	ldr	r3, [pc, #136]	; (8008e44 <vTaskStartScheduler+0xc8>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d002      	beq.n	8008dc6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	617b      	str	r3, [r7, #20]
 8008dc4:	e001      	b.n	8008dca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	2b01      	cmp	r3, #1
 8008dce:	d102      	bne.n	8008dd6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008dd0:	f000 fee2 	bl	8009b98 <xTimerCreateTimerTask>
 8008dd4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	2b01      	cmp	r3, #1
 8008dda:	d11b      	bne.n	8008e14 <vTaskStartScheduler+0x98>
	__asm volatile
 8008ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008de0:	f383 8811 	msr	BASEPRI, r3
 8008de4:	f3bf 8f6f 	isb	sy
 8008de8:	f3bf 8f4f 	dsb	sy
 8008dec:	613b      	str	r3, [r7, #16]
}
 8008dee:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008df0:	4b15      	ldr	r3, [pc, #84]	; (8008e48 <vTaskStartScheduler+0xcc>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	3354      	adds	r3, #84	; 0x54
 8008df6:	4a15      	ldr	r2, [pc, #84]	; (8008e4c <vTaskStartScheduler+0xd0>)
 8008df8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008dfa:	4b15      	ldr	r3, [pc, #84]	; (8008e50 <vTaskStartScheduler+0xd4>)
 8008dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8008e00:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008e02:	4b14      	ldr	r3, [pc, #80]	; (8008e54 <vTaskStartScheduler+0xd8>)
 8008e04:	2201      	movs	r2, #1
 8008e06:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008e08:	4b13      	ldr	r3, [pc, #76]	; (8008e58 <vTaskStartScheduler+0xdc>)
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008e0e:	f001 fa73 	bl	800a2f8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008e12:	e00e      	b.n	8008e32 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e1a:	d10a      	bne.n	8008e32 <vTaskStartScheduler+0xb6>
	__asm volatile
 8008e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e20:	f383 8811 	msr	BASEPRI, r3
 8008e24:	f3bf 8f6f 	isb	sy
 8008e28:	f3bf 8f4f 	dsb	sy
 8008e2c:	60fb      	str	r3, [r7, #12]
}
 8008e2e:	bf00      	nop
 8008e30:	e7fe      	b.n	8008e30 <vTaskStartScheduler+0xb4>
}
 8008e32:	bf00      	nop
 8008e34:	3718      	adds	r7, #24
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}
 8008e3a:	bf00      	nop
 8008e3c:	0800c110 	.word	0x0800c110
 8008e40:	080095c1 	.word	0x080095c1
 8008e44:	20000d58 	.word	0x20000d58
 8008e48:	20000860 	.word	0x20000860
 8008e4c:	2000005c 	.word	0x2000005c
 8008e50:	20000d54 	.word	0x20000d54
 8008e54:	20000d40 	.word	0x20000d40
 8008e58:	20000d38 	.word	0x20000d38

08008e5c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008e60:	4b04      	ldr	r3, [pc, #16]	; (8008e74 <vTaskSuspendAll+0x18>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	3301      	adds	r3, #1
 8008e66:	4a03      	ldr	r2, [pc, #12]	; (8008e74 <vTaskSuspendAll+0x18>)
 8008e68:	6013      	str	r3, [r2, #0]
}
 8008e6a:	bf00      	nop
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bc80      	pop	{r7}
 8008e70:	4770      	bx	lr
 8008e72:	bf00      	nop
 8008e74:	20000d5c 	.word	0x20000d5c

08008e78 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b084      	sub	sp, #16
 8008e7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008e82:	2300      	movs	r3, #0
 8008e84:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008e86:	4b42      	ldr	r3, [pc, #264]	; (8008f90 <xTaskResumeAll+0x118>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d10a      	bne.n	8008ea4 <xTaskResumeAll+0x2c>
	__asm volatile
 8008e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e92:	f383 8811 	msr	BASEPRI, r3
 8008e96:	f3bf 8f6f 	isb	sy
 8008e9a:	f3bf 8f4f 	dsb	sy
 8008e9e:	603b      	str	r3, [r7, #0]
}
 8008ea0:	bf00      	nop
 8008ea2:	e7fe      	b.n	8008ea2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008ea4:	f001 fa9a 	bl	800a3dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008ea8:	4b39      	ldr	r3, [pc, #228]	; (8008f90 <xTaskResumeAll+0x118>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	3b01      	subs	r3, #1
 8008eae:	4a38      	ldr	r2, [pc, #224]	; (8008f90 <xTaskResumeAll+0x118>)
 8008eb0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008eb2:	4b37      	ldr	r3, [pc, #220]	; (8008f90 <xTaskResumeAll+0x118>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d162      	bne.n	8008f80 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008eba:	4b36      	ldr	r3, [pc, #216]	; (8008f94 <xTaskResumeAll+0x11c>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d05e      	beq.n	8008f80 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008ec2:	e02f      	b.n	8008f24 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008ec4:	4b34      	ldr	r3, [pc, #208]	; (8008f98 <xTaskResumeAll+0x120>)
 8008ec6:	68db      	ldr	r3, [r3, #12]
 8008ec8:	68db      	ldr	r3, [r3, #12]
 8008eca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	3318      	adds	r3, #24
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	f7fe fda5 	bl	8007a20 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	3304      	adds	r3, #4
 8008eda:	4618      	mov	r0, r3
 8008edc:	f7fe fda0 	bl	8007a20 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ee4:	4b2d      	ldr	r3, [pc, #180]	; (8008f9c <xTaskResumeAll+0x124>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	429a      	cmp	r2, r3
 8008eea:	d903      	bls.n	8008ef4 <xTaskResumeAll+0x7c>
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ef0:	4a2a      	ldr	r2, [pc, #168]	; (8008f9c <xTaskResumeAll+0x124>)
 8008ef2:	6013      	str	r3, [r2, #0]
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ef8:	4613      	mov	r3, r2
 8008efa:	009b      	lsls	r3, r3, #2
 8008efc:	4413      	add	r3, r2
 8008efe:	009b      	lsls	r3, r3, #2
 8008f00:	4a27      	ldr	r2, [pc, #156]	; (8008fa0 <xTaskResumeAll+0x128>)
 8008f02:	441a      	add	r2, r3
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	3304      	adds	r3, #4
 8008f08:	4619      	mov	r1, r3
 8008f0a:	4610      	mov	r0, r2
 8008f0c:	f7fe fd2d 	bl	800796a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f14:	4b23      	ldr	r3, [pc, #140]	; (8008fa4 <xTaskResumeAll+0x12c>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f1a:	429a      	cmp	r2, r3
 8008f1c:	d302      	bcc.n	8008f24 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008f1e:	4b22      	ldr	r3, [pc, #136]	; (8008fa8 <xTaskResumeAll+0x130>)
 8008f20:	2201      	movs	r2, #1
 8008f22:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008f24:	4b1c      	ldr	r3, [pc, #112]	; (8008f98 <xTaskResumeAll+0x120>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d1cb      	bne.n	8008ec4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d001      	beq.n	8008f36 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008f32:	f000 fbff 	bl	8009734 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008f36:	4b1d      	ldr	r3, [pc, #116]	; (8008fac <xTaskResumeAll+0x134>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d010      	beq.n	8008f64 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008f42:	f000 f845 	bl	8008fd0 <xTaskIncrementTick>
 8008f46:	4603      	mov	r3, r0
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d002      	beq.n	8008f52 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008f4c:	4b16      	ldr	r3, [pc, #88]	; (8008fa8 <xTaskResumeAll+0x130>)
 8008f4e:	2201      	movs	r2, #1
 8008f50:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	3b01      	subs	r3, #1
 8008f56:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d1f1      	bne.n	8008f42 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8008f5e:	4b13      	ldr	r3, [pc, #76]	; (8008fac <xTaskResumeAll+0x134>)
 8008f60:	2200      	movs	r2, #0
 8008f62:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008f64:	4b10      	ldr	r3, [pc, #64]	; (8008fa8 <xTaskResumeAll+0x130>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d009      	beq.n	8008f80 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008f70:	4b0f      	ldr	r3, [pc, #60]	; (8008fb0 <xTaskResumeAll+0x138>)
 8008f72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f76:	601a      	str	r2, [r3, #0]
 8008f78:	f3bf 8f4f 	dsb	sy
 8008f7c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008f80:	f001 fa5c 	bl	800a43c <vPortExitCritical>

	return xAlreadyYielded;
 8008f84:	68bb      	ldr	r3, [r7, #8]
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3710      	adds	r7, #16
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}
 8008f8e:	bf00      	nop
 8008f90:	20000d5c 	.word	0x20000d5c
 8008f94:	20000d34 	.word	0x20000d34
 8008f98:	20000cf4 	.word	0x20000cf4
 8008f9c:	20000d3c 	.word	0x20000d3c
 8008fa0:	20000864 	.word	0x20000864
 8008fa4:	20000860 	.word	0x20000860
 8008fa8:	20000d48 	.word	0x20000d48
 8008fac:	20000d44 	.word	0x20000d44
 8008fb0:	e000ed04 	.word	0xe000ed04

08008fb4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b083      	sub	sp, #12
 8008fb8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008fba:	4b04      	ldr	r3, [pc, #16]	; (8008fcc <xTaskGetTickCount+0x18>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008fc0:	687b      	ldr	r3, [r7, #4]
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	370c      	adds	r7, #12
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bc80      	pop	{r7}
 8008fca:	4770      	bx	lr
 8008fcc:	20000d38 	.word	0x20000d38

08008fd0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b086      	sub	sp, #24
 8008fd4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008fda:	4b51      	ldr	r3, [pc, #324]	; (8009120 <xTaskIncrementTick+0x150>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	f040 808e 	bne.w	8009100 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008fe4:	4b4f      	ldr	r3, [pc, #316]	; (8009124 <xTaskIncrementTick+0x154>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	3301      	adds	r3, #1
 8008fea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008fec:	4a4d      	ldr	r2, [pc, #308]	; (8009124 <xTaskIncrementTick+0x154>)
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008ff2:	693b      	ldr	r3, [r7, #16]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d120      	bne.n	800903a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008ff8:	4b4b      	ldr	r3, [pc, #300]	; (8009128 <xTaskIncrementTick+0x158>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d00a      	beq.n	8009018 <xTaskIncrementTick+0x48>
	__asm volatile
 8009002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009006:	f383 8811 	msr	BASEPRI, r3
 800900a:	f3bf 8f6f 	isb	sy
 800900e:	f3bf 8f4f 	dsb	sy
 8009012:	603b      	str	r3, [r7, #0]
}
 8009014:	bf00      	nop
 8009016:	e7fe      	b.n	8009016 <xTaskIncrementTick+0x46>
 8009018:	4b43      	ldr	r3, [pc, #268]	; (8009128 <xTaskIncrementTick+0x158>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	60fb      	str	r3, [r7, #12]
 800901e:	4b43      	ldr	r3, [pc, #268]	; (800912c <xTaskIncrementTick+0x15c>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	4a41      	ldr	r2, [pc, #260]	; (8009128 <xTaskIncrementTick+0x158>)
 8009024:	6013      	str	r3, [r2, #0]
 8009026:	4a41      	ldr	r2, [pc, #260]	; (800912c <xTaskIncrementTick+0x15c>)
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	6013      	str	r3, [r2, #0]
 800902c:	4b40      	ldr	r3, [pc, #256]	; (8009130 <xTaskIncrementTick+0x160>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	3301      	adds	r3, #1
 8009032:	4a3f      	ldr	r2, [pc, #252]	; (8009130 <xTaskIncrementTick+0x160>)
 8009034:	6013      	str	r3, [r2, #0]
 8009036:	f000 fb7d 	bl	8009734 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800903a:	4b3e      	ldr	r3, [pc, #248]	; (8009134 <xTaskIncrementTick+0x164>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	693a      	ldr	r2, [r7, #16]
 8009040:	429a      	cmp	r2, r3
 8009042:	d34e      	bcc.n	80090e2 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009044:	4b38      	ldr	r3, [pc, #224]	; (8009128 <xTaskIncrementTick+0x158>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d101      	bne.n	8009052 <xTaskIncrementTick+0x82>
 800904e:	2301      	movs	r3, #1
 8009050:	e000      	b.n	8009054 <xTaskIncrementTick+0x84>
 8009052:	2300      	movs	r3, #0
 8009054:	2b00      	cmp	r3, #0
 8009056:	d004      	beq.n	8009062 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009058:	4b36      	ldr	r3, [pc, #216]	; (8009134 <xTaskIncrementTick+0x164>)
 800905a:	f04f 32ff 	mov.w	r2, #4294967295
 800905e:	601a      	str	r2, [r3, #0]
					break;
 8009060:	e03f      	b.n	80090e2 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009062:	4b31      	ldr	r3, [pc, #196]	; (8009128 <xTaskIncrementTick+0x158>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	68db      	ldr	r3, [r3, #12]
 8009068:	68db      	ldr	r3, [r3, #12]
 800906a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	685b      	ldr	r3, [r3, #4]
 8009070:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009072:	693a      	ldr	r2, [r7, #16]
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	429a      	cmp	r2, r3
 8009078:	d203      	bcs.n	8009082 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800907a:	4a2e      	ldr	r2, [pc, #184]	; (8009134 <xTaskIncrementTick+0x164>)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6013      	str	r3, [r2, #0]
						break;
 8009080:	e02f      	b.n	80090e2 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	3304      	adds	r3, #4
 8009086:	4618      	mov	r0, r3
 8009088:	f7fe fcca 	bl	8007a20 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009090:	2b00      	cmp	r3, #0
 8009092:	d004      	beq.n	800909e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	3318      	adds	r3, #24
 8009098:	4618      	mov	r0, r3
 800909a:	f7fe fcc1 	bl	8007a20 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090a2:	4b25      	ldr	r3, [pc, #148]	; (8009138 <xTaskIncrementTick+0x168>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d903      	bls.n	80090b2 <xTaskIncrementTick+0xe2>
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ae:	4a22      	ldr	r2, [pc, #136]	; (8009138 <xTaskIncrementTick+0x168>)
 80090b0:	6013      	str	r3, [r2, #0]
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090b6:	4613      	mov	r3, r2
 80090b8:	009b      	lsls	r3, r3, #2
 80090ba:	4413      	add	r3, r2
 80090bc:	009b      	lsls	r3, r3, #2
 80090be:	4a1f      	ldr	r2, [pc, #124]	; (800913c <xTaskIncrementTick+0x16c>)
 80090c0:	441a      	add	r2, r3
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	3304      	adds	r3, #4
 80090c6:	4619      	mov	r1, r3
 80090c8:	4610      	mov	r0, r2
 80090ca:	f7fe fc4e 	bl	800796a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090d2:	4b1b      	ldr	r3, [pc, #108]	; (8009140 <xTaskIncrementTick+0x170>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090d8:	429a      	cmp	r2, r3
 80090da:	d3b3      	bcc.n	8009044 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80090dc:	2301      	movs	r3, #1
 80090de:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80090e0:	e7b0      	b.n	8009044 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80090e2:	4b17      	ldr	r3, [pc, #92]	; (8009140 <xTaskIncrementTick+0x170>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090e8:	4914      	ldr	r1, [pc, #80]	; (800913c <xTaskIncrementTick+0x16c>)
 80090ea:	4613      	mov	r3, r2
 80090ec:	009b      	lsls	r3, r3, #2
 80090ee:	4413      	add	r3, r2
 80090f0:	009b      	lsls	r3, r3, #2
 80090f2:	440b      	add	r3, r1
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	2b01      	cmp	r3, #1
 80090f8:	d907      	bls.n	800910a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80090fa:	2301      	movs	r3, #1
 80090fc:	617b      	str	r3, [r7, #20]
 80090fe:	e004      	b.n	800910a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009100:	4b10      	ldr	r3, [pc, #64]	; (8009144 <xTaskIncrementTick+0x174>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	3301      	adds	r3, #1
 8009106:	4a0f      	ldr	r2, [pc, #60]	; (8009144 <xTaskIncrementTick+0x174>)
 8009108:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800910a:	4b0f      	ldr	r3, [pc, #60]	; (8009148 <xTaskIncrementTick+0x178>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d001      	beq.n	8009116 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8009112:	2301      	movs	r3, #1
 8009114:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009116:	697b      	ldr	r3, [r7, #20]
}
 8009118:	4618      	mov	r0, r3
 800911a:	3718      	adds	r7, #24
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}
 8009120:	20000d5c 	.word	0x20000d5c
 8009124:	20000d38 	.word	0x20000d38
 8009128:	20000cec 	.word	0x20000cec
 800912c:	20000cf0 	.word	0x20000cf0
 8009130:	20000d4c 	.word	0x20000d4c
 8009134:	20000d54 	.word	0x20000d54
 8009138:	20000d3c 	.word	0x20000d3c
 800913c:	20000864 	.word	0x20000864
 8009140:	20000860 	.word	0x20000860
 8009144:	20000d44 	.word	0x20000d44
 8009148:	20000d48 	.word	0x20000d48

0800914c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800914c:	b480      	push	{r7}
 800914e:	b085      	sub	sp, #20
 8009150:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009152:	4b2a      	ldr	r3, [pc, #168]	; (80091fc <vTaskSwitchContext+0xb0>)
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d003      	beq.n	8009162 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800915a:	4b29      	ldr	r3, [pc, #164]	; (8009200 <vTaskSwitchContext+0xb4>)
 800915c:	2201      	movs	r2, #1
 800915e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009160:	e046      	b.n	80091f0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8009162:	4b27      	ldr	r3, [pc, #156]	; (8009200 <vTaskSwitchContext+0xb4>)
 8009164:	2200      	movs	r2, #0
 8009166:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009168:	4b26      	ldr	r3, [pc, #152]	; (8009204 <vTaskSwitchContext+0xb8>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	60fb      	str	r3, [r7, #12]
 800916e:	e010      	b.n	8009192 <vTaskSwitchContext+0x46>
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d10a      	bne.n	800918c <vTaskSwitchContext+0x40>
	__asm volatile
 8009176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800917a:	f383 8811 	msr	BASEPRI, r3
 800917e:	f3bf 8f6f 	isb	sy
 8009182:	f3bf 8f4f 	dsb	sy
 8009186:	607b      	str	r3, [r7, #4]
}
 8009188:	bf00      	nop
 800918a:	e7fe      	b.n	800918a <vTaskSwitchContext+0x3e>
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	3b01      	subs	r3, #1
 8009190:	60fb      	str	r3, [r7, #12]
 8009192:	491d      	ldr	r1, [pc, #116]	; (8009208 <vTaskSwitchContext+0xbc>)
 8009194:	68fa      	ldr	r2, [r7, #12]
 8009196:	4613      	mov	r3, r2
 8009198:	009b      	lsls	r3, r3, #2
 800919a:	4413      	add	r3, r2
 800919c:	009b      	lsls	r3, r3, #2
 800919e:	440b      	add	r3, r1
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d0e4      	beq.n	8009170 <vTaskSwitchContext+0x24>
 80091a6:	68fa      	ldr	r2, [r7, #12]
 80091a8:	4613      	mov	r3, r2
 80091aa:	009b      	lsls	r3, r3, #2
 80091ac:	4413      	add	r3, r2
 80091ae:	009b      	lsls	r3, r3, #2
 80091b0:	4a15      	ldr	r2, [pc, #84]	; (8009208 <vTaskSwitchContext+0xbc>)
 80091b2:	4413      	add	r3, r2
 80091b4:	60bb      	str	r3, [r7, #8]
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	685b      	ldr	r3, [r3, #4]
 80091ba:	685a      	ldr	r2, [r3, #4]
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	605a      	str	r2, [r3, #4]
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	685a      	ldr	r2, [r3, #4]
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	3308      	adds	r3, #8
 80091c8:	429a      	cmp	r2, r3
 80091ca:	d104      	bne.n	80091d6 <vTaskSwitchContext+0x8a>
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	685b      	ldr	r3, [r3, #4]
 80091d0:	685a      	ldr	r2, [r3, #4]
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	605a      	str	r2, [r3, #4]
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	685b      	ldr	r3, [r3, #4]
 80091da:	68db      	ldr	r3, [r3, #12]
 80091dc:	4a0b      	ldr	r2, [pc, #44]	; (800920c <vTaskSwitchContext+0xc0>)
 80091de:	6013      	str	r3, [r2, #0]
 80091e0:	4a08      	ldr	r2, [pc, #32]	; (8009204 <vTaskSwitchContext+0xb8>)
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80091e6:	4b09      	ldr	r3, [pc, #36]	; (800920c <vTaskSwitchContext+0xc0>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	3354      	adds	r3, #84	; 0x54
 80091ec:	4a08      	ldr	r2, [pc, #32]	; (8009210 <vTaskSwitchContext+0xc4>)
 80091ee:	6013      	str	r3, [r2, #0]
}
 80091f0:	bf00      	nop
 80091f2:	3714      	adds	r7, #20
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bc80      	pop	{r7}
 80091f8:	4770      	bx	lr
 80091fa:	bf00      	nop
 80091fc:	20000d5c 	.word	0x20000d5c
 8009200:	20000d48 	.word	0x20000d48
 8009204:	20000d3c 	.word	0x20000d3c
 8009208:	20000864 	.word	0x20000864
 800920c:	20000860 	.word	0x20000860
 8009210:	2000005c 	.word	0x2000005c

08009214 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b084      	sub	sp, #16
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
 800921c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d10a      	bne.n	800923a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009228:	f383 8811 	msr	BASEPRI, r3
 800922c:	f3bf 8f6f 	isb	sy
 8009230:	f3bf 8f4f 	dsb	sy
 8009234:	60fb      	str	r3, [r7, #12]
}
 8009236:	bf00      	nop
 8009238:	e7fe      	b.n	8009238 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800923a:	4b07      	ldr	r3, [pc, #28]	; (8009258 <vTaskPlaceOnEventList+0x44>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	3318      	adds	r3, #24
 8009240:	4619      	mov	r1, r3
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f7fe fbb4 	bl	80079b0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009248:	2101      	movs	r1, #1
 800924a:	6838      	ldr	r0, [r7, #0]
 800924c:	f000 fc50 	bl	8009af0 <prvAddCurrentTaskToDelayedList>
}
 8009250:	bf00      	nop
 8009252:	3710      	adds	r7, #16
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}
 8009258:	20000860 	.word	0x20000860

0800925c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b086      	sub	sp, #24
 8009260:	af00      	add	r7, sp, #0
 8009262:	60f8      	str	r0, [r7, #12]
 8009264:	60b9      	str	r1, [r7, #8]
 8009266:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d10a      	bne.n	8009284 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800926e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009272:	f383 8811 	msr	BASEPRI, r3
 8009276:	f3bf 8f6f 	isb	sy
 800927a:	f3bf 8f4f 	dsb	sy
 800927e:	617b      	str	r3, [r7, #20]
}
 8009280:	bf00      	nop
 8009282:	e7fe      	b.n	8009282 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8009284:	4b11      	ldr	r3, [pc, #68]	; (80092cc <vTaskPlaceOnUnorderedEventList+0x70>)
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d10a      	bne.n	80092a2 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 800928c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009290:	f383 8811 	msr	BASEPRI, r3
 8009294:	f3bf 8f6f 	isb	sy
 8009298:	f3bf 8f4f 	dsb	sy
 800929c:	613b      	str	r3, [r7, #16]
}
 800929e:	bf00      	nop
 80092a0:	e7fe      	b.n	80092a0 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80092a2:	4b0b      	ldr	r3, [pc, #44]	; (80092d0 <vTaskPlaceOnUnorderedEventList+0x74>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	68ba      	ldr	r2, [r7, #8]
 80092a8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80092ac:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80092ae:	4b08      	ldr	r3, [pc, #32]	; (80092d0 <vTaskPlaceOnUnorderedEventList+0x74>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	3318      	adds	r3, #24
 80092b4:	4619      	mov	r1, r3
 80092b6:	68f8      	ldr	r0, [r7, #12]
 80092b8:	f7fe fb57 	bl	800796a <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80092bc:	2101      	movs	r1, #1
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f000 fc16 	bl	8009af0 <prvAddCurrentTaskToDelayedList>
}
 80092c4:	bf00      	nop
 80092c6:	3718      	adds	r7, #24
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}
 80092cc:	20000d5c 	.word	0x20000d5c
 80092d0:	20000860 	.word	0x20000860

080092d4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b086      	sub	sp, #24
 80092d8:	af00      	add	r7, sp, #0
 80092da:	60f8      	str	r0, [r7, #12]
 80092dc:	60b9      	str	r1, [r7, #8]
 80092de:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d10a      	bne.n	80092fc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80092e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ea:	f383 8811 	msr	BASEPRI, r3
 80092ee:	f3bf 8f6f 	isb	sy
 80092f2:	f3bf 8f4f 	dsb	sy
 80092f6:	617b      	str	r3, [r7, #20]
}
 80092f8:	bf00      	nop
 80092fa:	e7fe      	b.n	80092fa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80092fc:	4b0a      	ldr	r3, [pc, #40]	; (8009328 <vTaskPlaceOnEventListRestricted+0x54>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	3318      	adds	r3, #24
 8009302:	4619      	mov	r1, r3
 8009304:	68f8      	ldr	r0, [r7, #12]
 8009306:	f7fe fb30 	bl	800796a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d002      	beq.n	8009316 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009310:	f04f 33ff 	mov.w	r3, #4294967295
 8009314:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009316:	6879      	ldr	r1, [r7, #4]
 8009318:	68b8      	ldr	r0, [r7, #8]
 800931a:	f000 fbe9 	bl	8009af0 <prvAddCurrentTaskToDelayedList>
	}
 800931e:	bf00      	nop
 8009320:	3718      	adds	r7, #24
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}
 8009326:	bf00      	nop
 8009328:	20000860 	.word	0x20000860

0800932c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b086      	sub	sp, #24
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	68db      	ldr	r3, [r3, #12]
 8009338:	68db      	ldr	r3, [r3, #12]
 800933a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800933c:	693b      	ldr	r3, [r7, #16]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d10a      	bne.n	8009358 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009346:	f383 8811 	msr	BASEPRI, r3
 800934a:	f3bf 8f6f 	isb	sy
 800934e:	f3bf 8f4f 	dsb	sy
 8009352:	60fb      	str	r3, [r7, #12]
}
 8009354:	bf00      	nop
 8009356:	e7fe      	b.n	8009356 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009358:	693b      	ldr	r3, [r7, #16]
 800935a:	3318      	adds	r3, #24
 800935c:	4618      	mov	r0, r3
 800935e:	f7fe fb5f 	bl	8007a20 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009362:	4b1e      	ldr	r3, [pc, #120]	; (80093dc <xTaskRemoveFromEventList+0xb0>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d11d      	bne.n	80093a6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800936a:	693b      	ldr	r3, [r7, #16]
 800936c:	3304      	adds	r3, #4
 800936e:	4618      	mov	r0, r3
 8009370:	f7fe fb56 	bl	8007a20 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009378:	4b19      	ldr	r3, [pc, #100]	; (80093e0 <xTaskRemoveFromEventList+0xb4>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	429a      	cmp	r2, r3
 800937e:	d903      	bls.n	8009388 <xTaskRemoveFromEventList+0x5c>
 8009380:	693b      	ldr	r3, [r7, #16]
 8009382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009384:	4a16      	ldr	r2, [pc, #88]	; (80093e0 <xTaskRemoveFromEventList+0xb4>)
 8009386:	6013      	str	r3, [r2, #0]
 8009388:	693b      	ldr	r3, [r7, #16]
 800938a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800938c:	4613      	mov	r3, r2
 800938e:	009b      	lsls	r3, r3, #2
 8009390:	4413      	add	r3, r2
 8009392:	009b      	lsls	r3, r3, #2
 8009394:	4a13      	ldr	r2, [pc, #76]	; (80093e4 <xTaskRemoveFromEventList+0xb8>)
 8009396:	441a      	add	r2, r3
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	3304      	adds	r3, #4
 800939c:	4619      	mov	r1, r3
 800939e:	4610      	mov	r0, r2
 80093a0:	f7fe fae3 	bl	800796a <vListInsertEnd>
 80093a4:	e005      	b.n	80093b2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80093a6:	693b      	ldr	r3, [r7, #16]
 80093a8:	3318      	adds	r3, #24
 80093aa:	4619      	mov	r1, r3
 80093ac:	480e      	ldr	r0, [pc, #56]	; (80093e8 <xTaskRemoveFromEventList+0xbc>)
 80093ae:	f7fe fadc 	bl	800796a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093b6:	4b0d      	ldr	r3, [pc, #52]	; (80093ec <xTaskRemoveFromEventList+0xc0>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093bc:	429a      	cmp	r2, r3
 80093be:	d905      	bls.n	80093cc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80093c0:	2301      	movs	r3, #1
 80093c2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80093c4:	4b0a      	ldr	r3, [pc, #40]	; (80093f0 <xTaskRemoveFromEventList+0xc4>)
 80093c6:	2201      	movs	r2, #1
 80093c8:	601a      	str	r2, [r3, #0]
 80093ca:	e001      	b.n	80093d0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80093cc:	2300      	movs	r3, #0
 80093ce:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80093d0:	697b      	ldr	r3, [r7, #20]
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	3718      	adds	r7, #24
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}
 80093da:	bf00      	nop
 80093dc:	20000d5c 	.word	0x20000d5c
 80093e0:	20000d3c 	.word	0x20000d3c
 80093e4:	20000864 	.word	0x20000864
 80093e8:	20000cf4 	.word	0x20000cf4
 80093ec:	20000860 	.word	0x20000860
 80093f0:	20000d48 	.word	0x20000d48

080093f4 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b086      	sub	sp, #24
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
 80093fc:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80093fe:	4b29      	ldr	r3, [pc, #164]	; (80094a4 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d10a      	bne.n	800941c <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8009406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800940a:	f383 8811 	msr	BASEPRI, r3
 800940e:	f3bf 8f6f 	isb	sy
 8009412:	f3bf 8f4f 	dsb	sy
 8009416:	613b      	str	r3, [r7, #16]
}
 8009418:	bf00      	nop
 800941a:	e7fe      	b.n	800941a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	68db      	ldr	r3, [r3, #12]
 800942a:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800942c:	697b      	ldr	r3, [r7, #20]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d10a      	bne.n	8009448 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8009432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009436:	f383 8811 	msr	BASEPRI, r3
 800943a:	f3bf 8f6f 	isb	sy
 800943e:	f3bf 8f4f 	dsb	sy
 8009442:	60fb      	str	r3, [r7, #12]
}
 8009444:	bf00      	nop
 8009446:	e7fe      	b.n	8009446 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	f7fe fae9 	bl	8007a20 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	3304      	adds	r3, #4
 8009452:	4618      	mov	r0, r3
 8009454:	f7fe fae4 	bl	8007a20 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800945c:	4b12      	ldr	r3, [pc, #72]	; (80094a8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	429a      	cmp	r2, r3
 8009462:	d903      	bls.n	800946c <vTaskRemoveFromUnorderedEventList+0x78>
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009468:	4a0f      	ldr	r2, [pc, #60]	; (80094a8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800946a:	6013      	str	r3, [r2, #0]
 800946c:	697b      	ldr	r3, [r7, #20]
 800946e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009470:	4613      	mov	r3, r2
 8009472:	009b      	lsls	r3, r3, #2
 8009474:	4413      	add	r3, r2
 8009476:	009b      	lsls	r3, r3, #2
 8009478:	4a0c      	ldr	r2, [pc, #48]	; (80094ac <vTaskRemoveFromUnorderedEventList+0xb8>)
 800947a:	441a      	add	r2, r3
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	3304      	adds	r3, #4
 8009480:	4619      	mov	r1, r3
 8009482:	4610      	mov	r0, r2
 8009484:	f7fe fa71 	bl	800796a <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009488:	697b      	ldr	r3, [r7, #20]
 800948a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800948c:	4b08      	ldr	r3, [pc, #32]	; (80094b0 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009492:	429a      	cmp	r2, r3
 8009494:	d902      	bls.n	800949c <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8009496:	4b07      	ldr	r3, [pc, #28]	; (80094b4 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8009498:	2201      	movs	r2, #1
 800949a:	601a      	str	r2, [r3, #0]
	}
}
 800949c:	bf00      	nop
 800949e:	3718      	adds	r7, #24
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}
 80094a4:	20000d5c 	.word	0x20000d5c
 80094a8:	20000d3c 	.word	0x20000d3c
 80094ac:	20000864 	.word	0x20000864
 80094b0:	20000860 	.word	0x20000860
 80094b4:	20000d48 	.word	0x20000d48

080094b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80094b8:	b480      	push	{r7}
 80094ba:	b083      	sub	sp, #12
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80094c0:	4b06      	ldr	r3, [pc, #24]	; (80094dc <vTaskInternalSetTimeOutState+0x24>)
 80094c2:	681a      	ldr	r2, [r3, #0]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80094c8:	4b05      	ldr	r3, [pc, #20]	; (80094e0 <vTaskInternalSetTimeOutState+0x28>)
 80094ca:	681a      	ldr	r2, [r3, #0]
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	605a      	str	r2, [r3, #4]
}
 80094d0:	bf00      	nop
 80094d2:	370c      	adds	r7, #12
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bc80      	pop	{r7}
 80094d8:	4770      	bx	lr
 80094da:	bf00      	nop
 80094dc:	20000d4c 	.word	0x20000d4c
 80094e0:	20000d38 	.word	0x20000d38

080094e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b088      	sub	sp, #32
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
 80094ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d10a      	bne.n	800950a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80094f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094f8:	f383 8811 	msr	BASEPRI, r3
 80094fc:	f3bf 8f6f 	isb	sy
 8009500:	f3bf 8f4f 	dsb	sy
 8009504:	613b      	str	r3, [r7, #16]
}
 8009506:	bf00      	nop
 8009508:	e7fe      	b.n	8009508 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d10a      	bne.n	8009526 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009514:	f383 8811 	msr	BASEPRI, r3
 8009518:	f3bf 8f6f 	isb	sy
 800951c:	f3bf 8f4f 	dsb	sy
 8009520:	60fb      	str	r3, [r7, #12]
}
 8009522:	bf00      	nop
 8009524:	e7fe      	b.n	8009524 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009526:	f000 ff59 	bl	800a3dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800952a:	4b1d      	ldr	r3, [pc, #116]	; (80095a0 <xTaskCheckForTimeOut+0xbc>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	685b      	ldr	r3, [r3, #4]
 8009534:	69ba      	ldr	r2, [r7, #24]
 8009536:	1ad3      	subs	r3, r2, r3
 8009538:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009542:	d102      	bne.n	800954a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009544:	2300      	movs	r3, #0
 8009546:	61fb      	str	r3, [r7, #28]
 8009548:	e023      	b.n	8009592 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681a      	ldr	r2, [r3, #0]
 800954e:	4b15      	ldr	r3, [pc, #84]	; (80095a4 <xTaskCheckForTimeOut+0xc0>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	429a      	cmp	r2, r3
 8009554:	d007      	beq.n	8009566 <xTaskCheckForTimeOut+0x82>
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	685b      	ldr	r3, [r3, #4]
 800955a:	69ba      	ldr	r2, [r7, #24]
 800955c:	429a      	cmp	r2, r3
 800955e:	d302      	bcc.n	8009566 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009560:	2301      	movs	r3, #1
 8009562:	61fb      	str	r3, [r7, #28]
 8009564:	e015      	b.n	8009592 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	697a      	ldr	r2, [r7, #20]
 800956c:	429a      	cmp	r2, r3
 800956e:	d20b      	bcs.n	8009588 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	681a      	ldr	r2, [r3, #0]
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	1ad2      	subs	r2, r2, r3
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f7ff ff9b 	bl	80094b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009582:	2300      	movs	r3, #0
 8009584:	61fb      	str	r3, [r7, #28]
 8009586:	e004      	b.n	8009592 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	2200      	movs	r2, #0
 800958c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800958e:	2301      	movs	r3, #1
 8009590:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009592:	f000 ff53 	bl	800a43c <vPortExitCritical>

	return xReturn;
 8009596:	69fb      	ldr	r3, [r7, #28]
}
 8009598:	4618      	mov	r0, r3
 800959a:	3720      	adds	r7, #32
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}
 80095a0:	20000d38 	.word	0x20000d38
 80095a4:	20000d4c 	.word	0x20000d4c

080095a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80095a8:	b480      	push	{r7}
 80095aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80095ac:	4b03      	ldr	r3, [pc, #12]	; (80095bc <vTaskMissedYield+0x14>)
 80095ae:	2201      	movs	r2, #1
 80095b0:	601a      	str	r2, [r3, #0]
}
 80095b2:	bf00      	nop
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bc80      	pop	{r7}
 80095b8:	4770      	bx	lr
 80095ba:	bf00      	nop
 80095bc:	20000d48 	.word	0x20000d48

080095c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b082      	sub	sp, #8
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80095c8:	f000 f852 	bl	8009670 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80095cc:	4b06      	ldr	r3, [pc, #24]	; (80095e8 <prvIdleTask+0x28>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	2b01      	cmp	r3, #1
 80095d2:	d9f9      	bls.n	80095c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80095d4:	4b05      	ldr	r3, [pc, #20]	; (80095ec <prvIdleTask+0x2c>)
 80095d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095da:	601a      	str	r2, [r3, #0]
 80095dc:	f3bf 8f4f 	dsb	sy
 80095e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80095e4:	e7f0      	b.n	80095c8 <prvIdleTask+0x8>
 80095e6:	bf00      	nop
 80095e8:	20000864 	.word	0x20000864
 80095ec:	e000ed04 	.word	0xe000ed04

080095f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b082      	sub	sp, #8
 80095f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80095f6:	2300      	movs	r3, #0
 80095f8:	607b      	str	r3, [r7, #4]
 80095fa:	e00c      	b.n	8009616 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80095fc:	687a      	ldr	r2, [r7, #4]
 80095fe:	4613      	mov	r3, r2
 8009600:	009b      	lsls	r3, r3, #2
 8009602:	4413      	add	r3, r2
 8009604:	009b      	lsls	r3, r3, #2
 8009606:	4a12      	ldr	r2, [pc, #72]	; (8009650 <prvInitialiseTaskLists+0x60>)
 8009608:	4413      	add	r3, r2
 800960a:	4618      	mov	r0, r3
 800960c:	f7fe f982 	bl	8007914 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	3301      	adds	r3, #1
 8009614:	607b      	str	r3, [r7, #4]
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2b37      	cmp	r3, #55	; 0x37
 800961a:	d9ef      	bls.n	80095fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800961c:	480d      	ldr	r0, [pc, #52]	; (8009654 <prvInitialiseTaskLists+0x64>)
 800961e:	f7fe f979 	bl	8007914 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009622:	480d      	ldr	r0, [pc, #52]	; (8009658 <prvInitialiseTaskLists+0x68>)
 8009624:	f7fe f976 	bl	8007914 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009628:	480c      	ldr	r0, [pc, #48]	; (800965c <prvInitialiseTaskLists+0x6c>)
 800962a:	f7fe f973 	bl	8007914 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800962e:	480c      	ldr	r0, [pc, #48]	; (8009660 <prvInitialiseTaskLists+0x70>)
 8009630:	f7fe f970 	bl	8007914 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009634:	480b      	ldr	r0, [pc, #44]	; (8009664 <prvInitialiseTaskLists+0x74>)
 8009636:	f7fe f96d 	bl	8007914 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800963a:	4b0b      	ldr	r3, [pc, #44]	; (8009668 <prvInitialiseTaskLists+0x78>)
 800963c:	4a05      	ldr	r2, [pc, #20]	; (8009654 <prvInitialiseTaskLists+0x64>)
 800963e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009640:	4b0a      	ldr	r3, [pc, #40]	; (800966c <prvInitialiseTaskLists+0x7c>)
 8009642:	4a05      	ldr	r2, [pc, #20]	; (8009658 <prvInitialiseTaskLists+0x68>)
 8009644:	601a      	str	r2, [r3, #0]
}
 8009646:	bf00      	nop
 8009648:	3708      	adds	r7, #8
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}
 800964e:	bf00      	nop
 8009650:	20000864 	.word	0x20000864
 8009654:	20000cc4 	.word	0x20000cc4
 8009658:	20000cd8 	.word	0x20000cd8
 800965c:	20000cf4 	.word	0x20000cf4
 8009660:	20000d08 	.word	0x20000d08
 8009664:	20000d20 	.word	0x20000d20
 8009668:	20000cec 	.word	0x20000cec
 800966c:	20000cf0 	.word	0x20000cf0

08009670 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b082      	sub	sp, #8
 8009674:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009676:	e019      	b.n	80096ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009678:	f000 feb0 	bl	800a3dc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800967c:	4b10      	ldr	r3, [pc, #64]	; (80096c0 <prvCheckTasksWaitingTermination+0x50>)
 800967e:	68db      	ldr	r3, [r3, #12]
 8009680:	68db      	ldr	r3, [r3, #12]
 8009682:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	3304      	adds	r3, #4
 8009688:	4618      	mov	r0, r3
 800968a:	f7fe f9c9 	bl	8007a20 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800968e:	4b0d      	ldr	r3, [pc, #52]	; (80096c4 <prvCheckTasksWaitingTermination+0x54>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	3b01      	subs	r3, #1
 8009694:	4a0b      	ldr	r2, [pc, #44]	; (80096c4 <prvCheckTasksWaitingTermination+0x54>)
 8009696:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009698:	4b0b      	ldr	r3, [pc, #44]	; (80096c8 <prvCheckTasksWaitingTermination+0x58>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	3b01      	subs	r3, #1
 800969e:	4a0a      	ldr	r2, [pc, #40]	; (80096c8 <prvCheckTasksWaitingTermination+0x58>)
 80096a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80096a2:	f000 fecb 	bl	800a43c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f000 f810 	bl	80096cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80096ac:	4b06      	ldr	r3, [pc, #24]	; (80096c8 <prvCheckTasksWaitingTermination+0x58>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d1e1      	bne.n	8009678 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80096b4:	bf00      	nop
 80096b6:	bf00      	nop
 80096b8:	3708      	adds	r7, #8
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}
 80096be:	bf00      	nop
 80096c0:	20000d08 	.word	0x20000d08
 80096c4:	20000d34 	.word	0x20000d34
 80096c8:	20000d1c 	.word	0x20000d1c

080096cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b084      	sub	sp, #16
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	3354      	adds	r3, #84	; 0x54
 80096d8:	4618      	mov	r0, r3
 80096da:	f002 f83b 	bl	800b754 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d108      	bne.n	80096fa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096ec:	4618      	mov	r0, r3
 80096ee:	f001 f839 	bl	800a764 <vPortFree>
				vPortFree( pxTCB );
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f001 f836 	bl	800a764 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80096f8:	e018      	b.n	800972c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009700:	2b01      	cmp	r3, #1
 8009702:	d103      	bne.n	800970c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f001 f82d 	bl	800a764 <vPortFree>
	}
 800970a:	e00f      	b.n	800972c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009712:	2b02      	cmp	r3, #2
 8009714:	d00a      	beq.n	800972c <prvDeleteTCB+0x60>
	__asm volatile
 8009716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800971a:	f383 8811 	msr	BASEPRI, r3
 800971e:	f3bf 8f6f 	isb	sy
 8009722:	f3bf 8f4f 	dsb	sy
 8009726:	60fb      	str	r3, [r7, #12]
}
 8009728:	bf00      	nop
 800972a:	e7fe      	b.n	800972a <prvDeleteTCB+0x5e>
	}
 800972c:	bf00      	nop
 800972e:	3710      	adds	r7, #16
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}

08009734 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009734:	b480      	push	{r7}
 8009736:	b083      	sub	sp, #12
 8009738:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800973a:	4b0e      	ldr	r3, [pc, #56]	; (8009774 <prvResetNextTaskUnblockTime+0x40>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d101      	bne.n	8009748 <prvResetNextTaskUnblockTime+0x14>
 8009744:	2301      	movs	r3, #1
 8009746:	e000      	b.n	800974a <prvResetNextTaskUnblockTime+0x16>
 8009748:	2300      	movs	r3, #0
 800974a:	2b00      	cmp	r3, #0
 800974c:	d004      	beq.n	8009758 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800974e:	4b0a      	ldr	r3, [pc, #40]	; (8009778 <prvResetNextTaskUnblockTime+0x44>)
 8009750:	f04f 32ff 	mov.w	r2, #4294967295
 8009754:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009756:	e008      	b.n	800976a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009758:	4b06      	ldr	r3, [pc, #24]	; (8009774 <prvResetNextTaskUnblockTime+0x40>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	68db      	ldr	r3, [r3, #12]
 800975e:	68db      	ldr	r3, [r3, #12]
 8009760:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	685b      	ldr	r3, [r3, #4]
 8009766:	4a04      	ldr	r2, [pc, #16]	; (8009778 <prvResetNextTaskUnblockTime+0x44>)
 8009768:	6013      	str	r3, [r2, #0]
}
 800976a:	bf00      	nop
 800976c:	370c      	adds	r7, #12
 800976e:	46bd      	mov	sp, r7
 8009770:	bc80      	pop	{r7}
 8009772:	4770      	bx	lr
 8009774:	20000cec 	.word	0x20000cec
 8009778:	20000d54 	.word	0x20000d54

0800977c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800977c:	b480      	push	{r7}
 800977e:	b083      	sub	sp, #12
 8009780:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8009782:	4b04      	ldr	r3, [pc, #16]	; (8009794 <xTaskGetCurrentTaskHandle+0x18>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	607b      	str	r3, [r7, #4]

		return xReturn;
 8009788:	687b      	ldr	r3, [r7, #4]
	}
 800978a:	4618      	mov	r0, r3
 800978c:	370c      	adds	r7, #12
 800978e:	46bd      	mov	sp, r7
 8009790:	bc80      	pop	{r7}
 8009792:	4770      	bx	lr
 8009794:	20000860 	.word	0x20000860

08009798 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009798:	b480      	push	{r7}
 800979a:	b083      	sub	sp, #12
 800979c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800979e:	4b0b      	ldr	r3, [pc, #44]	; (80097cc <xTaskGetSchedulerState+0x34>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d102      	bne.n	80097ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80097a6:	2301      	movs	r3, #1
 80097a8:	607b      	str	r3, [r7, #4]
 80097aa:	e008      	b.n	80097be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80097ac:	4b08      	ldr	r3, [pc, #32]	; (80097d0 <xTaskGetSchedulerState+0x38>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d102      	bne.n	80097ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80097b4:	2302      	movs	r3, #2
 80097b6:	607b      	str	r3, [r7, #4]
 80097b8:	e001      	b.n	80097be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80097ba:	2300      	movs	r3, #0
 80097bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80097be:	687b      	ldr	r3, [r7, #4]
	}
 80097c0:	4618      	mov	r0, r3
 80097c2:	370c      	adds	r7, #12
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bc80      	pop	{r7}
 80097c8:	4770      	bx	lr
 80097ca:	bf00      	nop
 80097cc:	20000d40 	.word	0x20000d40
 80097d0:	20000d5c 	.word	0x20000d5c

080097d4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b084      	sub	sp, #16
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80097e0:	2300      	movs	r3, #0
 80097e2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d056      	beq.n	8009898 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097ee:	4b2d      	ldr	r3, [pc, #180]	; (80098a4 <xTaskPriorityInherit+0xd0>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097f4:	429a      	cmp	r2, r3
 80097f6:	d246      	bcs.n	8009886 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	699b      	ldr	r3, [r3, #24]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	db06      	blt.n	800980e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009800:	4b28      	ldr	r3, [pc, #160]	; (80098a4 <xTaskPriorityInherit+0xd0>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009806:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	6959      	ldr	r1, [r3, #20]
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009816:	4613      	mov	r3, r2
 8009818:	009b      	lsls	r3, r3, #2
 800981a:	4413      	add	r3, r2
 800981c:	009b      	lsls	r3, r3, #2
 800981e:	4a22      	ldr	r2, [pc, #136]	; (80098a8 <xTaskPriorityInherit+0xd4>)
 8009820:	4413      	add	r3, r2
 8009822:	4299      	cmp	r1, r3
 8009824:	d101      	bne.n	800982a <xTaskPriorityInherit+0x56>
 8009826:	2301      	movs	r3, #1
 8009828:	e000      	b.n	800982c <xTaskPriorityInherit+0x58>
 800982a:	2300      	movs	r3, #0
 800982c:	2b00      	cmp	r3, #0
 800982e:	d022      	beq.n	8009876 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	3304      	adds	r3, #4
 8009834:	4618      	mov	r0, r3
 8009836:	f7fe f8f3 	bl	8007a20 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800983a:	4b1a      	ldr	r3, [pc, #104]	; (80098a4 <xTaskPriorityInherit+0xd0>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009848:	4b18      	ldr	r3, [pc, #96]	; (80098ac <xTaskPriorityInherit+0xd8>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	429a      	cmp	r2, r3
 800984e:	d903      	bls.n	8009858 <xTaskPriorityInherit+0x84>
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009854:	4a15      	ldr	r2, [pc, #84]	; (80098ac <xTaskPriorityInherit+0xd8>)
 8009856:	6013      	str	r3, [r2, #0]
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800985c:	4613      	mov	r3, r2
 800985e:	009b      	lsls	r3, r3, #2
 8009860:	4413      	add	r3, r2
 8009862:	009b      	lsls	r3, r3, #2
 8009864:	4a10      	ldr	r2, [pc, #64]	; (80098a8 <xTaskPriorityInherit+0xd4>)
 8009866:	441a      	add	r2, r3
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	3304      	adds	r3, #4
 800986c:	4619      	mov	r1, r3
 800986e:	4610      	mov	r0, r2
 8009870:	f7fe f87b 	bl	800796a <vListInsertEnd>
 8009874:	e004      	b.n	8009880 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009876:	4b0b      	ldr	r3, [pc, #44]	; (80098a4 <xTaskPriorityInherit+0xd0>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009880:	2301      	movs	r3, #1
 8009882:	60fb      	str	r3, [r7, #12]
 8009884:	e008      	b.n	8009898 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009886:	68bb      	ldr	r3, [r7, #8]
 8009888:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800988a:	4b06      	ldr	r3, [pc, #24]	; (80098a4 <xTaskPriorityInherit+0xd0>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009890:	429a      	cmp	r2, r3
 8009892:	d201      	bcs.n	8009898 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009894:	2301      	movs	r3, #1
 8009896:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009898:	68fb      	ldr	r3, [r7, #12]
	}
 800989a:	4618      	mov	r0, r3
 800989c:	3710      	adds	r7, #16
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}
 80098a2:	bf00      	nop
 80098a4:	20000860 	.word	0x20000860
 80098a8:	20000864 	.word	0x20000864
 80098ac:	20000d3c 	.word	0x20000d3c

080098b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b086      	sub	sp, #24
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80098bc:	2300      	movs	r3, #0
 80098be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d056      	beq.n	8009974 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80098c6:	4b2e      	ldr	r3, [pc, #184]	; (8009980 <xTaskPriorityDisinherit+0xd0>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	693a      	ldr	r2, [r7, #16]
 80098cc:	429a      	cmp	r2, r3
 80098ce:	d00a      	beq.n	80098e6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80098d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098d4:	f383 8811 	msr	BASEPRI, r3
 80098d8:	f3bf 8f6f 	isb	sy
 80098dc:	f3bf 8f4f 	dsb	sy
 80098e0:	60fb      	str	r3, [r7, #12]
}
 80098e2:	bf00      	nop
 80098e4:	e7fe      	b.n	80098e4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80098e6:	693b      	ldr	r3, [r7, #16]
 80098e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d10a      	bne.n	8009904 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80098ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f2:	f383 8811 	msr	BASEPRI, r3
 80098f6:	f3bf 8f6f 	isb	sy
 80098fa:	f3bf 8f4f 	dsb	sy
 80098fe:	60bb      	str	r3, [r7, #8]
}
 8009900:	bf00      	nop
 8009902:	e7fe      	b.n	8009902 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009904:	693b      	ldr	r3, [r7, #16]
 8009906:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009908:	1e5a      	subs	r2, r3, #1
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009912:	693b      	ldr	r3, [r7, #16]
 8009914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009916:	429a      	cmp	r2, r3
 8009918:	d02c      	beq.n	8009974 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800991a:	693b      	ldr	r3, [r7, #16]
 800991c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800991e:	2b00      	cmp	r3, #0
 8009920:	d128      	bne.n	8009974 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009922:	693b      	ldr	r3, [r7, #16]
 8009924:	3304      	adds	r3, #4
 8009926:	4618      	mov	r0, r3
 8009928:	f7fe f87a 	bl	8007a20 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800992c:	693b      	ldr	r3, [r7, #16]
 800992e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009930:	693b      	ldr	r3, [r7, #16]
 8009932:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009934:	693b      	ldr	r3, [r7, #16]
 8009936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009938:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800993c:	693b      	ldr	r3, [r7, #16]
 800993e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009944:	4b0f      	ldr	r3, [pc, #60]	; (8009984 <xTaskPriorityDisinherit+0xd4>)
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	429a      	cmp	r2, r3
 800994a:	d903      	bls.n	8009954 <xTaskPriorityDisinherit+0xa4>
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009950:	4a0c      	ldr	r2, [pc, #48]	; (8009984 <xTaskPriorityDisinherit+0xd4>)
 8009952:	6013      	str	r3, [r2, #0]
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009958:	4613      	mov	r3, r2
 800995a:	009b      	lsls	r3, r3, #2
 800995c:	4413      	add	r3, r2
 800995e:	009b      	lsls	r3, r3, #2
 8009960:	4a09      	ldr	r2, [pc, #36]	; (8009988 <xTaskPriorityDisinherit+0xd8>)
 8009962:	441a      	add	r2, r3
 8009964:	693b      	ldr	r3, [r7, #16]
 8009966:	3304      	adds	r3, #4
 8009968:	4619      	mov	r1, r3
 800996a:	4610      	mov	r0, r2
 800996c:	f7fd fffd 	bl	800796a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009970:	2301      	movs	r3, #1
 8009972:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009974:	697b      	ldr	r3, [r7, #20]
	}
 8009976:	4618      	mov	r0, r3
 8009978:	3718      	adds	r7, #24
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}
 800997e:	bf00      	nop
 8009980:	20000860 	.word	0x20000860
 8009984:	20000d3c 	.word	0x20000d3c
 8009988:	20000864 	.word	0x20000864

0800998c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800998c:	b580      	push	{r7, lr}
 800998e:	b088      	sub	sp, #32
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
 8009994:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800999a:	2301      	movs	r3, #1
 800999c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d06f      	beq.n	8009a84 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80099a4:	69bb      	ldr	r3, [r7, #24]
 80099a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d10a      	bne.n	80099c2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80099ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099b0:	f383 8811 	msr	BASEPRI, r3
 80099b4:	f3bf 8f6f 	isb	sy
 80099b8:	f3bf 8f4f 	dsb	sy
 80099bc:	60fb      	str	r3, [r7, #12]
}
 80099be:	bf00      	nop
 80099c0:	e7fe      	b.n	80099c0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80099c2:	69bb      	ldr	r3, [r7, #24]
 80099c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099c6:	683a      	ldr	r2, [r7, #0]
 80099c8:	429a      	cmp	r2, r3
 80099ca:	d902      	bls.n	80099d2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	61fb      	str	r3, [r7, #28]
 80099d0:	e002      	b.n	80099d8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80099d2:	69bb      	ldr	r3, [r7, #24]
 80099d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099d6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80099d8:	69bb      	ldr	r3, [r7, #24]
 80099da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099dc:	69fa      	ldr	r2, [r7, #28]
 80099de:	429a      	cmp	r2, r3
 80099e0:	d050      	beq.n	8009a84 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80099e2:	69bb      	ldr	r3, [r7, #24]
 80099e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099e6:	697a      	ldr	r2, [r7, #20]
 80099e8:	429a      	cmp	r2, r3
 80099ea:	d14b      	bne.n	8009a84 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80099ec:	4b27      	ldr	r3, [pc, #156]	; (8009a8c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	69ba      	ldr	r2, [r7, #24]
 80099f2:	429a      	cmp	r2, r3
 80099f4:	d10a      	bne.n	8009a0c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80099f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099fa:	f383 8811 	msr	BASEPRI, r3
 80099fe:	f3bf 8f6f 	isb	sy
 8009a02:	f3bf 8f4f 	dsb	sy
 8009a06:	60bb      	str	r3, [r7, #8]
}
 8009a08:	bf00      	nop
 8009a0a:	e7fe      	b.n	8009a0a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009a0c:	69bb      	ldr	r3, [r7, #24]
 8009a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a10:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009a12:	69bb      	ldr	r3, [r7, #24]
 8009a14:	69fa      	ldr	r2, [r7, #28]
 8009a16:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009a18:	69bb      	ldr	r3, [r7, #24]
 8009a1a:	699b      	ldr	r3, [r3, #24]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	db04      	blt.n	8009a2a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a20:	69fb      	ldr	r3, [r7, #28]
 8009a22:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009a26:	69bb      	ldr	r3, [r7, #24]
 8009a28:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009a2a:	69bb      	ldr	r3, [r7, #24]
 8009a2c:	6959      	ldr	r1, [r3, #20]
 8009a2e:	693a      	ldr	r2, [r7, #16]
 8009a30:	4613      	mov	r3, r2
 8009a32:	009b      	lsls	r3, r3, #2
 8009a34:	4413      	add	r3, r2
 8009a36:	009b      	lsls	r3, r3, #2
 8009a38:	4a15      	ldr	r2, [pc, #84]	; (8009a90 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009a3a:	4413      	add	r3, r2
 8009a3c:	4299      	cmp	r1, r3
 8009a3e:	d101      	bne.n	8009a44 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8009a40:	2301      	movs	r3, #1
 8009a42:	e000      	b.n	8009a46 <vTaskPriorityDisinheritAfterTimeout+0xba>
 8009a44:	2300      	movs	r3, #0
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d01c      	beq.n	8009a84 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a4a:	69bb      	ldr	r3, [r7, #24]
 8009a4c:	3304      	adds	r3, #4
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f7fd ffe6 	bl	8007a20 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009a54:	69bb      	ldr	r3, [r7, #24]
 8009a56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a58:	4b0e      	ldr	r3, [pc, #56]	; (8009a94 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	429a      	cmp	r2, r3
 8009a5e:	d903      	bls.n	8009a68 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 8009a60:	69bb      	ldr	r3, [r7, #24]
 8009a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a64:	4a0b      	ldr	r2, [pc, #44]	; (8009a94 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8009a66:	6013      	str	r3, [r2, #0]
 8009a68:	69bb      	ldr	r3, [r7, #24]
 8009a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a6c:	4613      	mov	r3, r2
 8009a6e:	009b      	lsls	r3, r3, #2
 8009a70:	4413      	add	r3, r2
 8009a72:	009b      	lsls	r3, r3, #2
 8009a74:	4a06      	ldr	r2, [pc, #24]	; (8009a90 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009a76:	441a      	add	r2, r3
 8009a78:	69bb      	ldr	r3, [r7, #24]
 8009a7a:	3304      	adds	r3, #4
 8009a7c:	4619      	mov	r1, r3
 8009a7e:	4610      	mov	r0, r2
 8009a80:	f7fd ff73 	bl	800796a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009a84:	bf00      	nop
 8009a86:	3720      	adds	r7, #32
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd80      	pop	{r7, pc}
 8009a8c:	20000860 	.word	0x20000860
 8009a90:	20000864 	.word	0x20000864
 8009a94:	20000d3c 	.word	0x20000d3c

08009a98 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b083      	sub	sp, #12
 8009a9c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8009a9e:	4b09      	ldr	r3, [pc, #36]	; (8009ac4 <uxTaskResetEventItemValue+0x2c>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	699b      	ldr	r3, [r3, #24]
 8009aa4:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009aa6:	4b07      	ldr	r3, [pc, #28]	; (8009ac4 <uxTaskResetEventItemValue+0x2c>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aac:	4b05      	ldr	r3, [pc, #20]	; (8009ac4 <uxTaskResetEventItemValue+0x2c>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8009ab4:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8009ab6:	687b      	ldr	r3, [r7, #4]
}
 8009ab8:	4618      	mov	r0, r3
 8009aba:	370c      	adds	r7, #12
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bc80      	pop	{r7}
 8009ac0:	4770      	bx	lr
 8009ac2:	bf00      	nop
 8009ac4:	20000860 	.word	0x20000860

08009ac8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8009ac8:	b480      	push	{r7}
 8009aca:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009acc:	4b07      	ldr	r3, [pc, #28]	; (8009aec <pvTaskIncrementMutexHeldCount+0x24>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d004      	beq.n	8009ade <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009ad4:	4b05      	ldr	r3, [pc, #20]	; (8009aec <pvTaskIncrementMutexHeldCount+0x24>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009ada:	3201      	adds	r2, #1
 8009adc:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8009ade:	4b03      	ldr	r3, [pc, #12]	; (8009aec <pvTaskIncrementMutexHeldCount+0x24>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
	}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bc80      	pop	{r7}
 8009ae8:	4770      	bx	lr
 8009aea:	bf00      	nop
 8009aec:	20000860 	.word	0x20000860

08009af0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b084      	sub	sp, #16
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
 8009af8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009afa:	4b21      	ldr	r3, [pc, #132]	; (8009b80 <prvAddCurrentTaskToDelayedList+0x90>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b00:	4b20      	ldr	r3, [pc, #128]	; (8009b84 <prvAddCurrentTaskToDelayedList+0x94>)
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	3304      	adds	r3, #4
 8009b06:	4618      	mov	r0, r3
 8009b08:	f7fd ff8a 	bl	8007a20 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b12:	d10a      	bne.n	8009b2a <prvAddCurrentTaskToDelayedList+0x3a>
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d007      	beq.n	8009b2a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b1a:	4b1a      	ldr	r3, [pc, #104]	; (8009b84 <prvAddCurrentTaskToDelayedList+0x94>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	3304      	adds	r3, #4
 8009b20:	4619      	mov	r1, r3
 8009b22:	4819      	ldr	r0, [pc, #100]	; (8009b88 <prvAddCurrentTaskToDelayedList+0x98>)
 8009b24:	f7fd ff21 	bl	800796a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009b28:	e026      	b.n	8009b78 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009b2a:	68fa      	ldr	r2, [r7, #12]
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	4413      	add	r3, r2
 8009b30:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009b32:	4b14      	ldr	r3, [pc, #80]	; (8009b84 <prvAddCurrentTaskToDelayedList+0x94>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	68ba      	ldr	r2, [r7, #8]
 8009b38:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009b3a:	68ba      	ldr	r2, [r7, #8]
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	429a      	cmp	r2, r3
 8009b40:	d209      	bcs.n	8009b56 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b42:	4b12      	ldr	r3, [pc, #72]	; (8009b8c <prvAddCurrentTaskToDelayedList+0x9c>)
 8009b44:	681a      	ldr	r2, [r3, #0]
 8009b46:	4b0f      	ldr	r3, [pc, #60]	; (8009b84 <prvAddCurrentTaskToDelayedList+0x94>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	3304      	adds	r3, #4
 8009b4c:	4619      	mov	r1, r3
 8009b4e:	4610      	mov	r0, r2
 8009b50:	f7fd ff2e 	bl	80079b0 <vListInsert>
}
 8009b54:	e010      	b.n	8009b78 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b56:	4b0e      	ldr	r3, [pc, #56]	; (8009b90 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009b58:	681a      	ldr	r2, [r3, #0]
 8009b5a:	4b0a      	ldr	r3, [pc, #40]	; (8009b84 <prvAddCurrentTaskToDelayedList+0x94>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	3304      	adds	r3, #4
 8009b60:	4619      	mov	r1, r3
 8009b62:	4610      	mov	r0, r2
 8009b64:	f7fd ff24 	bl	80079b0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009b68:	4b0a      	ldr	r3, [pc, #40]	; (8009b94 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	68ba      	ldr	r2, [r7, #8]
 8009b6e:	429a      	cmp	r2, r3
 8009b70:	d202      	bcs.n	8009b78 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009b72:	4a08      	ldr	r2, [pc, #32]	; (8009b94 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	6013      	str	r3, [r2, #0]
}
 8009b78:	bf00      	nop
 8009b7a:	3710      	adds	r7, #16
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bd80      	pop	{r7, pc}
 8009b80:	20000d38 	.word	0x20000d38
 8009b84:	20000860 	.word	0x20000860
 8009b88:	20000d20 	.word	0x20000d20
 8009b8c:	20000cf0 	.word	0x20000cf0
 8009b90:	20000cec 	.word	0x20000cec
 8009b94:	20000d54 	.word	0x20000d54

08009b98 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b08a      	sub	sp, #40	; 0x28
 8009b9c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009ba2:	f000 facb 	bl	800a13c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009ba6:	4b1c      	ldr	r3, [pc, #112]	; (8009c18 <xTimerCreateTimerTask+0x80>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d021      	beq.n	8009bf2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009bae:	2300      	movs	r3, #0
 8009bb0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009bb6:	1d3a      	adds	r2, r7, #4
 8009bb8:	f107 0108 	add.w	r1, r7, #8
 8009bbc:	f107 030c 	add.w	r3, r7, #12
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	f7fd fc25 	bl	8007410 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009bc6:	6879      	ldr	r1, [r7, #4]
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	68fa      	ldr	r2, [r7, #12]
 8009bcc:	9202      	str	r2, [sp, #8]
 8009bce:	9301      	str	r3, [sp, #4]
 8009bd0:	2302      	movs	r3, #2
 8009bd2:	9300      	str	r3, [sp, #0]
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	460a      	mov	r2, r1
 8009bd8:	4910      	ldr	r1, [pc, #64]	; (8009c1c <xTimerCreateTimerTask+0x84>)
 8009bda:	4811      	ldr	r0, [pc, #68]	; (8009c20 <xTimerCreateTimerTask+0x88>)
 8009bdc:	f7fe fe48 	bl	8008870 <xTaskCreateStatic>
 8009be0:	4603      	mov	r3, r0
 8009be2:	4a10      	ldr	r2, [pc, #64]	; (8009c24 <xTimerCreateTimerTask+0x8c>)
 8009be4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009be6:	4b0f      	ldr	r3, [pc, #60]	; (8009c24 <xTimerCreateTimerTask+0x8c>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d001      	beq.n	8009bf2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009bee:	2301      	movs	r3, #1
 8009bf0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009bf2:	697b      	ldr	r3, [r7, #20]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d10a      	bne.n	8009c0e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bfc:	f383 8811 	msr	BASEPRI, r3
 8009c00:	f3bf 8f6f 	isb	sy
 8009c04:	f3bf 8f4f 	dsb	sy
 8009c08:	613b      	str	r3, [r7, #16]
}
 8009c0a:	bf00      	nop
 8009c0c:	e7fe      	b.n	8009c0c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009c0e:	697b      	ldr	r3, [r7, #20]
}
 8009c10:	4618      	mov	r0, r3
 8009c12:	3718      	adds	r7, #24
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd80      	pop	{r7, pc}
 8009c18:	20000d90 	.word	0x20000d90
 8009c1c:	0800c118 	.word	0x0800c118
 8009c20:	08009d45 	.word	0x08009d45
 8009c24:	20000d94 	.word	0x20000d94

08009c28 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b08a      	sub	sp, #40	; 0x28
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	60f8      	str	r0, [r7, #12]
 8009c30:	60b9      	str	r1, [r7, #8]
 8009c32:	607a      	str	r2, [r7, #4]
 8009c34:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009c36:	2300      	movs	r3, #0
 8009c38:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d10a      	bne.n	8009c56 <xTimerGenericCommand+0x2e>
	__asm volatile
 8009c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c44:	f383 8811 	msr	BASEPRI, r3
 8009c48:	f3bf 8f6f 	isb	sy
 8009c4c:	f3bf 8f4f 	dsb	sy
 8009c50:	623b      	str	r3, [r7, #32]
}
 8009c52:	bf00      	nop
 8009c54:	e7fe      	b.n	8009c54 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009c56:	4b1a      	ldr	r3, [pc, #104]	; (8009cc0 <xTimerGenericCommand+0x98>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d02a      	beq.n	8009cb4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	2b05      	cmp	r3, #5
 8009c6e:	dc18      	bgt.n	8009ca2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009c70:	f7ff fd92 	bl	8009798 <xTaskGetSchedulerState>
 8009c74:	4603      	mov	r3, r0
 8009c76:	2b02      	cmp	r3, #2
 8009c78:	d109      	bne.n	8009c8e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009c7a:	4b11      	ldr	r3, [pc, #68]	; (8009cc0 <xTimerGenericCommand+0x98>)
 8009c7c:	6818      	ldr	r0, [r3, #0]
 8009c7e:	f107 0110 	add.w	r1, r7, #16
 8009c82:	2300      	movs	r3, #0
 8009c84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c86:	f7fe f8ed 	bl	8007e64 <xQueueGenericSend>
 8009c8a:	6278      	str	r0, [r7, #36]	; 0x24
 8009c8c:	e012      	b.n	8009cb4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009c8e:	4b0c      	ldr	r3, [pc, #48]	; (8009cc0 <xTimerGenericCommand+0x98>)
 8009c90:	6818      	ldr	r0, [r3, #0]
 8009c92:	f107 0110 	add.w	r1, r7, #16
 8009c96:	2300      	movs	r3, #0
 8009c98:	2200      	movs	r2, #0
 8009c9a:	f7fe f8e3 	bl	8007e64 <xQueueGenericSend>
 8009c9e:	6278      	str	r0, [r7, #36]	; 0x24
 8009ca0:	e008      	b.n	8009cb4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009ca2:	4b07      	ldr	r3, [pc, #28]	; (8009cc0 <xTimerGenericCommand+0x98>)
 8009ca4:	6818      	ldr	r0, [r3, #0]
 8009ca6:	f107 0110 	add.w	r1, r7, #16
 8009caa:	2300      	movs	r3, #0
 8009cac:	683a      	ldr	r2, [r7, #0]
 8009cae:	f7fe f9d7 	bl	8008060 <xQueueGenericSendFromISR>
 8009cb2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	3728      	adds	r7, #40	; 0x28
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}
 8009cbe:	bf00      	nop
 8009cc0:	20000d90 	.word	0x20000d90

08009cc4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b088      	sub	sp, #32
 8009cc8:	af02      	add	r7, sp, #8
 8009cca:	6078      	str	r0, [r7, #4]
 8009ccc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009cce:	4b1c      	ldr	r3, [pc, #112]	; (8009d40 <prvProcessExpiredTimer+0x7c>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	68db      	ldr	r3, [r3, #12]
 8009cd4:	68db      	ldr	r3, [r3, #12]
 8009cd6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009cd8:	697b      	ldr	r3, [r7, #20]
 8009cda:	3304      	adds	r3, #4
 8009cdc:	4618      	mov	r0, r3
 8009cde:	f7fd fe9f 	bl	8007a20 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009ce2:	697b      	ldr	r3, [r7, #20]
 8009ce4:	69db      	ldr	r3, [r3, #28]
 8009ce6:	2b01      	cmp	r3, #1
 8009ce8:	d122      	bne.n	8009d30 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009cea:	697b      	ldr	r3, [r7, #20]
 8009cec:	699a      	ldr	r2, [r3, #24]
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	18d1      	adds	r1, r2, r3
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	683a      	ldr	r2, [r7, #0]
 8009cf6:	6978      	ldr	r0, [r7, #20]
 8009cf8:	f000 f8c8 	bl	8009e8c <prvInsertTimerInActiveList>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d016      	beq.n	8009d30 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009d02:	2300      	movs	r3, #0
 8009d04:	9300      	str	r3, [sp, #0]
 8009d06:	2300      	movs	r3, #0
 8009d08:	687a      	ldr	r2, [r7, #4]
 8009d0a:	2100      	movs	r1, #0
 8009d0c:	6978      	ldr	r0, [r7, #20]
 8009d0e:	f7ff ff8b 	bl	8009c28 <xTimerGenericCommand>
 8009d12:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009d14:	693b      	ldr	r3, [r7, #16]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d10a      	bne.n	8009d30 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8009d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d1e:	f383 8811 	msr	BASEPRI, r3
 8009d22:	f3bf 8f6f 	isb	sy
 8009d26:	f3bf 8f4f 	dsb	sy
 8009d2a:	60fb      	str	r3, [r7, #12]
}
 8009d2c:	bf00      	nop
 8009d2e:	e7fe      	b.n	8009d2e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009d30:	697b      	ldr	r3, [r7, #20]
 8009d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d34:	6978      	ldr	r0, [r7, #20]
 8009d36:	4798      	blx	r3
}
 8009d38:	bf00      	nop
 8009d3a:	3718      	adds	r7, #24
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}
 8009d40:	20000d88 	.word	0x20000d88

08009d44 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b084      	sub	sp, #16
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009d4c:	f107 0308 	add.w	r3, r7, #8
 8009d50:	4618      	mov	r0, r3
 8009d52:	f000 f857 	bl	8009e04 <prvGetNextExpireTime>
 8009d56:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	4619      	mov	r1, r3
 8009d5c:	68f8      	ldr	r0, [r7, #12]
 8009d5e:	f000 f803 	bl	8009d68 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009d62:	f000 f8d5 	bl	8009f10 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009d66:	e7f1      	b.n	8009d4c <prvTimerTask+0x8>

08009d68 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b084      	sub	sp, #16
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
 8009d70:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009d72:	f7ff f873 	bl	8008e5c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009d76:	f107 0308 	add.w	r3, r7, #8
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	f000 f866 	bl	8009e4c <prvSampleTimeNow>
 8009d80:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d130      	bne.n	8009dea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d10a      	bne.n	8009da4 <prvProcessTimerOrBlockTask+0x3c>
 8009d8e:	687a      	ldr	r2, [r7, #4]
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	429a      	cmp	r2, r3
 8009d94:	d806      	bhi.n	8009da4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009d96:	f7ff f86f 	bl	8008e78 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009d9a:	68f9      	ldr	r1, [r7, #12]
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f7ff ff91 	bl	8009cc4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009da2:	e024      	b.n	8009dee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d008      	beq.n	8009dbc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009daa:	4b13      	ldr	r3, [pc, #76]	; (8009df8 <prvProcessTimerOrBlockTask+0x90>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	bf0c      	ite	eq
 8009db4:	2301      	moveq	r3, #1
 8009db6:	2300      	movne	r3, #0
 8009db8:	b2db      	uxtb	r3, r3
 8009dba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009dbc:	4b0f      	ldr	r3, [pc, #60]	; (8009dfc <prvProcessTimerOrBlockTask+0x94>)
 8009dbe:	6818      	ldr	r0, [r3, #0]
 8009dc0:	687a      	ldr	r2, [r7, #4]
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	1ad3      	subs	r3, r2, r3
 8009dc6:	683a      	ldr	r2, [r7, #0]
 8009dc8:	4619      	mov	r1, r3
 8009dca:	f7fe fd1d 	bl	8008808 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009dce:	f7ff f853 	bl	8008e78 <xTaskResumeAll>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d10a      	bne.n	8009dee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009dd8:	4b09      	ldr	r3, [pc, #36]	; (8009e00 <prvProcessTimerOrBlockTask+0x98>)
 8009dda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dde:	601a      	str	r2, [r3, #0]
 8009de0:	f3bf 8f4f 	dsb	sy
 8009de4:	f3bf 8f6f 	isb	sy
}
 8009de8:	e001      	b.n	8009dee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009dea:	f7ff f845 	bl	8008e78 <xTaskResumeAll>
}
 8009dee:	bf00      	nop
 8009df0:	3710      	adds	r7, #16
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bd80      	pop	{r7, pc}
 8009df6:	bf00      	nop
 8009df8:	20000d8c 	.word	0x20000d8c
 8009dfc:	20000d90 	.word	0x20000d90
 8009e00:	e000ed04 	.word	0xe000ed04

08009e04 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009e04:	b480      	push	{r7}
 8009e06:	b085      	sub	sp, #20
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009e0c:	4b0e      	ldr	r3, [pc, #56]	; (8009e48 <prvGetNextExpireTime+0x44>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	bf0c      	ite	eq
 8009e16:	2301      	moveq	r3, #1
 8009e18:	2300      	movne	r3, #0
 8009e1a:	b2db      	uxtb	r3, r3
 8009e1c:	461a      	mov	r2, r3
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d105      	bne.n	8009e36 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009e2a:	4b07      	ldr	r3, [pc, #28]	; (8009e48 <prvGetNextExpireTime+0x44>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	68db      	ldr	r3, [r3, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	60fb      	str	r3, [r7, #12]
 8009e34:	e001      	b.n	8009e3a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009e36:	2300      	movs	r3, #0
 8009e38:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	3714      	adds	r7, #20
 8009e40:	46bd      	mov	sp, r7
 8009e42:	bc80      	pop	{r7}
 8009e44:	4770      	bx	lr
 8009e46:	bf00      	nop
 8009e48:	20000d88 	.word	0x20000d88

08009e4c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b084      	sub	sp, #16
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009e54:	f7ff f8ae 	bl	8008fb4 <xTaskGetTickCount>
 8009e58:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009e5a:	4b0b      	ldr	r3, [pc, #44]	; (8009e88 <prvSampleTimeNow+0x3c>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	68fa      	ldr	r2, [r7, #12]
 8009e60:	429a      	cmp	r2, r3
 8009e62:	d205      	bcs.n	8009e70 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009e64:	f000 f908 	bl	800a078 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2201      	movs	r2, #1
 8009e6c:	601a      	str	r2, [r3, #0]
 8009e6e:	e002      	b.n	8009e76 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2200      	movs	r2, #0
 8009e74:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009e76:	4a04      	ldr	r2, [pc, #16]	; (8009e88 <prvSampleTimeNow+0x3c>)
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
}
 8009e7e:	4618      	mov	r0, r3
 8009e80:	3710      	adds	r7, #16
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}
 8009e86:	bf00      	nop
 8009e88:	20000d98 	.word	0x20000d98

08009e8c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b086      	sub	sp, #24
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	60f8      	str	r0, [r7, #12]
 8009e94:	60b9      	str	r1, [r7, #8]
 8009e96:	607a      	str	r2, [r7, #4]
 8009e98:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	68ba      	ldr	r2, [r7, #8]
 8009ea2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	68fa      	ldr	r2, [r7, #12]
 8009ea8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009eaa:	68ba      	ldr	r2, [r7, #8]
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	429a      	cmp	r2, r3
 8009eb0:	d812      	bhi.n	8009ed8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009eb2:	687a      	ldr	r2, [r7, #4]
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	1ad2      	subs	r2, r2, r3
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	699b      	ldr	r3, [r3, #24]
 8009ebc:	429a      	cmp	r2, r3
 8009ebe:	d302      	bcc.n	8009ec6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009ec0:	2301      	movs	r3, #1
 8009ec2:	617b      	str	r3, [r7, #20]
 8009ec4:	e01b      	b.n	8009efe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009ec6:	4b10      	ldr	r3, [pc, #64]	; (8009f08 <prvInsertTimerInActiveList+0x7c>)
 8009ec8:	681a      	ldr	r2, [r3, #0]
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	3304      	adds	r3, #4
 8009ece:	4619      	mov	r1, r3
 8009ed0:	4610      	mov	r0, r2
 8009ed2:	f7fd fd6d 	bl	80079b0 <vListInsert>
 8009ed6:	e012      	b.n	8009efe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009ed8:	687a      	ldr	r2, [r7, #4]
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	429a      	cmp	r2, r3
 8009ede:	d206      	bcs.n	8009eee <prvInsertTimerInActiveList+0x62>
 8009ee0:	68ba      	ldr	r2, [r7, #8]
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	429a      	cmp	r2, r3
 8009ee6:	d302      	bcc.n	8009eee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009ee8:	2301      	movs	r3, #1
 8009eea:	617b      	str	r3, [r7, #20]
 8009eec:	e007      	b.n	8009efe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009eee:	4b07      	ldr	r3, [pc, #28]	; (8009f0c <prvInsertTimerInActiveList+0x80>)
 8009ef0:	681a      	ldr	r2, [r3, #0]
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	3304      	adds	r3, #4
 8009ef6:	4619      	mov	r1, r3
 8009ef8:	4610      	mov	r0, r2
 8009efa:	f7fd fd59 	bl	80079b0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009efe:	697b      	ldr	r3, [r7, #20]
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3718      	adds	r7, #24
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}
 8009f08:	20000d8c 	.word	0x20000d8c
 8009f0c:	20000d88 	.word	0x20000d88

08009f10 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b08e      	sub	sp, #56	; 0x38
 8009f14:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009f16:	e09d      	b.n	800a054 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	da18      	bge.n	8009f50 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009f1e:	1d3b      	adds	r3, r7, #4
 8009f20:	3304      	adds	r3, #4
 8009f22:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d10a      	bne.n	8009f40 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f2e:	f383 8811 	msr	BASEPRI, r3
 8009f32:	f3bf 8f6f 	isb	sy
 8009f36:	f3bf 8f4f 	dsb	sy
 8009f3a:	61fb      	str	r3, [r7, #28]
}
 8009f3c:	bf00      	nop
 8009f3e:	e7fe      	b.n	8009f3e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f46:	6850      	ldr	r0, [r2, #4]
 8009f48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f4a:	6892      	ldr	r2, [r2, #8]
 8009f4c:	4611      	mov	r1, r2
 8009f4e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	db7e      	blt.n	800a054 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f5c:	695b      	ldr	r3, [r3, #20]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d004      	beq.n	8009f6c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f64:	3304      	adds	r3, #4
 8009f66:	4618      	mov	r0, r3
 8009f68:	f7fd fd5a 	bl	8007a20 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009f6c:	463b      	mov	r3, r7
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f7ff ff6c 	bl	8009e4c <prvSampleTimeNow>
 8009f74:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2b09      	cmp	r3, #9
 8009f7a:	d86a      	bhi.n	800a052 <prvProcessReceivedCommands+0x142>
 8009f7c:	a201      	add	r2, pc, #4	; (adr r2, 8009f84 <prvProcessReceivedCommands+0x74>)
 8009f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f82:	bf00      	nop
 8009f84:	08009fad 	.word	0x08009fad
 8009f88:	08009fad 	.word	0x08009fad
 8009f8c:	08009fad 	.word	0x08009fad
 8009f90:	0800a055 	.word	0x0800a055
 8009f94:	0800a009 	.word	0x0800a009
 8009f98:	0800a041 	.word	0x0800a041
 8009f9c:	08009fad 	.word	0x08009fad
 8009fa0:	08009fad 	.word	0x08009fad
 8009fa4:	0800a055 	.word	0x0800a055
 8009fa8:	0800a009 	.word	0x0800a009
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009fac:	68ba      	ldr	r2, [r7, #8]
 8009fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fb0:	699b      	ldr	r3, [r3, #24]
 8009fb2:	18d1      	adds	r1, r2, r3
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009fba:	f7ff ff67 	bl	8009e8c <prvInsertTimerInActiveList>
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d047      	beq.n	800a054 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009fca:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fce:	69db      	ldr	r3, [r3, #28]
 8009fd0:	2b01      	cmp	r3, #1
 8009fd2:	d13f      	bne.n	800a054 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009fd4:	68ba      	ldr	r2, [r7, #8]
 8009fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fd8:	699b      	ldr	r3, [r3, #24]
 8009fda:	441a      	add	r2, r3
 8009fdc:	2300      	movs	r3, #0
 8009fde:	9300      	str	r3, [sp, #0]
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	2100      	movs	r1, #0
 8009fe4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009fe6:	f7ff fe1f 	bl	8009c28 <xTimerGenericCommand>
 8009fea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009fec:	6a3b      	ldr	r3, [r7, #32]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d130      	bne.n	800a054 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8009ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff6:	f383 8811 	msr	BASEPRI, r3
 8009ffa:	f3bf 8f6f 	isb	sy
 8009ffe:	f3bf 8f4f 	dsb	sy
 800a002:	61bb      	str	r3, [r7, #24]
}
 800a004:	bf00      	nop
 800a006:	e7fe      	b.n	800a006 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a008:	68ba      	ldr	r2, [r7, #8]
 800a00a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a00c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a00e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a010:	699b      	ldr	r3, [r3, #24]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d10a      	bne.n	800a02c <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800a016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a01a:	f383 8811 	msr	BASEPRI, r3
 800a01e:	f3bf 8f6f 	isb	sy
 800a022:	f3bf 8f4f 	dsb	sy
 800a026:	617b      	str	r3, [r7, #20]
}
 800a028:	bf00      	nop
 800a02a:	e7fe      	b.n	800a02a <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a02c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a02e:	699a      	ldr	r2, [r3, #24]
 800a030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a032:	18d1      	adds	r1, r2, r3
 800a034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a038:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a03a:	f7ff ff27 	bl	8009e8c <prvInsertTimerInActiveList>
					break;
 800a03e:	e009      	b.n	800a054 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a042:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a046:	2b00      	cmp	r3, #0
 800a048:	d104      	bne.n	800a054 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800a04a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a04c:	f000 fb8a 	bl	800a764 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a050:	e000      	b.n	800a054 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 800a052:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a054:	4b07      	ldr	r3, [pc, #28]	; (800a074 <prvProcessReceivedCommands+0x164>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	1d39      	adds	r1, r7, #4
 800a05a:	2200      	movs	r2, #0
 800a05c:	4618      	mov	r0, r3
 800a05e:	f7fe f897 	bl	8008190 <xQueueReceive>
 800a062:	4603      	mov	r3, r0
 800a064:	2b00      	cmp	r3, #0
 800a066:	f47f af57 	bne.w	8009f18 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a06a:	bf00      	nop
 800a06c:	bf00      	nop
 800a06e:	3730      	adds	r7, #48	; 0x30
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}
 800a074:	20000d90 	.word	0x20000d90

0800a078 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b088      	sub	sp, #32
 800a07c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a07e:	e045      	b.n	800a10c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a080:	4b2c      	ldr	r3, [pc, #176]	; (800a134 <prvSwitchTimerLists+0xbc>)
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	68db      	ldr	r3, [r3, #12]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a08a:	4b2a      	ldr	r3, [pc, #168]	; (800a134 <prvSwitchTimerLists+0xbc>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	68db      	ldr	r3, [r3, #12]
 800a090:	68db      	ldr	r3, [r3, #12]
 800a092:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	3304      	adds	r3, #4
 800a098:	4618      	mov	r0, r3
 800a09a:	f7fd fcc1 	bl	8007a20 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0a2:	68f8      	ldr	r0, [r7, #12]
 800a0a4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	69db      	ldr	r3, [r3, #28]
 800a0aa:	2b01      	cmp	r3, #1
 800a0ac:	d12e      	bne.n	800a10c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	699b      	ldr	r3, [r3, #24]
 800a0b2:	693a      	ldr	r2, [r7, #16]
 800a0b4:	4413      	add	r3, r2
 800a0b6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a0b8:	68ba      	ldr	r2, [r7, #8]
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	429a      	cmp	r2, r3
 800a0be:	d90e      	bls.n	800a0de <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	68ba      	ldr	r2, [r7, #8]
 800a0c4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	68fa      	ldr	r2, [r7, #12]
 800a0ca:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a0cc:	4b19      	ldr	r3, [pc, #100]	; (800a134 <prvSwitchTimerLists+0xbc>)
 800a0ce:	681a      	ldr	r2, [r3, #0]
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	3304      	adds	r3, #4
 800a0d4:	4619      	mov	r1, r3
 800a0d6:	4610      	mov	r0, r2
 800a0d8:	f7fd fc6a 	bl	80079b0 <vListInsert>
 800a0dc:	e016      	b.n	800a10c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a0de:	2300      	movs	r3, #0
 800a0e0:	9300      	str	r3, [sp, #0]
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	693a      	ldr	r2, [r7, #16]
 800a0e6:	2100      	movs	r1, #0
 800a0e8:	68f8      	ldr	r0, [r7, #12]
 800a0ea:	f7ff fd9d 	bl	8009c28 <xTimerGenericCommand>
 800a0ee:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d10a      	bne.n	800a10c <prvSwitchTimerLists+0x94>
	__asm volatile
 800a0f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0fa:	f383 8811 	msr	BASEPRI, r3
 800a0fe:	f3bf 8f6f 	isb	sy
 800a102:	f3bf 8f4f 	dsb	sy
 800a106:	603b      	str	r3, [r7, #0]
}
 800a108:	bf00      	nop
 800a10a:	e7fe      	b.n	800a10a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a10c:	4b09      	ldr	r3, [pc, #36]	; (800a134 <prvSwitchTimerLists+0xbc>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d1b4      	bne.n	800a080 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a116:	4b07      	ldr	r3, [pc, #28]	; (800a134 <prvSwitchTimerLists+0xbc>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a11c:	4b06      	ldr	r3, [pc, #24]	; (800a138 <prvSwitchTimerLists+0xc0>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	4a04      	ldr	r2, [pc, #16]	; (800a134 <prvSwitchTimerLists+0xbc>)
 800a122:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a124:	4a04      	ldr	r2, [pc, #16]	; (800a138 <prvSwitchTimerLists+0xc0>)
 800a126:	697b      	ldr	r3, [r7, #20]
 800a128:	6013      	str	r3, [r2, #0]
}
 800a12a:	bf00      	nop
 800a12c:	3718      	adds	r7, #24
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}
 800a132:	bf00      	nop
 800a134:	20000d88 	.word	0x20000d88
 800a138:	20000d8c 	.word	0x20000d8c

0800a13c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b082      	sub	sp, #8
 800a140:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a142:	f000 f94b 	bl	800a3dc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a146:	4b15      	ldr	r3, [pc, #84]	; (800a19c <prvCheckForValidListAndQueue+0x60>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d120      	bne.n	800a190 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a14e:	4814      	ldr	r0, [pc, #80]	; (800a1a0 <prvCheckForValidListAndQueue+0x64>)
 800a150:	f7fd fbe0 	bl	8007914 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a154:	4813      	ldr	r0, [pc, #76]	; (800a1a4 <prvCheckForValidListAndQueue+0x68>)
 800a156:	f7fd fbdd 	bl	8007914 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a15a:	4b13      	ldr	r3, [pc, #76]	; (800a1a8 <prvCheckForValidListAndQueue+0x6c>)
 800a15c:	4a10      	ldr	r2, [pc, #64]	; (800a1a0 <prvCheckForValidListAndQueue+0x64>)
 800a15e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a160:	4b12      	ldr	r3, [pc, #72]	; (800a1ac <prvCheckForValidListAndQueue+0x70>)
 800a162:	4a10      	ldr	r2, [pc, #64]	; (800a1a4 <prvCheckForValidListAndQueue+0x68>)
 800a164:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a166:	2300      	movs	r3, #0
 800a168:	9300      	str	r3, [sp, #0]
 800a16a:	4b11      	ldr	r3, [pc, #68]	; (800a1b0 <prvCheckForValidListAndQueue+0x74>)
 800a16c:	4a11      	ldr	r2, [pc, #68]	; (800a1b4 <prvCheckForValidListAndQueue+0x78>)
 800a16e:	2110      	movs	r1, #16
 800a170:	200a      	movs	r0, #10
 800a172:	f7fd fce7 	bl	8007b44 <xQueueGenericCreateStatic>
 800a176:	4603      	mov	r3, r0
 800a178:	4a08      	ldr	r2, [pc, #32]	; (800a19c <prvCheckForValidListAndQueue+0x60>)
 800a17a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a17c:	4b07      	ldr	r3, [pc, #28]	; (800a19c <prvCheckForValidListAndQueue+0x60>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d005      	beq.n	800a190 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a184:	4b05      	ldr	r3, [pc, #20]	; (800a19c <prvCheckForValidListAndQueue+0x60>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	490b      	ldr	r1, [pc, #44]	; (800a1b8 <prvCheckForValidListAndQueue+0x7c>)
 800a18a:	4618      	mov	r0, r3
 800a18c:	f7fe fb14 	bl	80087b8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a190:	f000 f954 	bl	800a43c <vPortExitCritical>
}
 800a194:	bf00      	nop
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}
 800a19a:	bf00      	nop
 800a19c:	20000d90 	.word	0x20000d90
 800a1a0:	20000d60 	.word	0x20000d60
 800a1a4:	20000d74 	.word	0x20000d74
 800a1a8:	20000d88 	.word	0x20000d88
 800a1ac:	20000d8c 	.word	0x20000d8c
 800a1b0:	20000e3c 	.word	0x20000e3c
 800a1b4:	20000d9c 	.word	0x20000d9c
 800a1b8:	0800c120 	.word	0x0800c120

0800a1bc <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b08a      	sub	sp, #40	; 0x28
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	60f8      	str	r0, [r7, #12]
 800a1c4:	60b9      	str	r1, [r7, #8]
 800a1c6:	607a      	str	r2, [r7, #4]
 800a1c8:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800a1ca:	f06f 0301 	mvn.w	r3, #1
 800a1ce:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a1dc:	4b06      	ldr	r3, [pc, #24]	; (800a1f8 <xTimerPendFunctionCallFromISR+0x3c>)
 800a1de:	6818      	ldr	r0, [r3, #0]
 800a1e0:	f107 0114 	add.w	r1, r7, #20
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	683a      	ldr	r2, [r7, #0]
 800a1e8:	f7fd ff3a 	bl	8008060 <xQueueGenericSendFromISR>
 800a1ec:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800a1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	3728      	adds	r7, #40	; 0x28
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bd80      	pop	{r7, pc}
 800a1f8:	20000d90 	.word	0x20000d90

0800a1fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b085      	sub	sp, #20
 800a200:	af00      	add	r7, sp, #0
 800a202:	60f8      	str	r0, [r7, #12]
 800a204:	60b9      	str	r1, [r7, #8]
 800a206:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	3b04      	subs	r3, #4
 800a20c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a214:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	3b04      	subs	r3, #4
 800a21a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	f023 0201 	bic.w	r2, r3, #1
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	3b04      	subs	r3, #4
 800a22a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a22c:	4a08      	ldr	r2, [pc, #32]	; (800a250 <pxPortInitialiseStack+0x54>)
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	3b14      	subs	r3, #20
 800a236:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a238:	687a      	ldr	r2, [r7, #4]
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	3b20      	subs	r3, #32
 800a242:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a244:	68fb      	ldr	r3, [r7, #12]
}
 800a246:	4618      	mov	r0, r3
 800a248:	3714      	adds	r7, #20
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bc80      	pop	{r7}
 800a24e:	4770      	bx	lr
 800a250:	0800a255 	.word	0x0800a255

0800a254 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a254:	b480      	push	{r7}
 800a256:	b085      	sub	sp, #20
 800a258:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800a25a:	2300      	movs	r3, #0
 800a25c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a25e:	4b12      	ldr	r3, [pc, #72]	; (800a2a8 <prvTaskExitError+0x54>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a266:	d00a      	beq.n	800a27e <prvTaskExitError+0x2a>
	__asm volatile
 800a268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a26c:	f383 8811 	msr	BASEPRI, r3
 800a270:	f3bf 8f6f 	isb	sy
 800a274:	f3bf 8f4f 	dsb	sy
 800a278:	60fb      	str	r3, [r7, #12]
}
 800a27a:	bf00      	nop
 800a27c:	e7fe      	b.n	800a27c <prvTaskExitError+0x28>
	__asm volatile
 800a27e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a282:	f383 8811 	msr	BASEPRI, r3
 800a286:	f3bf 8f6f 	isb	sy
 800a28a:	f3bf 8f4f 	dsb	sy
 800a28e:	60bb      	str	r3, [r7, #8]
}
 800a290:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a292:	bf00      	nop
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d0fc      	beq.n	800a294 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a29a:	bf00      	nop
 800a29c:	bf00      	nop
 800a29e:	3714      	adds	r7, #20
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bc80      	pop	{r7}
 800a2a4:	4770      	bx	lr
 800a2a6:	bf00      	nop
 800a2a8:	2000000c 	.word	0x2000000c
 800a2ac:	00000000 	.word	0x00000000

0800a2b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a2b0:	4b07      	ldr	r3, [pc, #28]	; (800a2d0 <pxCurrentTCBConst2>)
 800a2b2:	6819      	ldr	r1, [r3, #0]
 800a2b4:	6808      	ldr	r0, [r1, #0]
 800a2b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a2ba:	f380 8809 	msr	PSP, r0
 800a2be:	f3bf 8f6f 	isb	sy
 800a2c2:	f04f 0000 	mov.w	r0, #0
 800a2c6:	f380 8811 	msr	BASEPRI, r0
 800a2ca:	f04e 0e0d 	orr.w	lr, lr, #13
 800a2ce:	4770      	bx	lr

0800a2d0 <pxCurrentTCBConst2>:
 800a2d0:	20000860 	.word	0x20000860
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a2d4:	bf00      	nop
 800a2d6:	bf00      	nop

0800a2d8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800a2d8:	4806      	ldr	r0, [pc, #24]	; (800a2f4 <prvPortStartFirstTask+0x1c>)
 800a2da:	6800      	ldr	r0, [r0, #0]
 800a2dc:	6800      	ldr	r0, [r0, #0]
 800a2de:	f380 8808 	msr	MSP, r0
 800a2e2:	b662      	cpsie	i
 800a2e4:	b661      	cpsie	f
 800a2e6:	f3bf 8f4f 	dsb	sy
 800a2ea:	f3bf 8f6f 	isb	sy
 800a2ee:	df00      	svc	0
 800a2f0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a2f2:	bf00      	nop
 800a2f4:	e000ed08 	.word	0xe000ed08

0800a2f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b084      	sub	sp, #16
 800a2fc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a2fe:	4b32      	ldr	r3, [pc, #200]	; (800a3c8 <xPortStartScheduler+0xd0>)
 800a300:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	781b      	ldrb	r3, [r3, #0]
 800a306:	b2db      	uxtb	r3, r3
 800a308:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	22ff      	movs	r2, #255	; 0xff
 800a30e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	781b      	ldrb	r3, [r3, #0]
 800a314:	b2db      	uxtb	r3, r3
 800a316:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a318:	78fb      	ldrb	r3, [r7, #3]
 800a31a:	b2db      	uxtb	r3, r3
 800a31c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a320:	b2da      	uxtb	r2, r3
 800a322:	4b2a      	ldr	r3, [pc, #168]	; (800a3cc <xPortStartScheduler+0xd4>)
 800a324:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a326:	4b2a      	ldr	r3, [pc, #168]	; (800a3d0 <xPortStartScheduler+0xd8>)
 800a328:	2207      	movs	r2, #7
 800a32a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a32c:	e009      	b.n	800a342 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a32e:	4b28      	ldr	r3, [pc, #160]	; (800a3d0 <xPortStartScheduler+0xd8>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	3b01      	subs	r3, #1
 800a334:	4a26      	ldr	r2, [pc, #152]	; (800a3d0 <xPortStartScheduler+0xd8>)
 800a336:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a338:	78fb      	ldrb	r3, [r7, #3]
 800a33a:	b2db      	uxtb	r3, r3
 800a33c:	005b      	lsls	r3, r3, #1
 800a33e:	b2db      	uxtb	r3, r3
 800a340:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a342:	78fb      	ldrb	r3, [r7, #3]
 800a344:	b2db      	uxtb	r3, r3
 800a346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a34a:	2b80      	cmp	r3, #128	; 0x80
 800a34c:	d0ef      	beq.n	800a32e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a34e:	4b20      	ldr	r3, [pc, #128]	; (800a3d0 <xPortStartScheduler+0xd8>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f1c3 0307 	rsb	r3, r3, #7
 800a356:	2b04      	cmp	r3, #4
 800a358:	d00a      	beq.n	800a370 <xPortStartScheduler+0x78>
	__asm volatile
 800a35a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a35e:	f383 8811 	msr	BASEPRI, r3
 800a362:	f3bf 8f6f 	isb	sy
 800a366:	f3bf 8f4f 	dsb	sy
 800a36a:	60bb      	str	r3, [r7, #8]
}
 800a36c:	bf00      	nop
 800a36e:	e7fe      	b.n	800a36e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a370:	4b17      	ldr	r3, [pc, #92]	; (800a3d0 <xPortStartScheduler+0xd8>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	021b      	lsls	r3, r3, #8
 800a376:	4a16      	ldr	r2, [pc, #88]	; (800a3d0 <xPortStartScheduler+0xd8>)
 800a378:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a37a:	4b15      	ldr	r3, [pc, #84]	; (800a3d0 <xPortStartScheduler+0xd8>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a382:	4a13      	ldr	r2, [pc, #76]	; (800a3d0 <xPortStartScheduler+0xd8>)
 800a384:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	b2da      	uxtb	r2, r3
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a38e:	4b11      	ldr	r3, [pc, #68]	; (800a3d4 <xPortStartScheduler+0xdc>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	4a10      	ldr	r2, [pc, #64]	; (800a3d4 <xPortStartScheduler+0xdc>)
 800a394:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a398:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a39a:	4b0e      	ldr	r3, [pc, #56]	; (800a3d4 <xPortStartScheduler+0xdc>)
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	4a0d      	ldr	r2, [pc, #52]	; (800a3d4 <xPortStartScheduler+0xdc>)
 800a3a0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a3a4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a3a6:	f000 f8b9 	bl	800a51c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a3aa:	4b0b      	ldr	r3, [pc, #44]	; (800a3d8 <xPortStartScheduler+0xe0>)
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a3b0:	f7ff ff92 	bl	800a2d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a3b4:	f7fe feca 	bl	800914c <vTaskSwitchContext>
	prvTaskExitError();
 800a3b8:	f7ff ff4c 	bl	800a254 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a3bc:	2300      	movs	r3, #0
}
 800a3be:	4618      	mov	r0, r3
 800a3c0:	3710      	adds	r7, #16
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}
 800a3c6:	bf00      	nop
 800a3c8:	e000e400 	.word	0xe000e400
 800a3cc:	20000e8c 	.word	0x20000e8c
 800a3d0:	20000e90 	.word	0x20000e90
 800a3d4:	e000ed20 	.word	0xe000ed20
 800a3d8:	2000000c 	.word	0x2000000c

0800a3dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b083      	sub	sp, #12
 800a3e0:	af00      	add	r7, sp, #0
	__asm volatile
 800a3e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3e6:	f383 8811 	msr	BASEPRI, r3
 800a3ea:	f3bf 8f6f 	isb	sy
 800a3ee:	f3bf 8f4f 	dsb	sy
 800a3f2:	607b      	str	r3, [r7, #4]
}
 800a3f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a3f6:	4b0f      	ldr	r3, [pc, #60]	; (800a434 <vPortEnterCritical+0x58>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	3301      	adds	r3, #1
 800a3fc:	4a0d      	ldr	r2, [pc, #52]	; (800a434 <vPortEnterCritical+0x58>)
 800a3fe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a400:	4b0c      	ldr	r3, [pc, #48]	; (800a434 <vPortEnterCritical+0x58>)
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	2b01      	cmp	r3, #1
 800a406:	d10f      	bne.n	800a428 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a408:	4b0b      	ldr	r3, [pc, #44]	; (800a438 <vPortEnterCritical+0x5c>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	b2db      	uxtb	r3, r3
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d00a      	beq.n	800a428 <vPortEnterCritical+0x4c>
	__asm volatile
 800a412:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a416:	f383 8811 	msr	BASEPRI, r3
 800a41a:	f3bf 8f6f 	isb	sy
 800a41e:	f3bf 8f4f 	dsb	sy
 800a422:	603b      	str	r3, [r7, #0]
}
 800a424:	bf00      	nop
 800a426:	e7fe      	b.n	800a426 <vPortEnterCritical+0x4a>
	}
}
 800a428:	bf00      	nop
 800a42a:	370c      	adds	r7, #12
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bc80      	pop	{r7}
 800a430:	4770      	bx	lr
 800a432:	bf00      	nop
 800a434:	2000000c 	.word	0x2000000c
 800a438:	e000ed04 	.word	0xe000ed04

0800a43c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a43c:	b480      	push	{r7}
 800a43e:	b083      	sub	sp, #12
 800a440:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a442:	4b11      	ldr	r3, [pc, #68]	; (800a488 <vPortExitCritical+0x4c>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d10a      	bne.n	800a460 <vPortExitCritical+0x24>
	__asm volatile
 800a44a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a44e:	f383 8811 	msr	BASEPRI, r3
 800a452:	f3bf 8f6f 	isb	sy
 800a456:	f3bf 8f4f 	dsb	sy
 800a45a:	607b      	str	r3, [r7, #4]
}
 800a45c:	bf00      	nop
 800a45e:	e7fe      	b.n	800a45e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a460:	4b09      	ldr	r3, [pc, #36]	; (800a488 <vPortExitCritical+0x4c>)
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	3b01      	subs	r3, #1
 800a466:	4a08      	ldr	r2, [pc, #32]	; (800a488 <vPortExitCritical+0x4c>)
 800a468:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a46a:	4b07      	ldr	r3, [pc, #28]	; (800a488 <vPortExitCritical+0x4c>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d105      	bne.n	800a47e <vPortExitCritical+0x42>
 800a472:	2300      	movs	r3, #0
 800a474:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	f383 8811 	msr	BASEPRI, r3
}
 800a47c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a47e:	bf00      	nop
 800a480:	370c      	adds	r7, #12
 800a482:	46bd      	mov	sp, r7
 800a484:	bc80      	pop	{r7}
 800a486:	4770      	bx	lr
 800a488:	2000000c 	.word	0x2000000c
 800a48c:	00000000 	.word	0x00000000

0800a490 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a490:	f3ef 8009 	mrs	r0, PSP
 800a494:	f3bf 8f6f 	isb	sy
 800a498:	4b0d      	ldr	r3, [pc, #52]	; (800a4d0 <pxCurrentTCBConst>)
 800a49a:	681a      	ldr	r2, [r3, #0]
 800a49c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a4a0:	6010      	str	r0, [r2, #0]
 800a4a2:	e92d 4008 	stmdb	sp!, {r3, lr}
 800a4a6:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a4aa:	f380 8811 	msr	BASEPRI, r0
 800a4ae:	f7fe fe4d 	bl	800914c <vTaskSwitchContext>
 800a4b2:	f04f 0000 	mov.w	r0, #0
 800a4b6:	f380 8811 	msr	BASEPRI, r0
 800a4ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a4be:	6819      	ldr	r1, [r3, #0]
 800a4c0:	6808      	ldr	r0, [r1, #0]
 800a4c2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a4c6:	f380 8809 	msr	PSP, r0
 800a4ca:	f3bf 8f6f 	isb	sy
 800a4ce:	4770      	bx	lr

0800a4d0 <pxCurrentTCBConst>:
 800a4d0:	20000860 	.word	0x20000860
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a4d4:	bf00      	nop
 800a4d6:	bf00      	nop

0800a4d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b082      	sub	sp, #8
 800a4dc:	af00      	add	r7, sp, #0
	__asm volatile
 800a4de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e2:	f383 8811 	msr	BASEPRI, r3
 800a4e6:	f3bf 8f6f 	isb	sy
 800a4ea:	f3bf 8f4f 	dsb	sy
 800a4ee:	607b      	str	r3, [r7, #4]
}
 800a4f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a4f2:	f7fe fd6d 	bl	8008fd0 <xTaskIncrementTick>
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d003      	beq.n	800a504 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a4fc:	4b06      	ldr	r3, [pc, #24]	; (800a518 <SysTick_Handler+0x40>)
 800a4fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a502:	601a      	str	r2, [r3, #0]
 800a504:	2300      	movs	r3, #0
 800a506:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	f383 8811 	msr	BASEPRI, r3
}
 800a50e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a510:	bf00      	nop
 800a512:	3708      	adds	r7, #8
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}
 800a518:	e000ed04 	.word	0xe000ed04

0800a51c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a51c:	b480      	push	{r7}
 800a51e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a520:	4b0a      	ldr	r3, [pc, #40]	; (800a54c <vPortSetupTimerInterrupt+0x30>)
 800a522:	2200      	movs	r2, #0
 800a524:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a526:	4b0a      	ldr	r3, [pc, #40]	; (800a550 <vPortSetupTimerInterrupt+0x34>)
 800a528:	2200      	movs	r2, #0
 800a52a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a52c:	4b09      	ldr	r3, [pc, #36]	; (800a554 <vPortSetupTimerInterrupt+0x38>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	4a09      	ldr	r2, [pc, #36]	; (800a558 <vPortSetupTimerInterrupt+0x3c>)
 800a532:	fba2 2303 	umull	r2, r3, r2, r3
 800a536:	099b      	lsrs	r3, r3, #6
 800a538:	4a08      	ldr	r2, [pc, #32]	; (800a55c <vPortSetupTimerInterrupt+0x40>)
 800a53a:	3b01      	subs	r3, #1
 800a53c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a53e:	4b03      	ldr	r3, [pc, #12]	; (800a54c <vPortSetupTimerInterrupt+0x30>)
 800a540:	2207      	movs	r2, #7
 800a542:	601a      	str	r2, [r3, #0]
}
 800a544:	bf00      	nop
 800a546:	46bd      	mov	sp, r7
 800a548:	bc80      	pop	{r7}
 800a54a:	4770      	bx	lr
 800a54c:	e000e010 	.word	0xe000e010
 800a550:	e000e018 	.word	0xe000e018
 800a554:	20000000 	.word	0x20000000
 800a558:	10624dd3 	.word	0x10624dd3
 800a55c:	e000e014 	.word	0xe000e014

0800a560 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a560:	b480      	push	{r7}
 800a562:	b085      	sub	sp, #20
 800a564:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a566:	f3ef 8305 	mrs	r3, IPSR
 800a56a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	2b0f      	cmp	r3, #15
 800a570:	d914      	bls.n	800a59c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a572:	4a16      	ldr	r2, [pc, #88]	; (800a5cc <vPortValidateInterruptPriority+0x6c>)
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	4413      	add	r3, r2
 800a578:	781b      	ldrb	r3, [r3, #0]
 800a57a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a57c:	4b14      	ldr	r3, [pc, #80]	; (800a5d0 <vPortValidateInterruptPriority+0x70>)
 800a57e:	781b      	ldrb	r3, [r3, #0]
 800a580:	7afa      	ldrb	r2, [r7, #11]
 800a582:	429a      	cmp	r2, r3
 800a584:	d20a      	bcs.n	800a59c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a58a:	f383 8811 	msr	BASEPRI, r3
 800a58e:	f3bf 8f6f 	isb	sy
 800a592:	f3bf 8f4f 	dsb	sy
 800a596:	607b      	str	r3, [r7, #4]
}
 800a598:	bf00      	nop
 800a59a:	e7fe      	b.n	800a59a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a59c:	4b0d      	ldr	r3, [pc, #52]	; (800a5d4 <vPortValidateInterruptPriority+0x74>)
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a5a4:	4b0c      	ldr	r3, [pc, #48]	; (800a5d8 <vPortValidateInterruptPriority+0x78>)
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	429a      	cmp	r2, r3
 800a5aa:	d90a      	bls.n	800a5c2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a5ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5b0:	f383 8811 	msr	BASEPRI, r3
 800a5b4:	f3bf 8f6f 	isb	sy
 800a5b8:	f3bf 8f4f 	dsb	sy
 800a5bc:	603b      	str	r3, [r7, #0]
}
 800a5be:	bf00      	nop
 800a5c0:	e7fe      	b.n	800a5c0 <vPortValidateInterruptPriority+0x60>
	}
 800a5c2:	bf00      	nop
 800a5c4:	3714      	adds	r7, #20
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bc80      	pop	{r7}
 800a5ca:	4770      	bx	lr
 800a5cc:	e000e3f0 	.word	0xe000e3f0
 800a5d0:	20000e8c 	.word	0x20000e8c
 800a5d4:	e000ed0c 	.word	0xe000ed0c
 800a5d8:	20000e90 	.word	0x20000e90

0800a5dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b08a      	sub	sp, #40	; 0x28
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a5e8:	f7fe fc38 	bl	8008e5c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a5ec:	4b58      	ldr	r3, [pc, #352]	; (800a750 <pvPortMalloc+0x174>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d101      	bne.n	800a5f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a5f4:	f000 f910 	bl	800a818 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a5f8:	4b56      	ldr	r3, [pc, #344]	; (800a754 <pvPortMalloc+0x178>)
 800a5fa:	681a      	ldr	r2, [r3, #0]
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	4013      	ands	r3, r2
 800a600:	2b00      	cmp	r3, #0
 800a602:	f040 808e 	bne.w	800a722 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d01d      	beq.n	800a648 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a60c:	2208      	movs	r2, #8
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	4413      	add	r3, r2
 800a612:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f003 0307 	and.w	r3, r3, #7
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d014      	beq.n	800a648 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	f023 0307 	bic.w	r3, r3, #7
 800a624:	3308      	adds	r3, #8
 800a626:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	f003 0307 	and.w	r3, r3, #7
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d00a      	beq.n	800a648 <pvPortMalloc+0x6c>
	__asm volatile
 800a632:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a636:	f383 8811 	msr	BASEPRI, r3
 800a63a:	f3bf 8f6f 	isb	sy
 800a63e:	f3bf 8f4f 	dsb	sy
 800a642:	617b      	str	r3, [r7, #20]
}
 800a644:	bf00      	nop
 800a646:	e7fe      	b.n	800a646 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d069      	beq.n	800a722 <pvPortMalloc+0x146>
 800a64e:	4b42      	ldr	r3, [pc, #264]	; (800a758 <pvPortMalloc+0x17c>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	687a      	ldr	r2, [r7, #4]
 800a654:	429a      	cmp	r2, r3
 800a656:	d864      	bhi.n	800a722 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a658:	4b40      	ldr	r3, [pc, #256]	; (800a75c <pvPortMalloc+0x180>)
 800a65a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a65c:	4b3f      	ldr	r3, [pc, #252]	; (800a75c <pvPortMalloc+0x180>)
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a662:	e004      	b.n	800a66e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a666:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a66e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a670:	685b      	ldr	r3, [r3, #4]
 800a672:	687a      	ldr	r2, [r7, #4]
 800a674:	429a      	cmp	r2, r3
 800a676:	d903      	bls.n	800a680 <pvPortMalloc+0xa4>
 800a678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d1f1      	bne.n	800a664 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a680:	4b33      	ldr	r3, [pc, #204]	; (800a750 <pvPortMalloc+0x174>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a686:	429a      	cmp	r2, r3
 800a688:	d04b      	beq.n	800a722 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a68a:	6a3b      	ldr	r3, [r7, #32]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	2208      	movs	r2, #8
 800a690:	4413      	add	r3, r2
 800a692:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a696:	681a      	ldr	r2, [r3, #0]
 800a698:	6a3b      	ldr	r3, [r7, #32]
 800a69a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a69c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a69e:	685a      	ldr	r2, [r3, #4]
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	1ad2      	subs	r2, r2, r3
 800a6a4:	2308      	movs	r3, #8
 800a6a6:	005b      	lsls	r3, r3, #1
 800a6a8:	429a      	cmp	r2, r3
 800a6aa:	d91f      	bls.n	800a6ec <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a6ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	4413      	add	r3, r2
 800a6b2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a6b4:	69bb      	ldr	r3, [r7, #24]
 800a6b6:	f003 0307 	and.w	r3, r3, #7
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d00a      	beq.n	800a6d4 <pvPortMalloc+0xf8>
	__asm volatile
 800a6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6c2:	f383 8811 	msr	BASEPRI, r3
 800a6c6:	f3bf 8f6f 	isb	sy
 800a6ca:	f3bf 8f4f 	dsb	sy
 800a6ce:	613b      	str	r3, [r7, #16]
}
 800a6d0:	bf00      	nop
 800a6d2:	e7fe      	b.n	800a6d2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d6:	685a      	ldr	r2, [r3, #4]
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	1ad2      	subs	r2, r2, r3
 800a6dc:	69bb      	ldr	r3, [r7, #24]
 800a6de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e2:	687a      	ldr	r2, [r7, #4]
 800a6e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a6e6:	69b8      	ldr	r0, [r7, #24]
 800a6e8:	f000 f8f8 	bl	800a8dc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a6ec:	4b1a      	ldr	r3, [pc, #104]	; (800a758 <pvPortMalloc+0x17c>)
 800a6ee:	681a      	ldr	r2, [r3, #0]
 800a6f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6f2:	685b      	ldr	r3, [r3, #4]
 800a6f4:	1ad3      	subs	r3, r2, r3
 800a6f6:	4a18      	ldr	r2, [pc, #96]	; (800a758 <pvPortMalloc+0x17c>)
 800a6f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a6fa:	4b17      	ldr	r3, [pc, #92]	; (800a758 <pvPortMalloc+0x17c>)
 800a6fc:	681a      	ldr	r2, [r3, #0]
 800a6fe:	4b18      	ldr	r3, [pc, #96]	; (800a760 <pvPortMalloc+0x184>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	429a      	cmp	r2, r3
 800a704:	d203      	bcs.n	800a70e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a706:	4b14      	ldr	r3, [pc, #80]	; (800a758 <pvPortMalloc+0x17c>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	4a15      	ldr	r2, [pc, #84]	; (800a760 <pvPortMalloc+0x184>)
 800a70c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a70e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a710:	685a      	ldr	r2, [r3, #4]
 800a712:	4b10      	ldr	r3, [pc, #64]	; (800a754 <pvPortMalloc+0x178>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	431a      	orrs	r2, r3
 800a718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a71a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a71e:	2200      	movs	r2, #0
 800a720:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a722:	f7fe fba9 	bl	8008e78 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a726:	69fb      	ldr	r3, [r7, #28]
 800a728:	f003 0307 	and.w	r3, r3, #7
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d00a      	beq.n	800a746 <pvPortMalloc+0x16a>
	__asm volatile
 800a730:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a734:	f383 8811 	msr	BASEPRI, r3
 800a738:	f3bf 8f6f 	isb	sy
 800a73c:	f3bf 8f4f 	dsb	sy
 800a740:	60fb      	str	r3, [r7, #12]
}
 800a742:	bf00      	nop
 800a744:	e7fe      	b.n	800a744 <pvPortMalloc+0x168>
	return pvReturn;
 800a746:	69fb      	ldr	r3, [r7, #28]
}
 800a748:	4618      	mov	r0, r3
 800a74a:	3728      	adds	r7, #40	; 0x28
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}
 800a750:	20002e9c 	.word	0x20002e9c
 800a754:	20002ea8 	.word	0x20002ea8
 800a758:	20002ea0 	.word	0x20002ea0
 800a75c:	20002e94 	.word	0x20002e94
 800a760:	20002ea4 	.word	0x20002ea4

0800a764 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b086      	sub	sp, #24
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d048      	beq.n	800a808 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a776:	2308      	movs	r3, #8
 800a778:	425b      	negs	r3, r3
 800a77a:	697a      	ldr	r2, [r7, #20]
 800a77c:	4413      	add	r3, r2
 800a77e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a780:	697b      	ldr	r3, [r7, #20]
 800a782:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a784:	693b      	ldr	r3, [r7, #16]
 800a786:	685a      	ldr	r2, [r3, #4]
 800a788:	4b21      	ldr	r3, [pc, #132]	; (800a810 <vPortFree+0xac>)
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	4013      	ands	r3, r2
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d10a      	bne.n	800a7a8 <vPortFree+0x44>
	__asm volatile
 800a792:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a796:	f383 8811 	msr	BASEPRI, r3
 800a79a:	f3bf 8f6f 	isb	sy
 800a79e:	f3bf 8f4f 	dsb	sy
 800a7a2:	60fb      	str	r3, [r7, #12]
}
 800a7a4:	bf00      	nop
 800a7a6:	e7fe      	b.n	800a7a6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a7a8:	693b      	ldr	r3, [r7, #16]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d00a      	beq.n	800a7c6 <vPortFree+0x62>
	__asm volatile
 800a7b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7b4:	f383 8811 	msr	BASEPRI, r3
 800a7b8:	f3bf 8f6f 	isb	sy
 800a7bc:	f3bf 8f4f 	dsb	sy
 800a7c0:	60bb      	str	r3, [r7, #8]
}
 800a7c2:	bf00      	nop
 800a7c4:	e7fe      	b.n	800a7c4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a7c6:	693b      	ldr	r3, [r7, #16]
 800a7c8:	685a      	ldr	r2, [r3, #4]
 800a7ca:	4b11      	ldr	r3, [pc, #68]	; (800a810 <vPortFree+0xac>)
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	4013      	ands	r3, r2
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d019      	beq.n	800a808 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a7d4:	693b      	ldr	r3, [r7, #16]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d115      	bne.n	800a808 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a7dc:	693b      	ldr	r3, [r7, #16]
 800a7de:	685a      	ldr	r2, [r3, #4]
 800a7e0:	4b0b      	ldr	r3, [pc, #44]	; (800a810 <vPortFree+0xac>)
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	43db      	mvns	r3, r3
 800a7e6:	401a      	ands	r2, r3
 800a7e8:	693b      	ldr	r3, [r7, #16]
 800a7ea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a7ec:	f7fe fb36 	bl	8008e5c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a7f0:	693b      	ldr	r3, [r7, #16]
 800a7f2:	685a      	ldr	r2, [r3, #4]
 800a7f4:	4b07      	ldr	r3, [pc, #28]	; (800a814 <vPortFree+0xb0>)
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	4413      	add	r3, r2
 800a7fa:	4a06      	ldr	r2, [pc, #24]	; (800a814 <vPortFree+0xb0>)
 800a7fc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a7fe:	6938      	ldr	r0, [r7, #16]
 800a800:	f000 f86c 	bl	800a8dc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a804:	f7fe fb38 	bl	8008e78 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a808:	bf00      	nop
 800a80a:	3718      	adds	r7, #24
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}
 800a810:	20002ea8 	.word	0x20002ea8
 800a814:	20002ea0 	.word	0x20002ea0

0800a818 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a818:	b480      	push	{r7}
 800a81a:	b085      	sub	sp, #20
 800a81c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a81e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a822:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a824:	4b27      	ldr	r3, [pc, #156]	; (800a8c4 <prvHeapInit+0xac>)
 800a826:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	f003 0307 	and.w	r3, r3, #7
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d00c      	beq.n	800a84c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	3307      	adds	r3, #7
 800a836:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	f023 0307 	bic.w	r3, r3, #7
 800a83e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a840:	68ba      	ldr	r2, [r7, #8]
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	1ad3      	subs	r3, r2, r3
 800a846:	4a1f      	ldr	r2, [pc, #124]	; (800a8c4 <prvHeapInit+0xac>)
 800a848:	4413      	add	r3, r2
 800a84a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a850:	4a1d      	ldr	r2, [pc, #116]	; (800a8c8 <prvHeapInit+0xb0>)
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a856:	4b1c      	ldr	r3, [pc, #112]	; (800a8c8 <prvHeapInit+0xb0>)
 800a858:	2200      	movs	r2, #0
 800a85a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	68ba      	ldr	r2, [r7, #8]
 800a860:	4413      	add	r3, r2
 800a862:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a864:	2208      	movs	r2, #8
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	1a9b      	subs	r3, r3, r2
 800a86a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	f023 0307 	bic.w	r3, r3, #7
 800a872:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	4a15      	ldr	r2, [pc, #84]	; (800a8cc <prvHeapInit+0xb4>)
 800a878:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a87a:	4b14      	ldr	r3, [pc, #80]	; (800a8cc <prvHeapInit+0xb4>)
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	2200      	movs	r2, #0
 800a880:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a882:	4b12      	ldr	r3, [pc, #72]	; (800a8cc <prvHeapInit+0xb4>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	2200      	movs	r2, #0
 800a888:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	68fa      	ldr	r2, [r7, #12]
 800a892:	1ad2      	subs	r2, r2, r3
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a898:	4b0c      	ldr	r3, [pc, #48]	; (800a8cc <prvHeapInit+0xb4>)
 800a89a:	681a      	ldr	r2, [r3, #0]
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	685b      	ldr	r3, [r3, #4]
 800a8a4:	4a0a      	ldr	r2, [pc, #40]	; (800a8d0 <prvHeapInit+0xb8>)
 800a8a6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	685b      	ldr	r3, [r3, #4]
 800a8ac:	4a09      	ldr	r2, [pc, #36]	; (800a8d4 <prvHeapInit+0xbc>)
 800a8ae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a8b0:	4b09      	ldr	r3, [pc, #36]	; (800a8d8 <prvHeapInit+0xc0>)
 800a8b2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a8b6:	601a      	str	r2, [r3, #0]
}
 800a8b8:	bf00      	nop
 800a8ba:	3714      	adds	r7, #20
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	bc80      	pop	{r7}
 800a8c0:	4770      	bx	lr
 800a8c2:	bf00      	nop
 800a8c4:	20000e94 	.word	0x20000e94
 800a8c8:	20002e94 	.word	0x20002e94
 800a8cc:	20002e9c 	.word	0x20002e9c
 800a8d0:	20002ea4 	.word	0x20002ea4
 800a8d4:	20002ea0 	.word	0x20002ea0
 800a8d8:	20002ea8 	.word	0x20002ea8

0800a8dc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a8dc:	b480      	push	{r7}
 800a8de:	b085      	sub	sp, #20
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a8e4:	4b27      	ldr	r3, [pc, #156]	; (800a984 <prvInsertBlockIntoFreeList+0xa8>)
 800a8e6:	60fb      	str	r3, [r7, #12]
 800a8e8:	e002      	b.n	800a8f0 <prvInsertBlockIntoFreeList+0x14>
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	60fb      	str	r3, [r7, #12]
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	687a      	ldr	r2, [r7, #4]
 800a8f6:	429a      	cmp	r2, r3
 800a8f8:	d8f7      	bhi.n	800a8ea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	685b      	ldr	r3, [r3, #4]
 800a902:	68ba      	ldr	r2, [r7, #8]
 800a904:	4413      	add	r3, r2
 800a906:	687a      	ldr	r2, [r7, #4]
 800a908:	429a      	cmp	r2, r3
 800a90a:	d108      	bne.n	800a91e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	685a      	ldr	r2, [r3, #4]
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	685b      	ldr	r3, [r3, #4]
 800a914:	441a      	add	r2, r3
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	685b      	ldr	r3, [r3, #4]
 800a926:	68ba      	ldr	r2, [r7, #8]
 800a928:	441a      	add	r2, r3
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	429a      	cmp	r2, r3
 800a930:	d118      	bne.n	800a964 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	681a      	ldr	r2, [r3, #0]
 800a936:	4b14      	ldr	r3, [pc, #80]	; (800a988 <prvInsertBlockIntoFreeList+0xac>)
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	429a      	cmp	r2, r3
 800a93c:	d00d      	beq.n	800a95a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	685a      	ldr	r2, [r3, #4]
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	685b      	ldr	r3, [r3, #4]
 800a948:	441a      	add	r2, r3
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	681a      	ldr	r2, [r3, #0]
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	601a      	str	r2, [r3, #0]
 800a958:	e008      	b.n	800a96c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a95a:	4b0b      	ldr	r3, [pc, #44]	; (800a988 <prvInsertBlockIntoFreeList+0xac>)
 800a95c:	681a      	ldr	r2, [r3, #0]
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	601a      	str	r2, [r3, #0]
 800a962:	e003      	b.n	800a96c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	681a      	ldr	r2, [r3, #0]
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a96c:	68fa      	ldr	r2, [r7, #12]
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	429a      	cmp	r2, r3
 800a972:	d002      	beq.n	800a97a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	687a      	ldr	r2, [r7, #4]
 800a978:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a97a:	bf00      	nop
 800a97c:	3714      	adds	r7, #20
 800a97e:	46bd      	mov	sp, r7
 800a980:	bc80      	pop	{r7}
 800a982:	4770      	bx	lr
 800a984:	20002e94 	.word	0x20002e94
 800a988:	20002e9c 	.word	0x20002e9c

0800a98c <FAS_Send>:

//#define nPortNo 0
#define FAS_MaxRcvByte	100

uint8_t FAS_Send(FAS_HandlerStruct* Port, uint8_t* SendBuffer, uint8_t Len)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b086      	sub	sp, #24
 800a990:	af00      	add	r7, sp, #0
 800a992:	60f8      	str	r0, [r7, #12]
 800a994:	60b9      	str	r1, [r7, #8]
 800a996:	4613      	mov	r3, r2
 800a998:	71fb      	strb	r3, [r7, #7]

    int Status = HAL_ERROR;
 800a99a:	2301      	movs	r3, #1
 800a99c:	617b      	str	r3, [r7, #20]
	Status = UART_OS_Transmit(Port->uart, SendBuffer, Len);
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	79fa      	ldrb	r2, [r7, #7]
 800a9a4:	b292      	uxth	r2, r2
 800a9a6:	68b9      	ldr	r1, [r7, #8]
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	f000 fd81 	bl	800b4b0 <UART_OS_Transmit>
 800a9ae:	6178      	str	r0, [r7, #20]
	if(Status !=  osOK)
 800a9b0:	697b      	ldr	r3, [r7, #20]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d004      	beq.n	800a9c0 <FAS_Send+0x34>
	{
		SyncPrintf("EZI UART Transmit Error \r\n");
 800a9b6:	4805      	ldr	r0, [pc, #20]	; (800a9cc <FAS_Send+0x40>)
 800a9b8:	f000 fd18 	bl	800b3ec <SyncPrintf>
		return FMC_TIMEOUT_ERROR;
 800a9bc:	2306      	movs	r3, #6
 800a9be:	e000      	b.n	800a9c2 <FAS_Send+0x36>

	}
	return FMM_OK;
 800a9c0:	2300      	movs	r3, #0

}
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	3718      	adds	r7, #24
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bd80      	pop	{r7, pc}
 800a9ca:	bf00      	nop
 800a9cc:	0800c128 	.word	0x0800c128

0800a9d0 <FAS_Receive>:

uint8_t FAS_Receive(FAS_HandlerStruct* Port, uint8_t* RcvBuffer, uint8_t* RxLen)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b088      	sub	sp, #32
 800a9d4:	af02      	add	r7, sp, #8
 800a9d6:	60f8      	str	r0, [r7, #12]
 800a9d8:	60b9      	str	r1, [r7, #8]
 800a9da:	607a      	str	r2, [r7, #4]
	int Status = 0;
 800a9dc:	2300      	movs	r3, #0
 800a9de:	617b      	str	r3, [r7, #20]
	Status = UART_OS_Receive_ToIdle(Port->uart, RcvBuffer,(uint16_t*) RxLen, FAS_MaxRcvByte, 100);
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	6818      	ldr	r0, [r3, #0]
 800a9e4:	2364      	movs	r3, #100	; 0x64
 800a9e6:	9300      	str	r3, [sp, #0]
 800a9e8:	2364      	movs	r3, #100	; 0x64
 800a9ea:	687a      	ldr	r2, [r7, #4]
 800a9ec:	68b9      	ldr	r1, [r7, #8]
 800a9ee:	f000 fda0 	bl	800b532 <UART_OS_Receive_ToIdle>
 800a9f2:	6178      	str	r0, [r7, #20]
//	Status = HAL_UARTEx_ReceiveToIdle(&EZI_UART, RcvBuffer, 255, (uint16_t*)RxLen, 1000);
	if(Status == osErrorTimeout)
 800a9f4:	697b      	ldr	r3, [r7, #20]
 800a9f6:	f113 0f02 	cmn.w	r3, #2
 800a9fa:	d104      	bne.n	800aa06 <FAS_Receive+0x36>
	{
		SyncPrintf("Rcv Timeout \r\n");
 800a9fc:	4807      	ldr	r0, [pc, #28]	; (800aa1c <FAS_Receive+0x4c>)
 800a9fe:	f000 fcf5 	bl	800b3ec <SyncPrintf>
		return FMC_TIMEOUT_ERROR;
 800aa02:	2306      	movs	r3, #6
 800aa04:	e005      	b.n	800aa12 <FAS_Receive+0x42>
	}
	else
	{
	}

	if(Status != osOK)
 800aa06:	697b      	ldr	r3, [r7, #20]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d001      	beq.n	800aa10 <FAS_Receive+0x40>
		return FMC_TIMEOUT_ERROR;
 800aa0c:	2306      	movs	r3, #6
 800aa0e:	e000      	b.n	800aa12 <FAS_Receive+0x42>
	else
		return FMM_OK;
 800aa10:	2300      	movs	r3, #0
}
 800aa12:	4618      	mov	r0, r3
 800aa14:	3718      	adds	r7, #24
 800aa16:	46bd      	mov	sp, r7
 800aa18:	bd80      	pop	{r7, pc}
 800aa1a:	bf00      	nop
 800aa1c:	0800c144 	.word	0x0800c144

0800aa20 <FAS_Lock>:
uint8_t FAS_Lock(FAS_HandlerStruct* nPortNo, uint32_t timeout)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b082      	sub	sp, #8
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
 800aa28:	6039      	str	r1, [r7, #0]
	return osMutexAcquire(nPortNo->uartLock, timeout);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	685b      	ldr	r3, [r3, #4]
 800aa2e:	6839      	ldr	r1, [r7, #0]
 800aa30:	4618      	mov	r0, r3
 800aa32:	f7fc fc27 	bl	8007284 <osMutexAcquire>
 800aa36:	4603      	mov	r3, r0
 800aa38:	b2db      	uxtb	r3, r3
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	3708      	adds	r7, #8
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bd80      	pop	{r7, pc}

0800aa42 <FAS_Unlock>:
uint8_t FAS_Unlock(FAS_HandlerStruct* nPortNo)
{
 800aa42:	b580      	push	{r7, lr}
 800aa44:	b082      	sub	sp, #8
 800aa46:	af00      	add	r7, sp, #0
 800aa48:	6078      	str	r0, [r7, #4]
	return osMutexRelease(nPortNo->uartLock);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	685b      	ldr	r3, [r3, #4]
 800aa4e:	4618      	mov	r0, r3
 800aa50:	f7fc fc76 	bl	8007340 <osMutexRelease>
 800aa54:	4603      	mov	r3, r0
 800aa56:	b2db      	uxtb	r3, r3
}
 800aa58:	4618      	mov	r0, r3
 800aa5a:	3708      	adds	r7, #8
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	bd80      	pop	{r7, pc}

0800aa60 <FAS_Init>:
uint8_t FAS_Init(FAS_HandlerStruct* nPortNo)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b082      	sub	sp, #8
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
	nPortNo->uartLock = osMutexNew(NULL);
 800aa68:	2000      	movs	r0, #0
 800aa6a:	f7fc fb71 	bl	8007150 <osMutexNew>
 800aa6e:	4602      	mov	r2, r0
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	605a      	str	r2, [r3, #4]
	return 0;
 800aa74:	2300      	movs	r3, #0
}
 800aa76:	4618      	mov	r0, r3
 800aa78:	3708      	adds	r7, #8
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}
	...

0800aa80 <Wheel_Init>:

uint8_t Wheel_Init(Wheel_HandlerStruct* SteerWheel, UART_OS_HandlerStruct* uart)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b082      	sub	sp, #8
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
 800aa88:	6039      	str	r1, [r7, #0]
	SteerWheel->EziHandler.uart = uart;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	683a      	ldr	r2, [r7, #0]
 800aa8e:	601a      	str	r2, [r3, #0]
	FAS_Init(&SteerWheel->EziHandler);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	4618      	mov	r0, r3
 800aa94:	f7ff ffe4 	bl	800aa60 <FAS_Init>

	Wheel_setLimit(SteerWheel, 25, 25);
 800aa98:	4a06      	ldr	r2, [pc, #24]	; (800aab4 <Wheel_Init+0x34>)
 800aa9a:	4906      	ldr	r1, [pc, #24]	; (800aab4 <Wheel_Init+0x34>)
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	f000 f80b 	bl	800aab8 <Wheel_setLimit>
	Wheel_ClearPos(SteerWheel);
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f000 f88e 	bl	800abc4 <Wheel_ClearPos>

	return Wheel_OK;
 800aaa8:	2300      	movs	r3, #0
}
 800aaaa:	4618      	mov	r0, r3
 800aaac:	3708      	adds	r7, #8
 800aaae:	46bd      	mov	sp, r7
 800aab0:	bd80      	pop	{r7, pc}
 800aab2:	bf00      	nop
 800aab4:	41c80000 	.word	0x41c80000

0800aab8 <Wheel_setLimit>:
uint8_t Wheel_setLimit(Wheel_HandlerStruct* SteerWheel, float LeftLimit, float RightLimit)
{
 800aab8:	b480      	push	{r7}
 800aaba:	b085      	sub	sp, #20
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	60f8      	str	r0, [r7, #12]
 800aac0:	60b9      	str	r1, [r7, #8]
 800aac2:	607a      	str	r2, [r7, #4]
	SteerWheel->RightLimit = RightLimit;
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	687a      	ldr	r2, [r7, #4]
 800aac8:	611a      	str	r2, [r3, #16]
	SteerWheel->letfLimit = LeftLimit;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	68ba      	ldr	r2, [r7, #8]
 800aace:	60da      	str	r2, [r3, #12]
	return Wheel_OK;
 800aad0:	2300      	movs	r3, #0
}
 800aad2:	4618      	mov	r0, r3
 800aad4:	3714      	adds	r7, #20
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bc80      	pop	{r7}
 800aada:	4770      	bx	lr
 800aadc:	0000      	movs	r0, r0
	...

0800aae0 <Wheel_SetAngle_ABS>:
	return FAS_SetInputAssignMap(&SteerWheel->EziHandler, SteerWheel->devID, 7, 18, mode);
}


uint8_t Wheel_SetAngle_ABS(Wheel_HandlerStruct* SteerWheel, float Angle)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b086      	sub	sp, #24
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
 800aae8:	6039      	str	r1, [r7, #0]
//	Angle = - An
	if (Angle > SteerWheel->RightLimit) Angle = SteerWheel->RightLimit;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	691b      	ldr	r3, [r3, #16]
 800aaee:	4619      	mov	r1, r3
 800aaf0:	6838      	ldr	r0, [r7, #0]
 800aaf2:	f7f5 ffdf 	bl	8000ab4 <__aeabi_fcmpgt>
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d003      	beq.n	800ab04 <Wheel_SetAngle_ABS+0x24>
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	691b      	ldr	r3, [r3, #16]
 800ab00:	603b      	str	r3, [r7, #0]
 800ab02:	e00f      	b.n	800ab24 <Wheel_SetAngle_ABS+0x44>
	else if (Angle < -SteerWheel->RightLimit) Angle = -SteerWheel->RightLimit;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	691b      	ldr	r3, [r3, #16]
 800ab08:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800ab0c:	4619      	mov	r1, r3
 800ab0e:	6838      	ldr	r0, [r7, #0]
 800ab10:	f7f5 ffb2 	bl	8000a78 <__aeabi_fcmplt>
 800ab14:	4603      	mov	r3, r0
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d004      	beq.n	800ab24 <Wheel_SetAngle_ABS+0x44>
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	691b      	ldr	r3, [r3, #16]
 800ab1e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800ab22:	603b      	str	r3, [r7, #0]
	int32_t Pos = Angle2Pulse(Angle);
 800ab24:	6838      	ldr	r0, [r7, #0]
 800ab26:	f7f5 fc77 	bl	8000418 <__aeabi_f2d>
 800ab2a:	a323      	add	r3, pc, #140	; (adr r3, 800abb8 <Wheel_SetAngle_ABS+0xd8>)
 800ab2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab30:	f7f5 fcca 	bl	80004c8 <__aeabi_dmul>
 800ab34:	4602      	mov	r2, r0
 800ab36:	460b      	mov	r3, r1
 800ab38:	4610      	mov	r0, r2
 800ab3a:	4619      	mov	r1, r3
 800ab3c:	f7f5 fed6 	bl	80008ec <__aeabi_d2iz>
 800ab40:	4603      	mov	r3, r0
 800ab42:	613b      	str	r3, [r7, #16]
	uint32_t Vel = Wheel_MaxVeloPul;
 800ab44:	4b1e      	ldr	r3, [pc, #120]	; (800abc0 <Wheel_SetAngle_ABS+0xe0>)
 800ab46:	60fb      	str	r3, [r7, #12]
	uint8_t Status =0;
 800ab48:	2300      	movs	r3, #0
 800ab4a:	75fb      	strb	r3, [r7, #23]
	EZISERVO_AXISSTATUS AxisStatus ={0};
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	60bb      	str	r3, [r7, #8]

	Status = FAS_GetAxisStatus(&SteerWheel->EziHandler, SteerWheel->devID,(uint32_t*) &AxisStatus);
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	7a1b      	ldrb	r3, [r3, #8]
 800ab56:	f107 0208 	add.w	r2, r7, #8
 800ab5a:	4619      	mov	r1, r3
 800ab5c:	f000 f940 	bl	800ade0 <FAS_GetAxisStatus>
 800ab60:	4603      	mov	r3, r0
 800ab62:	75fb      	strb	r3, [r7, #23]
	if(Status != FMM_OK) return Wheel_Failed;
 800ab64:	7dfb      	ldrb	r3, [r7, #23]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d001      	beq.n	800ab6e <Wheel_SetAngle_ABS+0x8e>
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	e01e      	b.n	800abac <Wheel_SetAngle_ABS+0xcc>
	if(AxisStatus.FFLAG_MOTIONING == 1)
 800ab6e:	7afb      	ldrb	r3, [r7, #11]
 800ab70:	f003 0308 	and.w	r3, r3, #8
 800ab74:	b2db      	uxtb	r3, r3
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d009      	beq.n	800ab8e <Wheel_SetAngle_ABS+0xae>
	{
		Status = FAS_PositionAbsOverride(&SteerWheel->EziHandler, SteerWheel->devID, Pos);
 800ab7a:	6878      	ldr	r0, [r7, #4]
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	7a1b      	ldrb	r3, [r3, #8]
 800ab80:	693a      	ldr	r2, [r7, #16]
 800ab82:	4619      	mov	r1, r3
 800ab84:	f000 f8bf 	bl	800ad06 <FAS_PositionAbsOverride>
 800ab88:	4603      	mov	r3, r0
 800ab8a:	75fb      	strb	r3, [r7, #23]
 800ab8c:	e008      	b.n	800aba0 <Wheel_SetAngle_ABS+0xc0>
	}else
	{
		Status = FAS_MoveSingleAxisAbsPos(&SteerWheel->EziHandler, SteerWheel->devID, Pos, Vel);
 800ab8e:	6878      	ldr	r0, [r7, #4]
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	7a19      	ldrb	r1, [r3, #8]
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	693a      	ldr	r2, [r7, #16]
 800ab98:	f000 f82b 	bl	800abf2 <FAS_MoveSingleAxisAbsPos>
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	75fb      	strb	r3, [r7, #23]
	}

	if(Status != FMM_OK) return Wheel_Failed;
 800aba0:	7dfb      	ldrb	r3, [r7, #23]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d001      	beq.n	800abaa <Wheel_SetAngle_ABS+0xca>
 800aba6:	2301      	movs	r3, #1
 800aba8:	e000      	b.n	800abac <Wheel_SetAngle_ABS+0xcc>

	return Wheel_OK;
 800abaa:	2300      	movs	r3, #0
}
 800abac:	4618      	mov	r0, r3
 800abae:	3718      	adds	r7, #24
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bd80      	pop	{r7, pc}
 800abb4:	f3af 8000 	nop.w
 800abb8:	00000000 	.word	0x00000000
 800abbc:	40c77000 	.word	0x40c77000
 800abc0:	000186a0 	.word	0x000186a0

0800abc4 <Wheel_ClearPos>:

	return Wheel_OK;
}

uint8_t Wheel_ClearPos(Wheel_HandlerStruct* SteerWheel)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b084      	sub	sp, #16
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
	uint8_t Status = FAS_ClearPosition(&SteerWheel->EziHandler, SteerWheel->devID);
 800abcc:	687a      	ldr	r2, [r7, #4]
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	7a1b      	ldrb	r3, [r3, #8]
 800abd2:	4619      	mov	r1, r3
 800abd4:	4610      	mov	r0, r2
 800abd6:	f000 f98b 	bl	800aef0 <FAS_ClearPosition>
 800abda:	4603      	mov	r3, r0
 800abdc:	73fb      	strb	r3, [r7, #15]
	if(Status != FMM_OK) return Wheel_Failed;
 800abde:	7bfb      	ldrb	r3, [r7, #15]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d001      	beq.n	800abe8 <Wheel_ClearPos+0x24>
 800abe4:	2301      	movs	r3, #1
 800abe6:	e000      	b.n	800abea <Wheel_ClearPos+0x26>
	return Wheel_OK;
 800abe8:	2300      	movs	r3, #0
}
 800abea:	4618      	mov	r0, r3
 800abec:	3710      	adds	r7, #16
 800abee:	46bd      	mov	sp, r7
 800abf0:	bd80      	pop	{r7, pc}

0800abf2 <FAS_MoveSingleAxisAbsPos>:
	vPortFree(RcvBuffer);
	vPortFree(RespData);
	return ComStatus;
}
int FAS_MoveSingleAxisAbsPos(FAS_HandlerStruct* nPortNo, uint8_t iSlaveNo, int32_t lAbsPos, uint32_t lVelocity)
{
 800abf2:	b580      	push	{r7, lr}
 800abf4:	b090      	sub	sp, #64	; 0x40
 800abf6:	af04      	add	r7, sp, #16
 800abf8:	60f8      	str	r0, [r7, #12]
 800abfa:	607a      	str	r2, [r7, #4]
 800abfc:	603b      	str	r3, [r7, #0]
 800abfe:	460b      	mov	r3, r1
 800ac00:	72fb      	strb	r3, [r7, #11]
    const uint8_t FrameType = 0x34;
 800ac02:	2334      	movs	r3, #52	; 0x34
 800ac04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    const uint8_t SendDataLen = 8;
 800ac08:	2308      	movs	r3, #8
 800ac0a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    const uint8_t RcvDataLen = 1;
 800ac0e:	2301      	movs	r3, #1
 800ac10:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint8_t ComStatus;

    uint8_t* SendBuffer = (uint8_t*)pvPortMalloc(15 + 2*SendDataLen);
 800ac14:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ac18:	005b      	lsls	r3, r3, #1
 800ac1a:	330f      	adds	r3, #15
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	f7ff fcdd 	bl	800a5dc <pvPortMalloc>
 800ac22:	62b8      	str	r0, [r7, #40]	; 0x28
    uint8_t SendLen;
    uint8_t* RcvBuffer = (uint8_t*)pvPortMalloc(15 + RcvDataLen);
 800ac24:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800ac28:	330f      	adds	r3, #15
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	f7ff fcd6 	bl	800a5dc <pvPortMalloc>
 800ac30:	6278      	str	r0, [r7, #36]	; 0x24
    uint8_t RcvLen;
    uint8_t* RespData = (uint8_t*)pvPortMalloc(RcvDataLen + 2);
 800ac32:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800ac36:	3302      	adds	r3, #2
 800ac38:	4618      	mov	r0, r3
 800ac3a:	f7ff fccf 	bl	800a5dc <pvPortMalloc>
 800ac3e:	6238      	str	r0, [r7, #32]
	uint8_t RespDataLen;

    uint8_t* Data = (uint8_t*)pvPortMalloc(SendDataLen);
 800ac40:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ac44:	4618      	mov	r0, r3
 800ac46:	f7ff fcc9 	bl	800a5dc <pvPortMalloc>
 800ac4a:	61f8      	str	r0, [r7, #28]
 800ac4c:	687a      	ldr	r2, [r7, #4]
    memcpy(Data, &lAbsPos, 4);
 800ac4e:	69fb      	ldr	r3, [r7, #28]
 800ac50:	601a      	str	r2, [r3, #0]
    memcpy(Data + 4, &lVelocity, 4);
 800ac52:	69fb      	ldr	r3, [r7, #28]
 800ac54:	3304      	adds	r3, #4
 800ac56:	683a      	ldr	r2, [r7, #0]
 800ac58:	601a      	str	r2, [r3, #0]
    uint8_t SyncByte = FAS_PackData(iSlaveNo, FrameType, Data, SendDataLen, SendBuffer, &SendLen);
 800ac5a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800ac5e:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800ac62:	7af8      	ldrb	r0, [r7, #11]
 800ac64:	f107 0319 	add.w	r3, r7, #25
 800ac68:	9301      	str	r3, [sp, #4]
 800ac6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac6c:	9300      	str	r3, [sp, #0]
 800ac6e:	4613      	mov	r3, r2
 800ac70:	69fa      	ldr	r2, [r7, #28]
 800ac72:	f000 fa85 	bl	800b180 <FAS_PackData>
 800ac76:	4603      	mov	r3, r0
 800ac78:	76fb      	strb	r3, [r7, #27]
    FAS_Send(nPortNo, SendBuffer, SendLen);
 800ac7a:	7e7b      	ldrb	r3, [r7, #25]
 800ac7c:	461a      	mov	r2, r3
 800ac7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ac80:	68f8      	ldr	r0, [r7, #12]
 800ac82:	f7ff fe83 	bl	800a98c <FAS_Send>
    vPortFree(SendBuffer);
 800ac86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac88:	f7ff fd6c 	bl	800a764 <vPortFree>
    vPortFree(Data);
 800ac8c:	69f8      	ldr	r0, [r7, #28]
 800ac8e:	f7ff fd69 	bl	800a764 <vPortFree>

    ComStatus = FAS_Receive(nPortNo, RcvBuffer,&RcvLen);
 800ac92:	f107 0318 	add.w	r3, r7, #24
 800ac96:	461a      	mov	r2, r3
 800ac98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ac9a:	68f8      	ldr	r0, [r7, #12]
 800ac9c:	f7ff fe98 	bl	800a9d0 <FAS_Receive>
 800aca0:	4603      	mov	r3, r0
 800aca2:	76bb      	strb	r3, [r7, #26]
	ComStatus = FAS_UnPackData(RcvBuffer, RcvLen, iSlaveNo, SyncByte, FrameType, RespData, &RespDataLen);
 800aca4:	7e39      	ldrb	r1, [r7, #24]
 800aca6:	7ef8      	ldrb	r0, [r7, #27]
 800aca8:	7afa      	ldrb	r2, [r7, #11]
 800acaa:	f107 0317 	add.w	r3, r7, #23
 800acae:	9302      	str	r3, [sp, #8]
 800acb0:	6a3b      	ldr	r3, [r7, #32]
 800acb2:	9301      	str	r3, [sp, #4]
 800acb4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800acb8:	9300      	str	r3, [sp, #0]
 800acba:	4603      	mov	r3, r0
 800acbc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800acbe:	f000 fadd 	bl	800b27c <FAS_UnPackData>
 800acc2:	4603      	mov	r3, r0
 800acc4:	76bb      	strb	r3, [r7, #26]
	if(ComStatus != FMM_OK) return ComStatus;
 800acc6:	7ebb      	ldrb	r3, [r7, #26]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d001      	beq.n	800acd0 <FAS_MoveSingleAxisAbsPos+0xde>
 800accc:	7ebb      	ldrb	r3, [r7, #26]
 800acce:	e016      	b.n	800acfe <FAS_MoveSingleAxisAbsPos+0x10c>

	if(RespDataLen != RcvDataLen)
 800acd0:	7dfb      	ldrb	r3, [r7, #23]
 800acd2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800acd6:	429a      	cmp	r2, r3
 800acd8:	d007      	beq.n	800acea <FAS_MoveSingleAxisAbsPos+0xf8>
	{
		vPortFree(RcvBuffer);
 800acda:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800acdc:	f7ff fd42 	bl	800a764 <vPortFree>
		vPortFree(RespData);
 800ace0:	6a38      	ldr	r0, [r7, #32]
 800ace2:	f7ff fd3f 	bl	800a764 <vPortFree>
		return FMM_UNKNOWN_ERROR;
 800ace6:	23ff      	movs	r3, #255	; 0xff
 800ace8:	e009      	b.n	800acfe <FAS_MoveSingleAxisAbsPos+0x10c>
	}

	ComStatus = RespData[0];
 800acea:	6a3b      	ldr	r3, [r7, #32]
 800acec:	781b      	ldrb	r3, [r3, #0]
 800acee:	76bb      	strb	r3, [r7, #26]
	vPortFree(RcvBuffer);
 800acf0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800acf2:	f7ff fd37 	bl	800a764 <vPortFree>
	vPortFree(RespData);
 800acf6:	6a38      	ldr	r0, [r7, #32]
 800acf8:	f7ff fd34 	bl	800a764 <vPortFree>
	return ComStatus;
 800acfc:	7ebb      	ldrb	r3, [r7, #26]
}
 800acfe:	4618      	mov	r0, r3
 800ad00:	3730      	adds	r7, #48	; 0x30
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd80      	pop	{r7, pc}

0800ad06 <FAS_PositionAbsOverride>:
	vPortFree(RcvBuffer);
	vPortFree(RespData);
	return ComStatus;
}
int FAS_PositionAbsOverride(FAS_HandlerStruct* nPortNo, uint8_t iSlaveNo, int32_t lOverridePos)
{
 800ad06:	b590      	push	{r4, r7, lr}
 800ad08:	b09d      	sub	sp, #116	; 0x74
 800ad0a:	af04      	add	r7, sp, #16
 800ad0c:	60f8      	str	r0, [r7, #12]
 800ad0e:	460b      	mov	r3, r1
 800ad10:	607a      	str	r2, [r7, #4]
 800ad12:	72fb      	strb	r3, [r7, #11]
    const uint8_t FrameType = 0x38;
 800ad14:	2338      	movs	r3, #56	; 0x38
 800ad16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    const uint8_t SendDataLen = 4;
 800ad1a:	2304      	movs	r3, #4
 800ad1c:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    const uint8_t RcvDataLen = 1;
 800ad20:	2301      	movs	r3, #1
 800ad22:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
 800ad26:	687b      	ldr	r3, [r7, #4]

    uint8_t SendBuffer[24];
//    uint8_t* SendBuffer = (uint8_t*)pvPortMalloc(15 + 2 * SendDataLen);
    uint8_t SendLen;
//    lOverridePos = -1 * lOverridePos;
    memcpy(Data, &lOverridePos, 4);
 800ad28:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint8_t SyncByte = FAS_PackData(iSlaveNo, FrameType, Data, SendDataLen, SendBuffer, &SendLen);
 800ad2a:	f897 405e 	ldrb.w	r4, [r7, #94]	; 0x5e
 800ad2e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800ad32:	f897 105f 	ldrb.w	r1, [r7, #95]	; 0x5f
 800ad36:	7af8      	ldrb	r0, [r7, #11]
 800ad38:	f107 0313 	add.w	r3, r7, #19
 800ad3c:	9301      	str	r3, [sp, #4]
 800ad3e:	f107 0314 	add.w	r3, r7, #20
 800ad42:	9300      	str	r3, [sp, #0]
 800ad44:	4623      	mov	r3, r4
 800ad46:	f000 fa1b 	bl	800b180 <FAS_PackData>
 800ad4a:	4603      	mov	r3, r0
 800ad4c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
    FAS_Lock(nPortNo, 10);
 800ad50:	210a      	movs	r1, #10
 800ad52:	68f8      	ldr	r0, [r7, #12]
 800ad54:	f7ff fe64 	bl	800aa20 <FAS_Lock>
    FAS_Send(nPortNo, SendBuffer, SendLen);
 800ad58:	7cfa      	ldrb	r2, [r7, #19]
 800ad5a:	f107 0314 	add.w	r3, r7, #20
 800ad5e:	4619      	mov	r1, r3
 800ad60:	68f8      	ldr	r0, [r7, #12]
 800ad62:	f7ff fe13 	bl	800a98c <FAS_Send>
    ComStatus = FAS_Receive(nPortNo, RcvBuffer,&RcvLen);
 800ad66:	f107 0243 	add.w	r2, r7, #67	; 0x43
 800ad6a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800ad6e:	4619      	mov	r1, r3
 800ad70:	68f8      	ldr	r0, [r7, #12]
 800ad72:	f7ff fe2d 	bl	800a9d0 <FAS_Receive>
 800ad76:	4603      	mov	r3, r0
 800ad78:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	FAS_Unlock(nPortNo);
 800ad7c:	68f8      	ldr	r0, [r7, #12]
 800ad7e:	f7ff fe60 	bl	800aa42 <FAS_Unlock>
	ComStatus = FAS_UnPackData(RcvBuffer, RcvLen, iSlaveNo, SyncByte, FrameType, RespData, &RespDataLen);
 800ad82:	f897 1043 	ldrb.w	r1, [r7, #67]	; 0x43
 800ad86:	f897 405c 	ldrb.w	r4, [r7, #92]	; 0x5c
 800ad8a:	7afa      	ldrb	r2, [r7, #11]
 800ad8c:	f107 0044 	add.w	r0, r7, #68	; 0x44
 800ad90:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800ad94:	9302      	str	r3, [sp, #8]
 800ad96:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ad9a:	9301      	str	r3, [sp, #4]
 800ad9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ada0:	9300      	str	r3, [sp, #0]
 800ada2:	4623      	mov	r3, r4
 800ada4:	f000 fa6a 	bl	800b27c <FAS_UnPackData>
 800ada8:	4603      	mov	r3, r0
 800adaa:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	if(ComStatus != FMM_OK) return ComStatus;
 800adae:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d002      	beq.n	800adbc <FAS_PositionAbsOverride+0xb6>
 800adb6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800adba:	e00d      	b.n	800add8 <FAS_PositionAbsOverride+0xd2>

	ComStatus = RespDataLen != RcvDataLen ? FMM_UNKNOWN_ERROR:RespData[0];
 800adbc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800adc0:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800adc4:	429a      	cmp	r2, r3
 800adc6:	d102      	bne.n	800adce <FAS_PositionAbsOverride+0xc8>
 800adc8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800adcc:	e000      	b.n	800add0 <FAS_PositionAbsOverride+0xca>
 800adce:	23ff      	movs	r3, #255	; 0xff
 800add0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

	return ComStatus;
 800add4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 800add8:	4618      	mov	r0, r3
 800adda:	3764      	adds	r7, #100	; 0x64
 800addc:	46bd      	mov	sp, r7
 800adde:	bd90      	pop	{r4, r7, pc}

0800ade0 <FAS_GetAxisStatus>:
#include "FAS_EziMOTIONPlusR.h"

#ifdef USE_FAS_GetAxisStatus
int FAS_GetAxisStatus(FAS_HandlerStruct* nPortNo, uint8_t iSlaveNo, uint32_t* dwAxisStatus)
{
 800ade0:	b590      	push	{r4, r7, lr}
 800ade2:	b097      	sub	sp, #92	; 0x5c
 800ade4:	af04      	add	r7, sp, #16
 800ade6:	60f8      	str	r0, [r7, #12]
 800ade8:	460b      	mov	r3, r1
 800adea:	607a      	str	r2, [r7, #4]
 800adec:	72fb      	strb	r3, [r7, #11]
    const uint8_t FrameType = 0x40;
 800adee:	2340      	movs	r3, #64	; 0x40
 800adf0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
//    const uint8_t SendDataLen = 0;
    const uint8_t RcvDataLen = 5;
 800adf4:	2305      	movs	r3, #5
 800adf6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
//    uint8_t *SendBuffer = (uint8_t*) pvPortMalloc(15 + 2*SendDataLen);
    uint8_t SendBuffer[16] = {0};
 800adfa:	2300      	movs	r3, #0
 800adfc:	637b      	str	r3, [r7, #52]	; 0x34
 800adfe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ae02:	2200      	movs	r2, #0
 800ae04:	601a      	str	r2, [r3, #0]
 800ae06:	605a      	str	r2, [r3, #4]
 800ae08:	609a      	str	r2, [r3, #8]

    uint8_t SendLen;
//    uint8_t *RcvBuffer = (uint8_t*)pvPortMalloc(15 + SendDataLen);
    uint8_t RcvBuffer[16] = {0};
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	623b      	str	r3, [r7, #32]
 800ae0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ae12:	2200      	movs	r2, #0
 800ae14:	601a      	str	r2, [r3, #0]
 800ae16:	605a      	str	r2, [r3, #4]
 800ae18:	609a      	str	r2, [r3, #8]

    uint8_t RcvLen;
//    uint8_t* RespData = (uint8_t*)pvPortMalloc(RcvDataLen + 2);
    uint8_t RespData[10] = {0};
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	617b      	str	r3, [r7, #20]
 800ae1e:	f107 0318 	add.w	r3, r7, #24
 800ae22:	2200      	movs	r2, #0
 800ae24:	601a      	str	r2, [r3, #0]
 800ae26:	809a      	strh	r2, [r3, #4]

	uint8_t RespDataLen;

    uint8_t SyncByte = FAS_PackData(iSlaveNo, FrameType, 0, 0, SendBuffer, &SendLen);
 800ae28:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 800ae2c:	7af8      	ldrb	r0, [r7, #11]
 800ae2e:	f107 0333 	add.w	r3, r7, #51	; 0x33
 800ae32:	9301      	str	r3, [sp, #4]
 800ae34:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ae38:	9300      	str	r3, [sp, #0]
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	f000 f99f 	bl	800b180 <FAS_PackData>
 800ae42:	4603      	mov	r3, r0
 800ae44:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
    uint8_t ComStatus;
    FAS_Lock(nPortNo, 10);
 800ae48:	210a      	movs	r1, #10
 800ae4a:	68f8      	ldr	r0, [r7, #12]
 800ae4c:	f7ff fde8 	bl	800aa20 <FAS_Lock>
    FAS_Send(nPortNo, SendBuffer, SendLen);
 800ae50:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800ae54:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ae58:	4619      	mov	r1, r3
 800ae5a:	68f8      	ldr	r0, [r7, #12]
 800ae5c:	f7ff fd96 	bl	800a98c <FAS_Send>
    ComStatus = FAS_Receive(nPortNo, RcvBuffer,&RcvLen);
 800ae60:	f107 021f 	add.w	r2, r7, #31
 800ae64:	f107 0320 	add.w	r3, r7, #32
 800ae68:	4619      	mov	r1, r3
 800ae6a:	68f8      	ldr	r0, [r7, #12]
 800ae6c:	f7ff fdb0 	bl	800a9d0 <FAS_Receive>
 800ae70:	4603      	mov	r3, r0
 800ae72:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    FAS_Unlock(nPortNo);
 800ae76:	68f8      	ldr	r0, [r7, #12]
 800ae78:	f7ff fde3 	bl	800aa42 <FAS_Unlock>

	if(ComStatus != FMM_OK) return ComStatus;
 800ae7c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d002      	beq.n	800ae8a <FAS_GetAxisStatus+0xaa>
 800ae84:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800ae88:	e02e      	b.n	800aee8 <FAS_GetAxisStatus+0x108>
	ComStatus = FAS_UnPackData(RcvBuffer, RcvLen, iSlaveNo, SyncByte, FrameType, RespData, &RespDataLen);
 800ae8a:	7ff9      	ldrb	r1, [r7, #31]
 800ae8c:	f897 4045 	ldrb.w	r4, [r7, #69]	; 0x45
 800ae90:	7afa      	ldrb	r2, [r7, #11]
 800ae92:	f107 0020 	add.w	r0, r7, #32
 800ae96:	f107 0313 	add.w	r3, r7, #19
 800ae9a:	9302      	str	r3, [sp, #8]
 800ae9c:	f107 0314 	add.w	r3, r7, #20
 800aea0:	9301      	str	r3, [sp, #4]
 800aea2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800aea6:	9300      	str	r3, [sp, #0]
 800aea8:	4623      	mov	r3, r4
 800aeaa:	f000 f9e7 	bl	800b27c <FAS_UnPackData>
 800aeae:	4603      	mov	r3, r0
 800aeb0:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	if(ComStatus != FMM_OK) return ComStatus;
 800aeb4:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d002      	beq.n	800aec2 <FAS_GetAxisStatus+0xe2>
 800aebc:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800aec0:	e012      	b.n	800aee8 <FAS_GetAxisStatus+0x108>


	ComStatus = RespDataLen != RcvDataLen ? FMM_UNKNOWN_ERROR:RespData[0];
 800aec2:	7cfb      	ldrb	r3, [r7, #19]
 800aec4:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 800aec8:	429a      	cmp	r2, r3
 800aeca:	d101      	bne.n	800aed0 <FAS_GetAxisStatus+0xf0>
 800aecc:	7d3b      	ldrb	r3, [r7, #20]
 800aece:	e000      	b.n	800aed2 <FAS_GetAxisStatus+0xf2>
 800aed0:	23ff      	movs	r3, #255	; 0xff
 800aed2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

	memcpy(dwAxisStatus, RespData+1,4);
 800aed6:	f107 0314 	add.w	r3, r7, #20
 800aeda:	3301      	adds	r3, #1
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	461a      	mov	r2, r3
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	601a      	str	r2, [r3, #0]
//	vPortFree(RcvBuffer);
//	vPortFree(RespData);
	return ComStatus;
 800aee4:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
}
 800aee8:	4618      	mov	r0, r3
 800aeea:	374c      	adds	r7, #76	; 0x4c
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bd90      	pop	{r4, r7, pc}

0800aef0 <FAS_ClearPosition>:
}
#endif

#if USE_FAS_ClearPosition == 1
int FAS_ClearPosition(FAS_HandlerStruct* nPortNo, uint8_t iSlaveNo)
{
 800aef0:	b590      	push	{r4, r7, lr}
 800aef2:	b097      	sub	sp, #92	; 0x5c
 800aef4:	af04      	add	r7, sp, #16
 800aef6:	6078      	str	r0, [r7, #4]
 800aef8:	460b      	mov	r3, r1
 800aefa:	70fb      	strb	r3, [r7, #3]
	const uint8_t FrameType = 0x56;
 800aefc:	2356      	movs	r3, #86	; 0x56
 800aefe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	const uint8_t SendDataLen = 0;
 800af02:	2300      	movs	r3, #0
 800af04:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	const uint8_t RcvDataLen = 1;
 800af08:	2301      	movs	r3, #1
 800af0a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	uint8_t SendBuffer[16] = {0};
 800af0e:	2300      	movs	r3, #0
 800af10:	62fb      	str	r3, [r7, #44]	; 0x2c
 800af12:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800af16:	2200      	movs	r2, #0
 800af18:	601a      	str	r2, [r3, #0]
 800af1a:	605a      	str	r2, [r3, #4]
 800af1c:	609a      	str	r2, [r3, #8]
//	uint8_t *SendBuffer = (uint8_t*) pvPortMalloc(15 + 2*SendDataLen);

	uint8_t SendLen;
	uint8_t* SendData = NULL;
 800af1e:	2300      	movs	r3, #0
 800af20:	643b      	str	r3, [r7, #64]	; 0x40
//	uint8_t SendData[] = (uint8_t*) pvPortMalloc(SendDataLen);

//	uint8_t *RcvBuffer = (uint8_t*)pvPortMalloc(15 + 2*RcvDataLen);
	uint8_t RcvBuffer[20] ={0} ;
 800af22:	2300      	movs	r3, #0
 800af24:	617b      	str	r3, [r7, #20]
 800af26:	f107 0318 	add.w	r3, r7, #24
 800af2a:	2200      	movs	r2, #0
 800af2c:	601a      	str	r2, [r3, #0]
 800af2e:	605a      	str	r2, [r3, #4]
 800af30:	609a      	str	r2, [r3, #8]
 800af32:	60da      	str	r2, [r3, #12]

	uint8_t RcvLen;
//	uint8_t* RespData = (uint8_t*)pvPortMalloc(RcvDataLen + 2);
	uint8_t RespData[4] = {0};
 800af34:	2300      	movs	r3, #0
 800af36:	60fb      	str	r3, [r7, #12]

	uint8_t RespDataLen;

	uint8_t SyncByte = FAS_PackData(iSlaveNo, FrameType, SendData, SendDataLen, SendBuffer, &SendLen);
 800af38:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 800af3c:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 800af40:	78f8      	ldrb	r0, [r7, #3]
 800af42:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800af46:	9301      	str	r3, [sp, #4]
 800af48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800af4c:	9300      	str	r3, [sp, #0]
 800af4e:	4613      	mov	r3, r2
 800af50:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800af52:	f000 f915 	bl	800b180 <FAS_PackData>
 800af56:	4603      	mov	r3, r0
 800af58:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t ComStatus;
	FAS_Lock(nPortNo, 20);
 800af5c:	2114      	movs	r1, #20
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	f7ff fd5e 	bl	800aa20 <FAS_Lock>
	FAS_Send(nPortNo, SendBuffer, SendLen);
 800af64:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800af68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800af6c:	4619      	mov	r1, r3
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f7ff fd0c 	bl	800a98c <FAS_Send>
//	vPortFree(SendData);
//	vPortFree(SendBuffer);
	ComStatus = FAS_Receive(nPortNo, RcvBuffer,&RcvLen);
 800af74:	f107 0213 	add.w	r2, r7, #19
 800af78:	f107 0314 	add.w	r3, r7, #20
 800af7c:	4619      	mov	r1, r3
 800af7e:	6878      	ldr	r0, [r7, #4]
 800af80:	f7ff fd26 	bl	800a9d0 <FAS_Receive>
 800af84:	4603      	mov	r3, r0
 800af86:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 	FAS_Unlock(nPortNo);
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	f7ff fd59 	bl	800aa42 <FAS_Unlock>

	ComStatus = FAS_UnPackData(RcvBuffer, RcvLen, iSlaveNo, SyncByte, FrameType, RespData, &RespDataLen);
 800af90:	7cf9      	ldrb	r1, [r7, #19]
 800af92:	f897 403f 	ldrb.w	r4, [r7, #63]	; 0x3f
 800af96:	78fa      	ldrb	r2, [r7, #3]
 800af98:	f107 0014 	add.w	r0, r7, #20
 800af9c:	f107 030b 	add.w	r3, r7, #11
 800afa0:	9302      	str	r3, [sp, #8]
 800afa2:	f107 030c 	add.w	r3, r7, #12
 800afa6:	9301      	str	r3, [sp, #4]
 800afa8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800afac:	9300      	str	r3, [sp, #0]
 800afae:	4623      	mov	r3, r4
 800afb0:	f000 f964 	bl	800b27c <FAS_UnPackData>
 800afb4:	4603      	mov	r3, r0
 800afb6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	ComStatus = RespDataLen != RcvDataLen? FMC_RECVPACKET_ERROR: RespData[0];
 800afba:	7afb      	ldrb	r3, [r7, #11]
 800afbc:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800afc0:	429a      	cmp	r2, r3
 800afc2:	d101      	bne.n	800afc8 <FAS_ClearPosition+0xd8>
 800afc4:	7b3b      	ldrb	r3, [r7, #12]
 800afc6:	e000      	b.n	800afca <FAS_ClearPosition+0xda>
 800afc8:	2308      	movs	r3, #8
 800afca:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

//	vPortFree(RcvBuffer);
//	vPortFree(RespData);
	return ComStatus;
 800afce:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
}
 800afd2:	4618      	mov	r0, r3
 800afd4:	374c      	adds	r7, #76	; 0x4c
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bd90      	pop	{r4, r7, pc}

0800afda <FAS_AddByteStuffing>:

static const char FAS_Header[] = { 0xAA, 0xCC };
static const char FAS_HeaderTmp[] = { 0x00, 0xCC };
static const char FAS_Tail[] = { 0xAA, 0xEE };
static void FAS_AddByteStuffing(uint8_t* Buffer, uint8_t* BufferLen)
{
 800afda:	b580      	push	{r7, lr}
 800afdc:	b084      	sub	sp, #16
 800afde:	af00      	add	r7, sp, #0
 800afe0:	6078      	str	r0, [r7, #4]
 800afe2:	6039      	str	r1, [r7, #0]
    uint8_t Length = *BufferLen;
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	781b      	ldrb	r3, [r3, #0]
 800afe8:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < Length; ++i)
 800afea:	2300      	movs	r3, #0
 800afec:	73bb      	strb	r3, [r7, #14]
 800afee:	e020      	b.n	800b032 <FAS_AddByteStuffing+0x58>
    {
        if (Buffer[i] == 0xAA)
 800aff0:	7bbb      	ldrb	r3, [r7, #14]
 800aff2:	687a      	ldr	r2, [r7, #4]
 800aff4:	4413      	add	r3, r2
 800aff6:	781b      	ldrb	r3, [r3, #0]
 800aff8:	2baa      	cmp	r3, #170	; 0xaa
 800affa:	d117      	bne.n	800b02c <FAS_AddByteStuffing+0x52>
        {
            memmove(Buffer + i + 1, Buffer + i, Length - i);
 800affc:	7bbb      	ldrb	r3, [r7, #14]
 800affe:	3301      	adds	r3, #1
 800b000:	687a      	ldr	r2, [r7, #4]
 800b002:	18d0      	adds	r0, r2, r3
 800b004:	7bbb      	ldrb	r3, [r7, #14]
 800b006:	687a      	ldr	r2, [r7, #4]
 800b008:	18d1      	adds	r1, r2, r3
 800b00a:	7bfa      	ldrb	r2, [r7, #15]
 800b00c:	7bbb      	ldrb	r3, [r7, #14]
 800b00e:	1ad3      	subs	r3, r2, r3
 800b010:	461a      	mov	r2, r3
 800b012:	f000 fb7d 	bl	800b710 <memmove>
            Buffer[i] = 0xAA;
 800b016:	7bbb      	ldrb	r3, [r7, #14]
 800b018:	687a      	ldr	r2, [r7, #4]
 800b01a:	4413      	add	r3, r2
 800b01c:	22aa      	movs	r2, #170	; 0xaa
 800b01e:	701a      	strb	r2, [r3, #0]
            i++;
 800b020:	7bbb      	ldrb	r3, [r7, #14]
 800b022:	3301      	adds	r3, #1
 800b024:	73bb      	strb	r3, [r7, #14]
            Length++;
 800b026:	7bfb      	ldrb	r3, [r7, #15]
 800b028:	3301      	adds	r3, #1
 800b02a:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < Length; ++i)
 800b02c:	7bbb      	ldrb	r3, [r7, #14]
 800b02e:	3301      	adds	r3, #1
 800b030:	73bb      	strb	r3, [r7, #14]
 800b032:	7bba      	ldrb	r2, [r7, #14]
 800b034:	7bfb      	ldrb	r3, [r7, #15]
 800b036:	429a      	cmp	r2, r3
 800b038:	d3da      	bcc.n	800aff0 <FAS_AddByteStuffing+0x16>
        }
    }
    *BufferLen = Length;
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	7bfa      	ldrb	r2, [r7, #15]
 800b03e:	701a      	strb	r2, [r3, #0]
}
 800b040:	bf00      	nop
 800b042:	3710      	adds	r7, #16
 800b044:	46bd      	mov	sp, r7
 800b046:	bd80      	pop	{r7, pc}

0800b048 <FAS_UnStuffingByte>:

static uint8_t FAS_UnStuffingByte(uint8_t* Buffer, uint8_t* BufferLen)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b084      	sub	sp, #16
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
 800b050:	6039      	str	r1, [r7, #0]
	uint8_t _BufferLen = *BufferLen;
 800b052:	683b      	ldr	r3, [r7, #0]
 800b054:	781b      	ldrb	r3, [r3, #0]
 800b056:	737b      	strb	r3, [r7, #13]
	uint8_t* UnStuffBuffer = (uint8_t*)pvPortMalloc(_BufferLen);
 800b058:	7b7b      	ldrb	r3, [r7, #13]
 800b05a:	4618      	mov	r0, r3
 800b05c:	f7ff fabe 	bl	800a5dc <pvPortMalloc>
 800b060:	60b8      	str	r0, [r7, #8]
	uint8_t UnStuffBufferLen = 0;
 800b062:	2300      	movs	r3, #0
 800b064:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < _BufferLen; ++i)
 800b066:	2300      	movs	r3, #0
 800b068:	73bb      	strb	r3, [r7, #14]
 800b06a:	e03b      	b.n	800b0e4 <FAS_UnStuffingByte+0x9c>
	{
		if(Buffer[i] == 0xAA && Buffer[i+1] == 0xAA)
 800b06c:	7bbb      	ldrb	r3, [r7, #14]
 800b06e:	687a      	ldr	r2, [r7, #4]
 800b070:	4413      	add	r3, r2
 800b072:	781b      	ldrb	r3, [r3, #0]
 800b074:	2baa      	cmp	r3, #170	; 0xaa
 800b076:	d115      	bne.n	800b0a4 <FAS_UnStuffingByte+0x5c>
 800b078:	7bbb      	ldrb	r3, [r7, #14]
 800b07a:	3301      	adds	r3, #1
 800b07c:	687a      	ldr	r2, [r7, #4]
 800b07e:	4413      	add	r3, r2
 800b080:	781b      	ldrb	r3, [r3, #0]
 800b082:	2baa      	cmp	r3, #170	; 0xaa
 800b084:	d10e      	bne.n	800b0a4 <FAS_UnStuffingByte+0x5c>
		{
			UnStuffBuffer[UnStuffBufferLen] = Buffer[i];
 800b086:	7bbb      	ldrb	r3, [r7, #14]
 800b088:	687a      	ldr	r2, [r7, #4]
 800b08a:	441a      	add	r2, r3
 800b08c:	7bfb      	ldrb	r3, [r7, #15]
 800b08e:	68b9      	ldr	r1, [r7, #8]
 800b090:	440b      	add	r3, r1
 800b092:	7812      	ldrb	r2, [r2, #0]
 800b094:	701a      	strb	r2, [r3, #0]
			i++;
 800b096:	7bbb      	ldrb	r3, [r7, #14]
 800b098:	3301      	adds	r3, #1
 800b09a:	73bb      	strb	r3, [r7, #14]
			UnStuffBufferLen++;
 800b09c:	7bfb      	ldrb	r3, [r7, #15]
 800b09e:	3301      	adds	r3, #1
 800b0a0:	73fb      	strb	r3, [r7, #15]
 800b0a2:	e01c      	b.n	800b0de <FAS_UnStuffingByte+0x96>
		}
		else if(Buffer[i] == 0xAa && Buffer[i+1] != 0xAA)
 800b0a4:	7bbb      	ldrb	r3, [r7, #14]
 800b0a6:	687a      	ldr	r2, [r7, #4]
 800b0a8:	4413      	add	r3, r2
 800b0aa:	781b      	ldrb	r3, [r3, #0]
 800b0ac:	2baa      	cmp	r3, #170	; 0xaa
 800b0ae:	d10b      	bne.n	800b0c8 <FAS_UnStuffingByte+0x80>
 800b0b0:	7bbb      	ldrb	r3, [r7, #14]
 800b0b2:	3301      	adds	r3, #1
 800b0b4:	687a      	ldr	r2, [r7, #4]
 800b0b6:	4413      	add	r3, r2
 800b0b8:	781b      	ldrb	r3, [r3, #0]
 800b0ba:	2baa      	cmp	r3, #170	; 0xaa
 800b0bc:	d004      	beq.n	800b0c8 <FAS_UnStuffingByte+0x80>
		{
			vPortFree(UnStuffBuffer);
 800b0be:	68b8      	ldr	r0, [r7, #8]
 800b0c0:	f7ff fb50 	bl	800a764 <vPortFree>
			return FMP_PACKETERROR;
 800b0c4:	2382      	movs	r3, #130	; 0x82
 800b0c6:	e01e      	b.n	800b106 <FAS_UnStuffingByte+0xbe>
		}
		else
		{
			UnStuffBuffer[UnStuffBufferLen] = Buffer[i];
 800b0c8:	7bbb      	ldrb	r3, [r7, #14]
 800b0ca:	687a      	ldr	r2, [r7, #4]
 800b0cc:	441a      	add	r2, r3
 800b0ce:	7bfb      	ldrb	r3, [r7, #15]
 800b0d0:	68b9      	ldr	r1, [r7, #8]
 800b0d2:	440b      	add	r3, r1
 800b0d4:	7812      	ldrb	r2, [r2, #0]
 800b0d6:	701a      	strb	r2, [r3, #0]
			UnStuffBufferLen++;
 800b0d8:	7bfb      	ldrb	r3, [r7, #15]
 800b0da:	3301      	adds	r3, #1
 800b0dc:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < _BufferLen; ++i)
 800b0de:	7bbb      	ldrb	r3, [r7, #14]
 800b0e0:	3301      	adds	r3, #1
 800b0e2:	73bb      	strb	r3, [r7, #14]
 800b0e4:	7bba      	ldrb	r2, [r7, #14]
 800b0e6:	7b7b      	ldrb	r3, [r7, #13]
 800b0e8:	429a      	cmp	r2, r3
 800b0ea:	d3bf      	bcc.n	800b06c <FAS_UnStuffingByte+0x24>
		}
	}
	memcpy(Buffer, UnStuffBuffer, UnStuffBufferLen);
 800b0ec:	7bfb      	ldrb	r3, [r7, #15]
 800b0ee:	461a      	mov	r2, r3
 800b0f0:	68b9      	ldr	r1, [r7, #8]
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f000 fbb0 	bl	800b858 <memcpy>
	*BufferLen = UnStuffBufferLen;
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	7bfa      	ldrb	r2, [r7, #15]
 800b0fc:	701a      	strb	r2, [r3, #0]
	vPortFree(UnStuffBuffer);
 800b0fe:	68b8      	ldr	r0, [r7, #8]
 800b100:	f7ff fb30 	bl	800a764 <vPortFree>
	return FMM_OK;
 800b104:	2300      	movs	r3, #0

}
 800b106:	4618      	mov	r0, r3
 800b108:	3710      	adds	r7, #16
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bd80      	pop	{r7, pc}
	...

0800b110 <FAS_CalcCRC>:

static uint16_t FAS_CalcCRC(uint8_t* Data, uint8_t Len)
{
 800b110:	b480      	push	{r7}
 800b112:	b085      	sub	sp, #20
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
 800b118:	460b      	mov	r3, r1
 800b11a:	70fb      	strb	r3, [r7, #3]
    unsigned char nTemp;
    unsigned short wCRCWord = 0xFFFF;
 800b11c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b120:	81fb      	strh	r3, [r7, #14]
    while (Len--)
 800b122:	e011      	b.n	800b148 <FAS_CalcCRC+0x38>
    {
        nTemp = wCRCWord ^ *(Data++);
 800b124:	89fb      	ldrh	r3, [r7, #14]
 800b126:	b2da      	uxtb	r2, r3
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	1c59      	adds	r1, r3, #1
 800b12c:	6079      	str	r1, [r7, #4]
 800b12e:	781b      	ldrb	r3, [r3, #0]
 800b130:	4053      	eors	r3, r2
 800b132:	737b      	strb	r3, [r7, #13]
        wCRCWord >>= 8;
 800b134:	89fb      	ldrh	r3, [r7, #14]
 800b136:	0a1b      	lsrs	r3, r3, #8
 800b138:	81fb      	strh	r3, [r7, #14]
        wCRCWord ^= TABLE_CRCVALUE[nTemp];
 800b13a:	7b7b      	ldrb	r3, [r7, #13]
 800b13c:	4a08      	ldr	r2, [pc, #32]	; (800b160 <FAS_CalcCRC+0x50>)
 800b13e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800b142:	89fb      	ldrh	r3, [r7, #14]
 800b144:	4053      	eors	r3, r2
 800b146:	81fb      	strh	r3, [r7, #14]
    while (Len--)
 800b148:	78fb      	ldrb	r3, [r7, #3]
 800b14a:	1e5a      	subs	r2, r3, #1
 800b14c:	70fa      	strb	r2, [r7, #3]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d1e8      	bne.n	800b124 <FAS_CalcCRC+0x14>
    }
    return wCRCWord;
 800b152:	89fb      	ldrh	r3, [r7, #14]
}
 800b154:	4618      	mov	r0, r3
 800b156:	3714      	adds	r7, #20
 800b158:	46bd      	mov	sp, r7
 800b15a:	bc80      	pop	{r7}
 800b15c:	4770      	bx	lr
 800b15e:	bf00      	nop
 800b160:	0800c1cc 	.word	0x0800c1cc

0800b164 <FAS_GetSync>:

static uint8_t FAS_GetSync()
{
 800b164:	b480      	push	{r7}
 800b166:	af00      	add	r7, sp, #0
    static uint8_t Sync = 0;
    return Sync++;
 800b168:	4b04      	ldr	r3, [pc, #16]	; (800b17c <FAS_GetSync+0x18>)
 800b16a:	781b      	ldrb	r3, [r3, #0]
 800b16c:	1c5a      	adds	r2, r3, #1
 800b16e:	b2d1      	uxtb	r1, r2
 800b170:	4a02      	ldr	r2, [pc, #8]	; (800b17c <FAS_GetSync+0x18>)
 800b172:	7011      	strb	r1, [r2, #0]
}
 800b174:	4618      	mov	r0, r3
 800b176:	46bd      	mov	sp, r7
 800b178:	bc80      	pop	{r7}
 800b17a:	4770      	bx	lr
 800b17c:	20002eac 	.word	0x20002eac

0800b180 <FAS_PackData>:


uint8_t FAS_PackData(uint8_t SlaveID, uint8_t FrameType ,uint8_t* Data, uint8_t DataLen, uint8_t* PackedData, uint8_t* PackedLen)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b084      	sub	sp, #16
 800b184:	af00      	add	r7, sp, #0
 800b186:	603a      	str	r2, [r7, #0]
 800b188:	461a      	mov	r2, r3
 800b18a:	4603      	mov	r3, r0
 800b18c:	71fb      	strb	r3, [r7, #7]
 800b18e:	460b      	mov	r3, r1
 800b190:	71bb      	strb	r3, [r7, #6]
 800b192:	4613      	mov	r3, r2
 800b194:	717b      	strb	r3, [r7, #5]
    uint8_t _PackedLen = 0;
 800b196:	2300      	movs	r3, #0
 800b198:	73fb      	strb	r3, [r7, #15]
    uint8_t Sync = FAS_GetSync();
 800b19a:	f7ff ffe3 	bl	800b164 <FAS_GetSync>
 800b19e:	4603      	mov	r3, r0
 800b1a0:	73bb      	strb	r3, [r7, #14]
    /*  Add Slave ID*/
    memcpy(PackedData + _PackedLen, &SlaveID, 1); 
 800b1a2:	7bfb      	ldrb	r3, [r7, #15]
 800b1a4:	461a      	mov	r2, r3
 800b1a6:	69bb      	ldr	r3, [r7, #24]
 800b1a8:	4413      	add	r3, r2
 800b1aa:	79fa      	ldrb	r2, [r7, #7]
 800b1ac:	701a      	strb	r2, [r3, #0]
    _PackedLen +=1;
 800b1ae:	7bfb      	ldrb	r3, [r7, #15]
 800b1b0:	3301      	adds	r3, #1
 800b1b2:	b2db      	uxtb	r3, r3
 800b1b4:	73fb      	strb	r3, [r7, #15]
    /*  Add Sync Byte*/
    memcpy(PackedData + _PackedLen, &Sync, 1);
 800b1b6:	7bfb      	ldrb	r3, [r7, #15]
 800b1b8:	461a      	mov	r2, r3
 800b1ba:	69bb      	ldr	r3, [r7, #24]
 800b1bc:	4413      	add	r3, r2
 800b1be:	7bba      	ldrb	r2, [r7, #14]
 800b1c0:	701a      	strb	r2, [r3, #0]
    _PackedLen +=1;
 800b1c2:	7bfb      	ldrb	r3, [r7, #15]
 800b1c4:	3301      	adds	r3, #1
 800b1c6:	b2db      	uxtb	r3, r3
 800b1c8:	73fb      	strb	r3, [r7, #15]
    /*  Add FrameType */
    memcpy(PackedData + _PackedLen, &FrameType, 1);
 800b1ca:	7bfb      	ldrb	r3, [r7, #15]
 800b1cc:	461a      	mov	r2, r3
 800b1ce:	69bb      	ldr	r3, [r7, #24]
 800b1d0:	4413      	add	r3, r2
 800b1d2:	79ba      	ldrb	r2, [r7, #6]
 800b1d4:	701a      	strb	r2, [r3, #0]
    _PackedLen +=1;
 800b1d6:	7bfb      	ldrb	r3, [r7, #15]
 800b1d8:	3301      	adds	r3, #1
 800b1da:	b2db      	uxtb	r3, r3
 800b1dc:	73fb      	strb	r3, [r7, #15]
    /*  Add Data*/
    memcpy(PackedData+ _PackedLen, Data, DataLen);
 800b1de:	7bfb      	ldrb	r3, [r7, #15]
 800b1e0:	461a      	mov	r2, r3
 800b1e2:	69bb      	ldr	r3, [r7, #24]
 800b1e4:	4413      	add	r3, r2
 800b1e6:	797a      	ldrb	r2, [r7, #5]
 800b1e8:	6839      	ldr	r1, [r7, #0]
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	f000 fb34 	bl	800b858 <memcpy>
    _PackedLen += DataLen;
 800b1f0:	7bfa      	ldrb	r2, [r7, #15]
 800b1f2:	797b      	ldrb	r3, [r7, #5]
 800b1f4:	4413      	add	r3, r2
 800b1f6:	b2db      	uxtb	r3, r3
 800b1f8:	73fb      	strb	r3, [r7, #15]
    /* Add CRC */
    uint16_t calcCRC = FAS_CalcCRC(PackedData, _PackedLen);
 800b1fa:	7bfb      	ldrb	r3, [r7, #15]
 800b1fc:	4619      	mov	r1, r3
 800b1fe:	69b8      	ldr	r0, [r7, #24]
 800b200:	f7ff ff86 	bl	800b110 <FAS_CalcCRC>
 800b204:	4603      	mov	r3, r0
 800b206:	81bb      	strh	r3, [r7, #12]
    memcpy(PackedData + _PackedLen, &calcCRC, 2);
 800b208:	7bfb      	ldrb	r3, [r7, #15]
 800b20a:	461a      	mov	r2, r3
 800b20c:	69bb      	ldr	r3, [r7, #24]
 800b20e:	4413      	add	r3, r2
 800b210:	89ba      	ldrh	r2, [r7, #12]
 800b212:	801a      	strh	r2, [r3, #0]
    _PackedLen += 2;
 800b214:	7bfb      	ldrb	r3, [r7, #15]
 800b216:	3302      	adds	r3, #2
 800b218:	b2db      	uxtb	r3, r3
 800b21a:	73fb      	strb	r3, [r7, #15]
    FAS_AddByteStuffing(PackedData, &_PackedLen);
 800b21c:	f107 030f 	add.w	r3, r7, #15
 800b220:	4619      	mov	r1, r3
 800b222:	69b8      	ldr	r0, [r7, #24]
 800b224:	f7ff fed9 	bl	800afda <FAS_AddByteStuffing>
    /* Add Header*/
    memmove(PackedData + 2, PackedData, _PackedLen);
 800b228:	69bb      	ldr	r3, [r7, #24]
 800b22a:	3302      	adds	r3, #2
 800b22c:	7bfa      	ldrb	r2, [r7, #15]
 800b22e:	69b9      	ldr	r1, [r7, #24]
 800b230:	4618      	mov	r0, r3
 800b232:	f000 fa6d 	bl	800b710 <memmove>
    memcpy(PackedData, FAS_Header,2);
 800b236:	69bb      	ldr	r3, [r7, #24]
 800b238:	490e      	ldr	r1, [pc, #56]	; (800b274 <FAS_PackData+0xf4>)
 800b23a:	461a      	mov	r2, r3
 800b23c:	460b      	mov	r3, r1
 800b23e:	881b      	ldrh	r3, [r3, #0]
 800b240:	8013      	strh	r3, [r2, #0]
    _PackedLen+=2;
 800b242:	7bfb      	ldrb	r3, [r7, #15]
 800b244:	3302      	adds	r3, #2
 800b246:	b2db      	uxtb	r3, r3
 800b248:	73fb      	strb	r3, [r7, #15]
    /*  Add Tail*/
    memcpy(PackedData + _PackedLen, FAS_Tail, 2);
 800b24a:	7bfb      	ldrb	r3, [r7, #15]
 800b24c:	461a      	mov	r2, r3
 800b24e:	69bb      	ldr	r3, [r7, #24]
 800b250:	4413      	add	r3, r2
 800b252:	4909      	ldr	r1, [pc, #36]	; (800b278 <FAS_PackData+0xf8>)
 800b254:	461a      	mov	r2, r3
 800b256:	460b      	mov	r3, r1
 800b258:	881b      	ldrh	r3, [r3, #0]
 800b25a:	8013      	strh	r3, [r2, #0]
    _PackedLen +=2;
 800b25c:	7bfb      	ldrb	r3, [r7, #15]
 800b25e:	3302      	adds	r3, #2
 800b260:	b2db      	uxtb	r3, r3
 800b262:	73fb      	strb	r3, [r7, #15]
    *PackedLen = _PackedLen;
 800b264:	7bfa      	ldrb	r2, [r7, #15]
 800b266:	69fb      	ldr	r3, [r7, #28]
 800b268:	701a      	strb	r2, [r3, #0]
    return Sync;
 800b26a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b26c:	4618      	mov	r0, r3
 800b26e:	3710      	adds	r7, #16
 800b270:	46bd      	mov	sp, r7
 800b272:	bd80      	pop	{r7, pc}
 800b274:	0800c3cc 	.word	0x0800c3cc
 800b278:	0800c3d4 	.word	0x0800c3d4

0800b27c <FAS_UnPackData>:

uint8_t FAS_UnPackData(uint8_t* Buffer, uint8_t BufferLen, uint8_t SlaveID, uint8_t Sync, uint8_t FrameType, uint8_t* Data, uint8_t* DataLen)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b084      	sub	sp, #16
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
 800b284:	4608      	mov	r0, r1
 800b286:	4611      	mov	r1, r2
 800b288:	461a      	mov	r2, r3
 800b28a:	4603      	mov	r3, r0
 800b28c:	70fb      	strb	r3, [r7, #3]
 800b28e:	460b      	mov	r3, r1
 800b290:	70bb      	strb	r3, [r7, #2]
 800b292:	4613      	mov	r3, r2
 800b294:	707b      	strb	r3, [r7, #1]
	uint8_t _DataLen = BufferLen;
 800b296:	78fb      	ldrb	r3, [r7, #3]
 800b298:	73bb      	strb	r3, [r7, #14]
	uint8_t Status;
	uint16_t FasCRC;
	Status = memcmp(Buffer,FAS_HeaderTmp, 2);
 800b29a:	2202      	movs	r2, #2
 800b29c:	493c      	ldr	r1, [pc, #240]	; (800b390 <FAS_UnPackData+0x114>)
 800b29e:	6878      	ldr	r0, [r7, #4]
 800b2a0:	f000 fa26 	bl	800b6f0 <memcmp>
 800b2a4:	4603      	mov	r3, r0
 800b2a6:	73fb      	strb	r3, [r7, #15]
	if(Status != 0) return FMP_PACKETERROR;
 800b2a8:	7bfb      	ldrb	r3, [r7, #15]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d001      	beq.n	800b2b2 <FAS_UnPackData+0x36>
 800b2ae:	2382      	movs	r3, #130	; 0x82
 800b2b0:	e069      	b.n	800b386 <FAS_UnPackData+0x10a>
	Status = memcmp(Buffer+_DataLen - 2, FAS_Tail,2);
 800b2b2:	7bbb      	ldrb	r3, [r7, #14]
 800b2b4:	3b02      	subs	r3, #2
 800b2b6:	687a      	ldr	r2, [r7, #4]
 800b2b8:	4413      	add	r3, r2
 800b2ba:	2202      	movs	r2, #2
 800b2bc:	4935      	ldr	r1, [pc, #212]	; (800b394 <FAS_UnPackData+0x118>)
 800b2be:	4618      	mov	r0, r3
 800b2c0:	f000 fa16 	bl	800b6f0 <memcmp>
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	73fb      	strb	r3, [r7, #15]
	if(Status != 0) return FMP_PACKETERROR;
 800b2c8:	7bfb      	ldrb	r3, [r7, #15]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d001      	beq.n	800b2d2 <FAS_UnPackData+0x56>
 800b2ce:	2382      	movs	r3, #130	; 0x82
 800b2d0:	e059      	b.n	800b386 <FAS_UnPackData+0x10a>
	memcpy(Data, Buffer+2, _DataLen - 4);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	3302      	adds	r3, #2
 800b2d6:	7bba      	ldrb	r2, [r7, #14]
 800b2d8:	3a04      	subs	r2, #4
 800b2da:	4619      	mov	r1, r3
 800b2dc:	69f8      	ldr	r0, [r7, #28]
 800b2de:	f000 fabb 	bl	800b858 <memcpy>
	_DataLen -= 4;
 800b2e2:	7bbb      	ldrb	r3, [r7, #14]
 800b2e4:	3b04      	subs	r3, #4
 800b2e6:	b2db      	uxtb	r3, r3
 800b2e8:	73bb      	strb	r3, [r7, #14]

	Status = FAS_UnStuffingByte(Data, &_DataLen);
 800b2ea:	f107 030e 	add.w	r3, r7, #14
 800b2ee:	4619      	mov	r1, r3
 800b2f0:	69f8      	ldr	r0, [r7, #28]
 800b2f2:	f7ff fea9 	bl	800b048 <FAS_UnStuffingByte>
 800b2f6:	4603      	mov	r3, r0
 800b2f8:	73fb      	strb	r3, [r7, #15]
	if(Status != FMM_OK)
 800b2fa:	7bfb      	ldrb	r3, [r7, #15]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d001      	beq.n	800b304 <FAS_UnPackData+0x88>
		return Status;
 800b300:	7bfb      	ldrb	r3, [r7, #15]
 800b302:	e040      	b.n	800b386 <FAS_UnPackData+0x10a>
	FasCRC = FAS_CalcCRC(Data, _DataLen - 2);
 800b304:	7bbb      	ldrb	r3, [r7, #14]
 800b306:	3b02      	subs	r3, #2
 800b308:	b2db      	uxtb	r3, r3
 800b30a:	4619      	mov	r1, r3
 800b30c:	69f8      	ldr	r0, [r7, #28]
 800b30e:	f7ff feff 	bl	800b110 <FAS_CalcCRC>
 800b312:	4603      	mov	r3, r0
 800b314:	81bb      	strh	r3, [r7, #12]
	Status = memcmp(&FasCRC, Data + _DataLen - 2, 2);
 800b316:	7bbb      	ldrb	r3, [r7, #14]
 800b318:	3b02      	subs	r3, #2
 800b31a:	69fa      	ldr	r2, [r7, #28]
 800b31c:	18d1      	adds	r1, r2, r3
 800b31e:	f107 030c 	add.w	r3, r7, #12
 800b322:	2202      	movs	r2, #2
 800b324:	4618      	mov	r0, r3
 800b326:	f000 f9e3 	bl	800b6f0 <memcmp>
 800b32a:	4603      	mov	r3, r0
 800b32c:	73fb      	strb	r3, [r7, #15]
	if(Status != 0) return FMC_CRCFAILED_ERROR;
 800b32e:	7bfb      	ldrb	r3, [r7, #15]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d001      	beq.n	800b338 <FAS_UnPackData+0xbc>
 800b334:	2307      	movs	r3, #7
 800b336:	e026      	b.n	800b386 <FAS_UnPackData+0x10a>

	if(Data[0] != SlaveID)
 800b338:	69fb      	ldr	r3, [r7, #28]
 800b33a:	781b      	ldrb	r3, [r3, #0]
 800b33c:	78ba      	ldrb	r2, [r7, #2]
 800b33e:	429a      	cmp	r2, r3
 800b340:	d001      	beq.n	800b346 <FAS_UnPackData+0xca>
		return FMP_PACKETERROR;
 800b342:	2382      	movs	r3, #130	; 0x82
 800b344:	e01f      	b.n	800b386 <FAS_UnPackData+0x10a>

	if(Data[1] != Sync)
 800b346:	69fb      	ldr	r3, [r7, #28]
 800b348:	3301      	adds	r3, #1
 800b34a:	781b      	ldrb	r3, [r3, #0]
 800b34c:	787a      	ldrb	r2, [r7, #1]
 800b34e:	429a      	cmp	r2, r3
 800b350:	d001      	beq.n	800b356 <FAS_UnPackData+0xda>
		return 0xAA;
 800b352:	23aa      	movs	r3, #170	; 0xaa
 800b354:	e017      	b.n	800b386 <FAS_UnPackData+0x10a>

	if(Data[2] != FrameType)
 800b356:	69fb      	ldr	r3, [r7, #28]
 800b358:	3302      	adds	r3, #2
 800b35a:	781b      	ldrb	r3, [r3, #0]
 800b35c:	7e3a      	ldrb	r2, [r7, #24]
 800b35e:	429a      	cmp	r2, r3
 800b360:	d001      	beq.n	800b366 <FAS_UnPackData+0xea>
		return FMP_PACKETERROR;
 800b362:	2382      	movs	r3, #130	; 0x82
 800b364:	e00f      	b.n	800b386 <FAS_UnPackData+0x10a>
	_DataLen -=5;
 800b366:	7bbb      	ldrb	r3, [r7, #14]
 800b368:	3b05      	subs	r3, #5
 800b36a:	b2db      	uxtb	r3, r3
 800b36c:	73bb      	strb	r3, [r7, #14]
	*DataLen = _DataLen;
 800b36e:	7bba      	ldrb	r2, [r7, #14]
 800b370:	6a3b      	ldr	r3, [r7, #32]
 800b372:	701a      	strb	r2, [r3, #0]
	memcpy(Data, Data+3, _DataLen);
 800b374:	69fb      	ldr	r3, [r7, #28]
 800b376:	3303      	adds	r3, #3
 800b378:	7bba      	ldrb	r2, [r7, #14]
 800b37a:	4619      	mov	r1, r3
 800b37c:	69f8      	ldr	r0, [r7, #28]
 800b37e:	f000 fa6b 	bl	800b858 <memcpy>
	return Data[0];
 800b382:	69fb      	ldr	r3, [r7, #28]
 800b384:	781b      	ldrb	r3, [r3, #0]
}
 800b386:	4618      	mov	r0, r3
 800b388:	3710      	adds	r7, #16
 800b38a:	46bd      	mov	sp, r7
 800b38c:	bd80      	pop	{r7, pc}
 800b38e:	bf00      	nop
 800b390:	0800c3d0 	.word	0x0800c3d0
 800b394:	0800c3d4 	.word	0x0800c3d4

0800b398 <I2C_OS_MEM_RxCpltCB>:
	osSemaphoreRelease(i2c->Semaphore);
	return Status > 0 ? osOK: Status;
}

void I2C_OS_MEM_RxCpltCB(I2C_OS_HandlerStruct* i2c)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b082      	sub	sp, #8
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
	osEventFlagsSet(i2c->EventFlag, I2C_OS_MEM_RX_CPLT_FLAG);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	689b      	ldr	r3, [r3, #8]
 800b3a4:	2102      	movs	r1, #2
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	f7fb fdc0 	bl	8006f2c <osEventFlagsSet>
}
 800b3ac:	bf00      	nop
 800b3ae:	3708      	adds	r7, #8
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	bd80      	pop	{r7, pc}

0800b3b4 <I2C_OS_MEM_TxCpltCB>:
void I2C_OS_MEM_TxCpltCB(I2C_OS_HandlerStruct* i2c)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b082      	sub	sp, #8
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
	osEventFlagsSet(i2c->EventFlag, I2C_OS_MEM_TX_CPLT_FLAG);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	689b      	ldr	r3, [r3, #8]
 800b3c0:	2101      	movs	r1, #1
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	f7fb fdb2 	bl	8006f2c <osEventFlagsSet>
}
 800b3c8:	bf00      	nop
 800b3ca:	3708      	adds	r7, #8
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	bd80      	pop	{r7, pc}

0800b3d0 <SyncPrintf_Init>:
  NULL,                // memory for control block
  0U                   // size for control block
};

void 	SyncPrintf_Init()
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	af00      	add	r7, sp, #0
	PrintfMutex = osMutexNew(&PrintfMutex_attr);
 800b3d4:	4803      	ldr	r0, [pc, #12]	; (800b3e4 <SyncPrintf_Init+0x14>)
 800b3d6:	f7fb febb 	bl	8007150 <osMutexNew>
 800b3da:	4603      	mov	r3, r0
 800b3dc:	4a02      	ldr	r2, [pc, #8]	; (800b3e8 <SyncPrintf_Init+0x18>)
 800b3de:	6013      	str	r3, [r2, #0]
}
 800b3e0:	bf00      	nop
 800b3e2:	bd80      	pop	{r7, pc}
 800b3e4:	0800c3d8 	.word	0x0800c3d8
 800b3e8:	20002eb0 	.word	0x20002eb0

0800b3ec <SyncPrintf>:

int	SyncPrintf (const char *__restrict format, ...)
{
 800b3ec:	b40f      	push	{r0, r1, r2, r3}
 800b3ee:	b580      	push	{r7, lr}
 800b3f0:	b096      	sub	sp, #88	; 0x58
 800b3f2:	af00      	add	r7, sp, #0
#if USE_SyncPrintf == 1
	osMutexAcquire(PrintfMutex, osWaitForever);
 800b3f4:	4b1d      	ldr	r3, [pc, #116]	; (800b46c <SyncPrintf+0x80>)
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	f04f 31ff 	mov.w	r1, #4294967295
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	f7fb ff41 	bl	8007284 <osMutexAcquire>

	va_list arg;
	char Buffer[PrintBufferSize]={0};
 800b402:	2300      	movs	r3, #0
 800b404:	60bb      	str	r3, [r7, #8]
 800b406:	f107 030c 	add.w	r3, r7, #12
 800b40a:	2242      	movs	r2, #66	; 0x42
 800b40c:	2100      	movs	r1, #0
 800b40e:	4618      	mov	r0, r3
 800b410:	f000 f998 	bl	800b744 <memset>
	size_t size = PrintBufferSize;
 800b414:	2346      	movs	r3, #70	; 0x46
 800b416:	607b      	str	r3, [r7, #4]
	va_start(arg,format);
 800b418:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800b41c:	653b      	str	r3, [r7, #80]	; 0x50
	char* Output  = vasnprintf(Buffer,&size,format,arg);
 800b41e:	1d39      	adds	r1, r7, #4
 800b420:	f107 0008 	add.w	r0, r7, #8
 800b424:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b426:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b428:	f000 f954 	bl	800b6d4 <vasniprintf>
 800b42c:	6578      	str	r0, [r7, #84]	; 0x54
	va_end(arg);
	if(Output != NULL)
 800b42e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b430:	2b00      	cmp	r3, #0
 800b432:	d00e      	beq.n	800b452 <SyncPrintf+0x66>
	{
		HAL_UART_Transmit(&DebugUART,(uint8_t*) Output, size, 10);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	b29a      	uxth	r2, r3
 800b438:	230a      	movs	r3, #10
 800b43a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b43c:	480c      	ldr	r0, [pc, #48]	; (800b470 <SyncPrintf+0x84>)
 800b43e:	f7fa fa57 	bl	80058f0 <HAL_UART_Transmit>

		if(Output != Buffer)
 800b442:	f107 0308 	add.w	r3, r7, #8
 800b446:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b448:	429a      	cmp	r2, r3
 800b44a:	d002      	beq.n	800b452 <SyncPrintf+0x66>
		{

			vPortFree(Output);
 800b44c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800b44e:	f7ff f989 	bl	800a764 <vPortFree>
		}
	}
	osMutexRelease(PrintfMutex);
 800b452:	4b06      	ldr	r3, [pc, #24]	; (800b46c <SyncPrintf+0x80>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	4618      	mov	r0, r3
 800b458:	f7fb ff72 	bl	8007340 <osMutexRelease>

	return size;
 800b45c:	687b      	ldr	r3, [r7, #4]
#else
	return 0;
#endif
}
 800b45e:	4618      	mov	r0, r3
 800b460:	3758      	adds	r7, #88	; 0x58
 800b462:	46bd      	mov	sp, r7
 800b464:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b468:	b004      	add	sp, #16
 800b46a:	4770      	bx	lr
 800b46c:	20002eb0 	.word	0x20002eb0
 800b470:	2000015c 	.word	0x2000015c

0800b474 <UART_OS_Init>:
#include <stdarg.h>
#include "string.h"

#define UART_OS_PrintfBufferSize 100
void UART_OS_Init(UART_OS_HandlerStruct* UART, UART_HandleTypeDef* huart)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b082      	sub	sp, #8
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
 800b47c:	6039      	str	r1, [r7, #0]
	UART->RXMutex = osMutexNew(NULL);
 800b47e:	2000      	movs	r0, #0
 800b480:	f7fb fe66 	bl	8007150 <osMutexNew>
 800b484:	4602      	mov	r2, r0
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	605a      	str	r2, [r3, #4]
	UART->TXMutex = osMutexNew(NULL);
 800b48a:	2000      	movs	r0, #0
 800b48c:	f7fb fe60 	bl	8007150 <osMutexNew>
 800b490:	4602      	mov	r2, r0
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	609a      	str	r2, [r3, #8]
	UART->EventFlags = osEventFlagsNew(NULL);
 800b496:	2000      	movs	r0, #0
 800b498:	f7fb fcf6 	bl	8006e88 <osEventFlagsNew>
 800b49c:	4602      	mov	r2, r0
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	60da      	str	r2, [r3, #12]
	UART->huart = huart;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	683a      	ldr	r2, [r7, #0]
 800b4a6:	601a      	str	r2, [r3, #0]
}
 800b4a8:	bf00      	nop
 800b4aa:	3708      	adds	r7, #8
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	bd80      	pop	{r7, pc}

0800b4b0 <UART_OS_Transmit>:

	return size;
}

int UART_OS_Transmit(UART_OS_HandlerStruct* UART, uint8_t* Buffer, uint16_t size)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b086      	sub	sp, #24
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	60f8      	str	r0, [r7, #12]
 800b4b8:	60b9      	str	r1, [r7, #8]
 800b4ba:	4613      	mov	r3, r2
 800b4bc:	80fb      	strh	r3, [r7, #6]
	int Status;
	Status = osMutexAcquire(UART->TXMutex, 20);
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	689b      	ldr	r3, [r3, #8]
 800b4c2:	2114      	movs	r1, #20
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	f7fb fedd 	bl	8007284 <osMutexAcquire>
 800b4ca:	6178      	str	r0, [r7, #20]
	if (Status != osOK) return Status;
 800b4cc:	697b      	ldr	r3, [r7, #20]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d001      	beq.n	800b4d6 <UART_OS_Transmit+0x26>
 800b4d2:	697b      	ldr	r3, [r7, #20]
 800b4d4:	e029      	b.n	800b52a <UART_OS_Transmit+0x7a>
	osEventFlagsClear(UART->EventFlags, UART_OS_TxCpl_Event);
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	68db      	ldr	r3, [r3, #12]
 800b4da:	2104      	movs	r1, #4
 800b4dc:	4618      	mov	r0, r3
 800b4de:	f7fb fd7d 	bl	8006fdc <osEventFlagsClear>

	HAL_UART_Transmit_DMA(UART->huart, Buffer, size);
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	88fa      	ldrh	r2, [r7, #6]
 800b4e8:	68b9      	ldr	r1, [r7, #8]
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	f7fa fa84 	bl	80059f8 <HAL_UART_Transmit_DMA>
	__HAL_DMA_DISABLE_IT(UART->huart->hdmatx, DMA_IT_HT);
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	681a      	ldr	r2, [r3, #0]
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	f022 0204 	bic.w	r2, r2, #4
 800b506:	601a      	str	r2, [r3, #0]

	Status = osEventFlagsWait(UART->EventFlags, UART_OS_TxCpl_Event, osFlagsWaitAll, 20);
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	68d8      	ldr	r0, [r3, #12]
 800b50c:	2314      	movs	r3, #20
 800b50e:	2201      	movs	r2, #1
 800b510:	2104      	movs	r1, #4
 800b512:	f7fb fda7 	bl	8007064 <osEventFlagsWait>
 800b516:	4603      	mov	r3, r0
 800b518:	617b      	str	r3, [r7, #20]

	osMutexRelease(UART->TXMutex);
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	689b      	ldr	r3, [r3, #8]
 800b51e:	4618      	mov	r0, r3
 800b520:	f7fb ff0e 	bl	8007340 <osMutexRelease>

	return Status>0? osOK: Status;
 800b524:	697b      	ldr	r3, [r7, #20]
 800b526:	ea03 73e3 	and.w	r3, r3, r3, asr #31
}
 800b52a:	4618      	mov	r0, r3
 800b52c:	3718      	adds	r7, #24
 800b52e:	46bd      	mov	sp, r7
 800b530:	bd80      	pop	{r7, pc}

0800b532 <UART_OS_Receive_ToIdle>:

int UART_OS_Receive_ToIdle(UART_OS_HandlerStruct* UART, uint8_t* RcvBuffer, uint16_t* RcvLen, uint16_t MaxRcv, uint32_t timeout)
{
 800b532:	b580      	push	{r7, lr}
 800b534:	b086      	sub	sp, #24
 800b536:	af00      	add	r7, sp, #0
 800b538:	60f8      	str	r0, [r7, #12]
 800b53a:	60b9      	str	r1, [r7, #8]
 800b53c:	607a      	str	r2, [r7, #4]
 800b53e:	807b      	strh	r3, [r7, #2]
	int Status = 0;
 800b540:	2300      	movs	r3, #0
 800b542:	617b      	str	r3, [r7, #20]
	Status = osMutexAcquire(UART->RXMutex, timeout);
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	685b      	ldr	r3, [r3, #4]
 800b548:	6a39      	ldr	r1, [r7, #32]
 800b54a:	4618      	mov	r0, r3
 800b54c:	f7fb fe9a 	bl	8007284 <osMutexAcquire>
 800b550:	6178      	str	r0, [r7, #20]
	if(Status == osErrorTimeout) return osErrorTimeout;
 800b552:	697b      	ldr	r3, [r7, #20]
 800b554:	f113 0f02 	cmn.w	r3, #2
 800b558:	d102      	bne.n	800b560 <UART_OS_Receive_ToIdle+0x2e>
 800b55a:	f06f 0301 	mvn.w	r3, #1
 800b55e:	e057      	b.n	800b610 <UART_OS_Receive_ToIdle+0xde>
	else if (Status < 0 ) return osError;
 800b560:	697b      	ldr	r3, [r7, #20]
 800b562:	2b00      	cmp	r3, #0
 800b564:	da02      	bge.n	800b56c <UART_OS_Receive_ToIdle+0x3a>
 800b566:	f04f 33ff 	mov.w	r3, #4294967295
 800b56a:	e051      	b.n	800b610 <UART_OS_Receive_ToIdle+0xde>

	osEventFlagsClear(UART->EventFlags, UART_OS_RcvToIdleCpl_Event);
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	68db      	ldr	r3, [r3, #12]
 800b570:	2102      	movs	r1, #2
 800b572:	4618      	mov	r0, r3
 800b574:	f7fb fd32 	bl	8006fdc <osEventFlagsClear>
	Status = HAL_UARTEx_ReceiveToIdle_DMA(UART->huart, RcvBuffer, MaxRcv);
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	887a      	ldrh	r2, [r7, #2]
 800b57e:	68b9      	ldr	r1, [r7, #8]
 800b580:	4618      	mov	r0, r3
 800b582:	f7fa faa9 	bl	8005ad8 <HAL_UARTEx_ReceiveToIdle_DMA>
 800b586:	4603      	mov	r3, r0
 800b588:	617b      	str	r3, [r7, #20]
	__HAL_DMA_DISABLE_IT(UART->huart->hdmarx, DMA_IT_HT);
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	681a      	ldr	r2, [r3, #0]
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	f022 0204 	bic.w	r2, r2, #4
 800b5a0:	601a      	str	r2, [r3, #0]

	if (Status !=HAL_OK)
 800b5a2:	697b      	ldr	r3, [r7, #20]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d00c      	beq.n	800b5c2 <UART_OS_Receive_ToIdle+0x90>
	{
		HAL_UART_AbortReceive(UART->huart);
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	f7fa faf0 	bl	8005b92 <HAL_UART_AbortReceive>
		osMutexRelease(UART->RXMutex);
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	685b      	ldr	r3, [r3, #4]
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	f7fb fec2 	bl	8007340 <osMutexRelease>
		return osError;
 800b5bc:	f04f 33ff 	mov.w	r3, #4294967295
 800b5c0:	e026      	b.n	800b610 <UART_OS_Receive_ToIdle+0xde>
	}

	Status = osEventFlagsWait(UART->EventFlags, UART_OS_RcvToIdleCpl_Event, osFlagsWaitAll, timeout);
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	68d8      	ldr	r0, [r3, #12]
 800b5c6:	6a3b      	ldr	r3, [r7, #32]
 800b5c8:	2201      	movs	r2, #1
 800b5ca:	2102      	movs	r1, #2
 800b5cc:	f7fb fd4a 	bl	8007064 <osEventFlagsWait>
 800b5d0:	4603      	mov	r3, r0
 800b5d2:	617b      	str	r3, [r7, #20]

	if(Status >0)
 800b5d4:	697b      	ldr	r3, [r7, #20]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	dd07      	ble.n	800b5ea <UART_OS_Receive_ToIdle+0xb8>
	{
		*RcvLen = UART->RxLen;
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	8a1b      	ldrh	r3, [r3, #16]
 800b5de:	b29a      	uxth	r2, r3
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	801a      	strh	r2, [r3, #0]
		UART->RxLen = 0;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	821a      	strh	r2, [r3, #16]
//		Status = osOK
	}
	HAL_UART_AbortReceive(UART->huart);
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	f7fa facf 	bl	8005b92 <HAL_UART_AbortReceive>
	osEventFlagsClear(UART->EventFlags, UART_OS_RcvToIdleCpl_Event);
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	68db      	ldr	r3, [r3, #12]
 800b5f8:	2102      	movs	r1, #2
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	f7fb fcee 	bl	8006fdc <osEventFlagsClear>
	osMutexRelease(UART->RXMutex);
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	685b      	ldr	r3, [r3, #4]
 800b604:	4618      	mov	r0, r3
 800b606:	f7fb fe9b 	bl	8007340 <osMutexRelease>
//	SyncPrintf("Proc Time %ld \r\n", osKernelGetTickCount()-timeStart);

	return Status > 0? osOK: Status;
 800b60a:	697b      	ldr	r3, [r7, #20]
 800b60c:	ea03 73e3 	and.w	r3, r3, r3, asr #31
}
 800b610:	4618      	mov	r0, r3
 800b612:	3718      	adds	r7, #24
 800b614:	46bd      	mov	sp, r7
 800b616:	bd80      	pop	{r7, pc}

0800b618 <UART_OS_RcvToIdle_CB>:
	osMutexRelease(UART->RXMutex);
	return Status > 0? osOK: Status;
}

void UART_OS_RcvToIdle_CB(UART_OS_HandlerStruct* UART, uint16_t RcvLen)
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b082      	sub	sp, #8
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
 800b620:	460b      	mov	r3, r1
 800b622:	807b      	strh	r3, [r7, #2]
	UART->RxLen = RcvLen;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	887a      	ldrh	r2, [r7, #2]
 800b628:	821a      	strh	r2, [r3, #16]
	osEventFlagsSet(UART->EventFlags, UART_OS_RcvToIdleCpl_Event);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	68db      	ldr	r3, [r3, #12]
 800b62e:	2102      	movs	r1, #2
 800b630:	4618      	mov	r0, r3
 800b632:	f7fb fc7b 	bl	8006f2c <osEventFlagsSet>
}
 800b636:	bf00      	nop
 800b638:	3708      	adds	r7, #8
 800b63a:	46bd      	mov	sp, r7
 800b63c:	bd80      	pop	{r7, pc}

0800b63e <UART_OS_RxCplt_CB>:

void UART_OS_RxCplt_CB(UART_OS_HandlerStruct* UART)
{
 800b63e:	b580      	push	{r7, lr}
 800b640:	b082      	sub	sp, #8
 800b642:	af00      	add	r7, sp, #0
 800b644:	6078      	str	r0, [r7, #4]
	osEventFlagsSet(UART->EventFlags, UART_OS_RcvCpl_Event);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	68db      	ldr	r3, [r3, #12]
 800b64a:	2101      	movs	r1, #1
 800b64c:	4618      	mov	r0, r3
 800b64e:	f7fb fc6d 	bl	8006f2c <osEventFlagsSet>
}
 800b652:	bf00      	nop
 800b654:	3708      	adds	r7, #8
 800b656:	46bd      	mov	sp, r7
 800b658:	bd80      	pop	{r7, pc}

0800b65a <UART_OS_TxCplt_CB>:

void UART_OS_TxCplt_CB(UART_OS_HandlerStruct* UART)
{
 800b65a:	b580      	push	{r7, lr}
 800b65c:	b082      	sub	sp, #8
 800b65e:	af00      	add	r7, sp, #0
 800b660:	6078      	str	r0, [r7, #4]
//	uint32_t flag = osEventFlagsGet(UART->EventFlags);
	osEventFlagsSet(UART->EventFlags, UART_OS_TxCpl_Event);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	68db      	ldr	r3, [r3, #12]
 800b666:	2104      	movs	r1, #4
 800b668:	4618      	mov	r0, r3
 800b66a:	f7fb fc5f 	bl	8006f2c <osEventFlagsSet>
}
 800b66e:	bf00      	nop
 800b670:	3708      	adds	r7, #8
 800b672:	46bd      	mov	sp, r7
 800b674:	bd80      	pop	{r7, pc}

0800b676 <_vasniprintf_r>:
 800b676:	b530      	push	{r4, r5, lr}
 800b678:	4615      	mov	r5, r2
 800b67a:	b09b      	sub	sp, #108	; 0x6c
 800b67c:	461a      	mov	r2, r3
 800b67e:	682c      	ldr	r4, [r5, #0]
 800b680:	b189      	cbz	r1, 800b6a6 <_vasniprintf_r+0x30>
 800b682:	2c00      	cmp	r4, #0
 800b684:	bf12      	itee	ne
 800b686:	f44f 63c1 	movne.w	r3, #1544	; 0x608
 800b68a:	f44f 7322 	moveq.w	r3, #648	; 0x288
 800b68e:	2100      	moveq	r1, #0
 800b690:	2c00      	cmp	r4, #0
 800b692:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b696:	9100      	str	r1, [sp, #0]
 800b698:	9104      	str	r1, [sp, #16]
 800b69a:	da08      	bge.n	800b6ae <_vasniprintf_r+0x38>
 800b69c:	238b      	movs	r3, #139	; 0x8b
 800b69e:	6003      	str	r3, [r0, #0]
 800b6a0:	2000      	movs	r0, #0
 800b6a2:	b01b      	add	sp, #108	; 0x6c
 800b6a4:	bd30      	pop	{r4, r5, pc}
 800b6a6:	f44f 7322 	mov.w	r3, #648	; 0x288
 800b6aa:	460c      	mov	r4, r1
 800b6ac:	e7f0      	b.n	800b690 <_vasniprintf_r+0x1a>
 800b6ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b6b2:	4669      	mov	r1, sp
 800b6b4:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b6b8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b6ba:	9402      	str	r4, [sp, #8]
 800b6bc:	9405      	str	r4, [sp, #20]
 800b6be:	f000 fa27 	bl	800bb10 <_svfiprintf_r>
 800b6c2:	1e03      	subs	r3, r0, #0
 800b6c4:	f04f 0000 	mov.w	r0, #0
 800b6c8:	bfa1      	itttt	ge
 800b6ca:	602b      	strge	r3, [r5, #0]
 800b6cc:	9b00      	ldrge	r3, [sp, #0]
 800b6ce:	7018      	strbge	r0, [r3, #0]
 800b6d0:	9804      	ldrge	r0, [sp, #16]
 800b6d2:	e7e6      	b.n	800b6a2 <_vasniprintf_r+0x2c>

0800b6d4 <vasniprintf>:
 800b6d4:	b507      	push	{r0, r1, r2, lr}
 800b6d6:	9300      	str	r3, [sp, #0]
 800b6d8:	4613      	mov	r3, r2
 800b6da:	460a      	mov	r2, r1
 800b6dc:	4601      	mov	r1, r0
 800b6de:	4803      	ldr	r0, [pc, #12]	; (800b6ec <vasniprintf+0x18>)
 800b6e0:	6800      	ldr	r0, [r0, #0]
 800b6e2:	f7ff ffc8 	bl	800b676 <_vasniprintf_r>
 800b6e6:	b003      	add	sp, #12
 800b6e8:	f85d fb04 	ldr.w	pc, [sp], #4
 800b6ec:	2000005c 	.word	0x2000005c

0800b6f0 <memcmp>:
 800b6f0:	b510      	push	{r4, lr}
 800b6f2:	3901      	subs	r1, #1
 800b6f4:	4402      	add	r2, r0
 800b6f6:	4290      	cmp	r0, r2
 800b6f8:	d101      	bne.n	800b6fe <memcmp+0xe>
 800b6fa:	2000      	movs	r0, #0
 800b6fc:	e005      	b.n	800b70a <memcmp+0x1a>
 800b6fe:	7803      	ldrb	r3, [r0, #0]
 800b700:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b704:	42a3      	cmp	r3, r4
 800b706:	d001      	beq.n	800b70c <memcmp+0x1c>
 800b708:	1b18      	subs	r0, r3, r4
 800b70a:	bd10      	pop	{r4, pc}
 800b70c:	3001      	adds	r0, #1
 800b70e:	e7f2      	b.n	800b6f6 <memcmp+0x6>

0800b710 <memmove>:
 800b710:	4288      	cmp	r0, r1
 800b712:	b510      	push	{r4, lr}
 800b714:	eb01 0402 	add.w	r4, r1, r2
 800b718:	d902      	bls.n	800b720 <memmove+0x10>
 800b71a:	4284      	cmp	r4, r0
 800b71c:	4623      	mov	r3, r4
 800b71e:	d807      	bhi.n	800b730 <memmove+0x20>
 800b720:	1e43      	subs	r3, r0, #1
 800b722:	42a1      	cmp	r1, r4
 800b724:	d008      	beq.n	800b738 <memmove+0x28>
 800b726:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b72a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b72e:	e7f8      	b.n	800b722 <memmove+0x12>
 800b730:	4601      	mov	r1, r0
 800b732:	4402      	add	r2, r0
 800b734:	428a      	cmp	r2, r1
 800b736:	d100      	bne.n	800b73a <memmove+0x2a>
 800b738:	bd10      	pop	{r4, pc}
 800b73a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b73e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b742:	e7f7      	b.n	800b734 <memmove+0x24>

0800b744 <memset>:
 800b744:	4603      	mov	r3, r0
 800b746:	4402      	add	r2, r0
 800b748:	4293      	cmp	r3, r2
 800b74a:	d100      	bne.n	800b74e <memset+0xa>
 800b74c:	4770      	bx	lr
 800b74e:	f803 1b01 	strb.w	r1, [r3], #1
 800b752:	e7f9      	b.n	800b748 <memset+0x4>

0800b754 <_reclaim_reent>:
 800b754:	4b29      	ldr	r3, [pc, #164]	; (800b7fc <_reclaim_reent+0xa8>)
 800b756:	b570      	push	{r4, r5, r6, lr}
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	4604      	mov	r4, r0
 800b75c:	4283      	cmp	r3, r0
 800b75e:	d04b      	beq.n	800b7f8 <_reclaim_reent+0xa4>
 800b760:	69c3      	ldr	r3, [r0, #28]
 800b762:	b143      	cbz	r3, 800b776 <_reclaim_reent+0x22>
 800b764:	68db      	ldr	r3, [r3, #12]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d144      	bne.n	800b7f4 <_reclaim_reent+0xa0>
 800b76a:	69e3      	ldr	r3, [r4, #28]
 800b76c:	6819      	ldr	r1, [r3, #0]
 800b76e:	b111      	cbz	r1, 800b776 <_reclaim_reent+0x22>
 800b770:	4620      	mov	r0, r4
 800b772:	f000 f87f 	bl	800b874 <_free_r>
 800b776:	6961      	ldr	r1, [r4, #20]
 800b778:	b111      	cbz	r1, 800b780 <_reclaim_reent+0x2c>
 800b77a:	4620      	mov	r0, r4
 800b77c:	f000 f87a 	bl	800b874 <_free_r>
 800b780:	69e1      	ldr	r1, [r4, #28]
 800b782:	b111      	cbz	r1, 800b78a <_reclaim_reent+0x36>
 800b784:	4620      	mov	r0, r4
 800b786:	f000 f875 	bl	800b874 <_free_r>
 800b78a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b78c:	b111      	cbz	r1, 800b794 <_reclaim_reent+0x40>
 800b78e:	4620      	mov	r0, r4
 800b790:	f000 f870 	bl	800b874 <_free_r>
 800b794:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b796:	b111      	cbz	r1, 800b79e <_reclaim_reent+0x4a>
 800b798:	4620      	mov	r0, r4
 800b79a:	f000 f86b 	bl	800b874 <_free_r>
 800b79e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b7a0:	b111      	cbz	r1, 800b7a8 <_reclaim_reent+0x54>
 800b7a2:	4620      	mov	r0, r4
 800b7a4:	f000 f866 	bl	800b874 <_free_r>
 800b7a8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b7aa:	b111      	cbz	r1, 800b7b2 <_reclaim_reent+0x5e>
 800b7ac:	4620      	mov	r0, r4
 800b7ae:	f000 f861 	bl	800b874 <_free_r>
 800b7b2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b7b4:	b111      	cbz	r1, 800b7bc <_reclaim_reent+0x68>
 800b7b6:	4620      	mov	r0, r4
 800b7b8:	f000 f85c 	bl	800b874 <_free_r>
 800b7bc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b7be:	b111      	cbz	r1, 800b7c6 <_reclaim_reent+0x72>
 800b7c0:	4620      	mov	r0, r4
 800b7c2:	f000 f857 	bl	800b874 <_free_r>
 800b7c6:	6a23      	ldr	r3, [r4, #32]
 800b7c8:	b1b3      	cbz	r3, 800b7f8 <_reclaim_reent+0xa4>
 800b7ca:	4620      	mov	r0, r4
 800b7cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b7d0:	4718      	bx	r3
 800b7d2:	5949      	ldr	r1, [r1, r5]
 800b7d4:	b941      	cbnz	r1, 800b7e8 <_reclaim_reent+0x94>
 800b7d6:	3504      	adds	r5, #4
 800b7d8:	69e3      	ldr	r3, [r4, #28]
 800b7da:	2d80      	cmp	r5, #128	; 0x80
 800b7dc:	68d9      	ldr	r1, [r3, #12]
 800b7de:	d1f8      	bne.n	800b7d2 <_reclaim_reent+0x7e>
 800b7e0:	4620      	mov	r0, r4
 800b7e2:	f000 f847 	bl	800b874 <_free_r>
 800b7e6:	e7c0      	b.n	800b76a <_reclaim_reent+0x16>
 800b7e8:	680e      	ldr	r6, [r1, #0]
 800b7ea:	4620      	mov	r0, r4
 800b7ec:	f000 f842 	bl	800b874 <_free_r>
 800b7f0:	4631      	mov	r1, r6
 800b7f2:	e7ef      	b.n	800b7d4 <_reclaim_reent+0x80>
 800b7f4:	2500      	movs	r5, #0
 800b7f6:	e7ef      	b.n	800b7d8 <_reclaim_reent+0x84>
 800b7f8:	bd70      	pop	{r4, r5, r6, pc}
 800b7fa:	bf00      	nop
 800b7fc:	2000005c 	.word	0x2000005c

0800b800 <__errno>:
 800b800:	4b01      	ldr	r3, [pc, #4]	; (800b808 <__errno+0x8>)
 800b802:	6818      	ldr	r0, [r3, #0]
 800b804:	4770      	bx	lr
 800b806:	bf00      	nop
 800b808:	2000005c 	.word	0x2000005c

0800b80c <__libc_init_array>:
 800b80c:	b570      	push	{r4, r5, r6, lr}
 800b80e:	2600      	movs	r6, #0
 800b810:	4d0c      	ldr	r5, [pc, #48]	; (800b844 <__libc_init_array+0x38>)
 800b812:	4c0d      	ldr	r4, [pc, #52]	; (800b848 <__libc_init_array+0x3c>)
 800b814:	1b64      	subs	r4, r4, r5
 800b816:	10a4      	asrs	r4, r4, #2
 800b818:	42a6      	cmp	r6, r4
 800b81a:	d109      	bne.n	800b830 <__libc_init_array+0x24>
 800b81c:	f000 fc60 	bl	800c0e0 <_init>
 800b820:	2600      	movs	r6, #0
 800b822:	4d0a      	ldr	r5, [pc, #40]	; (800b84c <__libc_init_array+0x40>)
 800b824:	4c0a      	ldr	r4, [pc, #40]	; (800b850 <__libc_init_array+0x44>)
 800b826:	1b64      	subs	r4, r4, r5
 800b828:	10a4      	asrs	r4, r4, #2
 800b82a:	42a6      	cmp	r6, r4
 800b82c:	d105      	bne.n	800b83a <__libc_init_array+0x2e>
 800b82e:	bd70      	pop	{r4, r5, r6, pc}
 800b830:	f855 3b04 	ldr.w	r3, [r5], #4
 800b834:	4798      	blx	r3
 800b836:	3601      	adds	r6, #1
 800b838:	e7ee      	b.n	800b818 <__libc_init_array+0xc>
 800b83a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b83e:	4798      	blx	r3
 800b840:	3601      	adds	r6, #1
 800b842:	e7f2      	b.n	800b82a <__libc_init_array+0x1e>
 800b844:	0800c41c 	.word	0x0800c41c
 800b848:	0800c41c 	.word	0x0800c41c
 800b84c:	0800c41c 	.word	0x0800c41c
 800b850:	0800c420 	.word	0x0800c420

0800b854 <__retarget_lock_acquire_recursive>:
 800b854:	4770      	bx	lr

0800b856 <__retarget_lock_release_recursive>:
 800b856:	4770      	bx	lr

0800b858 <memcpy>:
 800b858:	440a      	add	r2, r1
 800b85a:	4291      	cmp	r1, r2
 800b85c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b860:	d100      	bne.n	800b864 <memcpy+0xc>
 800b862:	4770      	bx	lr
 800b864:	b510      	push	{r4, lr}
 800b866:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b86a:	4291      	cmp	r1, r2
 800b86c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b870:	d1f9      	bne.n	800b866 <memcpy+0xe>
 800b872:	bd10      	pop	{r4, pc}

0800b874 <_free_r>:
 800b874:	b538      	push	{r3, r4, r5, lr}
 800b876:	4605      	mov	r5, r0
 800b878:	2900      	cmp	r1, #0
 800b87a:	d040      	beq.n	800b8fe <_free_r+0x8a>
 800b87c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b880:	1f0c      	subs	r4, r1, #4
 800b882:	2b00      	cmp	r3, #0
 800b884:	bfb8      	it	lt
 800b886:	18e4      	addlt	r4, r4, r3
 800b888:	f000 f8dc 	bl	800ba44 <__malloc_lock>
 800b88c:	4a1c      	ldr	r2, [pc, #112]	; (800b900 <_free_r+0x8c>)
 800b88e:	6813      	ldr	r3, [r2, #0]
 800b890:	b933      	cbnz	r3, 800b8a0 <_free_r+0x2c>
 800b892:	6063      	str	r3, [r4, #4]
 800b894:	6014      	str	r4, [r2, #0]
 800b896:	4628      	mov	r0, r5
 800b898:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b89c:	f000 b8d8 	b.w	800ba50 <__malloc_unlock>
 800b8a0:	42a3      	cmp	r3, r4
 800b8a2:	d908      	bls.n	800b8b6 <_free_r+0x42>
 800b8a4:	6820      	ldr	r0, [r4, #0]
 800b8a6:	1821      	adds	r1, r4, r0
 800b8a8:	428b      	cmp	r3, r1
 800b8aa:	bf01      	itttt	eq
 800b8ac:	6819      	ldreq	r1, [r3, #0]
 800b8ae:	685b      	ldreq	r3, [r3, #4]
 800b8b0:	1809      	addeq	r1, r1, r0
 800b8b2:	6021      	streq	r1, [r4, #0]
 800b8b4:	e7ed      	b.n	800b892 <_free_r+0x1e>
 800b8b6:	461a      	mov	r2, r3
 800b8b8:	685b      	ldr	r3, [r3, #4]
 800b8ba:	b10b      	cbz	r3, 800b8c0 <_free_r+0x4c>
 800b8bc:	42a3      	cmp	r3, r4
 800b8be:	d9fa      	bls.n	800b8b6 <_free_r+0x42>
 800b8c0:	6811      	ldr	r1, [r2, #0]
 800b8c2:	1850      	adds	r0, r2, r1
 800b8c4:	42a0      	cmp	r0, r4
 800b8c6:	d10b      	bne.n	800b8e0 <_free_r+0x6c>
 800b8c8:	6820      	ldr	r0, [r4, #0]
 800b8ca:	4401      	add	r1, r0
 800b8cc:	1850      	adds	r0, r2, r1
 800b8ce:	4283      	cmp	r3, r0
 800b8d0:	6011      	str	r1, [r2, #0]
 800b8d2:	d1e0      	bne.n	800b896 <_free_r+0x22>
 800b8d4:	6818      	ldr	r0, [r3, #0]
 800b8d6:	685b      	ldr	r3, [r3, #4]
 800b8d8:	4408      	add	r0, r1
 800b8da:	6010      	str	r0, [r2, #0]
 800b8dc:	6053      	str	r3, [r2, #4]
 800b8de:	e7da      	b.n	800b896 <_free_r+0x22>
 800b8e0:	d902      	bls.n	800b8e8 <_free_r+0x74>
 800b8e2:	230c      	movs	r3, #12
 800b8e4:	602b      	str	r3, [r5, #0]
 800b8e6:	e7d6      	b.n	800b896 <_free_r+0x22>
 800b8e8:	6820      	ldr	r0, [r4, #0]
 800b8ea:	1821      	adds	r1, r4, r0
 800b8ec:	428b      	cmp	r3, r1
 800b8ee:	bf01      	itttt	eq
 800b8f0:	6819      	ldreq	r1, [r3, #0]
 800b8f2:	685b      	ldreq	r3, [r3, #4]
 800b8f4:	1809      	addeq	r1, r1, r0
 800b8f6:	6021      	streq	r1, [r4, #0]
 800b8f8:	6063      	str	r3, [r4, #4]
 800b8fa:	6054      	str	r4, [r2, #4]
 800b8fc:	e7cb      	b.n	800b896 <_free_r+0x22>
 800b8fe:	bd38      	pop	{r3, r4, r5, pc}
 800b900:	20002ff4 	.word	0x20002ff4

0800b904 <sbrk_aligned>:
 800b904:	b570      	push	{r4, r5, r6, lr}
 800b906:	4e0e      	ldr	r6, [pc, #56]	; (800b940 <sbrk_aligned+0x3c>)
 800b908:	460c      	mov	r4, r1
 800b90a:	6831      	ldr	r1, [r6, #0]
 800b90c:	4605      	mov	r5, r0
 800b90e:	b911      	cbnz	r1, 800b916 <sbrk_aligned+0x12>
 800b910:	f000 fb90 	bl	800c034 <_sbrk_r>
 800b914:	6030      	str	r0, [r6, #0]
 800b916:	4621      	mov	r1, r4
 800b918:	4628      	mov	r0, r5
 800b91a:	f000 fb8b 	bl	800c034 <_sbrk_r>
 800b91e:	1c43      	adds	r3, r0, #1
 800b920:	d00a      	beq.n	800b938 <sbrk_aligned+0x34>
 800b922:	1cc4      	adds	r4, r0, #3
 800b924:	f024 0403 	bic.w	r4, r4, #3
 800b928:	42a0      	cmp	r0, r4
 800b92a:	d007      	beq.n	800b93c <sbrk_aligned+0x38>
 800b92c:	1a21      	subs	r1, r4, r0
 800b92e:	4628      	mov	r0, r5
 800b930:	f000 fb80 	bl	800c034 <_sbrk_r>
 800b934:	3001      	adds	r0, #1
 800b936:	d101      	bne.n	800b93c <sbrk_aligned+0x38>
 800b938:	f04f 34ff 	mov.w	r4, #4294967295
 800b93c:	4620      	mov	r0, r4
 800b93e:	bd70      	pop	{r4, r5, r6, pc}
 800b940:	20002ff8 	.word	0x20002ff8

0800b944 <_malloc_r>:
 800b944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b948:	1ccd      	adds	r5, r1, #3
 800b94a:	f025 0503 	bic.w	r5, r5, #3
 800b94e:	3508      	adds	r5, #8
 800b950:	2d0c      	cmp	r5, #12
 800b952:	bf38      	it	cc
 800b954:	250c      	movcc	r5, #12
 800b956:	2d00      	cmp	r5, #0
 800b958:	4607      	mov	r7, r0
 800b95a:	db01      	blt.n	800b960 <_malloc_r+0x1c>
 800b95c:	42a9      	cmp	r1, r5
 800b95e:	d905      	bls.n	800b96c <_malloc_r+0x28>
 800b960:	230c      	movs	r3, #12
 800b962:	2600      	movs	r6, #0
 800b964:	603b      	str	r3, [r7, #0]
 800b966:	4630      	mov	r0, r6
 800b968:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b96c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ba40 <_malloc_r+0xfc>
 800b970:	f000 f868 	bl	800ba44 <__malloc_lock>
 800b974:	f8d8 3000 	ldr.w	r3, [r8]
 800b978:	461c      	mov	r4, r3
 800b97a:	bb5c      	cbnz	r4, 800b9d4 <_malloc_r+0x90>
 800b97c:	4629      	mov	r1, r5
 800b97e:	4638      	mov	r0, r7
 800b980:	f7ff ffc0 	bl	800b904 <sbrk_aligned>
 800b984:	1c43      	adds	r3, r0, #1
 800b986:	4604      	mov	r4, r0
 800b988:	d155      	bne.n	800ba36 <_malloc_r+0xf2>
 800b98a:	f8d8 4000 	ldr.w	r4, [r8]
 800b98e:	4626      	mov	r6, r4
 800b990:	2e00      	cmp	r6, #0
 800b992:	d145      	bne.n	800ba20 <_malloc_r+0xdc>
 800b994:	2c00      	cmp	r4, #0
 800b996:	d048      	beq.n	800ba2a <_malloc_r+0xe6>
 800b998:	6823      	ldr	r3, [r4, #0]
 800b99a:	4631      	mov	r1, r6
 800b99c:	4638      	mov	r0, r7
 800b99e:	eb04 0903 	add.w	r9, r4, r3
 800b9a2:	f000 fb47 	bl	800c034 <_sbrk_r>
 800b9a6:	4581      	cmp	r9, r0
 800b9a8:	d13f      	bne.n	800ba2a <_malloc_r+0xe6>
 800b9aa:	6821      	ldr	r1, [r4, #0]
 800b9ac:	4638      	mov	r0, r7
 800b9ae:	1a6d      	subs	r5, r5, r1
 800b9b0:	4629      	mov	r1, r5
 800b9b2:	f7ff ffa7 	bl	800b904 <sbrk_aligned>
 800b9b6:	3001      	adds	r0, #1
 800b9b8:	d037      	beq.n	800ba2a <_malloc_r+0xe6>
 800b9ba:	6823      	ldr	r3, [r4, #0]
 800b9bc:	442b      	add	r3, r5
 800b9be:	6023      	str	r3, [r4, #0]
 800b9c0:	f8d8 3000 	ldr.w	r3, [r8]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d038      	beq.n	800ba3a <_malloc_r+0xf6>
 800b9c8:	685a      	ldr	r2, [r3, #4]
 800b9ca:	42a2      	cmp	r2, r4
 800b9cc:	d12b      	bne.n	800ba26 <_malloc_r+0xe2>
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	605a      	str	r2, [r3, #4]
 800b9d2:	e00f      	b.n	800b9f4 <_malloc_r+0xb0>
 800b9d4:	6822      	ldr	r2, [r4, #0]
 800b9d6:	1b52      	subs	r2, r2, r5
 800b9d8:	d41f      	bmi.n	800ba1a <_malloc_r+0xd6>
 800b9da:	2a0b      	cmp	r2, #11
 800b9dc:	d917      	bls.n	800ba0e <_malloc_r+0xca>
 800b9de:	1961      	adds	r1, r4, r5
 800b9e0:	42a3      	cmp	r3, r4
 800b9e2:	6025      	str	r5, [r4, #0]
 800b9e4:	bf18      	it	ne
 800b9e6:	6059      	strne	r1, [r3, #4]
 800b9e8:	6863      	ldr	r3, [r4, #4]
 800b9ea:	bf08      	it	eq
 800b9ec:	f8c8 1000 	streq.w	r1, [r8]
 800b9f0:	5162      	str	r2, [r4, r5]
 800b9f2:	604b      	str	r3, [r1, #4]
 800b9f4:	4638      	mov	r0, r7
 800b9f6:	f104 060b 	add.w	r6, r4, #11
 800b9fa:	f000 f829 	bl	800ba50 <__malloc_unlock>
 800b9fe:	f026 0607 	bic.w	r6, r6, #7
 800ba02:	1d23      	adds	r3, r4, #4
 800ba04:	1af2      	subs	r2, r6, r3
 800ba06:	d0ae      	beq.n	800b966 <_malloc_r+0x22>
 800ba08:	1b9b      	subs	r3, r3, r6
 800ba0a:	50a3      	str	r3, [r4, r2]
 800ba0c:	e7ab      	b.n	800b966 <_malloc_r+0x22>
 800ba0e:	42a3      	cmp	r3, r4
 800ba10:	6862      	ldr	r2, [r4, #4]
 800ba12:	d1dd      	bne.n	800b9d0 <_malloc_r+0x8c>
 800ba14:	f8c8 2000 	str.w	r2, [r8]
 800ba18:	e7ec      	b.n	800b9f4 <_malloc_r+0xb0>
 800ba1a:	4623      	mov	r3, r4
 800ba1c:	6864      	ldr	r4, [r4, #4]
 800ba1e:	e7ac      	b.n	800b97a <_malloc_r+0x36>
 800ba20:	4634      	mov	r4, r6
 800ba22:	6876      	ldr	r6, [r6, #4]
 800ba24:	e7b4      	b.n	800b990 <_malloc_r+0x4c>
 800ba26:	4613      	mov	r3, r2
 800ba28:	e7cc      	b.n	800b9c4 <_malloc_r+0x80>
 800ba2a:	230c      	movs	r3, #12
 800ba2c:	4638      	mov	r0, r7
 800ba2e:	603b      	str	r3, [r7, #0]
 800ba30:	f000 f80e 	bl	800ba50 <__malloc_unlock>
 800ba34:	e797      	b.n	800b966 <_malloc_r+0x22>
 800ba36:	6025      	str	r5, [r4, #0]
 800ba38:	e7dc      	b.n	800b9f4 <_malloc_r+0xb0>
 800ba3a:	605b      	str	r3, [r3, #4]
 800ba3c:	deff      	udf	#255	; 0xff
 800ba3e:	bf00      	nop
 800ba40:	20002ff4 	.word	0x20002ff4

0800ba44 <__malloc_lock>:
 800ba44:	4801      	ldr	r0, [pc, #4]	; (800ba4c <__malloc_lock+0x8>)
 800ba46:	f7ff bf05 	b.w	800b854 <__retarget_lock_acquire_recursive>
 800ba4a:	bf00      	nop
 800ba4c:	20002ff0 	.word	0x20002ff0

0800ba50 <__malloc_unlock>:
 800ba50:	4801      	ldr	r0, [pc, #4]	; (800ba58 <__malloc_unlock+0x8>)
 800ba52:	f7ff bf00 	b.w	800b856 <__retarget_lock_release_recursive>
 800ba56:	bf00      	nop
 800ba58:	20002ff0 	.word	0x20002ff0

0800ba5c <__ssputs_r>:
 800ba5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba60:	461f      	mov	r7, r3
 800ba62:	688e      	ldr	r6, [r1, #8]
 800ba64:	4682      	mov	sl, r0
 800ba66:	42be      	cmp	r6, r7
 800ba68:	460c      	mov	r4, r1
 800ba6a:	4690      	mov	r8, r2
 800ba6c:	680b      	ldr	r3, [r1, #0]
 800ba6e:	d82c      	bhi.n	800baca <__ssputs_r+0x6e>
 800ba70:	898a      	ldrh	r2, [r1, #12]
 800ba72:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ba76:	d026      	beq.n	800bac6 <__ssputs_r+0x6a>
 800ba78:	6965      	ldr	r5, [r4, #20]
 800ba7a:	6909      	ldr	r1, [r1, #16]
 800ba7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ba80:	eba3 0901 	sub.w	r9, r3, r1
 800ba84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ba88:	1c7b      	adds	r3, r7, #1
 800ba8a:	444b      	add	r3, r9
 800ba8c:	106d      	asrs	r5, r5, #1
 800ba8e:	429d      	cmp	r5, r3
 800ba90:	bf38      	it	cc
 800ba92:	461d      	movcc	r5, r3
 800ba94:	0553      	lsls	r3, r2, #21
 800ba96:	d527      	bpl.n	800bae8 <__ssputs_r+0x8c>
 800ba98:	4629      	mov	r1, r5
 800ba9a:	f7ff ff53 	bl	800b944 <_malloc_r>
 800ba9e:	4606      	mov	r6, r0
 800baa0:	b360      	cbz	r0, 800bafc <__ssputs_r+0xa0>
 800baa2:	464a      	mov	r2, r9
 800baa4:	6921      	ldr	r1, [r4, #16]
 800baa6:	f7ff fed7 	bl	800b858 <memcpy>
 800baaa:	89a3      	ldrh	r3, [r4, #12]
 800baac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bab4:	81a3      	strh	r3, [r4, #12]
 800bab6:	6126      	str	r6, [r4, #16]
 800bab8:	444e      	add	r6, r9
 800baba:	6026      	str	r6, [r4, #0]
 800babc:	463e      	mov	r6, r7
 800babe:	6165      	str	r5, [r4, #20]
 800bac0:	eba5 0509 	sub.w	r5, r5, r9
 800bac4:	60a5      	str	r5, [r4, #8]
 800bac6:	42be      	cmp	r6, r7
 800bac8:	d900      	bls.n	800bacc <__ssputs_r+0x70>
 800baca:	463e      	mov	r6, r7
 800bacc:	4632      	mov	r2, r6
 800bace:	4641      	mov	r1, r8
 800bad0:	6820      	ldr	r0, [r4, #0]
 800bad2:	f7ff fe1d 	bl	800b710 <memmove>
 800bad6:	2000      	movs	r0, #0
 800bad8:	68a3      	ldr	r3, [r4, #8]
 800bada:	1b9b      	subs	r3, r3, r6
 800badc:	60a3      	str	r3, [r4, #8]
 800bade:	6823      	ldr	r3, [r4, #0]
 800bae0:	4433      	add	r3, r6
 800bae2:	6023      	str	r3, [r4, #0]
 800bae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bae8:	462a      	mov	r2, r5
 800baea:	f000 fac1 	bl	800c070 <_realloc_r>
 800baee:	4606      	mov	r6, r0
 800baf0:	2800      	cmp	r0, #0
 800baf2:	d1e0      	bne.n	800bab6 <__ssputs_r+0x5a>
 800baf4:	4650      	mov	r0, sl
 800baf6:	6921      	ldr	r1, [r4, #16]
 800baf8:	f7ff febc 	bl	800b874 <_free_r>
 800bafc:	230c      	movs	r3, #12
 800bafe:	f8ca 3000 	str.w	r3, [sl]
 800bb02:	89a3      	ldrh	r3, [r4, #12]
 800bb04:	f04f 30ff 	mov.w	r0, #4294967295
 800bb08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb0c:	81a3      	strh	r3, [r4, #12]
 800bb0e:	e7e9      	b.n	800bae4 <__ssputs_r+0x88>

0800bb10 <_svfiprintf_r>:
 800bb10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb14:	4698      	mov	r8, r3
 800bb16:	898b      	ldrh	r3, [r1, #12]
 800bb18:	4607      	mov	r7, r0
 800bb1a:	061b      	lsls	r3, r3, #24
 800bb1c:	460d      	mov	r5, r1
 800bb1e:	4614      	mov	r4, r2
 800bb20:	b09d      	sub	sp, #116	; 0x74
 800bb22:	d50e      	bpl.n	800bb42 <_svfiprintf_r+0x32>
 800bb24:	690b      	ldr	r3, [r1, #16]
 800bb26:	b963      	cbnz	r3, 800bb42 <_svfiprintf_r+0x32>
 800bb28:	2140      	movs	r1, #64	; 0x40
 800bb2a:	f7ff ff0b 	bl	800b944 <_malloc_r>
 800bb2e:	6028      	str	r0, [r5, #0]
 800bb30:	6128      	str	r0, [r5, #16]
 800bb32:	b920      	cbnz	r0, 800bb3e <_svfiprintf_r+0x2e>
 800bb34:	230c      	movs	r3, #12
 800bb36:	603b      	str	r3, [r7, #0]
 800bb38:	f04f 30ff 	mov.w	r0, #4294967295
 800bb3c:	e0d0      	b.n	800bce0 <_svfiprintf_r+0x1d0>
 800bb3e:	2340      	movs	r3, #64	; 0x40
 800bb40:	616b      	str	r3, [r5, #20]
 800bb42:	2300      	movs	r3, #0
 800bb44:	9309      	str	r3, [sp, #36]	; 0x24
 800bb46:	2320      	movs	r3, #32
 800bb48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bb4c:	2330      	movs	r3, #48	; 0x30
 800bb4e:	f04f 0901 	mov.w	r9, #1
 800bb52:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb56:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800bcf8 <_svfiprintf_r+0x1e8>
 800bb5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bb5e:	4623      	mov	r3, r4
 800bb60:	469a      	mov	sl, r3
 800bb62:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb66:	b10a      	cbz	r2, 800bb6c <_svfiprintf_r+0x5c>
 800bb68:	2a25      	cmp	r2, #37	; 0x25
 800bb6a:	d1f9      	bne.n	800bb60 <_svfiprintf_r+0x50>
 800bb6c:	ebba 0b04 	subs.w	fp, sl, r4
 800bb70:	d00b      	beq.n	800bb8a <_svfiprintf_r+0x7a>
 800bb72:	465b      	mov	r3, fp
 800bb74:	4622      	mov	r2, r4
 800bb76:	4629      	mov	r1, r5
 800bb78:	4638      	mov	r0, r7
 800bb7a:	f7ff ff6f 	bl	800ba5c <__ssputs_r>
 800bb7e:	3001      	adds	r0, #1
 800bb80:	f000 80a9 	beq.w	800bcd6 <_svfiprintf_r+0x1c6>
 800bb84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb86:	445a      	add	r2, fp
 800bb88:	9209      	str	r2, [sp, #36]	; 0x24
 800bb8a:	f89a 3000 	ldrb.w	r3, [sl]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	f000 80a1 	beq.w	800bcd6 <_svfiprintf_r+0x1c6>
 800bb94:	2300      	movs	r3, #0
 800bb96:	f04f 32ff 	mov.w	r2, #4294967295
 800bb9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb9e:	f10a 0a01 	add.w	sl, sl, #1
 800bba2:	9304      	str	r3, [sp, #16]
 800bba4:	9307      	str	r3, [sp, #28]
 800bba6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bbaa:	931a      	str	r3, [sp, #104]	; 0x68
 800bbac:	4654      	mov	r4, sl
 800bbae:	2205      	movs	r2, #5
 800bbb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbb4:	4850      	ldr	r0, [pc, #320]	; (800bcf8 <_svfiprintf_r+0x1e8>)
 800bbb6:	f000 fa4d 	bl	800c054 <memchr>
 800bbba:	9a04      	ldr	r2, [sp, #16]
 800bbbc:	b9d8      	cbnz	r0, 800bbf6 <_svfiprintf_r+0xe6>
 800bbbe:	06d0      	lsls	r0, r2, #27
 800bbc0:	bf44      	itt	mi
 800bbc2:	2320      	movmi	r3, #32
 800bbc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bbc8:	0711      	lsls	r1, r2, #28
 800bbca:	bf44      	itt	mi
 800bbcc:	232b      	movmi	r3, #43	; 0x2b
 800bbce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bbd2:	f89a 3000 	ldrb.w	r3, [sl]
 800bbd6:	2b2a      	cmp	r3, #42	; 0x2a
 800bbd8:	d015      	beq.n	800bc06 <_svfiprintf_r+0xf6>
 800bbda:	4654      	mov	r4, sl
 800bbdc:	2000      	movs	r0, #0
 800bbde:	f04f 0c0a 	mov.w	ip, #10
 800bbe2:	9a07      	ldr	r2, [sp, #28]
 800bbe4:	4621      	mov	r1, r4
 800bbe6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bbea:	3b30      	subs	r3, #48	; 0x30
 800bbec:	2b09      	cmp	r3, #9
 800bbee:	d94d      	bls.n	800bc8c <_svfiprintf_r+0x17c>
 800bbf0:	b1b0      	cbz	r0, 800bc20 <_svfiprintf_r+0x110>
 800bbf2:	9207      	str	r2, [sp, #28]
 800bbf4:	e014      	b.n	800bc20 <_svfiprintf_r+0x110>
 800bbf6:	eba0 0308 	sub.w	r3, r0, r8
 800bbfa:	fa09 f303 	lsl.w	r3, r9, r3
 800bbfe:	4313      	orrs	r3, r2
 800bc00:	46a2      	mov	sl, r4
 800bc02:	9304      	str	r3, [sp, #16]
 800bc04:	e7d2      	b.n	800bbac <_svfiprintf_r+0x9c>
 800bc06:	9b03      	ldr	r3, [sp, #12]
 800bc08:	1d19      	adds	r1, r3, #4
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	9103      	str	r1, [sp, #12]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	bfbb      	ittet	lt
 800bc12:	425b      	neglt	r3, r3
 800bc14:	f042 0202 	orrlt.w	r2, r2, #2
 800bc18:	9307      	strge	r3, [sp, #28]
 800bc1a:	9307      	strlt	r3, [sp, #28]
 800bc1c:	bfb8      	it	lt
 800bc1e:	9204      	strlt	r2, [sp, #16]
 800bc20:	7823      	ldrb	r3, [r4, #0]
 800bc22:	2b2e      	cmp	r3, #46	; 0x2e
 800bc24:	d10c      	bne.n	800bc40 <_svfiprintf_r+0x130>
 800bc26:	7863      	ldrb	r3, [r4, #1]
 800bc28:	2b2a      	cmp	r3, #42	; 0x2a
 800bc2a:	d134      	bne.n	800bc96 <_svfiprintf_r+0x186>
 800bc2c:	9b03      	ldr	r3, [sp, #12]
 800bc2e:	3402      	adds	r4, #2
 800bc30:	1d1a      	adds	r2, r3, #4
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	9203      	str	r2, [sp, #12]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	bfb8      	it	lt
 800bc3a:	f04f 33ff 	movlt.w	r3, #4294967295
 800bc3e:	9305      	str	r3, [sp, #20]
 800bc40:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800bcfc <_svfiprintf_r+0x1ec>
 800bc44:	2203      	movs	r2, #3
 800bc46:	4650      	mov	r0, sl
 800bc48:	7821      	ldrb	r1, [r4, #0]
 800bc4a:	f000 fa03 	bl	800c054 <memchr>
 800bc4e:	b138      	cbz	r0, 800bc60 <_svfiprintf_r+0x150>
 800bc50:	2240      	movs	r2, #64	; 0x40
 800bc52:	9b04      	ldr	r3, [sp, #16]
 800bc54:	eba0 000a 	sub.w	r0, r0, sl
 800bc58:	4082      	lsls	r2, r0
 800bc5a:	4313      	orrs	r3, r2
 800bc5c:	3401      	adds	r4, #1
 800bc5e:	9304      	str	r3, [sp, #16]
 800bc60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc64:	2206      	movs	r2, #6
 800bc66:	4826      	ldr	r0, [pc, #152]	; (800bd00 <_svfiprintf_r+0x1f0>)
 800bc68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bc6c:	f000 f9f2 	bl	800c054 <memchr>
 800bc70:	2800      	cmp	r0, #0
 800bc72:	d038      	beq.n	800bce6 <_svfiprintf_r+0x1d6>
 800bc74:	4b23      	ldr	r3, [pc, #140]	; (800bd04 <_svfiprintf_r+0x1f4>)
 800bc76:	bb1b      	cbnz	r3, 800bcc0 <_svfiprintf_r+0x1b0>
 800bc78:	9b03      	ldr	r3, [sp, #12]
 800bc7a:	3307      	adds	r3, #7
 800bc7c:	f023 0307 	bic.w	r3, r3, #7
 800bc80:	3308      	adds	r3, #8
 800bc82:	9303      	str	r3, [sp, #12]
 800bc84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc86:	4433      	add	r3, r6
 800bc88:	9309      	str	r3, [sp, #36]	; 0x24
 800bc8a:	e768      	b.n	800bb5e <_svfiprintf_r+0x4e>
 800bc8c:	460c      	mov	r4, r1
 800bc8e:	2001      	movs	r0, #1
 800bc90:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc94:	e7a6      	b.n	800bbe4 <_svfiprintf_r+0xd4>
 800bc96:	2300      	movs	r3, #0
 800bc98:	f04f 0c0a 	mov.w	ip, #10
 800bc9c:	4619      	mov	r1, r3
 800bc9e:	3401      	adds	r4, #1
 800bca0:	9305      	str	r3, [sp, #20]
 800bca2:	4620      	mov	r0, r4
 800bca4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bca8:	3a30      	subs	r2, #48	; 0x30
 800bcaa:	2a09      	cmp	r2, #9
 800bcac:	d903      	bls.n	800bcb6 <_svfiprintf_r+0x1a6>
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d0c6      	beq.n	800bc40 <_svfiprintf_r+0x130>
 800bcb2:	9105      	str	r1, [sp, #20]
 800bcb4:	e7c4      	b.n	800bc40 <_svfiprintf_r+0x130>
 800bcb6:	4604      	mov	r4, r0
 800bcb8:	2301      	movs	r3, #1
 800bcba:	fb0c 2101 	mla	r1, ip, r1, r2
 800bcbe:	e7f0      	b.n	800bca2 <_svfiprintf_r+0x192>
 800bcc0:	ab03      	add	r3, sp, #12
 800bcc2:	9300      	str	r3, [sp, #0]
 800bcc4:	462a      	mov	r2, r5
 800bcc6:	4638      	mov	r0, r7
 800bcc8:	4b0f      	ldr	r3, [pc, #60]	; (800bd08 <_svfiprintf_r+0x1f8>)
 800bcca:	a904      	add	r1, sp, #16
 800bccc:	f3af 8000 	nop.w
 800bcd0:	1c42      	adds	r2, r0, #1
 800bcd2:	4606      	mov	r6, r0
 800bcd4:	d1d6      	bne.n	800bc84 <_svfiprintf_r+0x174>
 800bcd6:	89ab      	ldrh	r3, [r5, #12]
 800bcd8:	065b      	lsls	r3, r3, #25
 800bcda:	f53f af2d 	bmi.w	800bb38 <_svfiprintf_r+0x28>
 800bcde:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bce0:	b01d      	add	sp, #116	; 0x74
 800bce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bce6:	ab03      	add	r3, sp, #12
 800bce8:	9300      	str	r3, [sp, #0]
 800bcea:	462a      	mov	r2, r5
 800bcec:	4638      	mov	r0, r7
 800bcee:	4b06      	ldr	r3, [pc, #24]	; (800bd08 <_svfiprintf_r+0x1f8>)
 800bcf0:	a904      	add	r1, sp, #16
 800bcf2:	f000 f87d 	bl	800bdf0 <_printf_i>
 800bcf6:	e7eb      	b.n	800bcd0 <_svfiprintf_r+0x1c0>
 800bcf8:	0800c3e8 	.word	0x0800c3e8
 800bcfc:	0800c3ee 	.word	0x0800c3ee
 800bd00:	0800c3f2 	.word	0x0800c3f2
 800bd04:	00000000 	.word	0x00000000
 800bd08:	0800ba5d 	.word	0x0800ba5d

0800bd0c <_printf_common>:
 800bd0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd10:	4616      	mov	r6, r2
 800bd12:	4699      	mov	r9, r3
 800bd14:	688a      	ldr	r2, [r1, #8]
 800bd16:	690b      	ldr	r3, [r1, #16]
 800bd18:	4607      	mov	r7, r0
 800bd1a:	4293      	cmp	r3, r2
 800bd1c:	bfb8      	it	lt
 800bd1e:	4613      	movlt	r3, r2
 800bd20:	6033      	str	r3, [r6, #0]
 800bd22:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bd26:	460c      	mov	r4, r1
 800bd28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bd2c:	b10a      	cbz	r2, 800bd32 <_printf_common+0x26>
 800bd2e:	3301      	adds	r3, #1
 800bd30:	6033      	str	r3, [r6, #0]
 800bd32:	6823      	ldr	r3, [r4, #0]
 800bd34:	0699      	lsls	r1, r3, #26
 800bd36:	bf42      	ittt	mi
 800bd38:	6833      	ldrmi	r3, [r6, #0]
 800bd3a:	3302      	addmi	r3, #2
 800bd3c:	6033      	strmi	r3, [r6, #0]
 800bd3e:	6825      	ldr	r5, [r4, #0]
 800bd40:	f015 0506 	ands.w	r5, r5, #6
 800bd44:	d106      	bne.n	800bd54 <_printf_common+0x48>
 800bd46:	f104 0a19 	add.w	sl, r4, #25
 800bd4a:	68e3      	ldr	r3, [r4, #12]
 800bd4c:	6832      	ldr	r2, [r6, #0]
 800bd4e:	1a9b      	subs	r3, r3, r2
 800bd50:	42ab      	cmp	r3, r5
 800bd52:	dc2b      	bgt.n	800bdac <_printf_common+0xa0>
 800bd54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bd58:	1e13      	subs	r3, r2, #0
 800bd5a:	6822      	ldr	r2, [r4, #0]
 800bd5c:	bf18      	it	ne
 800bd5e:	2301      	movne	r3, #1
 800bd60:	0692      	lsls	r2, r2, #26
 800bd62:	d430      	bmi.n	800bdc6 <_printf_common+0xba>
 800bd64:	4649      	mov	r1, r9
 800bd66:	4638      	mov	r0, r7
 800bd68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bd6c:	47c0      	blx	r8
 800bd6e:	3001      	adds	r0, #1
 800bd70:	d023      	beq.n	800bdba <_printf_common+0xae>
 800bd72:	6823      	ldr	r3, [r4, #0]
 800bd74:	6922      	ldr	r2, [r4, #16]
 800bd76:	f003 0306 	and.w	r3, r3, #6
 800bd7a:	2b04      	cmp	r3, #4
 800bd7c:	bf14      	ite	ne
 800bd7e:	2500      	movne	r5, #0
 800bd80:	6833      	ldreq	r3, [r6, #0]
 800bd82:	f04f 0600 	mov.w	r6, #0
 800bd86:	bf08      	it	eq
 800bd88:	68e5      	ldreq	r5, [r4, #12]
 800bd8a:	f104 041a 	add.w	r4, r4, #26
 800bd8e:	bf08      	it	eq
 800bd90:	1aed      	subeq	r5, r5, r3
 800bd92:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800bd96:	bf08      	it	eq
 800bd98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bd9c:	4293      	cmp	r3, r2
 800bd9e:	bfc4      	itt	gt
 800bda0:	1a9b      	subgt	r3, r3, r2
 800bda2:	18ed      	addgt	r5, r5, r3
 800bda4:	42b5      	cmp	r5, r6
 800bda6:	d11a      	bne.n	800bdde <_printf_common+0xd2>
 800bda8:	2000      	movs	r0, #0
 800bdaa:	e008      	b.n	800bdbe <_printf_common+0xb2>
 800bdac:	2301      	movs	r3, #1
 800bdae:	4652      	mov	r2, sl
 800bdb0:	4649      	mov	r1, r9
 800bdb2:	4638      	mov	r0, r7
 800bdb4:	47c0      	blx	r8
 800bdb6:	3001      	adds	r0, #1
 800bdb8:	d103      	bne.n	800bdc2 <_printf_common+0xb6>
 800bdba:	f04f 30ff 	mov.w	r0, #4294967295
 800bdbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdc2:	3501      	adds	r5, #1
 800bdc4:	e7c1      	b.n	800bd4a <_printf_common+0x3e>
 800bdc6:	2030      	movs	r0, #48	; 0x30
 800bdc8:	18e1      	adds	r1, r4, r3
 800bdca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bdce:	1c5a      	adds	r2, r3, #1
 800bdd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bdd4:	4422      	add	r2, r4
 800bdd6:	3302      	adds	r3, #2
 800bdd8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bddc:	e7c2      	b.n	800bd64 <_printf_common+0x58>
 800bdde:	2301      	movs	r3, #1
 800bde0:	4622      	mov	r2, r4
 800bde2:	4649      	mov	r1, r9
 800bde4:	4638      	mov	r0, r7
 800bde6:	47c0      	blx	r8
 800bde8:	3001      	adds	r0, #1
 800bdea:	d0e6      	beq.n	800bdba <_printf_common+0xae>
 800bdec:	3601      	adds	r6, #1
 800bdee:	e7d9      	b.n	800bda4 <_printf_common+0x98>

0800bdf0 <_printf_i>:
 800bdf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bdf4:	7e0f      	ldrb	r7, [r1, #24]
 800bdf6:	4691      	mov	r9, r2
 800bdf8:	2f78      	cmp	r7, #120	; 0x78
 800bdfa:	4680      	mov	r8, r0
 800bdfc:	460c      	mov	r4, r1
 800bdfe:	469a      	mov	sl, r3
 800be00:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800be02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800be06:	d807      	bhi.n	800be18 <_printf_i+0x28>
 800be08:	2f62      	cmp	r7, #98	; 0x62
 800be0a:	d80a      	bhi.n	800be22 <_printf_i+0x32>
 800be0c:	2f00      	cmp	r7, #0
 800be0e:	f000 80d5 	beq.w	800bfbc <_printf_i+0x1cc>
 800be12:	2f58      	cmp	r7, #88	; 0x58
 800be14:	f000 80c1 	beq.w	800bf9a <_printf_i+0x1aa>
 800be18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800be1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800be20:	e03a      	b.n	800be98 <_printf_i+0xa8>
 800be22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800be26:	2b15      	cmp	r3, #21
 800be28:	d8f6      	bhi.n	800be18 <_printf_i+0x28>
 800be2a:	a101      	add	r1, pc, #4	; (adr r1, 800be30 <_printf_i+0x40>)
 800be2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800be30:	0800be89 	.word	0x0800be89
 800be34:	0800be9d 	.word	0x0800be9d
 800be38:	0800be19 	.word	0x0800be19
 800be3c:	0800be19 	.word	0x0800be19
 800be40:	0800be19 	.word	0x0800be19
 800be44:	0800be19 	.word	0x0800be19
 800be48:	0800be9d 	.word	0x0800be9d
 800be4c:	0800be19 	.word	0x0800be19
 800be50:	0800be19 	.word	0x0800be19
 800be54:	0800be19 	.word	0x0800be19
 800be58:	0800be19 	.word	0x0800be19
 800be5c:	0800bfa3 	.word	0x0800bfa3
 800be60:	0800bec9 	.word	0x0800bec9
 800be64:	0800bf5d 	.word	0x0800bf5d
 800be68:	0800be19 	.word	0x0800be19
 800be6c:	0800be19 	.word	0x0800be19
 800be70:	0800bfc5 	.word	0x0800bfc5
 800be74:	0800be19 	.word	0x0800be19
 800be78:	0800bec9 	.word	0x0800bec9
 800be7c:	0800be19 	.word	0x0800be19
 800be80:	0800be19 	.word	0x0800be19
 800be84:	0800bf65 	.word	0x0800bf65
 800be88:	682b      	ldr	r3, [r5, #0]
 800be8a:	1d1a      	adds	r2, r3, #4
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	602a      	str	r2, [r5, #0]
 800be90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800be94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800be98:	2301      	movs	r3, #1
 800be9a:	e0a0      	b.n	800bfde <_printf_i+0x1ee>
 800be9c:	6820      	ldr	r0, [r4, #0]
 800be9e:	682b      	ldr	r3, [r5, #0]
 800bea0:	0607      	lsls	r7, r0, #24
 800bea2:	f103 0104 	add.w	r1, r3, #4
 800bea6:	6029      	str	r1, [r5, #0]
 800bea8:	d501      	bpl.n	800beae <_printf_i+0xbe>
 800beaa:	681e      	ldr	r6, [r3, #0]
 800beac:	e003      	b.n	800beb6 <_printf_i+0xc6>
 800beae:	0646      	lsls	r6, r0, #25
 800beb0:	d5fb      	bpl.n	800beaa <_printf_i+0xba>
 800beb2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800beb6:	2e00      	cmp	r6, #0
 800beb8:	da03      	bge.n	800bec2 <_printf_i+0xd2>
 800beba:	232d      	movs	r3, #45	; 0x2d
 800bebc:	4276      	negs	r6, r6
 800bebe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bec2:	230a      	movs	r3, #10
 800bec4:	4859      	ldr	r0, [pc, #356]	; (800c02c <_printf_i+0x23c>)
 800bec6:	e012      	b.n	800beee <_printf_i+0xfe>
 800bec8:	682b      	ldr	r3, [r5, #0]
 800beca:	6820      	ldr	r0, [r4, #0]
 800becc:	1d19      	adds	r1, r3, #4
 800bece:	6029      	str	r1, [r5, #0]
 800bed0:	0605      	lsls	r5, r0, #24
 800bed2:	d501      	bpl.n	800bed8 <_printf_i+0xe8>
 800bed4:	681e      	ldr	r6, [r3, #0]
 800bed6:	e002      	b.n	800bede <_printf_i+0xee>
 800bed8:	0641      	lsls	r1, r0, #25
 800beda:	d5fb      	bpl.n	800bed4 <_printf_i+0xe4>
 800bedc:	881e      	ldrh	r6, [r3, #0]
 800bede:	2f6f      	cmp	r7, #111	; 0x6f
 800bee0:	bf0c      	ite	eq
 800bee2:	2308      	moveq	r3, #8
 800bee4:	230a      	movne	r3, #10
 800bee6:	4851      	ldr	r0, [pc, #324]	; (800c02c <_printf_i+0x23c>)
 800bee8:	2100      	movs	r1, #0
 800beea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800beee:	6865      	ldr	r5, [r4, #4]
 800bef0:	2d00      	cmp	r5, #0
 800bef2:	bfa8      	it	ge
 800bef4:	6821      	ldrge	r1, [r4, #0]
 800bef6:	60a5      	str	r5, [r4, #8]
 800bef8:	bfa4      	itt	ge
 800befa:	f021 0104 	bicge.w	r1, r1, #4
 800befe:	6021      	strge	r1, [r4, #0]
 800bf00:	b90e      	cbnz	r6, 800bf06 <_printf_i+0x116>
 800bf02:	2d00      	cmp	r5, #0
 800bf04:	d04b      	beq.n	800bf9e <_printf_i+0x1ae>
 800bf06:	4615      	mov	r5, r2
 800bf08:	fbb6 f1f3 	udiv	r1, r6, r3
 800bf0c:	fb03 6711 	mls	r7, r3, r1, r6
 800bf10:	5dc7      	ldrb	r7, [r0, r7]
 800bf12:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bf16:	4637      	mov	r7, r6
 800bf18:	42bb      	cmp	r3, r7
 800bf1a:	460e      	mov	r6, r1
 800bf1c:	d9f4      	bls.n	800bf08 <_printf_i+0x118>
 800bf1e:	2b08      	cmp	r3, #8
 800bf20:	d10b      	bne.n	800bf3a <_printf_i+0x14a>
 800bf22:	6823      	ldr	r3, [r4, #0]
 800bf24:	07de      	lsls	r6, r3, #31
 800bf26:	d508      	bpl.n	800bf3a <_printf_i+0x14a>
 800bf28:	6923      	ldr	r3, [r4, #16]
 800bf2a:	6861      	ldr	r1, [r4, #4]
 800bf2c:	4299      	cmp	r1, r3
 800bf2e:	bfde      	ittt	le
 800bf30:	2330      	movle	r3, #48	; 0x30
 800bf32:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bf36:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bf3a:	1b52      	subs	r2, r2, r5
 800bf3c:	6122      	str	r2, [r4, #16]
 800bf3e:	464b      	mov	r3, r9
 800bf40:	4621      	mov	r1, r4
 800bf42:	4640      	mov	r0, r8
 800bf44:	f8cd a000 	str.w	sl, [sp]
 800bf48:	aa03      	add	r2, sp, #12
 800bf4a:	f7ff fedf 	bl	800bd0c <_printf_common>
 800bf4e:	3001      	adds	r0, #1
 800bf50:	d14a      	bne.n	800bfe8 <_printf_i+0x1f8>
 800bf52:	f04f 30ff 	mov.w	r0, #4294967295
 800bf56:	b004      	add	sp, #16
 800bf58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf5c:	6823      	ldr	r3, [r4, #0]
 800bf5e:	f043 0320 	orr.w	r3, r3, #32
 800bf62:	6023      	str	r3, [r4, #0]
 800bf64:	2778      	movs	r7, #120	; 0x78
 800bf66:	4832      	ldr	r0, [pc, #200]	; (800c030 <_printf_i+0x240>)
 800bf68:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bf6c:	6823      	ldr	r3, [r4, #0]
 800bf6e:	6829      	ldr	r1, [r5, #0]
 800bf70:	061f      	lsls	r7, r3, #24
 800bf72:	f851 6b04 	ldr.w	r6, [r1], #4
 800bf76:	d402      	bmi.n	800bf7e <_printf_i+0x18e>
 800bf78:	065f      	lsls	r7, r3, #25
 800bf7a:	bf48      	it	mi
 800bf7c:	b2b6      	uxthmi	r6, r6
 800bf7e:	07df      	lsls	r7, r3, #31
 800bf80:	bf48      	it	mi
 800bf82:	f043 0320 	orrmi.w	r3, r3, #32
 800bf86:	6029      	str	r1, [r5, #0]
 800bf88:	bf48      	it	mi
 800bf8a:	6023      	strmi	r3, [r4, #0]
 800bf8c:	b91e      	cbnz	r6, 800bf96 <_printf_i+0x1a6>
 800bf8e:	6823      	ldr	r3, [r4, #0]
 800bf90:	f023 0320 	bic.w	r3, r3, #32
 800bf94:	6023      	str	r3, [r4, #0]
 800bf96:	2310      	movs	r3, #16
 800bf98:	e7a6      	b.n	800bee8 <_printf_i+0xf8>
 800bf9a:	4824      	ldr	r0, [pc, #144]	; (800c02c <_printf_i+0x23c>)
 800bf9c:	e7e4      	b.n	800bf68 <_printf_i+0x178>
 800bf9e:	4615      	mov	r5, r2
 800bfa0:	e7bd      	b.n	800bf1e <_printf_i+0x12e>
 800bfa2:	682b      	ldr	r3, [r5, #0]
 800bfa4:	6826      	ldr	r6, [r4, #0]
 800bfa6:	1d18      	adds	r0, r3, #4
 800bfa8:	6961      	ldr	r1, [r4, #20]
 800bfaa:	6028      	str	r0, [r5, #0]
 800bfac:	0635      	lsls	r5, r6, #24
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	d501      	bpl.n	800bfb6 <_printf_i+0x1c6>
 800bfb2:	6019      	str	r1, [r3, #0]
 800bfb4:	e002      	b.n	800bfbc <_printf_i+0x1cc>
 800bfb6:	0670      	lsls	r0, r6, #25
 800bfb8:	d5fb      	bpl.n	800bfb2 <_printf_i+0x1c2>
 800bfba:	8019      	strh	r1, [r3, #0]
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	4615      	mov	r5, r2
 800bfc0:	6123      	str	r3, [r4, #16]
 800bfc2:	e7bc      	b.n	800bf3e <_printf_i+0x14e>
 800bfc4:	682b      	ldr	r3, [r5, #0]
 800bfc6:	2100      	movs	r1, #0
 800bfc8:	1d1a      	adds	r2, r3, #4
 800bfca:	602a      	str	r2, [r5, #0]
 800bfcc:	681d      	ldr	r5, [r3, #0]
 800bfce:	6862      	ldr	r2, [r4, #4]
 800bfd0:	4628      	mov	r0, r5
 800bfd2:	f000 f83f 	bl	800c054 <memchr>
 800bfd6:	b108      	cbz	r0, 800bfdc <_printf_i+0x1ec>
 800bfd8:	1b40      	subs	r0, r0, r5
 800bfda:	6060      	str	r0, [r4, #4]
 800bfdc:	6863      	ldr	r3, [r4, #4]
 800bfde:	6123      	str	r3, [r4, #16]
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bfe6:	e7aa      	b.n	800bf3e <_printf_i+0x14e>
 800bfe8:	462a      	mov	r2, r5
 800bfea:	4649      	mov	r1, r9
 800bfec:	4640      	mov	r0, r8
 800bfee:	6923      	ldr	r3, [r4, #16]
 800bff0:	47d0      	blx	sl
 800bff2:	3001      	adds	r0, #1
 800bff4:	d0ad      	beq.n	800bf52 <_printf_i+0x162>
 800bff6:	6823      	ldr	r3, [r4, #0]
 800bff8:	079b      	lsls	r3, r3, #30
 800bffa:	d413      	bmi.n	800c024 <_printf_i+0x234>
 800bffc:	68e0      	ldr	r0, [r4, #12]
 800bffe:	9b03      	ldr	r3, [sp, #12]
 800c000:	4298      	cmp	r0, r3
 800c002:	bfb8      	it	lt
 800c004:	4618      	movlt	r0, r3
 800c006:	e7a6      	b.n	800bf56 <_printf_i+0x166>
 800c008:	2301      	movs	r3, #1
 800c00a:	4632      	mov	r2, r6
 800c00c:	4649      	mov	r1, r9
 800c00e:	4640      	mov	r0, r8
 800c010:	47d0      	blx	sl
 800c012:	3001      	adds	r0, #1
 800c014:	d09d      	beq.n	800bf52 <_printf_i+0x162>
 800c016:	3501      	adds	r5, #1
 800c018:	68e3      	ldr	r3, [r4, #12]
 800c01a:	9903      	ldr	r1, [sp, #12]
 800c01c:	1a5b      	subs	r3, r3, r1
 800c01e:	42ab      	cmp	r3, r5
 800c020:	dcf2      	bgt.n	800c008 <_printf_i+0x218>
 800c022:	e7eb      	b.n	800bffc <_printf_i+0x20c>
 800c024:	2500      	movs	r5, #0
 800c026:	f104 0619 	add.w	r6, r4, #25
 800c02a:	e7f5      	b.n	800c018 <_printf_i+0x228>
 800c02c:	0800c3f9 	.word	0x0800c3f9
 800c030:	0800c40a 	.word	0x0800c40a

0800c034 <_sbrk_r>:
 800c034:	b538      	push	{r3, r4, r5, lr}
 800c036:	2300      	movs	r3, #0
 800c038:	4d05      	ldr	r5, [pc, #20]	; (800c050 <_sbrk_r+0x1c>)
 800c03a:	4604      	mov	r4, r0
 800c03c:	4608      	mov	r0, r1
 800c03e:	602b      	str	r3, [r5, #0]
 800c040:	f7f5 fbca 	bl	80017d8 <_sbrk>
 800c044:	1c43      	adds	r3, r0, #1
 800c046:	d102      	bne.n	800c04e <_sbrk_r+0x1a>
 800c048:	682b      	ldr	r3, [r5, #0]
 800c04a:	b103      	cbz	r3, 800c04e <_sbrk_r+0x1a>
 800c04c:	6023      	str	r3, [r4, #0]
 800c04e:	bd38      	pop	{r3, r4, r5, pc}
 800c050:	20002fec 	.word	0x20002fec

0800c054 <memchr>:
 800c054:	4603      	mov	r3, r0
 800c056:	b510      	push	{r4, lr}
 800c058:	b2c9      	uxtb	r1, r1
 800c05a:	4402      	add	r2, r0
 800c05c:	4293      	cmp	r3, r2
 800c05e:	4618      	mov	r0, r3
 800c060:	d101      	bne.n	800c066 <memchr+0x12>
 800c062:	2000      	movs	r0, #0
 800c064:	e003      	b.n	800c06e <memchr+0x1a>
 800c066:	7804      	ldrb	r4, [r0, #0]
 800c068:	3301      	adds	r3, #1
 800c06a:	428c      	cmp	r4, r1
 800c06c:	d1f6      	bne.n	800c05c <memchr+0x8>
 800c06e:	bd10      	pop	{r4, pc}

0800c070 <_realloc_r>:
 800c070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c074:	4680      	mov	r8, r0
 800c076:	4614      	mov	r4, r2
 800c078:	460e      	mov	r6, r1
 800c07a:	b921      	cbnz	r1, 800c086 <_realloc_r+0x16>
 800c07c:	4611      	mov	r1, r2
 800c07e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c082:	f7ff bc5f 	b.w	800b944 <_malloc_r>
 800c086:	b92a      	cbnz	r2, 800c094 <_realloc_r+0x24>
 800c088:	f7ff fbf4 	bl	800b874 <_free_r>
 800c08c:	4625      	mov	r5, r4
 800c08e:	4628      	mov	r0, r5
 800c090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c094:	f000 f81b 	bl	800c0ce <_malloc_usable_size_r>
 800c098:	4284      	cmp	r4, r0
 800c09a:	4607      	mov	r7, r0
 800c09c:	d802      	bhi.n	800c0a4 <_realloc_r+0x34>
 800c09e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c0a2:	d812      	bhi.n	800c0ca <_realloc_r+0x5a>
 800c0a4:	4621      	mov	r1, r4
 800c0a6:	4640      	mov	r0, r8
 800c0a8:	f7ff fc4c 	bl	800b944 <_malloc_r>
 800c0ac:	4605      	mov	r5, r0
 800c0ae:	2800      	cmp	r0, #0
 800c0b0:	d0ed      	beq.n	800c08e <_realloc_r+0x1e>
 800c0b2:	42bc      	cmp	r4, r7
 800c0b4:	4622      	mov	r2, r4
 800c0b6:	4631      	mov	r1, r6
 800c0b8:	bf28      	it	cs
 800c0ba:	463a      	movcs	r2, r7
 800c0bc:	f7ff fbcc 	bl	800b858 <memcpy>
 800c0c0:	4631      	mov	r1, r6
 800c0c2:	4640      	mov	r0, r8
 800c0c4:	f7ff fbd6 	bl	800b874 <_free_r>
 800c0c8:	e7e1      	b.n	800c08e <_realloc_r+0x1e>
 800c0ca:	4635      	mov	r5, r6
 800c0cc:	e7df      	b.n	800c08e <_realloc_r+0x1e>

0800c0ce <_malloc_usable_size_r>:
 800c0ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c0d2:	1f18      	subs	r0, r3, #4
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	bfbc      	itt	lt
 800c0d8:	580b      	ldrlt	r3, [r1, r0]
 800c0da:	18c0      	addlt	r0, r0, r3
 800c0dc:	4770      	bx	lr
	...

0800c0e0 <_init>:
 800c0e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0e2:	bf00      	nop
 800c0e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0e6:	bc08      	pop	{r3}
 800c0e8:	469e      	mov	lr, r3
 800c0ea:	4770      	bx	lr

0800c0ec <_fini>:
 800c0ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0ee:	bf00      	nop
 800c0f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0f2:	bc08      	pop	{r3}
 800c0f4:	469e      	mov	lr, r3
 800c0f6:	4770      	bx	lr
