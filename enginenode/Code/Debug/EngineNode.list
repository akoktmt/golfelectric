
EngineNode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b9f0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  0800bb00  0800bb00  0001bb00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bbf8  0800bbf8  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  0800bbf8  0800bbf8  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bbf8  0800bbf8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bbf8  0800bbf8  0001bbf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bbfc  0800bbfc  0001bbfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800bc00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002f44  20000078  0800bc78  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002fbc  0800bc78  00022fbc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002343f  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004fcd  00000000  00000000  00043523  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c60  00000000  00000000  000484f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000160b  00000000  00000000  0004a150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ce78  00000000  00000000  0004b75b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000240ba  00000000  00000000  000685d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009e428  00000000  00000000  0008c68d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007a68  00000000  00000000  0012aab8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00132520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	0800bae8 	.word	0x0800bae8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	0800bae8 	.word	0x0800bae8

08000150 <__aeabi_frsub>:
 8000150:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__addsf3>
 8000156:	bf00      	nop

08000158 <__aeabi_fsub>:
 8000158:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800015c <__addsf3>:
 800015c:	0042      	lsls	r2, r0, #1
 800015e:	bf1f      	itttt	ne
 8000160:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000164:	ea92 0f03 	teqne	r2, r3
 8000168:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800016c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000170:	d06a      	beq.n	8000248 <__addsf3+0xec>
 8000172:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000176:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800017a:	bfc1      	itttt	gt
 800017c:	18d2      	addgt	r2, r2, r3
 800017e:	4041      	eorgt	r1, r0
 8000180:	4048      	eorgt	r0, r1
 8000182:	4041      	eorgt	r1, r0
 8000184:	bfb8      	it	lt
 8000186:	425b      	neglt	r3, r3
 8000188:	2b19      	cmp	r3, #25
 800018a:	bf88      	it	hi
 800018c:	4770      	bxhi	lr
 800018e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000192:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000196:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800019a:	bf18      	it	ne
 800019c:	4240      	negne	r0, r0
 800019e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001a2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4249      	negne	r1, r1
 80001ae:	ea92 0f03 	teq	r2, r3
 80001b2:	d03f      	beq.n	8000234 <__addsf3+0xd8>
 80001b4:	f1a2 0201 	sub.w	r2, r2, #1
 80001b8:	fa41 fc03 	asr.w	ip, r1, r3
 80001bc:	eb10 000c 	adds.w	r0, r0, ip
 80001c0:	f1c3 0320 	rsb	r3, r3, #32
 80001c4:	fa01 f103 	lsl.w	r1, r1, r3
 80001c8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001cc:	d502      	bpl.n	80001d4 <__addsf3+0x78>
 80001ce:	4249      	negs	r1, r1
 80001d0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d8:	d313      	bcc.n	8000202 <__addsf3+0xa6>
 80001da:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001de:	d306      	bcc.n	80001ee <__addsf3+0x92>
 80001e0:	0840      	lsrs	r0, r0, #1
 80001e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e6:	f102 0201 	add.w	r2, r2, #1
 80001ea:	2afe      	cmp	r2, #254	; 0xfe
 80001ec:	d251      	bcs.n	8000292 <__addsf3+0x136>
 80001ee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f6:	bf08      	it	eq
 80001f8:	f020 0001 	biceq.w	r0, r0, #1
 80001fc:	ea40 0003 	orr.w	r0, r0, r3
 8000200:	4770      	bx	lr
 8000202:	0049      	lsls	r1, r1, #1
 8000204:	eb40 0000 	adc.w	r0, r0, r0
 8000208:	3a01      	subs	r2, #1
 800020a:	bf28      	it	cs
 800020c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000210:	d2ed      	bcs.n	80001ee <__addsf3+0x92>
 8000212:	fab0 fc80 	clz	ip, r0
 8000216:	f1ac 0c08 	sub.w	ip, ip, #8
 800021a:	ebb2 020c 	subs.w	r2, r2, ip
 800021e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000222:	bfaa      	itet	ge
 8000224:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000228:	4252      	neglt	r2, r2
 800022a:	4318      	orrge	r0, r3
 800022c:	bfbc      	itt	lt
 800022e:	40d0      	lsrlt	r0, r2
 8000230:	4318      	orrlt	r0, r3
 8000232:	4770      	bx	lr
 8000234:	f092 0f00 	teq	r2, #0
 8000238:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800023c:	bf06      	itte	eq
 800023e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000242:	3201      	addeq	r2, #1
 8000244:	3b01      	subne	r3, #1
 8000246:	e7b5      	b.n	80001b4 <__addsf3+0x58>
 8000248:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800024c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000250:	bf18      	it	ne
 8000252:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000256:	d021      	beq.n	800029c <__addsf3+0x140>
 8000258:	ea92 0f03 	teq	r2, r3
 800025c:	d004      	beq.n	8000268 <__addsf3+0x10c>
 800025e:	f092 0f00 	teq	r2, #0
 8000262:	bf08      	it	eq
 8000264:	4608      	moveq	r0, r1
 8000266:	4770      	bx	lr
 8000268:	ea90 0f01 	teq	r0, r1
 800026c:	bf1c      	itt	ne
 800026e:	2000      	movne	r0, #0
 8000270:	4770      	bxne	lr
 8000272:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000276:	d104      	bne.n	8000282 <__addsf3+0x126>
 8000278:	0040      	lsls	r0, r0, #1
 800027a:	bf28      	it	cs
 800027c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000280:	4770      	bx	lr
 8000282:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000286:	bf3c      	itt	cc
 8000288:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800028c:	4770      	bxcc	lr
 800028e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000292:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000296:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800029a:	4770      	bx	lr
 800029c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002a0:	bf16      	itet	ne
 80002a2:	4608      	movne	r0, r1
 80002a4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a8:	4601      	movne	r1, r0
 80002aa:	0242      	lsls	r2, r0, #9
 80002ac:	bf06      	itte	eq
 80002ae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002b2:	ea90 0f01 	teqeq	r0, r1
 80002b6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002ba:	4770      	bx	lr

080002bc <__aeabi_ui2f>:
 80002bc:	f04f 0300 	mov.w	r3, #0
 80002c0:	e004      	b.n	80002cc <__aeabi_i2f+0x8>
 80002c2:	bf00      	nop

080002c4 <__aeabi_i2f>:
 80002c4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c8:	bf48      	it	mi
 80002ca:	4240      	negmi	r0, r0
 80002cc:	ea5f 0c00 	movs.w	ip, r0
 80002d0:	bf08      	it	eq
 80002d2:	4770      	bxeq	lr
 80002d4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d8:	4601      	mov	r1, r0
 80002da:	f04f 0000 	mov.w	r0, #0
 80002de:	e01c      	b.n	800031a <__aeabi_l2f+0x2a>

080002e0 <__aeabi_ul2f>:
 80002e0:	ea50 0201 	orrs.w	r2, r0, r1
 80002e4:	bf08      	it	eq
 80002e6:	4770      	bxeq	lr
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e00a      	b.n	8000304 <__aeabi_l2f+0x14>
 80002ee:	bf00      	nop

080002f0 <__aeabi_l2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002fc:	d502      	bpl.n	8000304 <__aeabi_l2f+0x14>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	ea5f 0c01 	movs.w	ip, r1
 8000308:	bf02      	ittt	eq
 800030a:	4684      	moveq	ip, r0
 800030c:	4601      	moveq	r1, r0
 800030e:	2000      	moveq	r0, #0
 8000310:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000314:	bf08      	it	eq
 8000316:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800031a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031e:	fabc f28c 	clz	r2, ip
 8000322:	3a08      	subs	r2, #8
 8000324:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000328:	db10      	blt.n	800034c <__aeabi_l2f+0x5c>
 800032a:	fa01 fc02 	lsl.w	ip, r1, r2
 800032e:	4463      	add	r3, ip
 8000330:	fa00 fc02 	lsl.w	ip, r0, r2
 8000334:	f1c2 0220 	rsb	r2, r2, #32
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	fa20 f202 	lsr.w	r2, r0, r2
 8000340:	eb43 0002 	adc.w	r0, r3, r2
 8000344:	bf08      	it	eq
 8000346:	f020 0001 	biceq.w	r0, r0, #1
 800034a:	4770      	bx	lr
 800034c:	f102 0220 	add.w	r2, r2, #32
 8000350:	fa01 fc02 	lsl.w	ip, r1, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800035c:	fa21 f202 	lsr.w	r2, r1, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800036a:	4770      	bx	lr

0800036c <__aeabi_fmul>:
 800036c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000370:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000374:	bf1e      	ittt	ne
 8000376:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800037a:	ea92 0f0c 	teqne	r2, ip
 800037e:	ea93 0f0c 	teqne	r3, ip
 8000382:	d06f      	beq.n	8000464 <__aeabi_fmul+0xf8>
 8000384:	441a      	add	r2, r3
 8000386:	ea80 0c01 	eor.w	ip, r0, r1
 800038a:	0240      	lsls	r0, r0, #9
 800038c:	bf18      	it	ne
 800038e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000392:	d01e      	beq.n	80003d2 <__aeabi_fmul+0x66>
 8000394:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000398:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800039c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003a0:	fba0 3101 	umull	r3, r1, r0, r1
 80003a4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003ac:	bf3e      	ittt	cc
 80003ae:	0049      	lslcc	r1, r1, #1
 80003b0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b4:	005b      	lslcc	r3, r3, #1
 80003b6:	ea40 0001 	orr.w	r0, r0, r1
 80003ba:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003be:	2afd      	cmp	r2, #253	; 0xfd
 80003c0:	d81d      	bhi.n	80003fe <__aeabi_fmul+0x92>
 80003c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ca:	bf08      	it	eq
 80003cc:	f020 0001 	biceq.w	r0, r0, #1
 80003d0:	4770      	bx	lr
 80003d2:	f090 0f00 	teq	r0, #0
 80003d6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003da:	bf08      	it	eq
 80003dc:	0249      	lsleq	r1, r1, #9
 80003de:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003e2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e6:	3a7f      	subs	r2, #127	; 0x7f
 80003e8:	bfc2      	ittt	gt
 80003ea:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ee:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003f2:	4770      	bxgt	lr
 80003f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f8:	f04f 0300 	mov.w	r3, #0
 80003fc:	3a01      	subs	r2, #1
 80003fe:	dc5d      	bgt.n	80004bc <__aeabi_fmul+0x150>
 8000400:	f112 0f19 	cmn.w	r2, #25
 8000404:	bfdc      	itt	le
 8000406:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800040a:	4770      	bxle	lr
 800040c:	f1c2 0200 	rsb	r2, r2, #0
 8000410:	0041      	lsls	r1, r0, #1
 8000412:	fa21 f102 	lsr.w	r1, r1, r2
 8000416:	f1c2 0220 	rsb	r2, r2, #32
 800041a:	fa00 fc02 	lsl.w	ip, r0, r2
 800041e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000422:	f140 0000 	adc.w	r0, r0, #0
 8000426:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800042a:	bf08      	it	eq
 800042c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000430:	4770      	bx	lr
 8000432:	f092 0f00 	teq	r2, #0
 8000436:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800043a:	bf02      	ittt	eq
 800043c:	0040      	lsleq	r0, r0, #1
 800043e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000442:	3a01      	subeq	r2, #1
 8000444:	d0f9      	beq.n	800043a <__aeabi_fmul+0xce>
 8000446:	ea40 000c 	orr.w	r0, r0, ip
 800044a:	f093 0f00 	teq	r3, #0
 800044e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000452:	bf02      	ittt	eq
 8000454:	0049      	lsleq	r1, r1, #1
 8000456:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800045a:	3b01      	subeq	r3, #1
 800045c:	d0f9      	beq.n	8000452 <__aeabi_fmul+0xe6>
 800045e:	ea41 010c 	orr.w	r1, r1, ip
 8000462:	e78f      	b.n	8000384 <__aeabi_fmul+0x18>
 8000464:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000468:	ea92 0f0c 	teq	r2, ip
 800046c:	bf18      	it	ne
 800046e:	ea93 0f0c 	teqne	r3, ip
 8000472:	d00a      	beq.n	800048a <__aeabi_fmul+0x11e>
 8000474:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000478:	bf18      	it	ne
 800047a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047e:	d1d8      	bne.n	8000432 <__aeabi_fmul+0xc6>
 8000480:	ea80 0001 	eor.w	r0, r0, r1
 8000484:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000488:	4770      	bx	lr
 800048a:	f090 0f00 	teq	r0, #0
 800048e:	bf17      	itett	ne
 8000490:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000494:	4608      	moveq	r0, r1
 8000496:	f091 0f00 	teqne	r1, #0
 800049a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049e:	d014      	beq.n	80004ca <__aeabi_fmul+0x15e>
 80004a0:	ea92 0f0c 	teq	r2, ip
 80004a4:	d101      	bne.n	80004aa <__aeabi_fmul+0x13e>
 80004a6:	0242      	lsls	r2, r0, #9
 80004a8:	d10f      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004aa:	ea93 0f0c 	teq	r3, ip
 80004ae:	d103      	bne.n	80004b8 <__aeabi_fmul+0x14c>
 80004b0:	024b      	lsls	r3, r1, #9
 80004b2:	bf18      	it	ne
 80004b4:	4608      	movne	r0, r1
 80004b6:	d108      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004b8:	ea80 0001 	eor.w	r0, r0, r1
 80004bc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c8:	4770      	bx	lr
 80004ca:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ce:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004d2:	4770      	bx	lr

080004d4 <__aeabi_fdiv>:
 80004d4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004dc:	bf1e      	ittt	ne
 80004de:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004e2:	ea92 0f0c 	teqne	r2, ip
 80004e6:	ea93 0f0c 	teqne	r3, ip
 80004ea:	d069      	beq.n	80005c0 <__aeabi_fdiv+0xec>
 80004ec:	eba2 0203 	sub.w	r2, r2, r3
 80004f0:	ea80 0c01 	eor.w	ip, r0, r1
 80004f4:	0249      	lsls	r1, r1, #9
 80004f6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004fa:	d037      	beq.n	800056c <__aeabi_fdiv+0x98>
 80004fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000500:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000504:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000508:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800050c:	428b      	cmp	r3, r1
 800050e:	bf38      	it	cc
 8000510:	005b      	lslcc	r3, r3, #1
 8000512:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000516:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800051a:	428b      	cmp	r3, r1
 800051c:	bf24      	itt	cs
 800051e:	1a5b      	subcs	r3, r3, r1
 8000520:	ea40 000c 	orrcs.w	r0, r0, ip
 8000524:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000528:	bf24      	itt	cs
 800052a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000532:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000536:	bf24      	itt	cs
 8000538:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800053c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000540:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000544:	bf24      	itt	cs
 8000546:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800054a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054e:	011b      	lsls	r3, r3, #4
 8000550:	bf18      	it	ne
 8000552:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000556:	d1e0      	bne.n	800051a <__aeabi_fdiv+0x46>
 8000558:	2afd      	cmp	r2, #253	; 0xfd
 800055a:	f63f af50 	bhi.w	80003fe <__aeabi_fmul+0x92>
 800055e:	428b      	cmp	r3, r1
 8000560:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000564:	bf08      	it	eq
 8000566:	f020 0001 	biceq.w	r0, r0, #1
 800056a:	4770      	bx	lr
 800056c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000570:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000574:	327f      	adds	r2, #127	; 0x7f
 8000576:	bfc2      	ittt	gt
 8000578:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800057c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000580:	4770      	bxgt	lr
 8000582:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000586:	f04f 0300 	mov.w	r3, #0
 800058a:	3a01      	subs	r2, #1
 800058c:	e737      	b.n	80003fe <__aeabi_fmul+0x92>
 800058e:	f092 0f00 	teq	r2, #0
 8000592:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000596:	bf02      	ittt	eq
 8000598:	0040      	lsleq	r0, r0, #1
 800059a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059e:	3a01      	subeq	r2, #1
 80005a0:	d0f9      	beq.n	8000596 <__aeabi_fdiv+0xc2>
 80005a2:	ea40 000c 	orr.w	r0, r0, ip
 80005a6:	f093 0f00 	teq	r3, #0
 80005aa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ae:	bf02      	ittt	eq
 80005b0:	0049      	lsleq	r1, r1, #1
 80005b2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b6:	3b01      	subeq	r3, #1
 80005b8:	d0f9      	beq.n	80005ae <__aeabi_fdiv+0xda>
 80005ba:	ea41 010c 	orr.w	r1, r1, ip
 80005be:	e795      	b.n	80004ec <__aeabi_fdiv+0x18>
 80005c0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c4:	ea92 0f0c 	teq	r2, ip
 80005c8:	d108      	bne.n	80005dc <__aeabi_fdiv+0x108>
 80005ca:	0242      	lsls	r2, r0, #9
 80005cc:	f47f af7d 	bne.w	80004ca <__aeabi_fmul+0x15e>
 80005d0:	ea93 0f0c 	teq	r3, ip
 80005d4:	f47f af70 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 80005d8:	4608      	mov	r0, r1
 80005da:	e776      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	d104      	bne.n	80005ec <__aeabi_fdiv+0x118>
 80005e2:	024b      	lsls	r3, r1, #9
 80005e4:	f43f af4c 	beq.w	8000480 <__aeabi_fmul+0x114>
 80005e8:	4608      	mov	r0, r1
 80005ea:	e76e      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005ec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005f0:	bf18      	it	ne
 80005f2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f6:	d1ca      	bne.n	800058e <__aeabi_fdiv+0xba>
 80005f8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005fc:	f47f af5c 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 8000600:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000604:	f47f af3c 	bne.w	8000480 <__aeabi_fmul+0x114>
 8000608:	e75f      	b.n	80004ca <__aeabi_fmul+0x15e>
 800060a:	bf00      	nop

0800060c <__gesf2>:
 800060c:	f04f 3cff 	mov.w	ip, #4294967295
 8000610:	e006      	b.n	8000620 <__cmpsf2+0x4>
 8000612:	bf00      	nop

08000614 <__lesf2>:
 8000614:	f04f 0c01 	mov.w	ip, #1
 8000618:	e002      	b.n	8000620 <__cmpsf2+0x4>
 800061a:	bf00      	nop

0800061c <__cmpsf2>:
 800061c:	f04f 0c01 	mov.w	ip, #1
 8000620:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000624:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000628:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800062c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000630:	bf18      	it	ne
 8000632:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000636:	d011      	beq.n	800065c <__cmpsf2+0x40>
 8000638:	b001      	add	sp, #4
 800063a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063e:	bf18      	it	ne
 8000640:	ea90 0f01 	teqne	r0, r1
 8000644:	bf58      	it	pl
 8000646:	ebb2 0003 	subspl.w	r0, r2, r3
 800064a:	bf88      	it	hi
 800064c:	17c8      	asrhi	r0, r1, #31
 800064e:	bf38      	it	cc
 8000650:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000654:	bf18      	it	ne
 8000656:	f040 0001 	orrne.w	r0, r0, #1
 800065a:	4770      	bx	lr
 800065c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000660:	d102      	bne.n	8000668 <__cmpsf2+0x4c>
 8000662:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000666:	d105      	bne.n	8000674 <__cmpsf2+0x58>
 8000668:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800066c:	d1e4      	bne.n	8000638 <__cmpsf2+0x1c>
 800066e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000672:	d0e1      	beq.n	8000638 <__cmpsf2+0x1c>
 8000674:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop

0800067c <__aeabi_cfrcmple>:
 800067c:	4684      	mov	ip, r0
 800067e:	4608      	mov	r0, r1
 8000680:	4661      	mov	r1, ip
 8000682:	e7ff      	b.n	8000684 <__aeabi_cfcmpeq>

08000684 <__aeabi_cfcmpeq>:
 8000684:	b50f      	push	{r0, r1, r2, r3, lr}
 8000686:	f7ff ffc9 	bl	800061c <__cmpsf2>
 800068a:	2800      	cmp	r0, #0
 800068c:	bf48      	it	mi
 800068e:	f110 0f00 	cmnmi.w	r0, #0
 8000692:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000694 <__aeabi_fcmpeq>:
 8000694:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000698:	f7ff fff4 	bl	8000684 <__aeabi_cfcmpeq>
 800069c:	bf0c      	ite	eq
 800069e:	2001      	moveq	r0, #1
 80006a0:	2000      	movne	r0, #0
 80006a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a6:	bf00      	nop

080006a8 <__aeabi_fcmplt>:
 80006a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006ac:	f7ff ffea 	bl	8000684 <__aeabi_cfcmpeq>
 80006b0:	bf34      	ite	cc
 80006b2:	2001      	movcc	r0, #1
 80006b4:	2000      	movcs	r0, #0
 80006b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ba:	bf00      	nop

080006bc <__aeabi_fcmple>:
 80006bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006c0:	f7ff ffe0 	bl	8000684 <__aeabi_cfcmpeq>
 80006c4:	bf94      	ite	ls
 80006c6:	2001      	movls	r0, #1
 80006c8:	2000      	movhi	r0, #0
 80006ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ce:	bf00      	nop

080006d0 <__aeabi_fcmpge>:
 80006d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d4:	f7ff ffd2 	bl	800067c <__aeabi_cfrcmple>
 80006d8:	bf94      	ite	ls
 80006da:	2001      	movls	r0, #1
 80006dc:	2000      	movhi	r0, #0
 80006de:	f85d fb08 	ldr.w	pc, [sp], #8
 80006e2:	bf00      	nop

080006e4 <__aeabi_fcmpgt>:
 80006e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e8:	f7ff ffc8 	bl	800067c <__aeabi_cfrcmple>
 80006ec:	bf34      	ite	cc
 80006ee:	2001      	movcc	r0, #1
 80006f0:	2000      	movcs	r0, #0
 80006f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f6:	bf00      	nop

080006f8 <__aeabi_f2iz>:
 80006f8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006fc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000700:	d30f      	bcc.n	8000722 <__aeabi_f2iz+0x2a>
 8000702:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000706:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800070a:	d90d      	bls.n	8000728 <__aeabi_f2iz+0x30>
 800070c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000710:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000714:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000718:	fa23 f002 	lsr.w	r0, r3, r2
 800071c:	bf18      	it	ne
 800071e:	4240      	negne	r0, r0
 8000720:	4770      	bx	lr
 8000722:	f04f 0000 	mov.w	r0, #0
 8000726:	4770      	bx	lr
 8000728:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800072c:	d101      	bne.n	8000732 <__aeabi_f2iz+0x3a>
 800072e:	0242      	lsls	r2, r0, #9
 8000730:	d105      	bne.n	800073e <__aeabi_f2iz+0x46>
 8000732:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000736:	bf08      	it	eq
 8000738:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800073c:	4770      	bx	lr
 800073e:	f04f 0000 	mov.w	r0, #0
 8000742:	4770      	bx	lr

08000744 <CAN_Config_filtering>:
	else{
		 return HAL_OK;
	}
}
void CAN_Config_filtering(uint8_t FilterBank, uint16_t NodeID)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b08c      	sub	sp, #48	; 0x30
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	460a      	mov	r2, r1
 800074e:	71fb      	strb	r3, [r7, #7]
 8000750:	4613      	mov	r3, r2
 8000752:	80bb      	strh	r3, [r7, #4]
	CAN_FilterTypeDef Can_filter_init;
	Can_filter_init.FilterActivation=ENABLE;
 8000754:	2301      	movs	r3, #1
 8000756:	62bb      	str	r3, [r7, #40]	; 0x28
	Can_filter_init.FilterBank=FilterBank;
 8000758:	79fb      	ldrb	r3, [r7, #7]
 800075a:	61fb      	str	r3, [r7, #28]
	Can_filter_init.FilterFIFOAssignment=CAN_RX_FIFO0;
 800075c:	2300      	movs	r3, #0
 800075e:	61bb      	str	r3, [r7, #24]
	Can_filter_init.FilterIdHigh=(NodeID << 5) & 0xFFFF;;
 8000760:	88bb      	ldrh	r3, [r7, #4]
 8000762:	015b      	lsls	r3, r3, #5
 8000764:	b29b      	uxth	r3, r3
 8000766:	60bb      	str	r3, [r7, #8]
	Can_filter_init.FilterIdLow= 0x0000;
 8000768:	2300      	movs	r3, #0
 800076a:	60fb      	str	r3, [r7, #12]
	Can_filter_init.FilterMaskIdHigh= 0xFFF8;
 800076c:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000770:	613b      	str	r3, [r7, #16]
	Can_filter_init.FilterMaskIdLow= 0x0000;
 8000772:	2300      	movs	r3, #0
 8000774:	617b      	str	r3, [r7, #20]
	Can_filter_init.FilterMode=CAN_FILTERMODE_IDMASK;
 8000776:	2300      	movs	r3, #0
 8000778:	623b      	str	r3, [r7, #32]
	Can_filter_init.FilterScale=CAN_FILTERSCALE_32BIT;
 800077a:	2301      	movs	r3, #1
 800077c:	627b      	str	r3, [r7, #36]	; 0x24
	if(HAL_CAN_ConfigFilter(&hcan,&Can_filter_init)!=HAL_OK)
 800077e:	f107 0308 	add.w	r3, r7, #8
 8000782:	4619      	mov	r1, r3
 8000784:	4805      	ldr	r0, [pc, #20]	; (800079c <CAN_Config_filtering+0x58>)
 8000786:	f001 f9ef 	bl	8001b68 <HAL_CAN_ConfigFilter>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <CAN_Config_filtering+0x50>
	{
		Error_Handler();
 8000790:	f000 fc5c 	bl	800104c <Error_Handler>
	}
}
 8000794:	bf00      	nop
 8000796:	3730      	adds	r7, #48	; 0x30
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	200000bc 	.word	0x200000bc

080007a0 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback (CAN_HandleTypeDef *hcan){
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &Rxheader, rcdata)==HAL_OK){
 80007a8:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80007aa:	4a0a      	ldr	r2, [pc, #40]	; (80007d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 80007ac:	2100      	movs	r1, #0
 80007ae:	6878      	ldr	r0, [r7, #4]
 80007b0:	f001 fae7 	bl	8001d82 <HAL_CAN_GetRxMessage>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d103      	bne.n	80007c2 <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
		Can_RecFlag=1;
 80007ba:	4b07      	ldr	r3, [pc, #28]	; (80007d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 80007bc:	2201      	movs	r2, #1
 80007be:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		Can_RecFlag=0;
	}
}
 80007c0:	e002      	b.n	80007c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
		Can_RecFlag=0;
 80007c2:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	701a      	strb	r2, [r3, #0]
}
 80007c8:	bf00      	nop
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	200000b0 	.word	0x200000b0
 80007d4:	20000094 	.word	0x20000094
 80007d8:	200000b8 	.word	0x200000b8

080007dc <HAL_CAN_RxFifo1MsgPendingCallback>:
void HAL_CAN_RxFifo1MsgPendingCallback (CAN_HandleTypeDef *hcan){
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &Rxheader, rcdata)==HAL_OK){
 80007e4:	4b09      	ldr	r3, [pc, #36]	; (800080c <HAL_CAN_RxFifo1MsgPendingCallback+0x30>)
 80007e6:	4a0a      	ldr	r2, [pc, #40]	; (8000810 <HAL_CAN_RxFifo1MsgPendingCallback+0x34>)
 80007e8:	2101      	movs	r1, #1
 80007ea:	6878      	ldr	r0, [r7, #4]
 80007ec:	f001 fac9 	bl	8001d82 <HAL_CAN_GetRxMessage>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d103      	bne.n	80007fe <HAL_CAN_RxFifo1MsgPendingCallback+0x22>
		Can_RecFlag=1;
 80007f6:	4b07      	ldr	r3, [pc, #28]	; (8000814 <HAL_CAN_RxFifo1MsgPendingCallback+0x38>)
 80007f8:	2201      	movs	r2, #1
 80007fa:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		Can_RecFlag=0;
	}
}
 80007fc:	e002      	b.n	8000804 <HAL_CAN_RxFifo1MsgPendingCallback+0x28>
		Can_RecFlag=0;
 80007fe:	4b05      	ldr	r3, [pc, #20]	; (8000814 <HAL_CAN_RxFifo1MsgPendingCallback+0x38>)
 8000800:	2200      	movs	r2, #0
 8000802:	701a      	strb	r2, [r3, #0]
}
 8000804:	bf00      	nop
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	200000b0 	.word	0x200000b0
 8000810:	20000094 	.word	0x20000094
 8000814:	200000b8 	.word	0x200000b8

08000818 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800081c:	f001 f82c 	bl	8001878 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000820:	f000 f83e 	bl	80008a0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000824:	f000 fa16 	bl	8000c54 <MX_GPIO_Init>
	MX_DMA_Init();
 8000828:	f000 f9ba 	bl	8000ba0 <MX_DMA_Init>
	MX_CAN_Init();
 800082c:	f000 f87e 	bl	800092c <MX_CAN_Init>
	MX_I2C1_Init();
 8000830:	f000 f8b2 	bl	8000998 <MX_I2C1_Init>
	MX_TIM2_Init();
 8000834:	f000 f8de 	bl	80009f4 <MX_TIM2_Init>
	MX_TIM3_Init();
 8000838:	f000 f934 	bl	8000aa4 <MX_TIM3_Init>
	MX_USART1_UART_Init();
 800083c:	f000 f986 	bl	8000b4c <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
//  HAL_GPIO_WritePin(Engine_Brake_GPIO_Port, Engine_Brake_Pin, 0);
//  HAL_GPIO_WritePin(Engine_Brake_GPIO_Port, Engine_Brake_Pin, 1);
	CAN_Config_filtering(0, 0x112);
 8000840:	f44f 7189 	mov.w	r1, #274	; 0x112
 8000844:	2000      	movs	r0, #0
 8000846:	f7ff ff7d 	bl	8000744 <CAN_Config_filtering>
	if (HAL_CAN_ActivateNotification(&hcan,
 800084a:	2113      	movs	r1, #19
 800084c:	4810      	ldr	r0, [pc, #64]	; (8000890 <main+0x78>)
 800084e:	f001 fbb9 	bl	8001fc4 <HAL_CAN_ActivateNotification>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d002      	beq.n	800085e <main+0x46>
			CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING
					| CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK) {
		HAL_CAN_ResetError(&hcan);
 8000858:	480d      	ldr	r0, [pc, #52]	; (8000890 <main+0x78>)
 800085a:	f001 fe00 	bl	800245e <HAL_CAN_ResetError>
	}
	if (HAL_CAN_Start(&hcan) != HAL_OK) {
 800085e:	480c      	ldr	r0, [pc, #48]	; (8000890 <main+0x78>)
 8000860:	f001 fa4b 	bl	8001cfa <HAL_CAN_Start>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d002      	beq.n	8000870 <main+0x58>
		HAL_CAN_ResetError(&hcan);
 800086a:	4809      	ldr	r0, [pc, #36]	; (8000890 <main+0x78>)
 800086c:	f001 fdf7 	bl	800245e <HAL_CAN_ResetError>
	}
	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8000870:	f005 fea6 	bl	80065c0 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of tDefault */
	tDefaultHandle = osThreadNew(StartDefaultTask, NULL, &tDefault_attributes);
 8000874:	4a07      	ldr	r2, [pc, #28]	; (8000894 <main+0x7c>)
 8000876:	2100      	movs	r1, #0
 8000878:	4807      	ldr	r0, [pc, #28]	; (8000898 <main+0x80>)
 800087a:	f005 ff2f 	bl	80066dc <osThreadNew>
 800087e:	4603      	mov	r3, r0
 8000880:	4a06      	ldr	r2, [pc, #24]	; (800089c <main+0x84>)
 8000882:	6013      	str	r3, [r2, #0]
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	SyncPrintf_Init();
 8000884:	f00b f830 	bl	800b8e8 <SyncPrintf_Init>

	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8000888:	f005 fecc 	bl	8006624 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800088c:	e7fe      	b.n	800088c <main+0x74>
 800088e:	bf00      	nop
 8000890:	200000bc 	.word	0x200000bc
 8000894:	0800bb50 	.word	0x0800bb50
 8000898:	08000dd5 	.word	0x08000dd5
 800089c:	200003a0 	.word	0x200003a0

080008a0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b090      	sub	sp, #64	; 0x40
 80008a4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80008a6:	f107 0318 	add.w	r3, r7, #24
 80008aa:	2228      	movs	r2, #40	; 0x28
 80008ac:	2100      	movs	r1, #0
 80008ae:	4618      	mov	r0, r3
 80008b0:	f00b f842 	bl	800b938 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80008b4:	1d3b      	adds	r3, r7, #4
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]
 80008be:	60da      	str	r2, [r3, #12]
 80008c0:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008c2:	2301      	movs	r3, #1
 80008c4:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008ca:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80008cc:	2300      	movs	r3, #0
 80008ce:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008d0:	2301      	movs	r3, #1
 80008d2:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008d4:	2302      	movs	r3, #2
 80008d6:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008dc:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80008de:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80008e2:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80008e4:	f107 0318 	add.w	r3, r7, #24
 80008e8:	4618      	mov	r0, r3
 80008ea:	f004 f97b 	bl	8004be4 <HAL_RCC_OscConfig>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <SystemClock_Config+0x58>
		Error_Handler();
 80008f4:	f000 fbaa 	bl	800104c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80008f8:	230f      	movs	r3, #15
 80008fa:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008fc:	2302      	movs	r3, #2
 80008fe:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000900:	2300      	movs	r3, #0
 8000902:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000904:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000908:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800090a:	2300      	movs	r3, #0
 800090c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	2102      	movs	r1, #2
 8000912:	4618      	mov	r0, r3
 8000914:	f004 fbe8 	bl	80050e8 <HAL_RCC_ClockConfig>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <SystemClock_Config+0x82>
		Error_Handler();
 800091e:	f000 fb95 	bl	800104c <Error_Handler>
	}
}
 8000922:	bf00      	nop
 8000924:	3740      	adds	r7, #64	; 0x40
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
	...

0800092c <MX_CAN_Init>:
/**
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void) {
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
	/* USER CODE END CAN_Init 0 */

	/* USER CODE BEGIN CAN_Init 1 */

	/* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN1;
 8000930:	4b17      	ldr	r3, [pc, #92]	; (8000990 <MX_CAN_Init+0x64>)
 8000932:	4a18      	ldr	r2, [pc, #96]	; (8000994 <MX_CAN_Init+0x68>)
 8000934:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 4;
 8000936:	4b16      	ldr	r3, [pc, #88]	; (8000990 <MX_CAN_Init+0x64>)
 8000938:	2204      	movs	r2, #4
 800093a:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 800093c:	4b14      	ldr	r3, [pc, #80]	; (8000990 <MX_CAN_Init+0x64>)
 800093e:	2200      	movs	r2, #0
 8000940:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000942:	4b13      	ldr	r3, [pc, #76]	; (8000990 <MX_CAN_Init+0x64>)
 8000944:	2200      	movs	r2, #0
 8000946:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000948:	4b11      	ldr	r3, [pc, #68]	; (8000990 <MX_CAN_Init+0x64>)
 800094a:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 800094e:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000950:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <MX_CAN_Init+0x64>)
 8000952:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000956:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 8000958:	4b0d      	ldr	r3, [pc, #52]	; (8000990 <MX_CAN_Init+0x64>)
 800095a:	2200      	movs	r2, #0
 800095c:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 800095e:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <MX_CAN_Init+0x64>)
 8000960:	2200      	movs	r2, #0
 8000962:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 8000964:	4b0a      	ldr	r3, [pc, #40]	; (8000990 <MX_CAN_Init+0x64>)
 8000966:	2200      	movs	r2, #0
 8000968:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 800096a:	4b09      	ldr	r3, [pc, #36]	; (8000990 <MX_CAN_Init+0x64>)
 800096c:	2200      	movs	r2, #0
 800096e:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 8000970:	4b07      	ldr	r3, [pc, #28]	; (8000990 <MX_CAN_Init+0x64>)
 8000972:	2200      	movs	r2, #0
 8000974:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = ENABLE;
 8000976:	4b06      	ldr	r3, [pc, #24]	; (8000990 <MX_CAN_Init+0x64>)
 8000978:	2201      	movs	r2, #1
 800097a:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK) {
 800097c:	4804      	ldr	r0, [pc, #16]	; (8000990 <MX_CAN_Init+0x64>)
 800097e:	f000 ffad 	bl	80018dc <HAL_CAN_Init>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_CAN_Init+0x60>
		Error_Handler();
 8000988:	f000 fb60 	bl	800104c <Error_Handler>
	}
	/* USER CODE BEGIN CAN_Init 2 */

	/* USER CODE END CAN_Init 2 */

}
 800098c:	bf00      	nop
 800098e:	bd80      	pop	{r7, pc}
 8000990:	200000bc 	.word	0x200000bc
 8000994:	40006400 	.word	0x40006400

08000998 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800099c:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <MX_I2C1_Init+0x50>)
 800099e:	4a13      	ldr	r2, [pc, #76]	; (80009ec <MX_I2C1_Init+0x54>)
 80009a0:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 80009a2:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <MX_I2C1_Init+0x50>)
 80009a4:	4a12      	ldr	r2, [pc, #72]	; (80009f0 <MX_I2C1_Init+0x58>)
 80009a6:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009a8:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <MX_I2C1_Init+0x50>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80009ae:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <MX_I2C1_Init+0x50>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009b4:	4b0c      	ldr	r3, [pc, #48]	; (80009e8 <MX_I2C1_Init+0x50>)
 80009b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009ba:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009bc:	4b0a      	ldr	r3, [pc, #40]	; (80009e8 <MX_I2C1_Init+0x50>)
 80009be:	2200      	movs	r2, #0
 80009c0:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80009c2:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <MX_I2C1_Init+0x50>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009c8:	4b07      	ldr	r3, [pc, #28]	; (80009e8 <MX_I2C1_Init+0x50>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009ce:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <MX_I2C1_Init+0x50>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80009d4:	4804      	ldr	r0, [pc, #16]	; (80009e8 <MX_I2C1_Init+0x50>)
 80009d6:	f002 f9c7 	bl	8002d68 <HAL_I2C_Init>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_I2C1_Init+0x4c>
		Error_Handler();
 80009e0:	f000 fb34 	bl	800104c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80009e4:	bf00      	nop
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	20000120 	.word	0x20000120
 80009ec:	40005400 	.word	0x40005400
 80009f0:	00061a80 	.word	0x00061a80

080009f4 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08a      	sub	sp, #40	; 0x28
 80009f8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80009fa:	f107 0320 	add.w	r3, r7, #32
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000a04:	1d3b      	adds	r3, r7, #4
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	605a      	str	r2, [r3, #4]
 8000a0c:	609a      	str	r2, [r3, #8]
 8000a0e:	60da      	str	r2, [r3, #12]
 8000a10:	611a      	str	r2, [r3, #16]
 8000a12:	615a      	str	r2, [r3, #20]
 8000a14:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000a16:	4b22      	ldr	r3, [pc, #136]	; (8000aa0 <MX_TIM2_Init+0xac>)
 8000a18:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a1c:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8000a1e:	4b20      	ldr	r3, [pc, #128]	; (8000aa0 <MX_TIM2_Init+0xac>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a24:	4b1e      	ldr	r3, [pc, #120]	; (8000aa0 <MX_TIM2_Init+0xac>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 8000a2a:	4b1d      	ldr	r3, [pc, #116]	; (8000aa0 <MX_TIM2_Init+0xac>)
 8000a2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a30:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a32:	4b1b      	ldr	r3, [pc, #108]	; (8000aa0 <MX_TIM2_Init+0xac>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a38:	4b19      	ldr	r3, [pc, #100]	; (8000aa0 <MX_TIM2_Init+0xac>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8000a3e:	4818      	ldr	r0, [pc, #96]	; (8000aa0 <MX_TIM2_Init+0xac>)
 8000a40:	f004 fdba 	bl	80055b8 <HAL_TIM_PWM_Init>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_TIM2_Init+0x5a>
		Error_Handler();
 8000a4a:	f000 faff 	bl	800104c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a52:	2300      	movs	r3, #0
 8000a54:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000a56:	f107 0320 	add.w	r3, r7, #32
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4810      	ldr	r0, [pc, #64]	; (8000aa0 <MX_TIM2_Init+0xac>)
 8000a5e:	f005 fc61 	bl	8006324 <HAL_TIMEx_MasterConfigSynchronization>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_TIM2_Init+0x78>
			!= HAL_OK) {
		Error_Handler();
 8000a68:	f000 faf0 	bl	800104c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a6c:	2360      	movs	r3, #96	; 0x60
 8000a6e:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8000a70:	2300      	movs	r3, #0
 8000a72:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a74:	2300      	movs	r3, #0
 8000a76:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2)
 8000a7c:	1d3b      	adds	r3, r7, #4
 8000a7e:	2204      	movs	r2, #4
 8000a80:	4619      	mov	r1, r3
 8000a82:	4807      	ldr	r0, [pc, #28]	; (8000aa0 <MX_TIM2_Init+0xac>)
 8000a84:	f005 f95a 	bl	8005d3c <HAL_TIM_PWM_ConfigChannel>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_TIM2_Init+0x9e>
			!= HAL_OK) {
		Error_Handler();
 8000a8e:	f000 fadd 	bl	800104c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8000a92:	4803      	ldr	r0, [pc, #12]	; (8000aa0 <MX_TIM2_Init+0xac>)
 8000a94:	f000 fc84 	bl	80013a0 <HAL_TIM_MspPostInit>

}
 8000a98:	bf00      	nop
 8000a9a:	3728      	adds	r7, #40	; 0x28
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	200001fc 	.word	0x200001fc

08000aa4 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b08c      	sub	sp, #48	; 0x30
 8000aa8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8000aaa:	f107 030c 	add.w	r3, r7, #12
 8000aae:	2224      	movs	r2, #36	; 0x24
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f00a ff40 	bl	800b938 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000ab8:	1d3b      	adds	r3, r7, #4
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000ac0:	4b20      	ldr	r3, [pc, #128]	; (8000b44 <MX_TIM3_Init+0xa0>)
 8000ac2:	4a21      	ldr	r2, [pc, #132]	; (8000b48 <MX_TIM3_Init+0xa4>)
 8000ac4:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8000ac6:	4b1f      	ldr	r3, [pc, #124]	; (8000b44 <MX_TIM3_Init+0xa0>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000acc:	4b1d      	ldr	r3, [pc, #116]	; (8000b44 <MX_TIM3_Init+0xa0>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8000ad2:	4b1c      	ldr	r3, [pc, #112]	; (8000b44 <MX_TIM3_Init+0xa0>)
 8000ad4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ad8:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ada:	4b1a      	ldr	r3, [pc, #104]	; (8000b44 <MX_TIM3_Init+0xa0>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae0:	4b18      	ldr	r3, [pc, #96]	; (8000b44 <MX_TIM3_Init+0xa0>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000aea:	2300      	movs	r3, #0
 8000aec:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000aee:	2301      	movs	r3, #1
 8000af0:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000af2:	2300      	movs	r3, #0
 8000af4:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8000af6:	2300      	movs	r3, #0
 8000af8:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000afa:	2300      	movs	r3, #0
 8000afc:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000afe:	2301      	movs	r3, #1
 8000b00:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b02:	2300      	movs	r3, #0
 8000b04:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8000b06:	2300      	movs	r3, #0
 8000b08:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 8000b0a:	f107 030c 	add.w	r3, r7, #12
 8000b0e:	4619      	mov	r1, r3
 8000b10:	480c      	ldr	r0, [pc, #48]	; (8000b44 <MX_TIM3_Init+0xa0>)
 8000b12:	f004 fe43 	bl	800579c <HAL_TIM_Encoder_Init>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_TIM3_Init+0x7c>
		Error_Handler();
 8000b1c:	f000 fa96 	bl	800104c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b20:	2300      	movs	r3, #0
 8000b22:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b24:	2300      	movs	r3, #0
 8000b26:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8000b28:	1d3b      	adds	r3, r7, #4
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4805      	ldr	r0, [pc, #20]	; (8000b44 <MX_TIM3_Init+0xa0>)
 8000b2e:	f005 fbf9 	bl	8006324 <HAL_TIMEx_MasterConfigSynchronization>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_TIM3_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 8000b38:	f000 fa88 	bl	800104c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8000b3c:	bf00      	nop
 8000b3e:	3730      	adds	r7, #48	; 0x30
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20000244 	.word	0x20000244
 8000b48:	40000400 	.word	0x40000400

08000b4c <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000b50:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <MX_USART1_UART_Init+0x4c>)
 8000b52:	4a12      	ldr	r2, [pc, #72]	; (8000b9c <MX_USART1_UART_Init+0x50>)
 8000b54:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000b56:	4b10      	ldr	r3, [pc, #64]	; (8000b98 <MX_USART1_UART_Init+0x4c>)
 8000b58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b5c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <MX_USART1_UART_Init+0x4c>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000b64:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <MX_USART1_UART_Init+0x4c>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000b6a:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <MX_USART1_UART_Init+0x4c>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000b70:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <MX_USART1_UART_Init+0x4c>)
 8000b72:	220c      	movs	r2, #12
 8000b74:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b76:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <MX_USART1_UART_Init+0x4c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b7c:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <MX_USART1_UART_Init+0x4c>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000b82:	4805      	ldr	r0, [pc, #20]	; (8000b98 <MX_USART1_UART_Init+0x4c>)
 8000b84:	f005 fc3e 	bl	8006404 <HAL_UART_Init>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8000b8e:	f000 fa5d 	bl	800104c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	2000028c 	.word	0x2000028c
 8000b9c:	40013800 	.word	0x40013800

08000ba0 <MX_DMA_Init>:
/**
 * Enable DMA controller clock
 * Configure DMA for memory to memory transfers
 *   hdma_memtomem_dma1_channel1
 */
static void MX_DMA_Init(void) {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000ba6:	4b28      	ldr	r3, [pc, #160]	; (8000c48 <MX_DMA_Init+0xa8>)
 8000ba8:	695b      	ldr	r3, [r3, #20]
 8000baa:	4a27      	ldr	r2, [pc, #156]	; (8000c48 <MX_DMA_Init+0xa8>)
 8000bac:	f043 0301 	orr.w	r3, r3, #1
 8000bb0:	6153      	str	r3, [r2, #20]
 8000bb2:	4b25      	ldr	r3, [pc, #148]	; (8000c48 <MX_DMA_Init+0xa8>)
 8000bb4:	695b      	ldr	r3, [r3, #20]
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]

	/* Configure DMA request hdma_memtomem_dma1_channel1 on DMA1_Channel1 */
	hdma_memtomem_dma1_channel1.Instance = DMA1_Channel1;
 8000bbe:	4b23      	ldr	r3, [pc, #140]	; (8000c4c <MX_DMA_Init+0xac>)
 8000bc0:	4a23      	ldr	r2, [pc, #140]	; (8000c50 <MX_DMA_Init+0xb0>)
 8000bc2:	601a      	str	r2, [r3, #0]
	hdma_memtomem_dma1_channel1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000bc4:	4b21      	ldr	r3, [pc, #132]	; (8000c4c <MX_DMA_Init+0xac>)
 8000bc6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bca:	605a      	str	r2, [r3, #4]
	hdma_memtomem_dma1_channel1.Init.PeriphInc = DMA_PINC_ENABLE;
 8000bcc:	4b1f      	ldr	r3, [pc, #124]	; (8000c4c <MX_DMA_Init+0xac>)
 8000bce:	2240      	movs	r2, #64	; 0x40
 8000bd0:	609a      	str	r2, [r3, #8]
	hdma_memtomem_dma1_channel1.Init.MemInc = DMA_MINC_ENABLE;
 8000bd2:	4b1e      	ldr	r3, [pc, #120]	; (8000c4c <MX_DMA_Init+0xac>)
 8000bd4:	2280      	movs	r2, #128	; 0x80
 8000bd6:	60da      	str	r2, [r3, #12]
	hdma_memtomem_dma1_channel1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bd8:	4b1c      	ldr	r3, [pc, #112]	; (8000c4c <MX_DMA_Init+0xac>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	611a      	str	r2, [r3, #16]
	hdma_memtomem_dma1_channel1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bde:	4b1b      	ldr	r3, [pc, #108]	; (8000c4c <MX_DMA_Init+0xac>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	615a      	str	r2, [r3, #20]
	hdma_memtomem_dma1_channel1.Init.Mode = DMA_NORMAL;
 8000be4:	4b19      	ldr	r3, [pc, #100]	; (8000c4c <MX_DMA_Init+0xac>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	619a      	str	r2, [r3, #24]
	hdma_memtomem_dma1_channel1.Init.Priority = DMA_PRIORITY_LOW;
 8000bea:	4b18      	ldr	r3, [pc, #96]	; (8000c4c <MX_DMA_Init+0xac>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	61da      	str	r2, [r3, #28]
	if (HAL_DMA_Init(&hdma_memtomem_dma1_channel1) != HAL_OK) {
 8000bf0:	4816      	ldr	r0, [pc, #88]	; (8000c4c <MX_DMA_Init+0xac>)
 8000bf2:	f001 fd37 	bl	8002664 <HAL_DMA_Init>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_DMA_Init+0x60>
		Error_Handler();
 8000bfc:	f000 fa26 	bl	800104c <Error_Handler>
	}

	/* DMA interrupt init */
	/* DMA1_Channel4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8000c00:	2200      	movs	r2, #0
 8000c02:	2105      	movs	r1, #5
 8000c04:	200e      	movs	r0, #14
 8000c06:	f001 fd02 	bl	800260e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000c0a:	200e      	movs	r0, #14
 8000c0c:	f001 fd1b 	bl	8002646 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8000c10:	2200      	movs	r2, #0
 8000c12:	2105      	movs	r1, #5
 8000c14:	200f      	movs	r0, #15
 8000c16:	f001 fcfa 	bl	800260e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000c1a:	200f      	movs	r0, #15
 8000c1c:	f001 fd13 	bl	8002646 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8000c20:	2200      	movs	r2, #0
 8000c22:	2105      	movs	r1, #5
 8000c24:	2010      	movs	r0, #16
 8000c26:	f001 fcf2 	bl	800260e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000c2a:	2010      	movs	r0, #16
 8000c2c:	f001 fd0b 	bl	8002646 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 8000c30:	2200      	movs	r2, #0
 8000c32:	2105      	movs	r1, #5
 8000c34:	2011      	movs	r0, #17
 8000c36:	f001 fcea 	bl	800260e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000c3a:	2011      	movs	r0, #17
 8000c3c:	f001 fd03 	bl	8002646 <HAL_NVIC_EnableIRQ>

}
 8000c40:	bf00      	nop
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	2000035c 	.word	0x2000035c
 8000c50:	40020008 	.word	0x40020008

08000c54 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b088      	sub	sp, #32
 8000c58:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000c5a:	f107 0310 	add.w	r3, r7, #16
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	609a      	str	r2, [r3, #8]
 8000c66:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000c68:	4b44      	ldr	r3, [pc, #272]	; (8000d7c <MX_GPIO_Init+0x128>)
 8000c6a:	699b      	ldr	r3, [r3, #24]
 8000c6c:	4a43      	ldr	r2, [pc, #268]	; (8000d7c <MX_GPIO_Init+0x128>)
 8000c6e:	f043 0310 	orr.w	r3, r3, #16
 8000c72:	6193      	str	r3, [r2, #24]
 8000c74:	4b41      	ldr	r3, [pc, #260]	; (8000d7c <MX_GPIO_Init+0x128>)
 8000c76:	699b      	ldr	r3, [r3, #24]
 8000c78:	f003 0310 	and.w	r3, r3, #16
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000c80:	4b3e      	ldr	r3, [pc, #248]	; (8000d7c <MX_GPIO_Init+0x128>)
 8000c82:	699b      	ldr	r3, [r3, #24]
 8000c84:	4a3d      	ldr	r2, [pc, #244]	; (8000d7c <MX_GPIO_Init+0x128>)
 8000c86:	f043 0320 	orr.w	r3, r3, #32
 8000c8a:	6193      	str	r3, [r2, #24]
 8000c8c:	4b3b      	ldr	r3, [pc, #236]	; (8000d7c <MX_GPIO_Init+0x128>)
 8000c8e:	699b      	ldr	r3, [r3, #24]
 8000c90:	f003 0320 	and.w	r3, r3, #32
 8000c94:	60bb      	str	r3, [r7, #8]
 8000c96:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000c98:	4b38      	ldr	r3, [pc, #224]	; (8000d7c <MX_GPIO_Init+0x128>)
 8000c9a:	699b      	ldr	r3, [r3, #24]
 8000c9c:	4a37      	ldr	r2, [pc, #220]	; (8000d7c <MX_GPIO_Init+0x128>)
 8000c9e:	f043 0304 	orr.w	r3, r3, #4
 8000ca2:	6193      	str	r3, [r2, #24]
 8000ca4:	4b35      	ldr	r3, [pc, #212]	; (8000d7c <MX_GPIO_Init+0x128>)
 8000ca6:	699b      	ldr	r3, [r3, #24]
 8000ca8:	f003 0304 	and.w	r3, r3, #4
 8000cac:	607b      	str	r3, [r7, #4]
 8000cae:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb0:	4b32      	ldr	r3, [pc, #200]	; (8000d7c <MX_GPIO_Init+0x128>)
 8000cb2:	699b      	ldr	r3, [r3, #24]
 8000cb4:	4a31      	ldr	r2, [pc, #196]	; (8000d7c <MX_GPIO_Init+0x128>)
 8000cb6:	f043 0308 	orr.w	r3, r3, #8
 8000cba:	6193      	str	r3, [r2, #24]
 8000cbc:	4b2f      	ldr	r3, [pc, #188]	; (8000d7c <MX_GPIO_Init+0x128>)
 8000cbe:	699b      	ldr	r3, [r3, #24]
 8000cc0:	f003 0308 	and.w	r3, r3, #8
 8000cc4:	603b      	str	r3, [r7, #0]
 8000cc6:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cce:	482c      	ldr	r0, [pc, #176]	; (8000d80 <MX_GPIO_Init+0x12c>)
 8000cd0:	f002 f832 	bl	8002d38 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	210d      	movs	r1, #13
 8000cd8:	482a      	ldr	r0, [pc, #168]	; (8000d84 <MX_GPIO_Init+0x130>)
 8000cda:	f002 f82d 	bl	8002d38 <HAL_GPIO_WritePin>
			Engine_Dir_Pin | Engine_Enable_Pin | Engine_Brake_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LED_B_Pin | LED_G_Pin | LED_R_Pin, GPIO_PIN_SET);
 8000cde:	2201      	movs	r2, #1
 8000ce0:	f640 4102 	movw	r1, #3074	; 0xc02
 8000ce4:	4828      	ldr	r0, [pc, #160]	; (8000d88 <MX_GPIO_Init+0x134>)
 8000ce6:	f002 f827 	bl	8002d38 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000cea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cee:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cfc:	f107 0310 	add.w	r3, r7, #16
 8000d00:	4619      	mov	r1, r3
 8000d02:	481f      	ldr	r0, [pc, #124]	; (8000d80 <MX_GPIO_Init+0x12c>)
 8000d04:	f001 fe94 	bl	8002a30 <HAL_GPIO_Init>

	/*Configure GPIO pins : Engine_Dir_Pin Engine_Enable_Pin Engine_Brake_Pin */
	GPIO_InitStruct.Pin = Engine_Dir_Pin | Engine_Enable_Pin | Engine_Brake_Pin;
 8000d08:	230d      	movs	r3, #13
 8000d0a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d14:	2302      	movs	r3, #2
 8000d16:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d18:	f107 0310 	add.w	r3, r7, #16
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4819      	ldr	r0, [pc, #100]	; (8000d84 <MX_GPIO_Init+0x130>)
 8000d20:	f001 fe86 	bl	8002a30 <HAL_GPIO_Init>

	/*Configure GPIO pin : BTN_1_Pin */
	GPIO_InitStruct.Pin = BTN_1_Pin;
 8000d24:	2380      	movs	r3, #128	; 0x80
 8000d26:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(BTN_1_GPIO_Port, &GPIO_InitStruct);
 8000d30:	f107 0310 	add.w	r3, r7, #16
 8000d34:	4619      	mov	r1, r3
 8000d36:	4813      	ldr	r0, [pc, #76]	; (8000d84 <MX_GPIO_Init+0x130>)
 8000d38:	f001 fe7a 	bl	8002a30 <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN2_Pin Encoder_Z_Pin */
	GPIO_InitStruct.Pin = BTN2_Pin | Encoder_Z_Pin;
 8000d3c:	2309      	movs	r3, #9
 8000d3e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d48:	f107 0310 	add.w	r3, r7, #16
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	480e      	ldr	r0, [pc, #56]	; (8000d88 <MX_GPIO_Init+0x134>)
 8000d50:	f001 fe6e 	bl	8002a30 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED_B_Pin LED_G_Pin LED_R_Pin */
	GPIO_InitStruct.Pin = LED_B_Pin | LED_G_Pin | LED_R_Pin;
 8000d54:	f640 4302 	movw	r3, #3074	; 0xc02
 8000d58:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d62:	2302      	movs	r3, #2
 8000d64:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d66:	f107 0310 	add.w	r3, r7, #16
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4806      	ldr	r0, [pc, #24]	; (8000d88 <MX_GPIO_Init+0x134>)
 8000d6e:	f001 fe5f 	bl	8002a30 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000d72:	bf00      	nop
 8000d74:	3720      	adds	r7, #32
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40021000 	.word	0x40021000
 8000d80:	40011000 	.word	0x40011000
 8000d84:	40010800 	.word	0x40010800
 8000d88:	40010c00 	.word	0x40010c00

08000d8c <HAL_I2C_MemRxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
	if (mainI2C.hi2c == hi2c) {
 8000d94:	4b05      	ldr	r3, [pc, #20]	; (8000dac <HAL_I2C_MemRxCpltCallback+0x20>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	687a      	ldr	r2, [r7, #4]
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	d102      	bne.n	8000da4 <HAL_I2C_MemRxCpltCallback+0x18>
		I2C_OS_MEM_RxCpltCB(&mainI2C);
 8000d9e:	4803      	ldr	r0, [pc, #12]	; (8000dac <HAL_I2C_MemRxCpltCallback+0x20>)
 8000da0:	f00a fd86 	bl	800b8b0 <I2C_OS_MEM_RxCpltCB>
	}
}
 8000da4:	bf00      	nop
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	200003a4 	.word	0x200003a4

08000db0 <HAL_I2C_MemTxCpltCallback>:
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
	if (mainI2C.hi2c == hi2c) {
 8000db8:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <HAL_I2C_MemTxCpltCallback+0x20>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	687a      	ldr	r2, [r7, #4]
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d102      	bne.n	8000dc8 <HAL_I2C_MemTxCpltCallback+0x18>
		I2C_OS_MEM_TxCpltCB(&mainI2C);
 8000dc2:	4803      	ldr	r0, [pc, #12]	; (8000dd0 <HAL_I2C_MemTxCpltCallback+0x20>)
 8000dc4:	f00a fd82 	bl	800b8cc <I2C_OS_MEM_TxCpltCB>
	}
}
 8000dc8:	bf00      	nop
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	200003a4 	.word	0x200003a4

08000dd4 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8000dd4:	b590      	push	{r4, r7, lr}
 8000dd6:	b089      	sub	sp, #36	; 0x24
 8000dd8:	af04      	add	r7, sp, #16
 8000dda:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */

	I2C_OS_Init(&mainI2C, &hi2c1);
 8000ddc:	4979      	ldr	r1, [pc, #484]	; (8000fc4 <StartDefaultTask+0x1f0>)
 8000dde:	487a      	ldr	r0, [pc, #488]	; (8000fc8 <StartDefaultTask+0x1f4>)
 8000de0:	f00a fcc8 	bl	800b774 <I2C_OS_Init>
//	CAN_OS_Init(&CANmain, &hcan);
//	CAN_OS_RegisterCB(&CANmain, CAN_OS_ActivateTxCB_ID, CAN_TxCallback);
//	CAN_OS_RegisterCB(&CANmain, CAN_OS_ActivateRxFifo0_ID, CAN_RxFifo0Callback);

	INA219_Init(&INA219_main, &mainI2C, INA219_ADDRESS_Default);
 8000de4:	2240      	movs	r2, #64	; 0x40
 8000de6:	4978      	ldr	r1, [pc, #480]	; (8000fc8 <StartDefaultTask+0x1f4>)
 8000de8:	4878      	ldr	r0, [pc, #480]	; (8000fcc <StartDefaultTask+0x1f8>)
 8000dea:	f00a facb 	bl	800b384 <INA219_Init>
//	CANFrame_RegCB(&CANFrame_Handler, CANFRAME_RCVCPLT_CB_ID,
//			CANFrame_RcvDoneHandler);
//	PowerPublisher_Init(&PowerPub, &INA219_main, &CANFrame_Handler, 50);
//	BNO055_Init(&imuBNO055, &mainI2C, BNO055_I2C_ADDR_HI);

	Encoder_Init(&Encoder, &htim3, 0.3, 10);
 8000dee:	230a      	movs	r3, #10
 8000df0:	4a77      	ldr	r2, [pc, #476]	; (8000fd0 <StartDefaultTask+0x1fc>)
 8000df2:	4978      	ldr	r1, [pc, #480]	; (8000fd4 <StartDefaultTask+0x200>)
 8000df4:	4878      	ldr	r0, [pc, #480]	; (8000fd8 <StartDefaultTask+0x204>)
 8000df6:	f009 ffdb 	bl	800adb0 <Encoder_Init>
	Engine_Init(&Engine, -7200, 7200);
 8000dfa:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8000dfe:	4977      	ldr	r1, [pc, #476]	; (8000fdc <StartDefaultTask+0x208>)
 8000e00:	4877      	ldr	r0, [pc, #476]	; (8000fe0 <StartDefaultTask+0x20c>)
 8000e02:	f00a f900 	bl	800b006 <Engine_Init>
	Engine_ConfigTimer(&Engine, &htim2, TIM_CHANNEL_2);
 8000e06:	2204      	movs	r2, #4
 8000e08:	4976      	ldr	r1, [pc, #472]	; (8000fe4 <StartDefaultTask+0x210>)
 8000e0a:	4875      	ldr	r0, [pc, #468]	; (8000fe0 <StartDefaultTask+0x20c>)
 8000e0c:	f00a f8a8 	bl	800af60 <Engine_ConfigTimer>
	Engine_ConfigControlPin(&Engine, BrakePin, DirPin, GasEnPin);
 8000e10:	4b75      	ldr	r3, [pc, #468]	; (8000fe8 <StartDefaultTask+0x214>)
 8000e12:	4c76      	ldr	r4, [pc, #472]	; (8000fec <StartDefaultTask+0x218>)
 8000e14:	4976      	ldr	r1, [pc, #472]	; (8000ff0 <StartDefaultTask+0x21c>)
 8000e16:	aa01      	add	r2, sp, #4
 8000e18:	c903      	ldmia	r1, {r0, r1}
 8000e1a:	e882 0003 	stmia.w	r2, {r0, r1}
 8000e1e:	685a      	ldr	r2, [r3, #4]
 8000e20:	9200      	str	r2, [sp, #0]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	e894 0006 	ldmia.w	r4, {r1, r2}
 8000e28:	486d      	ldr	r0, [pc, #436]	; (8000fe0 <StartDefaultTask+0x20c>)
 8000e2a:	f00a f8c5 	bl	800afb8 <Engine_ConfigControlPin>

	SpeedController_Init(&SpeedController, &Encoder, &Engine, 50);
 8000e2e:	2332      	movs	r3, #50	; 0x32
 8000e30:	4a6b      	ldr	r2, [pc, #428]	; (8000fe0 <StartDefaultTask+0x20c>)
 8000e32:	4969      	ldr	r1, [pc, #420]	; (8000fd8 <StartDefaultTask+0x204>)
 8000e34:	486f      	ldr	r0, [pc, #444]	; (8000ff4 <StartDefaultTask+0x220>)
 8000e36:	f00a fafb 	bl	800b430 <SpeedController_Init>
//	HAL_GPIO_TogglePin(LED_B_GPIO_Port, LED_B_Pin);
//	IMUPublisher_Init(&IMUPub, &imuBNO055, &CANFrame_Handler, 10);
//	IMUPublisher_EnablePub(&IMUPub, IMUPUBLISHER_PUB_EULER);\
//	IMUPublisher_Start(&IMUPub, 1);
	Encoder.EnCntTraveled = 1;
 8000e3a:	4b67      	ldr	r3, [pc, #412]	; (8000fd8 <StartDefaultTask+0x204>)
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	751a      	strb	r2, [r3, #20]
	Encoder.PulsePerMeter = 2927 * 2;
 8000e40:	4b65      	ldr	r3, [pc, #404]	; (8000fd8 <StartDefaultTask+0x204>)
 8000e42:	f241 62de 	movw	r2, #5854	; 0x16de
 8000e46:	611a      	str	r2, [r3, #16]
	SpeedController.PulsePerMeter = 2927 * 2;
 8000e48:	4b6a      	ldr	r3, [pc, #424]	; (8000ff4 <StartDefaultTask+0x220>)
 8000e4a:	4a6b      	ldr	r2, [pc, #428]	; (8000ff8 <StartDefaultTask+0x224>)
 8000e4c:	625a      	str	r2, [r3, #36]	; 0x24
	Encoder_Start(&Encoder, 1);
 8000e4e:	2101      	movs	r1, #1
 8000e50:	4861      	ldr	r0, [pc, #388]	; (8000fd8 <StartDefaultTask+0x204>)
 8000e52:	f009 ffd9 	bl	800ae08 <Encoder_Start>
	SpeedController_SetTunings(&SpeedController, 180.0, 1.0, 35.0);
 8000e56:	4b69      	ldr	r3, [pc, #420]	; (8000ffc <StartDefaultTask+0x228>)
 8000e58:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000e5c:	4968      	ldr	r1, [pc, #416]	; (8001000 <StartDefaultTask+0x22c>)
 8000e5e:	4865      	ldr	r0, [pc, #404]	; (8000ff4 <StartDefaultTask+0x220>)
 8000e60:	f00a fc5e 	bl	800b720 <SpeedController_SetTunings>
	SpeedController_Start(&SpeedController, 1);
 8000e64:	2101      	movs	r1, #1
 8000e66:	4863      	ldr	r0, [pc, #396]	; (8000ff4 <StartDefaultTask+0x220>)
 8000e68:	f00a fb0c 	bl	800b484 <SpeedController_Start>

//SyncPrintf("####### Engine I AM AWAKE ##### \r\n");
//	SpeedController_SetSpeed(&SpeedController, 5);
//	Engine_SetSpeed(&Engine, 100);
//	TestTaskHandle = osThreadNew(TestTask, NULL, &TestTask_attributes);
	osThreadSetPriority(tDefaultHandle, osPriorityRealtime);
 8000e6c:	4b65      	ldr	r3, [pc, #404]	; (8001004 <StartDefaultTask+0x230>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2130      	movs	r1, #48	; 0x30
 8000e72:	4618      	mov	r0, r3
 8000e74:	f005 fcdc 	bl	8006830 <osThreadSetPriority>
	/* Infinite loop */
//	while (1){
//
//	}
	for (;;) {
		if (Can_RecFlag == 1) {
 8000e78:	4b63      	ldr	r3, [pc, #396]	; (8001008 <StartDefaultTask+0x234>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	f040 809d 	bne.w	8000fbc <StartDefaultTask+0x1e8>
			memcpy(Data, rcdata, 8);
 8000e82:	4a62      	ldr	r2, [pc, #392]	; (800100c <StartDefaultTask+0x238>)
 8000e84:	f107 0308 	add.w	r3, r7, #8
 8000e88:	6810      	ldr	r0, [r2, #0]
 8000e8a:	6851      	ldr	r1, [r2, #4]
 8000e8c:	c303      	stmia	r3!, {r0, r1}
			switch (Data[0]) {
 8000e8e:	7a3b      	ldrb	r3, [r7, #8]
 8000e90:	2b23      	cmp	r3, #35	; 0x23
 8000e92:	d002      	beq.n	8000e9a <StartDefaultTask+0xc6>
 8000e94:	2b34      	cmp	r3, #52	; 0x34
 8000e96:	d01a      	beq.n	8000ece <StartDefaultTask+0xfa>
 8000e98:	e090      	b.n	8000fbc <StartDefaultTask+0x1e8>
			case 0x23:
				switch (Data[1]) {
 8000e9a:	7a7b      	ldrb	r3, [r7, #9]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d10d      	bne.n	8000ebc <StartDefaultTask+0xe8>
				case 1:
					stopEngineAndBrake(&SpeedController, &Engine);
 8000ea0:	494f      	ldr	r1, [pc, #316]	; (8000fe0 <StartDefaultTask+0x20c>)
 8000ea2:	4854      	ldr	r0, [pc, #336]	; (8000ff4 <StartDefaultTask+0x220>)
 8000ea4:	f00a fb25 	bl	800b4f2 <stopEngineAndBrake>
					braking = false;
 8000ea8:	4b59      	ldr	r3, [pc, #356]	; (8001010 <StartDefaultTask+0x23c>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin,GPIO_PIN_SET);
 8000eae:	2201      	movs	r2, #1
 8000eb0:	2102      	movs	r1, #2
 8000eb2:	4858      	ldr	r0, [pc, #352]	; (8001014 <StartDefaultTask+0x240>)
 8000eb4:	f001 ff40 	bl	8002d38 <HAL_GPIO_WritePin>
					break;
 8000eb8:	bf00      	nop
				default:
					braking = true;
					HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin,GPIO_PIN_RESET);
				}
				break;
 8000eba:	e07f      	b.n	8000fbc <StartDefaultTask+0x1e8>
					braking = true;
 8000ebc:	4b54      	ldr	r3, [pc, #336]	; (8001010 <StartDefaultTask+0x23c>)
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin,GPIO_PIN_RESET);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2102      	movs	r1, #2
 8000ec6:	4853      	ldr	r0, [pc, #332]	; (8001014 <StartDefaultTask+0x240>)
 8000ec8:	f001 ff36 	bl	8002d38 <HAL_GPIO_WritePin>
				break;
 8000ecc:	e076      	b.n	8000fbc <StartDefaultTask+0x1e8>
			case 0x34:
				if (braking) {
 8000ece:	4b50      	ldr	r3, [pc, #320]	; (8001010 <StartDefaultTask+0x23c>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d071      	beq.n	8000fba <StartDefaultTask+0x1e6>
					Speed = bytes2Float(Data + 1);
 8000ed6:	f107 0308 	add.w	r3, r7, #8
 8000eda:	3301      	adds	r3, #1
 8000edc:	4618      	mov	r0, r3
 8000ede:	f00a fd11 	bl	800b904 <bytes2Float>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	4a4c      	ldr	r2, [pc, #304]	; (8001018 <StartDefaultTask+0x244>)
 8000ee6:	6013      	str	r3, [r2, #0]
					if (Speed == 0) {
 8000ee8:	4b4b      	ldr	r3, [pc, #300]	; (8001018 <StartDefaultTask+0x244>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f04f 0100 	mov.w	r1, #0
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff fbcf 	bl	8000694 <__aeabi_fcmpeq>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d004      	beq.n	8000f06 <StartDefaultTask+0x132>
						stopEngineAndBrake(&SpeedController, &Engine); // Gọi hàm đã tối ưu
 8000efc:	4938      	ldr	r1, [pc, #224]	; (8000fe0 <StartDefaultTask+0x20c>)
 8000efe:	483d      	ldr	r0, [pc, #244]	; (8000ff4 <StartDefaultTask+0x220>)
 8000f00:	f00a faf7 	bl	800b4f2 <stopEngineAndBrake>
 8000f04:	e018      	b.n	8000f38 <StartDefaultTask+0x164>
					} else if (!SpeedOk && Speed == SpeedController.SetPoint) {
 8000f06:	4b45      	ldr	r3, [pc, #276]	; (800101c <StartDefaultTask+0x248>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	f083 0301 	eor.w	r3, r3, #1
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d00e      	beq.n	8000f32 <StartDefaultTask+0x15e>
 8000f14:	4b37      	ldr	r3, [pc, #220]	; (8000ff4 <StartDefaultTask+0x220>)
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	4a3f      	ldr	r2, [pc, #252]	; (8001018 <StartDefaultTask+0x244>)
 8000f1a:	6812      	ldr	r2, [r2, #0]
 8000f1c:	4611      	mov	r1, r2
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff fbb8 	bl	8000694 <__aeabi_fcmpeq>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d003      	beq.n	8000f32 <StartDefaultTask+0x15e>
						SpeedOk = true;
 8000f2a:	4b3c      	ldr	r3, [pc, #240]	; (800101c <StartDefaultTask+0x248>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	701a      	strb	r2, [r3, #0]
 8000f30:	e002      	b.n	8000f38 <StartDefaultTask+0x164>
					} else {
						SpeedOk = false;
 8000f32:	4b3a      	ldr	r3, [pc, #232]	; (800101c <StartDefaultTask+0x248>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	701a      	strb	r2, [r3, #0]
					}

					if (!SpeedOk) {
 8000f38:	4b38      	ldr	r3, [pc, #224]	; (800101c <StartDefaultTask+0x248>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	f083 0301 	eor.w	r3, r3, #1
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d039      	beq.n	8000fba <StartDefaultTask+0x1e6>
						if (Speed > 0) {
 8000f46:	4b34      	ldr	r3, [pc, #208]	; (8001018 <StartDefaultTask+0x244>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f04f 0100 	mov.w	r1, #0
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff fbc8 	bl	80006e4 <__aeabi_fcmpgt>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d010      	beq.n	8000f7c <StartDefaultTask+0x1a8>
							setSpeedAndClearBrake(&SpeedController, &Engine, Speed); // Hàm mới kết hợp các hàm liên quan
 8000f5a:	4b2f      	ldr	r3, [pc, #188]	; (8001018 <StartDefaultTask+0x244>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	461a      	mov	r2, r3
 8000f60:	491f      	ldr	r1, [pc, #124]	; (8000fe0 <StartDefaultTask+0x20c>)
 8000f62:	4824      	ldr	r0, [pc, #144]	; (8000ff4 <StartDefaultTask+0x220>)
 8000f64:	f00a faaf 	bl	800b4c6 <setSpeedAndClearBrake>
							if (!SpeedController.isEnable) {
 8000f68:	4b22      	ldr	r3, [pc, #136]	; (8000ff4 <StartDefaultTask+0x220>)
 8000f6a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d123      	bne.n	8000fba <StartDefaultTask+0x1e6>
								SpeedController_Start(&SpeedController, 1);
 8000f72:	2101      	movs	r1, #1
 8000f74:	481f      	ldr	r0, [pc, #124]	; (8000ff4 <StartDefaultTask+0x220>)
 8000f76:	f00a fa85 	bl	800b484 <SpeedController_Start>
							Engine_SetSpeed(&Engine,
									Speed * 4 * Engine_TIM_MaxPulse / 100);
						}
					}
				}
				break;
 8000f7a:	e01e      	b.n	8000fba <StartDefaultTask+0x1e6>
							SpeedController_Start(&SpeedController, 0);
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	481d      	ldr	r0, [pc, #116]	; (8000ff4 <StartDefaultTask+0x220>)
 8000f80:	f00a fa80 	bl	800b484 <SpeedController_Start>
									Speed * 4 * Engine_TIM_MaxPulse / 100);
 8000f84:	4b24      	ldr	r3, [pc, #144]	; (8001018 <StartDefaultTask+0x244>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff f9ed 	bl	800036c <__aeabi_fmul>
 8000f92:	4603      	mov	r3, r0
 8000f94:	4922      	ldr	r1, [pc, #136]	; (8001020 <StartDefaultTask+0x24c>)
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff f9e8 	bl	800036c <__aeabi_fmul>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	4921      	ldr	r1, [pc, #132]	; (8001024 <StartDefaultTask+0x250>)
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff fa97 	bl	80004d4 <__aeabi_fdiv>
 8000fa6:	4603      	mov	r3, r0
							Engine_SetSpeed(&Engine,
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff fba5 	bl	80006f8 <__aeabi_f2iz>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	b21b      	sxth	r3, r3
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	480a      	ldr	r0, [pc, #40]	; (8000fe0 <StartDefaultTask+0x20c>)
 8000fb6:	f00a f83e 	bl	800b036 <Engine_SetSpeed>
				break;
 8000fba:	bf00      	nop
			}
		}
		osDelay(1);
 8000fbc:	2001      	movs	r0, #1
 8000fbe:	f005 fcdb 	bl	8006978 <osDelay>
		if (Can_RecFlag == 1) {
 8000fc2:	e759      	b.n	8000e78 <StartDefaultTask+0xa4>
 8000fc4:	20000120 	.word	0x20000120
 8000fc8:	200003a4 	.word	0x200003a4
 8000fcc:	200003b0 	.word	0x200003b0
 8000fd0:	3e99999a 	.word	0x3e99999a
 8000fd4:	20000244 	.word	0x20000244
 8000fd8:	200003c0 	.word	0x200003c0
 8000fdc:	ffffe3e0 	.word	0xffffe3e0
 8000fe0:	200003ec 	.word	0x200003ec
 8000fe4:	200001fc 	.word	0x200001fc
 8000fe8:	20000010 	.word	0x20000010
 8000fec:	20000000 	.word	0x20000000
 8000ff0:	20000008 	.word	0x20000008
 8000ff4:	20000414 	.word	0x20000414
 8000ff8:	45b6f000 	.word	0x45b6f000
 8000ffc:	420c0000 	.word	0x420c0000
 8001000:	43340000 	.word	0x43340000
 8001004:	200003a0 	.word	0x200003a0
 8001008:	200000b8 	.word	0x200000b8
 800100c:	200000b0 	.word	0x200000b0
 8001010:	20000449 	.word	0x20000449
 8001014:	40010c00 	.word	0x40010c00
 8001018:	20000444 	.word	0x20000444
 800101c:	20000448 	.word	0x20000448
 8001020:	461c4000 	.word	0x461c4000
 8001024:	42c80000 	.word	0x42c80000

08001028 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM4) {
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a04      	ldr	r2, [pc, #16]	; (8001048 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d101      	bne.n	800103e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800103a:	f000 fc33 	bl	80018a4 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800103e:	bf00      	nop
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40000800 	.word	0x40000800

0800104c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001050:	b672      	cpsid	i
}
 8001052:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001054:	e7fe      	b.n	8001054 <Error_Handler+0x8>
	...

08001058 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800105e:	4b18      	ldr	r3, [pc, #96]	; (80010c0 <HAL_MspInit+0x68>)
 8001060:	699b      	ldr	r3, [r3, #24]
 8001062:	4a17      	ldr	r2, [pc, #92]	; (80010c0 <HAL_MspInit+0x68>)
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	6193      	str	r3, [r2, #24]
 800106a:	4b15      	ldr	r3, [pc, #84]	; (80010c0 <HAL_MspInit+0x68>)
 800106c:	699b      	ldr	r3, [r3, #24]
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	60bb      	str	r3, [r7, #8]
 8001074:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001076:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <HAL_MspInit+0x68>)
 8001078:	69db      	ldr	r3, [r3, #28]
 800107a:	4a11      	ldr	r2, [pc, #68]	; (80010c0 <HAL_MspInit+0x68>)
 800107c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001080:	61d3      	str	r3, [r2, #28]
 8001082:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <HAL_MspInit+0x68>)
 8001084:	69db      	ldr	r3, [r3, #28]
 8001086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800108a:	607b      	str	r3, [r7, #4]
 800108c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800108e:	2200      	movs	r2, #0
 8001090:	210f      	movs	r1, #15
 8001092:	f06f 0001 	mvn.w	r0, #1
 8001096:	f001 faba 	bl	800260e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800109a:	4b0a      	ldr	r3, [pc, #40]	; (80010c4 <HAL_MspInit+0x6c>)
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	4a04      	ldr	r2, [pc, #16]	; (80010c4 <HAL_MspInit+0x6c>)
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010b6:	bf00      	nop
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40021000 	.word	0x40021000
 80010c4:	40010000 	.word	0x40010000

080010c8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b088      	sub	sp, #32
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d0:	f107 0310 	add.w	r3, r7, #16
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a28      	ldr	r2, [pc, #160]	; (8001184 <HAL_CAN_MspInit+0xbc>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d149      	bne.n	800117c <HAL_CAN_MspInit+0xb4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80010e8:	4b27      	ldr	r3, [pc, #156]	; (8001188 <HAL_CAN_MspInit+0xc0>)
 80010ea:	69db      	ldr	r3, [r3, #28]
 80010ec:	4a26      	ldr	r2, [pc, #152]	; (8001188 <HAL_CAN_MspInit+0xc0>)
 80010ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010f2:	61d3      	str	r3, [r2, #28]
 80010f4:	4b24      	ldr	r3, [pc, #144]	; (8001188 <HAL_CAN_MspInit+0xc0>)
 80010f6:	69db      	ldr	r3, [r3, #28]
 80010f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010fc:	60fb      	str	r3, [r7, #12]
 80010fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001100:	4b21      	ldr	r3, [pc, #132]	; (8001188 <HAL_CAN_MspInit+0xc0>)
 8001102:	699b      	ldr	r3, [r3, #24]
 8001104:	4a20      	ldr	r2, [pc, #128]	; (8001188 <HAL_CAN_MspInit+0xc0>)
 8001106:	f043 0304 	orr.w	r3, r3, #4
 800110a:	6193      	str	r3, [r2, #24]
 800110c:	4b1e      	ldr	r3, [pc, #120]	; (8001188 <HAL_CAN_MspInit+0xc0>)
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	f003 0304 	and.w	r3, r3, #4
 8001114:	60bb      	str	r3, [r7, #8]
 8001116:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001118:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800111c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800111e:	2300      	movs	r3, #0
 8001120:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001126:	f107 0310 	add.w	r3, r7, #16
 800112a:	4619      	mov	r1, r3
 800112c:	4817      	ldr	r0, [pc, #92]	; (800118c <HAL_CAN_MspInit+0xc4>)
 800112e:	f001 fc7f 	bl	8002a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001132:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001136:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001138:	2302      	movs	r3, #2
 800113a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800113c:	2303      	movs	r3, #3
 800113e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001140:	f107 0310 	add.w	r3, r7, #16
 8001144:	4619      	mov	r1, r3
 8001146:	4811      	ldr	r0, [pc, #68]	; (800118c <HAL_CAN_MspInit+0xc4>)
 8001148:	f001 fc72 	bl	8002a30 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 5, 0);
 800114c:	2200      	movs	r2, #0
 800114e:	2105      	movs	r1, #5
 8001150:	2013      	movs	r0, #19
 8001152:	f001 fa5c 	bl	800260e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8001156:	2013      	movs	r0, #19
 8001158:	f001 fa75 	bl	8002646 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800115c:	2200      	movs	r2, #0
 800115e:	2105      	movs	r1, #5
 8001160:	2014      	movs	r0, #20
 8001162:	f001 fa54 	bl	800260e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001166:	2014      	movs	r0, #20
 8001168:	f001 fa6d 	bl	8002646 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 800116c:	2200      	movs	r2, #0
 800116e:	2105      	movs	r1, #5
 8001170:	2015      	movs	r0, #21
 8001172:	f001 fa4c 	bl	800260e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001176:	2015      	movs	r0, #21
 8001178:	f001 fa65 	bl	8002646 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800117c:	bf00      	nop
 800117e:	3720      	adds	r7, #32
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40006400 	.word	0x40006400
 8001188:	40021000 	.word	0x40021000
 800118c:	40010800 	.word	0x40010800

08001190 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b088      	sub	sp, #32
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001198:	f107 0310 	add.w	r3, r7, #16
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a3f      	ldr	r2, [pc, #252]	; (80012a8 <HAL_I2C_MspInit+0x118>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d177      	bne.n	80012a0 <HAL_I2C_MspInit+0x110>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b0:	4b3e      	ldr	r3, [pc, #248]	; (80012ac <HAL_I2C_MspInit+0x11c>)
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	4a3d      	ldr	r2, [pc, #244]	; (80012ac <HAL_I2C_MspInit+0x11c>)
 80011b6:	f043 0308 	orr.w	r3, r3, #8
 80011ba:	6193      	str	r3, [r2, #24]
 80011bc:	4b3b      	ldr	r3, [pc, #236]	; (80012ac <HAL_I2C_MspInit+0x11c>)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	f003 0308 	and.w	r3, r3, #8
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011c8:	23c0      	movs	r3, #192	; 0xc0
 80011ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011cc:	2312      	movs	r3, #18
 80011ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011d0:	2303      	movs	r3, #3
 80011d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d4:	f107 0310 	add.w	r3, r7, #16
 80011d8:	4619      	mov	r1, r3
 80011da:	4835      	ldr	r0, [pc, #212]	; (80012b0 <HAL_I2C_MspInit+0x120>)
 80011dc:	f001 fc28 	bl	8002a30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011e0:	4b32      	ldr	r3, [pc, #200]	; (80012ac <HAL_I2C_MspInit+0x11c>)
 80011e2:	69db      	ldr	r3, [r3, #28]
 80011e4:	4a31      	ldr	r2, [pc, #196]	; (80012ac <HAL_I2C_MspInit+0x11c>)
 80011e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011ea:	61d3      	str	r3, [r2, #28]
 80011ec:	4b2f      	ldr	r3, [pc, #188]	; (80012ac <HAL_I2C_MspInit+0x11c>)
 80011ee:	69db      	ldr	r3, [r3, #28]
 80011f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011f4:	60bb      	str	r3, [r7, #8]
 80011f6:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 80011f8:	4b2e      	ldr	r3, [pc, #184]	; (80012b4 <HAL_I2C_MspInit+0x124>)
 80011fa:	4a2f      	ldr	r2, [pc, #188]	; (80012b8 <HAL_I2C_MspInit+0x128>)
 80011fc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011fe:	4b2d      	ldr	r3, [pc, #180]	; (80012b4 <HAL_I2C_MspInit+0x124>)
 8001200:	2200      	movs	r2, #0
 8001202:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001204:	4b2b      	ldr	r3, [pc, #172]	; (80012b4 <HAL_I2C_MspInit+0x124>)
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800120a:	4b2a      	ldr	r3, [pc, #168]	; (80012b4 <HAL_I2C_MspInit+0x124>)
 800120c:	2280      	movs	r2, #128	; 0x80
 800120e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001210:	4b28      	ldr	r3, [pc, #160]	; (80012b4 <HAL_I2C_MspInit+0x124>)
 8001212:	2200      	movs	r2, #0
 8001214:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001216:	4b27      	ldr	r3, [pc, #156]	; (80012b4 <HAL_I2C_MspInit+0x124>)
 8001218:	2200      	movs	r2, #0
 800121a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800121c:	4b25      	ldr	r3, [pc, #148]	; (80012b4 <HAL_I2C_MspInit+0x124>)
 800121e:	2200      	movs	r2, #0
 8001220:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001222:	4b24      	ldr	r3, [pc, #144]	; (80012b4 <HAL_I2C_MspInit+0x124>)
 8001224:	2200      	movs	r2, #0
 8001226:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001228:	4822      	ldr	r0, [pc, #136]	; (80012b4 <HAL_I2C_MspInit+0x124>)
 800122a:	f001 fa1b 	bl	8002664 <HAL_DMA_Init>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <HAL_I2C_MspInit+0xa8>
    {
      Error_Handler();
 8001234:	f7ff ff0a 	bl	800104c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4a1e      	ldr	r2, [pc, #120]	; (80012b4 <HAL_I2C_MspInit+0x124>)
 800123c:	639a      	str	r2, [r3, #56]	; 0x38
 800123e:	4a1d      	ldr	r2, [pc, #116]	; (80012b4 <HAL_I2C_MspInit+0x124>)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8001244:	4b1d      	ldr	r3, [pc, #116]	; (80012bc <HAL_I2C_MspInit+0x12c>)
 8001246:	4a1e      	ldr	r2, [pc, #120]	; (80012c0 <HAL_I2C_MspInit+0x130>)
 8001248:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800124a:	4b1c      	ldr	r3, [pc, #112]	; (80012bc <HAL_I2C_MspInit+0x12c>)
 800124c:	2210      	movs	r2, #16
 800124e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001250:	4b1a      	ldr	r3, [pc, #104]	; (80012bc <HAL_I2C_MspInit+0x12c>)
 8001252:	2200      	movs	r2, #0
 8001254:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001256:	4b19      	ldr	r3, [pc, #100]	; (80012bc <HAL_I2C_MspInit+0x12c>)
 8001258:	2280      	movs	r2, #128	; 0x80
 800125a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800125c:	4b17      	ldr	r3, [pc, #92]	; (80012bc <HAL_I2C_MspInit+0x12c>)
 800125e:	2200      	movs	r2, #0
 8001260:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001262:	4b16      	ldr	r3, [pc, #88]	; (80012bc <HAL_I2C_MspInit+0x12c>)
 8001264:	2200      	movs	r2, #0
 8001266:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001268:	4b14      	ldr	r3, [pc, #80]	; (80012bc <HAL_I2C_MspInit+0x12c>)
 800126a:	2200      	movs	r2, #0
 800126c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800126e:	4b13      	ldr	r3, [pc, #76]	; (80012bc <HAL_I2C_MspInit+0x12c>)
 8001270:	2200      	movs	r2, #0
 8001272:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001274:	4811      	ldr	r0, [pc, #68]	; (80012bc <HAL_I2C_MspInit+0x12c>)
 8001276:	f001 f9f5 	bl	8002664 <HAL_DMA_Init>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <HAL_I2C_MspInit+0xf4>
    {
      Error_Handler();
 8001280:	f7ff fee4 	bl	800104c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4a0d      	ldr	r2, [pc, #52]	; (80012bc <HAL_I2C_MspInit+0x12c>)
 8001288:	635a      	str	r2, [r3, #52]	; 0x34
 800128a:	4a0c      	ldr	r2, [pc, #48]	; (80012bc <HAL_I2C_MspInit+0x12c>)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001290:	2200      	movs	r2, #0
 8001292:	2105      	movs	r1, #5
 8001294:	201f      	movs	r0, #31
 8001296:	f001 f9ba 	bl	800260e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800129a:	201f      	movs	r0, #31
 800129c:	f001 f9d3 	bl	8002646 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012a0:	bf00      	nop
 80012a2:	3720      	adds	r7, #32
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40005400 	.word	0x40005400
 80012ac:	40021000 	.word	0x40021000
 80012b0:	40010c00 	.word	0x40010c00
 80012b4:	20000174 	.word	0x20000174
 80012b8:	40020080 	.word	0x40020080
 80012bc:	200001b8 	.word	0x200001b8
 80012c0:	4002006c 	.word	0x4002006c

080012c4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012d4:	d10b      	bne.n	80012ee <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012d6:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <HAL_TIM_PWM_MspInit+0x34>)
 80012d8:	69db      	ldr	r3, [r3, #28]
 80012da:	4a07      	ldr	r2, [pc, #28]	; (80012f8 <HAL_TIM_PWM_MspInit+0x34>)
 80012dc:	f043 0301 	orr.w	r3, r3, #1
 80012e0:	61d3      	str	r3, [r2, #28]
 80012e2:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <HAL_TIM_PWM_MspInit+0x34>)
 80012e4:	69db      	ldr	r3, [r3, #28]
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80012ee:	bf00      	nop
 80012f0:	3714      	adds	r7, #20
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr
 80012f8:	40021000 	.word	0x40021000

080012fc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b08a      	sub	sp, #40	; 0x28
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a1e      	ldr	r2, [pc, #120]	; (8001390 <HAL_TIM_Encoder_MspInit+0x94>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d135      	bne.n	8001388 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800131c:	4b1d      	ldr	r3, [pc, #116]	; (8001394 <HAL_TIM_Encoder_MspInit+0x98>)
 800131e:	69db      	ldr	r3, [r3, #28]
 8001320:	4a1c      	ldr	r2, [pc, #112]	; (8001394 <HAL_TIM_Encoder_MspInit+0x98>)
 8001322:	f043 0302 	orr.w	r3, r3, #2
 8001326:	61d3      	str	r3, [r2, #28]
 8001328:	4b1a      	ldr	r3, [pc, #104]	; (8001394 <HAL_TIM_Encoder_MspInit+0x98>)
 800132a:	69db      	ldr	r3, [r3, #28]
 800132c:	f003 0302 	and.w	r3, r3, #2
 8001330:	613b      	str	r3, [r7, #16]
 8001332:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001334:	4b17      	ldr	r3, [pc, #92]	; (8001394 <HAL_TIM_Encoder_MspInit+0x98>)
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	4a16      	ldr	r2, [pc, #88]	; (8001394 <HAL_TIM_Encoder_MspInit+0x98>)
 800133a:	f043 0308 	orr.w	r3, r3, #8
 800133e:	6193      	str	r3, [r2, #24]
 8001340:	4b14      	ldr	r3, [pc, #80]	; (8001394 <HAL_TIM_Encoder_MspInit+0x98>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	f003 0308 	and.w	r3, r3, #8
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800134c:	2330      	movs	r3, #48	; 0x30
 800134e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001350:	2300      	movs	r3, #0
 8001352:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001358:	f107 0314 	add.w	r3, r7, #20
 800135c:	4619      	mov	r1, r3
 800135e:	480e      	ldr	r0, [pc, #56]	; (8001398 <HAL_TIM_Encoder_MspInit+0x9c>)
 8001360:	f001 fb66 	bl	8002a30 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8001364:	4b0d      	ldr	r3, [pc, #52]	; (800139c <HAL_TIM_Encoder_MspInit+0xa0>)
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	627b      	str	r3, [r7, #36]	; 0x24
 800136a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001370:	627b      	str	r3, [r7, #36]	; 0x24
 8001372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001374:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001378:	627b      	str	r3, [r7, #36]	; 0x24
 800137a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001380:	627b      	str	r3, [r7, #36]	; 0x24
 8001382:	4a06      	ldr	r2, [pc, #24]	; (800139c <HAL_TIM_Encoder_MspInit+0xa0>)
 8001384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001386:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001388:	bf00      	nop
 800138a:	3728      	adds	r7, #40	; 0x28
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40000400 	.word	0x40000400
 8001394:	40021000 	.word	0x40021000
 8001398:	40010c00 	.word	0x40010c00
 800139c:	40010000 	.word	0x40010000

080013a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b088      	sub	sp, #32
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a8:	f107 0310 	add.w	r3, r7, #16
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013be:	d117      	bne.n	80013f0 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c0:	4b0d      	ldr	r3, [pc, #52]	; (80013f8 <HAL_TIM_MspPostInit+0x58>)
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	4a0c      	ldr	r2, [pc, #48]	; (80013f8 <HAL_TIM_MspPostInit+0x58>)
 80013c6:	f043 0304 	orr.w	r3, r3, #4
 80013ca:	6193      	str	r3, [r2, #24]
 80013cc:	4b0a      	ldr	r3, [pc, #40]	; (80013f8 <HAL_TIM_MspPostInit+0x58>)
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	f003 0304 	and.w	r3, r3, #4
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80013d8:	2302      	movs	r3, #2
 80013da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013dc:	2302      	movs	r3, #2
 80013de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e0:	2302      	movs	r3, #2
 80013e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e4:	f107 0310 	add.w	r3, r7, #16
 80013e8:	4619      	mov	r1, r3
 80013ea:	4804      	ldr	r0, [pc, #16]	; (80013fc <HAL_TIM_MspPostInit+0x5c>)
 80013ec:	f001 fb20 	bl	8002a30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80013f0:	bf00      	nop
 80013f2:	3720      	adds	r7, #32
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40021000 	.word	0x40021000
 80013fc:	40010800 	.word	0x40010800

08001400 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b088      	sub	sp, #32
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001408:	f107 0310 	add.w	r3, r7, #16
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a42      	ldr	r2, [pc, #264]	; (8001524 <HAL_UART_MspInit+0x124>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d17d      	bne.n	800151c <HAL_UART_MspInit+0x11c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001420:	4b41      	ldr	r3, [pc, #260]	; (8001528 <HAL_UART_MspInit+0x128>)
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	4a40      	ldr	r2, [pc, #256]	; (8001528 <HAL_UART_MspInit+0x128>)
 8001426:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800142a:	6193      	str	r3, [r2, #24]
 800142c:	4b3e      	ldr	r3, [pc, #248]	; (8001528 <HAL_UART_MspInit+0x128>)
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001438:	4b3b      	ldr	r3, [pc, #236]	; (8001528 <HAL_UART_MspInit+0x128>)
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	4a3a      	ldr	r2, [pc, #232]	; (8001528 <HAL_UART_MspInit+0x128>)
 800143e:	f043 0304 	orr.w	r3, r3, #4
 8001442:	6193      	str	r3, [r2, #24]
 8001444:	4b38      	ldr	r3, [pc, #224]	; (8001528 <HAL_UART_MspInit+0x128>)
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	f003 0304 	and.w	r3, r3, #4
 800144c:	60bb      	str	r3, [r7, #8]
 800144e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001450:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001454:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001456:	2302      	movs	r3, #2
 8001458:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800145a:	2303      	movs	r3, #3
 800145c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145e:	f107 0310 	add.w	r3, r7, #16
 8001462:	4619      	mov	r1, r3
 8001464:	4831      	ldr	r0, [pc, #196]	; (800152c <HAL_UART_MspInit+0x12c>)
 8001466:	f001 fae3 	bl	8002a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800146a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800146e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001478:	f107 0310 	add.w	r3, r7, #16
 800147c:	4619      	mov	r1, r3
 800147e:	482b      	ldr	r0, [pc, #172]	; (800152c <HAL_UART_MspInit+0x12c>)
 8001480:	f001 fad6 	bl	8002a30 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001484:	4b2a      	ldr	r3, [pc, #168]	; (8001530 <HAL_UART_MspInit+0x130>)
 8001486:	4a2b      	ldr	r2, [pc, #172]	; (8001534 <HAL_UART_MspInit+0x134>)
 8001488:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800148a:	4b29      	ldr	r3, [pc, #164]	; (8001530 <HAL_UART_MspInit+0x130>)
 800148c:	2200      	movs	r2, #0
 800148e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001490:	4b27      	ldr	r3, [pc, #156]	; (8001530 <HAL_UART_MspInit+0x130>)
 8001492:	2200      	movs	r2, #0
 8001494:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001496:	4b26      	ldr	r3, [pc, #152]	; (8001530 <HAL_UART_MspInit+0x130>)
 8001498:	2280      	movs	r2, #128	; 0x80
 800149a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800149c:	4b24      	ldr	r3, [pc, #144]	; (8001530 <HAL_UART_MspInit+0x130>)
 800149e:	2200      	movs	r2, #0
 80014a0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014a2:	4b23      	ldr	r3, [pc, #140]	; (8001530 <HAL_UART_MspInit+0x130>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80014a8:	4b21      	ldr	r3, [pc, #132]	; (8001530 <HAL_UART_MspInit+0x130>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80014ae:	4b20      	ldr	r3, [pc, #128]	; (8001530 <HAL_UART_MspInit+0x130>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80014b4:	481e      	ldr	r0, [pc, #120]	; (8001530 <HAL_UART_MspInit+0x130>)
 80014b6:	f001 f8d5 	bl	8002664 <HAL_DMA_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80014c0:	f7ff fdc4 	bl	800104c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	4a1a      	ldr	r2, [pc, #104]	; (8001530 <HAL_UART_MspInit+0x130>)
 80014c8:	63da      	str	r2, [r3, #60]	; 0x3c
 80014ca:	4a19      	ldr	r2, [pc, #100]	; (8001530 <HAL_UART_MspInit+0x130>)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80014d0:	4b19      	ldr	r3, [pc, #100]	; (8001538 <HAL_UART_MspInit+0x138>)
 80014d2:	4a1a      	ldr	r2, [pc, #104]	; (800153c <HAL_UART_MspInit+0x13c>)
 80014d4:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014d6:	4b18      	ldr	r3, [pc, #96]	; (8001538 <HAL_UART_MspInit+0x138>)
 80014d8:	2210      	movs	r2, #16
 80014da:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014dc:	4b16      	ldr	r3, [pc, #88]	; (8001538 <HAL_UART_MspInit+0x138>)
 80014de:	2200      	movs	r2, #0
 80014e0:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014e2:	4b15      	ldr	r3, [pc, #84]	; (8001538 <HAL_UART_MspInit+0x138>)
 80014e4:	2280      	movs	r2, #128	; 0x80
 80014e6:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014e8:	4b13      	ldr	r3, [pc, #76]	; (8001538 <HAL_UART_MspInit+0x138>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014ee:	4b12      	ldr	r3, [pc, #72]	; (8001538 <HAL_UART_MspInit+0x138>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80014f4:	4b10      	ldr	r3, [pc, #64]	; (8001538 <HAL_UART_MspInit+0x138>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80014fa:	4b0f      	ldr	r3, [pc, #60]	; (8001538 <HAL_UART_MspInit+0x138>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001500:	480d      	ldr	r0, [pc, #52]	; (8001538 <HAL_UART_MspInit+0x138>)
 8001502:	f001 f8af 	bl	8002664 <HAL_DMA_Init>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 800150c:	f7ff fd9e 	bl	800104c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	4a09      	ldr	r2, [pc, #36]	; (8001538 <HAL_UART_MspInit+0x138>)
 8001514:	639a      	str	r2, [r3, #56]	; 0x38
 8001516:	4a08      	ldr	r2, [pc, #32]	; (8001538 <HAL_UART_MspInit+0x138>)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800151c:	bf00      	nop
 800151e:	3720      	adds	r7, #32
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40013800 	.word	0x40013800
 8001528:	40021000 	.word	0x40021000
 800152c:	40010800 	.word	0x40010800
 8001530:	200002d4 	.word	0x200002d4
 8001534:	40020058 	.word	0x40020058
 8001538:	20000318 	.word	0x20000318
 800153c:	40020044 	.word	0x40020044

08001540 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b08e      	sub	sp, #56	; 0x38
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001548:	2300      	movs	r3, #0
 800154a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800154c:	2300      	movs	r3, #0
 800154e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001550:	2300      	movs	r3, #0
 8001552:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001556:	4b34      	ldr	r3, [pc, #208]	; (8001628 <HAL_InitTick+0xe8>)
 8001558:	69db      	ldr	r3, [r3, #28]
 800155a:	4a33      	ldr	r2, [pc, #204]	; (8001628 <HAL_InitTick+0xe8>)
 800155c:	f043 0304 	orr.w	r3, r3, #4
 8001560:	61d3      	str	r3, [r2, #28]
 8001562:	4b31      	ldr	r3, [pc, #196]	; (8001628 <HAL_InitTick+0xe8>)
 8001564:	69db      	ldr	r3, [r3, #28]
 8001566:	f003 0304 	and.w	r3, r3, #4
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800156e:	f107 0210 	add.w	r2, r7, #16
 8001572:	f107 0314 	add.w	r3, r7, #20
 8001576:	4611      	mov	r1, r2
 8001578:	4618      	mov	r0, r3
 800157a:	f003 ff25 	bl	80053c8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800157e:	6a3b      	ldr	r3, [r7, #32]
 8001580:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001584:	2b00      	cmp	r3, #0
 8001586:	d103      	bne.n	8001590 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001588:	f003 fef6 	bl	8005378 <HAL_RCC_GetPCLK1Freq>
 800158c:	6378      	str	r0, [r7, #52]	; 0x34
 800158e:	e004      	b.n	800159a <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001590:	f003 fef2 	bl	8005378 <HAL_RCC_GetPCLK1Freq>
 8001594:	4603      	mov	r3, r0
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800159a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800159c:	4a23      	ldr	r2, [pc, #140]	; (800162c <HAL_InitTick+0xec>)
 800159e:	fba2 2303 	umull	r2, r3, r2, r3
 80015a2:	0c9b      	lsrs	r3, r3, #18
 80015a4:	3b01      	subs	r3, #1
 80015a6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80015a8:	4b21      	ldr	r3, [pc, #132]	; (8001630 <HAL_InitTick+0xf0>)
 80015aa:	4a22      	ldr	r2, [pc, #136]	; (8001634 <HAL_InitTick+0xf4>)
 80015ac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80015ae:	4b20      	ldr	r3, [pc, #128]	; (8001630 <HAL_InitTick+0xf0>)
 80015b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015b4:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80015b6:	4a1e      	ldr	r2, [pc, #120]	; (8001630 <HAL_InitTick+0xf0>)
 80015b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ba:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80015bc:	4b1c      	ldr	r3, [pc, #112]	; (8001630 <HAL_InitTick+0xf0>)
 80015be:	2200      	movs	r2, #0
 80015c0:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c2:	4b1b      	ldr	r3, [pc, #108]	; (8001630 <HAL_InitTick+0xf0>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015c8:	4b19      	ldr	r3, [pc, #100]	; (8001630 <HAL_InitTick+0xf0>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80015ce:	4818      	ldr	r0, [pc, #96]	; (8001630 <HAL_InitTick+0xf0>)
 80015d0:	f003 ff48 	bl	8005464 <HAL_TIM_Base_Init>
 80015d4:	4603      	mov	r3, r0
 80015d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80015da:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d11b      	bne.n	800161a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80015e2:	4813      	ldr	r0, [pc, #76]	; (8001630 <HAL_InitTick+0xf0>)
 80015e4:	f003 ff96 	bl	8005514 <HAL_TIM_Base_Start_IT>
 80015e8:	4603      	mov	r3, r0
 80015ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80015ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d111      	bne.n	800161a <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80015f6:	201e      	movs	r0, #30
 80015f8:	f001 f825 	bl	8002646 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2b0f      	cmp	r3, #15
 8001600:	d808      	bhi.n	8001614 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001602:	2200      	movs	r2, #0
 8001604:	6879      	ldr	r1, [r7, #4]
 8001606:	201e      	movs	r0, #30
 8001608:	f001 f801 	bl	800260e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800160c:	4a0a      	ldr	r2, [pc, #40]	; (8001638 <HAL_InitTick+0xf8>)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6013      	str	r3, [r2, #0]
 8001612:	e002      	b.n	800161a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800161a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800161e:	4618      	mov	r0, r3
 8001620:	3738      	adds	r7, #56	; 0x38
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40021000 	.word	0x40021000
 800162c:	431bde83 	.word	0x431bde83
 8001630:	2000044c 	.word	0x2000044c
 8001634:	40000800 	.word	0x40000800
 8001638:	2000001c 	.word	0x2000001c

0800163c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001640:	e7fe      	b.n	8001640 <NMI_Handler+0x4>

08001642 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001642:	b480      	push	{r7}
 8001644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001646:	e7fe      	b.n	8001646 <HardFault_Handler+0x4>

08001648 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800164c:	e7fe      	b.n	800164c <MemManage_Handler+0x4>

0800164e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800164e:	b480      	push	{r7}
 8001650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001652:	e7fe      	b.n	8001652 <BusFault_Handler+0x4>

08001654 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001658:	e7fe      	b.n	8001658 <UsageFault_Handler+0x4>

0800165a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800165a:	b480      	push	{r7}
 800165c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	46bd      	mov	sp, r7
 8001662:	bc80      	pop	{r7}
 8001664:	4770      	bx	lr
	...

08001668 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800166c:	4802      	ldr	r0, [pc, #8]	; (8001678 <DMA1_Channel4_IRQHandler+0x10>)
 800166e:	f001 f8cb 	bl	8002808 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20000318 	.word	0x20000318

0800167c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001680:	4802      	ldr	r0, [pc, #8]	; (800168c <DMA1_Channel5_IRQHandler+0x10>)
 8001682:	f001 f8c1 	bl	8002808 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	200002d4 	.word	0x200002d4

08001690 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001694:	4802      	ldr	r0, [pc, #8]	; (80016a0 <DMA1_Channel6_IRQHandler+0x10>)
 8001696:	f001 f8b7 	bl	8002808 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	200001b8 	.word	0x200001b8

080016a4 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80016a8:	4802      	ldr	r0, [pc, #8]	; (80016b4 <DMA1_Channel7_IRQHandler+0x10>)
 80016aa:	f001 f8ad 	bl	8002808 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20000174 	.word	0x20000174

080016b8 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80016bc:	4802      	ldr	r0, [pc, #8]	; (80016c8 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 80016be:	f000 fca6 	bl	800200e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	200000bc 	.word	0x200000bc

080016cc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80016d0:	4802      	ldr	r0, [pc, #8]	; (80016dc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80016d2:	f000 fc9c 	bl	800200e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	200000bc 	.word	0x200000bc

080016e0 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80016e4:	4802      	ldr	r0, [pc, #8]	; (80016f0 <CAN1_RX1_IRQHandler+0x10>)
 80016e6:	f000 fc92 	bl	800200e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	200000bc 	.word	0x200000bc

080016f4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80016f8:	4802      	ldr	r0, [pc, #8]	; (8001704 <TIM4_IRQHandler+0x10>)
 80016fa:	f004 fa16 	bl	8005b2a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	2000044c 	.word	0x2000044c

08001708 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800170c:	4802      	ldr	r0, [pc, #8]	; (8001718 <I2C1_EV_IRQHandler+0x10>)
 800170e:	f001 fe5d 	bl	80033cc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20000120 	.word	0x20000120

0800171c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001720:	bf00      	nop
 8001722:	46bd      	mov	sp, r7
 8001724:	bc80      	pop	{r7}
 8001726:	4770      	bx	lr

08001728 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001728:	f7ff fff8 	bl	800171c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800172c:	480b      	ldr	r0, [pc, #44]	; (800175c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800172e:	490c      	ldr	r1, [pc, #48]	; (8001760 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001730:	4a0c      	ldr	r2, [pc, #48]	; (8001764 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001732:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001734:	e002      	b.n	800173c <LoopCopyDataInit>

08001736 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001736:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001738:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800173a:	3304      	adds	r3, #4

0800173c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800173c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800173e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001740:	d3f9      	bcc.n	8001736 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001742:	4a09      	ldr	r2, [pc, #36]	; (8001768 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001744:	4c09      	ldr	r4, [pc, #36]	; (800176c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001746:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001748:	e001      	b.n	800174e <LoopFillZerobss>

0800174a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800174a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800174c:	3204      	adds	r2, #4

0800174e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800174e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001750:	d3fb      	bcc.n	800174a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001752:	f00a f94f 	bl	800b9f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001756:	f7ff f85f 	bl	8000818 <main>
  bx lr
 800175a:	4770      	bx	lr
  ldr r0, =_sdata
 800175c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001760:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001764:	0800bc00 	.word	0x0800bc00
  ldr r2, =_sbss
 8001768:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800176c:	20002fbc 	.word	0x20002fbc

08001770 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001770:	e7fe      	b.n	8001770 <ADC1_2_IRQHandler>

08001772 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b084      	sub	sp, #16
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d104      	bne.n	800178a <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8001780:	b672      	cpsid	i
}
 8001782:	bf00      	nop
 8001784:	f7ff fc62 	bl	800104c <Error_Handler>
 8001788:	e7fe      	b.n	8001788 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	7a1b      	ldrb	r3, [r3, #8]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d904      	bls.n	800179c <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001792:	b672      	cpsid	i
}
 8001794:	bf00      	nop
 8001796:	f7ff fc59 	bl	800104c <Error_Handler>
 800179a:	e7fe      	b.n	800179a <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	7a1b      	ldrb	r3, [r3, #8]
 80017a0:	1c5a      	adds	r2, r3, #1
 80017a2:	b2d1      	uxtb	r1, r2
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	7211      	strb	r1, [r2, #8]
 80017a8:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80017aa:	f3ef 8211 	mrs	r2, BASEPRI
 80017ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017b2:	f383 8811 	msr	BASEPRI, r3
 80017b6:	f3bf 8f6f 	isb	sy
 80017ba:	f3bf 8f4f 	dsb	sy
 80017be:	60fa      	str	r2, [r7, #12]
 80017c0:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80017c2:	68fa      	ldr	r2, [r7, #12]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 80017ca:	bf00      	nop
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b084      	sub	sp, #16
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d104      	bne.n	80017ea <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80017e0:	b672      	cpsid	i
}
 80017e2:	bf00      	nop
 80017e4:	f7ff fc32 	bl	800104c <Error_Handler>
 80017e8:	e7fe      	b.n	80017e8 <stm32_lock_release+0x16>
  lock->nesting_level--;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	7a1b      	ldrb	r3, [r3, #8]
 80017ee:	3b01      	subs	r3, #1
 80017f0:	b2da      	uxtb	r2, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	7a1b      	ldrb	r3, [r3, #8]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d904      	bls.n	8001808 <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 80017fe:	b672      	cpsid	i
}
 8001800:	bf00      	nop
 8001802:	f7ff fc23 	bl	800104c <Error_Handler>
 8001806:	e7fe      	b.n	8001806 <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	7a1b      	ldrb	r3, [r3, #8]
 800180c:	461a      	mov	r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001814:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800181c:	bf00      	nop
}
 800181e:	bf00      	nop
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b082      	sub	sp, #8
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d104      	bne.n	800183e <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8001834:	b672      	cpsid	i
}
 8001836:	bf00      	nop
 8001838:	f7ff fc08 	bl	800104c <Error_Handler>
 800183c:	e7fe      	b.n	800183c <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff ff96 	bl	8001772 <stm32_lock_acquire>
}
 8001846:	bf00      	nop
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b082      	sub	sp, #8
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d104      	bne.n	8001866 <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800185c:	b672      	cpsid	i
}
 800185e:	bf00      	nop
 8001860:	f7ff fbf4 	bl	800104c <Error_Handler>
 8001864:	e7fe      	b.n	8001864 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff ffb2 	bl	80017d2 <stm32_lock_release>
}
 800186e:	bf00      	nop
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
	...

08001878 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800187c:	4b08      	ldr	r3, [pc, #32]	; (80018a0 <HAL_Init+0x28>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a07      	ldr	r2, [pc, #28]	; (80018a0 <HAL_Init+0x28>)
 8001882:	f043 0310 	orr.w	r3, r3, #16
 8001886:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001888:	2003      	movs	r0, #3
 800188a:	f000 feb5 	bl	80025f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800188e:	200f      	movs	r0, #15
 8001890:	f7ff fe56 	bl	8001540 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001894:	f7ff fbe0 	bl	8001058 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40022000 	.word	0x40022000

080018a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018a8:	4b05      	ldr	r3, [pc, #20]	; (80018c0 <HAL_IncTick+0x1c>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	461a      	mov	r2, r3
 80018ae:	4b05      	ldr	r3, [pc, #20]	; (80018c4 <HAL_IncTick+0x20>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4413      	add	r3, r2
 80018b4:	4a03      	ldr	r2, [pc, #12]	; (80018c4 <HAL_IncTick+0x20>)
 80018b6:	6013      	str	r3, [r2, #0]
}
 80018b8:	bf00      	nop
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bc80      	pop	{r7}
 80018be:	4770      	bx	lr
 80018c0:	20000020 	.word	0x20000020
 80018c4:	200004a0 	.word	0x200004a0

080018c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  return uwTick;
 80018cc:	4b02      	ldr	r3, [pc, #8]	; (80018d8 <HAL_GetTick+0x10>)
 80018ce:	681b      	ldr	r3, [r3, #0]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr
 80018d8:	200004a0 	.word	0x200004a0

080018dc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d101      	bne.n	80018ee <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e11c      	b.n	8001b28 <HAL_CAN_Init+0x24c>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d131      	bne.n	800195e <HAL_CAN_Init+0x82>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a8c      	ldr	r2, [pc, #560]	; (8001b30 <HAL_CAN_Init+0x254>)
 80018fe:	641a      	str	r2, [r3, #64]	; 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4a8c      	ldr	r2, [pc, #560]	; (8001b34 <HAL_CAN_Init+0x258>)
 8001904:	645a      	str	r2, [r3, #68]	; 0x44
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a8b      	ldr	r2, [pc, #556]	; (8001b38 <HAL_CAN_Init+0x25c>)
 800190a:	649a      	str	r2, [r3, #72]	; 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4a8b      	ldr	r2, [pc, #556]	; (8001b3c <HAL_CAN_Init+0x260>)
 8001910:	64da      	str	r2, [r3, #76]	; 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a8a      	ldr	r2, [pc, #552]	; (8001b40 <HAL_CAN_Init+0x264>)
 8001916:	629a      	str	r2, [r3, #40]	; 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4a8a      	ldr	r2, [pc, #552]	; (8001b44 <HAL_CAN_Init+0x268>)
 800191c:	62da      	str	r2, [r3, #44]	; 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a89      	ldr	r2, [pc, #548]	; (8001b48 <HAL_CAN_Init+0x26c>)
 8001922:	631a      	str	r2, [r3, #48]	; 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4a89      	ldr	r2, [pc, #548]	; (8001b4c <HAL_CAN_Init+0x270>)
 8001928:	635a      	str	r2, [r3, #52]	; 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a88      	ldr	r2, [pc, #544]	; (8001b50 <HAL_CAN_Init+0x274>)
 800192e:	639a      	str	r2, [r3, #56]	; 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4a88      	ldr	r2, [pc, #544]	; (8001b54 <HAL_CAN_Init+0x278>)
 8001934:	63da      	str	r2, [r3, #60]	; 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a87      	ldr	r2, [pc, #540]	; (8001b58 <HAL_CAN_Init+0x27c>)
 800193a:	651a      	str	r2, [r3, #80]	; 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4a87      	ldr	r2, [pc, #540]	; (8001b5c <HAL_CAN_Init+0x280>)
 8001940:	655a      	str	r2, [r3, #84]	; 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a86      	ldr	r2, [pc, #536]	; (8001b60 <HAL_CAN_Init+0x284>)
 8001946:	659a      	str	r2, [r3, #88]	; 0x58

    if (hcan->MspInitCallback == NULL)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800194c:	2b00      	cmp	r3, #0
 800194e:	d102      	bne.n	8001956 <HAL_CAN_Init+0x7a>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4a84      	ldr	r2, [pc, #528]	; (8001b64 <HAL_CAN_Init+0x288>)
 8001954:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	4798      	blx	r3
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f042 0201 	orr.w	r2, r2, #1
 800196c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800196e:	f7ff ffab 	bl	80018c8 <HAL_GetTick>
 8001972:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001974:	e012      	b.n	800199c <HAL_CAN_Init+0xc0>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001976:	f7ff ffa7 	bl	80018c8 <HAL_GetTick>
 800197a:	4602      	mov	r2, r0
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	2b0a      	cmp	r3, #10
 8001982:	d90b      	bls.n	800199c <HAL_CAN_Init+0xc0>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001988:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2205      	movs	r2, #5
 8001994:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e0c5      	b.n	8001b28 <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d0e5      	beq.n	8001976 <HAL_CAN_Init+0x9a>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f022 0202 	bic.w	r2, r2, #2
 80019b8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019ba:	f7ff ff85 	bl	80018c8 <HAL_GetTick>
 80019be:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80019c0:	e012      	b.n	80019e8 <HAL_CAN_Init+0x10c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80019c2:	f7ff ff81 	bl	80018c8 <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b0a      	cmp	r3, #10
 80019ce:	d90b      	bls.n	80019e8 <HAL_CAN_Init+0x10c>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2205      	movs	r2, #5
 80019e0:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e09f      	b.n	8001b28 <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d1e5      	bne.n	80019c2 <HAL_CAN_Init+0xe6>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	7e1b      	ldrb	r3, [r3, #24]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d108      	bne.n	8001a10 <HAL_CAN_Init+0x134>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	e007      	b.n	8001a20 <HAL_CAN_Init+0x144>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a1e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	7e5b      	ldrb	r3, [r3, #25]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d108      	bne.n	8001a3a <HAL_CAN_Init+0x15e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	e007      	b.n	8001a4a <HAL_CAN_Init+0x16e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a48:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	7e9b      	ldrb	r3, [r3, #26]
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d108      	bne.n	8001a64 <HAL_CAN_Init+0x188>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f042 0220 	orr.w	r2, r2, #32
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	e007      	b.n	8001a74 <HAL_CAN_Init+0x198>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f022 0220 	bic.w	r2, r2, #32
 8001a72:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	7edb      	ldrb	r3, [r3, #27]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d108      	bne.n	8001a8e <HAL_CAN_Init+0x1b2>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f022 0210 	bic.w	r2, r2, #16
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	e007      	b.n	8001a9e <HAL_CAN_Init+0x1c2>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f042 0210 	orr.w	r2, r2, #16
 8001a9c:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	7f1b      	ldrb	r3, [r3, #28]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d108      	bne.n	8001ab8 <HAL_CAN_Init+0x1dc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f042 0208 	orr.w	r2, r2, #8
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	e007      	b.n	8001ac8 <HAL_CAN_Init+0x1ec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f022 0208 	bic.w	r2, r2, #8
 8001ac6:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	7f5b      	ldrb	r3, [r3, #29]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d108      	bne.n	8001ae2 <HAL_CAN_Init+0x206>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f042 0204 	orr.w	r2, r2, #4
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	e007      	b.n	8001af2 <HAL_CAN_Init+0x216>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f022 0204 	bic.w	r2, r2, #4
 8001af0:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	689a      	ldr	r2, [r3, #8]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	431a      	orrs	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	691b      	ldr	r3, [r3, #16]
 8001b00:	431a      	orrs	r2, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	695b      	ldr	r3, [r3, #20]
 8001b06:	ea42 0103 	orr.w	r1, r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	1e5a      	subs	r2, r3, #1
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	430a      	orrs	r2, r1
 8001b16:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2201      	movs	r2, #1
 8001b22:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001b26:	2300      	movs	r3, #0
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3710      	adds	r7, #16
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	080007a1 	.word	0x080007a1
 8001b34:	08002405 	.word	0x08002405
 8001b38:	080007dd 	.word	0x080007dd
 8001b3c:	08002417 	.word	0x08002417
 8001b40:	08002399 	.word	0x08002399
 8001b44:	080023ab 	.word	0x080023ab
 8001b48:	080023bd 	.word	0x080023bd
 8001b4c:	080023cf 	.word	0x080023cf
 8001b50:	080023e1 	.word	0x080023e1
 8001b54:	080023f3 	.word	0x080023f3
 8001b58:	08002429 	.word	0x08002429
 8001b5c:	0800243b 	.word	0x0800243b
 8001b60:	0800244d 	.word	0x0800244d
 8001b64:	080010c9 	.word	0x080010c9

08001b68 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b087      	sub	sp, #28
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b7e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001b80:	7cfb      	ldrb	r3, [r7, #19]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d003      	beq.n	8001b8e <HAL_CAN_ConfigFilter+0x26>
 8001b86:	7cfb      	ldrb	r3, [r7, #19]
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	f040 80aa 	bne.w	8001ce2 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b94:	f043 0201 	orr.w	r2, r3, #1
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	695b      	ldr	r3, [r3, #20]
 8001ba2:	f003 031f 	and.w	r3, r3, #31
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	43db      	mvns	r3, r3
 8001bb8:	401a      	ands	r2, r3
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	69db      	ldr	r3, [r3, #28]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d123      	bne.n	8001c10 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	401a      	ands	r2, r3
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001be6:	683a      	ldr	r2, [r7, #0]
 8001be8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001bea:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	3248      	adds	r2, #72	; 0x48
 8001bf0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c04:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c06:	6979      	ldr	r1, [r7, #20]
 8001c08:	3348      	adds	r3, #72	; 0x48
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	440b      	add	r3, r1
 8001c0e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	69db      	ldr	r3, [r3, #28]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d122      	bne.n	8001c5e <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	431a      	orrs	r2, r3
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c34:	683a      	ldr	r2, [r7, #0]
 8001c36:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001c38:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	3248      	adds	r2, #72	; 0x48
 8001c3e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c52:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c54:	6979      	ldr	r1, [r7, #20]
 8001c56:	3348      	adds	r3, #72	; 0x48
 8001c58:	00db      	lsls	r3, r3, #3
 8001c5a:	440b      	add	r3, r1
 8001c5c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d109      	bne.n	8001c7a <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	401a      	ands	r2, r3
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001c78:	e007      	b.n	8001c8a <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	431a      	orrs	r2, r3
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d109      	bne.n	8001ca6 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	43db      	mvns	r3, r3
 8001c9c:	401a      	ands	r2, r3
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001ca4:	e007      	b.n	8001cb6 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	431a      	orrs	r2, r3
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	6a1b      	ldr	r3, [r3, #32]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d107      	bne.n	8001cce <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	431a      	orrs	r2, r3
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001cd4:	f023 0201 	bic.w	r2, r3, #1
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	e006      	b.n	8001cf0 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
  }
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	371c      	adds	r7, #28
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bc80      	pop	{r7}
 8001cf8:	4770      	bx	lr

08001cfa <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b084      	sub	sp, #16
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d12e      	bne.n	8001d6c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2202      	movs	r2, #2
 8001d12:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f022 0201 	bic.w	r2, r2, #1
 8001d24:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001d26:	f7ff fdcf 	bl	80018c8 <HAL_GetTick>
 8001d2a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001d2c:	e012      	b.n	8001d54 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d2e:	f7ff fdcb 	bl	80018c8 <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	2b0a      	cmp	r3, #10
 8001d3a:	d90b      	bls.n	8001d54 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d40:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2205      	movs	r2, #5
 8001d4c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e012      	b.n	8001d7a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d1e5      	bne.n	8001d2e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	e006      	b.n	8001d7a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d70:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
  }
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3710      	adds	r7, #16
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001d82:	b480      	push	{r7}
 8001d84:	b087      	sub	sp, #28
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	60f8      	str	r0, [r7, #12]
 8001d8a:	60b9      	str	r1, [r7, #8]
 8001d8c:	607a      	str	r2, [r7, #4]
 8001d8e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d96:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d98:	7dfb      	ldrb	r3, [r7, #23]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d003      	beq.n	8001da6 <HAL_CAN_GetRxMessage+0x24>
 8001d9e:	7dfb      	ldrb	r3, [r7, #23]
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	f040 8103 	bne.w	8001fac <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d10e      	bne.n	8001dca <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	f003 0303 	and.w	r3, r3, #3
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d116      	bne.n	8001de8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e0f7      	b.n	8001fba <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	691b      	ldr	r3, [r3, #16]
 8001dd0:	f003 0303 	and.w	r3, r3, #3
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d107      	bne.n	8001de8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ddc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e0e8      	b.n	8001fba <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	331b      	adds	r3, #27
 8001df0:	011b      	lsls	r3, r3, #4
 8001df2:	4413      	add	r3, r2
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0204 	and.w	r2, r3, #4
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d10c      	bne.n	8001e20 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	331b      	adds	r3, #27
 8001e0e:	011b      	lsls	r3, r3, #4
 8001e10:	4413      	add	r3, r2
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	0d5b      	lsrs	r3, r3, #21
 8001e16:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	601a      	str	r2, [r3, #0]
 8001e1e:	e00b      	b.n	8001e38 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	331b      	adds	r3, #27
 8001e28:	011b      	lsls	r3, r3, #4
 8001e2a:	4413      	add	r3, r2
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	08db      	lsrs	r3, r3, #3
 8001e30:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	331b      	adds	r3, #27
 8001e40:	011b      	lsls	r3, r3, #4
 8001e42:	4413      	add	r3, r2
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0202 	and.w	r2, r3, #2
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	331b      	adds	r3, #27
 8001e56:	011b      	lsls	r3, r3, #4
 8001e58:	4413      	add	r3, r2
 8001e5a:	3304      	adds	r3, #4
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0308 	and.w	r3, r3, #8
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d003      	beq.n	8001e6e <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2208      	movs	r2, #8
 8001e6a:	611a      	str	r2, [r3, #16]
 8001e6c:	e00b      	b.n	8001e86 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	331b      	adds	r3, #27
 8001e76:	011b      	lsls	r3, r3, #4
 8001e78:	4413      	add	r3, r2
 8001e7a:	3304      	adds	r3, #4
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 020f 	and.w	r2, r3, #15
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	331b      	adds	r3, #27
 8001e8e:	011b      	lsls	r3, r3, #4
 8001e90:	4413      	add	r3, r2
 8001e92:	3304      	adds	r3, #4
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	0a1b      	lsrs	r3, r3, #8
 8001e98:	b2da      	uxtb	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	331b      	adds	r3, #27
 8001ea6:	011b      	lsls	r3, r3, #4
 8001ea8:	4413      	add	r3, r2
 8001eaa:	3304      	adds	r3, #4
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	0c1b      	lsrs	r3, r3, #16
 8001eb0:	b29a      	uxth	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	011b      	lsls	r3, r3, #4
 8001ebe:	4413      	add	r3, r2
 8001ec0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	b2da      	uxtb	r2, r3
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	011b      	lsls	r3, r3, #4
 8001ed4:	4413      	add	r3, r2
 8001ed6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	0a1a      	lsrs	r2, r3, #8
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	b2d2      	uxtb	r2, r2
 8001ee4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	011b      	lsls	r3, r3, #4
 8001eee:	4413      	add	r3, r2
 8001ef0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	0c1a      	lsrs	r2, r3, #16
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	3302      	adds	r3, #2
 8001efc:	b2d2      	uxtb	r2, r2
 8001efe:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	011b      	lsls	r3, r3, #4
 8001f08:	4413      	add	r3, r2
 8001f0a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	0e1a      	lsrs	r2, r3, #24
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	3303      	adds	r3, #3
 8001f16:	b2d2      	uxtb	r2, r2
 8001f18:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	011b      	lsls	r3, r3, #4
 8001f22:	4413      	add	r3, r2
 8001f24:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	3304      	adds	r3, #4
 8001f2e:	b2d2      	uxtb	r2, r2
 8001f30:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	011b      	lsls	r3, r3, #4
 8001f3a:	4413      	add	r3, r2
 8001f3c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	0a1a      	lsrs	r2, r3, #8
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	3305      	adds	r3, #5
 8001f48:	b2d2      	uxtb	r2, r2
 8001f4a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	011b      	lsls	r3, r3, #4
 8001f54:	4413      	add	r3, r2
 8001f56:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	0c1a      	lsrs	r2, r3, #16
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	3306      	adds	r3, #6
 8001f62:	b2d2      	uxtb	r2, r2
 8001f64:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	011b      	lsls	r3, r3, #4
 8001f6e:	4413      	add	r3, r2
 8001f70:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	0e1a      	lsrs	r2, r3, #24
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	3307      	adds	r3, #7
 8001f7c:	b2d2      	uxtb	r2, r2
 8001f7e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d108      	bne.n	8001f98 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68da      	ldr	r2, [r3, #12]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f042 0220 	orr.w	r2, r2, #32
 8001f94:	60da      	str	r2, [r3, #12]
 8001f96:	e007      	b.n	8001fa8 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	691a      	ldr	r2, [r3, #16]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f042 0220 	orr.w	r2, r2, #32
 8001fa6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	e006      	b.n	8001fba <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
  }
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	371c      	adds	r7, #28
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bc80      	pop	{r7}
 8001fc2:	4770      	bx	lr

08001fc4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b085      	sub	sp, #20
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fd4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001fd6:	7bfb      	ldrb	r3, [r7, #15]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d002      	beq.n	8001fe2 <HAL_CAN_ActivateNotification+0x1e>
 8001fdc:	7bfb      	ldrb	r3, [r7, #15]
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d109      	bne.n	8001ff6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	6959      	ldr	r1, [r3, #20]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	683a      	ldr	r2, [r7, #0]
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	e006      	b.n	8002004 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
  }
}
 8002004:	4618      	mov	r0, r3
 8002006:	3714      	adds	r7, #20
 8002008:	46bd      	mov	sp, r7
 800200a:	bc80      	pop	{r7}
 800200c:	4770      	bx	lr

0800200e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b08a      	sub	sp, #40	; 0x28
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002016:	2300      	movs	r3, #0
 8002018:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	695b      	ldr	r3, [r3, #20]
 8002020:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	691b      	ldr	r3, [r3, #16]
 8002040:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800204a:	6a3b      	ldr	r3, [r7, #32]
 800204c:	f003 0301 	and.w	r3, r3, #1
 8002050:	2b00      	cmp	r3, #0
 8002052:	f000 8083 	beq.w	800215c <HAL_CAN_IRQHandler+0x14e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	2b00      	cmp	r3, #0
 800205e:	d025      	beq.n	80020ac <HAL_CAN_IRQHandler+0x9e>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2201      	movs	r2, #1
 8002066:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d004      	beq.n	800207c <HAL_CAN_IRQHandler+0x6e>
      {
        /* Transmission Mailbox 0 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	4798      	blx	r3
 800207a:	e017      	b.n	80020ac <HAL_CAN_IRQHandler+0x9e>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	f003 0304 	and.w	r3, r3, #4
 8002082:	2b00      	cmp	r3, #0
 8002084:	d004      	beq.n	8002090 <HAL_CAN_IRQHandler+0x82>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002088:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800208c:	627b      	str	r3, [r7, #36]	; 0x24
 800208e:	e00d      	b.n	80020ac <HAL_CAN_IRQHandler+0x9e>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	f003 0308 	and.w	r3, r3, #8
 8002096:	2b00      	cmp	r3, #0
 8002098:	d004      	beq.n	80020a4 <HAL_CAN_IRQHandler+0x96>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800209a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020a0:	627b      	str	r3, [r7, #36]	; 0x24
 80020a2:	e003      	b.n	80020ac <HAL_CAN_IRQHandler+0x9e>
        else
        {
          /* Transmission Mailbox 0 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d026      	beq.n	8002104 <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020be:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d004      	beq.n	80020d4 <HAL_CAN_IRQHandler+0xc6>
      {
        /* Transmission Mailbox 1 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	4798      	blx	r3
 80020d2:	e017      	b.n	8002104 <HAL_CAN_IRQHandler+0xf6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d004      	beq.n	80020e8 <HAL_CAN_IRQHandler+0xda>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80020de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80020e4:	627b      	str	r3, [r7, #36]	; 0x24
 80020e6:	e00d      	b.n	8002104 <HAL_CAN_IRQHandler+0xf6>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d004      	beq.n	80020fc <HAL_CAN_IRQHandler+0xee>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80020f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020f8:	627b      	str	r3, [r7, #36]	; 0x24
 80020fa:	e003      	b.n	8002104 <HAL_CAN_IRQHandler+0xf6>
        else
        {
          /* Transmission Mailbox 1 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d026      	beq.n	800215c <HAL_CAN_IRQHandler+0x14e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002116:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d004      	beq.n	800212c <HAL_CAN_IRQHandler+0x11e>
      {
        /* Transmission Mailbox 2 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	4798      	blx	r3
 800212a:	e017      	b.n	800215c <HAL_CAN_IRQHandler+0x14e>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d004      	beq.n	8002140 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002138:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800213c:	627b      	str	r3, [r7, #36]	; 0x24
 800213e:	e00d      	b.n	800215c <HAL_CAN_IRQHandler+0x14e>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d004      	beq.n	8002154 <HAL_CAN_IRQHandler+0x146>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800214a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002150:	627b      	str	r3, [r7, #36]	; 0x24
 8002152:	e003      	b.n	800215c <HAL_CAN_IRQHandler+0x14e>
        else
        {
          /* Transmission Mailbox 2 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	4798      	blx	r3
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800215c:	6a3b      	ldr	r3, [r7, #32]
 800215e:	f003 0308 	and.w	r3, r3, #8
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00c      	beq.n	8002180 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	f003 0310 	and.w	r3, r3, #16
 800216c:	2b00      	cmp	r3, #0
 800216e:	d007      	beq.n	8002180 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002172:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002176:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2210      	movs	r2, #16
 800217e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002180:	6a3b      	ldr	r3, [r7, #32]
 8002182:	f003 0304 	and.w	r3, r3, #4
 8002186:	2b00      	cmp	r3, #0
 8002188:	d00c      	beq.n	80021a4 <HAL_CAN_IRQHandler+0x196>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	f003 0308 	and.w	r3, r3, #8
 8002190:	2b00      	cmp	r3, #0
 8002192:	d007      	beq.n	80021a4 <HAL_CAN_IRQHandler+0x196>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2208      	movs	r2, #8
 800219a:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80021a4:	6a3b      	ldr	r3, [r7, #32]
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d00a      	beq.n	80021c4 <HAL_CAN_IRQHandler+0x1b6>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	f003 0303 	and.w	r3, r3, #3
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d003      	beq.n	80021c4 <HAL_CAN_IRQHandler+0x1b6>
    {
      /* Receive FIFO 0 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80021c4:	6a3b      	ldr	r3, [r7, #32]
 80021c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00c      	beq.n	80021e8 <HAL_CAN_IRQHandler+0x1da>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	f003 0310 	and.w	r3, r3, #16
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d007      	beq.n	80021e8 <HAL_CAN_IRQHandler+0x1da>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80021d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021de:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2210      	movs	r2, #16
 80021e6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80021e8:	6a3b      	ldr	r3, [r7, #32]
 80021ea:	f003 0320 	and.w	r3, r3, #32
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00c      	beq.n	800220c <HAL_CAN_IRQHandler+0x1fe>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	f003 0308 	and.w	r3, r3, #8
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d007      	beq.n	800220c <HAL_CAN_IRQHandler+0x1fe>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2208      	movs	r2, #8
 8002202:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800220c:	6a3b      	ldr	r3, [r7, #32]
 800220e:	f003 0310 	and.w	r3, r3, #16
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00a      	beq.n	800222c <HAL_CAN_IRQHandler+0x21e>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	691b      	ldr	r3, [r3, #16]
 800221c:	f003 0303 	and.w	r3, r3, #3
 8002220:	2b00      	cmp	r3, #0
 8002222:	d003      	beq.n	800222c <HAL_CAN_IRQHandler+0x21e>
    {
      /* Receive FIFO 1 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800222c:	6a3b      	ldr	r3, [r7, #32]
 800222e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00c      	beq.n	8002250 <HAL_CAN_IRQHandler+0x242>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	f003 0310 	and.w	r3, r3, #16
 800223c:	2b00      	cmp	r3, #0
 800223e:	d007      	beq.n	8002250 <HAL_CAN_IRQHandler+0x242>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2210      	movs	r2, #16
 8002246:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002250:	6a3b      	ldr	r3, [r7, #32]
 8002252:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d00c      	beq.n	8002274 <HAL_CAN_IRQHandler+0x266>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	f003 0308 	and.w	r3, r3, #8
 8002260:	2b00      	cmp	r3, #0
 8002262:	d007      	beq.n	8002274 <HAL_CAN_IRQHandler+0x266>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2208      	movs	r2, #8
 800226a:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002274:	6a3b      	ldr	r3, [r7, #32]
 8002276:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d07b      	beq.n	8002376 <HAL_CAN_IRQHandler+0x368>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	f003 0304 	and.w	r3, r3, #4
 8002284:	2b00      	cmp	r3, #0
 8002286:	d072      	beq.n	800236e <HAL_CAN_IRQHandler+0x360>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002288:	6a3b      	ldr	r3, [r7, #32]
 800228a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800228e:	2b00      	cmp	r3, #0
 8002290:	d008      	beq.n	80022a4 <HAL_CAN_IRQHandler+0x296>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002298:	2b00      	cmp	r3, #0
 800229a:	d003      	beq.n	80022a4 <HAL_CAN_IRQHandler+0x296>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800229c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229e:	f043 0301 	orr.w	r3, r3, #1
 80022a2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80022a4:	6a3b      	ldr	r3, [r7, #32]
 80022a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d008      	beq.n	80022c0 <HAL_CAN_IRQHandler+0x2b2>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d003      	beq.n	80022c0 <HAL_CAN_IRQHandler+0x2b2>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80022b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ba:	f043 0302 	orr.w	r3, r3, #2
 80022be:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80022c0:	6a3b      	ldr	r3, [r7, #32]
 80022c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d008      	beq.n	80022dc <HAL_CAN_IRQHandler+0x2ce>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d003      	beq.n	80022dc <HAL_CAN_IRQHandler+0x2ce>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80022d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d6:	f043 0304 	orr.w	r3, r3, #4
 80022da:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80022dc:	6a3b      	ldr	r3, [r7, #32]
 80022de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d043      	beq.n	800236e <HAL_CAN_IRQHandler+0x360>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d03e      	beq.n	800236e <HAL_CAN_IRQHandler+0x360>
      {
        switch (esrflags & CAN_ESR_LEC)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022f6:	2b60      	cmp	r3, #96	; 0x60
 80022f8:	d02b      	beq.n	8002352 <HAL_CAN_IRQHandler+0x344>
 80022fa:	2b60      	cmp	r3, #96	; 0x60
 80022fc:	d82e      	bhi.n	800235c <HAL_CAN_IRQHandler+0x34e>
 80022fe:	2b50      	cmp	r3, #80	; 0x50
 8002300:	d022      	beq.n	8002348 <HAL_CAN_IRQHandler+0x33a>
 8002302:	2b50      	cmp	r3, #80	; 0x50
 8002304:	d82a      	bhi.n	800235c <HAL_CAN_IRQHandler+0x34e>
 8002306:	2b40      	cmp	r3, #64	; 0x40
 8002308:	d019      	beq.n	800233e <HAL_CAN_IRQHandler+0x330>
 800230a:	2b40      	cmp	r3, #64	; 0x40
 800230c:	d826      	bhi.n	800235c <HAL_CAN_IRQHandler+0x34e>
 800230e:	2b30      	cmp	r3, #48	; 0x30
 8002310:	d010      	beq.n	8002334 <HAL_CAN_IRQHandler+0x326>
 8002312:	2b30      	cmp	r3, #48	; 0x30
 8002314:	d822      	bhi.n	800235c <HAL_CAN_IRQHandler+0x34e>
 8002316:	2b10      	cmp	r3, #16
 8002318:	d002      	beq.n	8002320 <HAL_CAN_IRQHandler+0x312>
 800231a:	2b20      	cmp	r3, #32
 800231c:	d005      	beq.n	800232a <HAL_CAN_IRQHandler+0x31c>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800231e:	e01d      	b.n	800235c <HAL_CAN_IRQHandler+0x34e>
            errorcode |= HAL_CAN_ERROR_STF;
 8002320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002322:	f043 0308 	orr.w	r3, r3, #8
 8002326:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002328:	e019      	b.n	800235e <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_FOR;
 800232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232c:	f043 0310 	orr.w	r3, r3, #16
 8002330:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002332:	e014      	b.n	800235e <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002336:	f043 0320 	orr.w	r3, r3, #32
 800233a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800233c:	e00f      	b.n	800235e <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BR;
 800233e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002340:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002344:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002346:	e00a      	b.n	800235e <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BD;
 8002348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800234e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002350:	e005      	b.n	800235e <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002354:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002358:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800235a:	e000      	b.n	800235e <HAL_CAN_IRQHandler+0x350>
            break;
 800235c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	699a      	ldr	r2, [r3, #24]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800236c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2204      	movs	r2, #4
 8002374:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002378:	2b00      	cmp	r3, #0
 800237a:	d009      	beq.n	8002390 <HAL_CAN_IRQHandler+0x382>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002382:	431a      	orrs	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	4798      	blx	r3
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002390:	bf00      	nop
 8002392:	3728      	adds	r7, #40	; 0x28
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80023a0:	bf00      	nop
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bc80      	pop	{r7}
 80023a8:	4770      	bx	lr

080023aa <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80023aa:	b480      	push	{r7}
 80023ac:	b083      	sub	sp, #12
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80023b2:	bf00      	nop
 80023b4:	370c      	adds	r7, #12
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bc80      	pop	{r7}
 80023ba:	4770      	bx	lr

080023bc <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bc80      	pop	{r7}
 80023cc:	4770      	bx	lr

080023ce <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80023ce:	b480      	push	{r7}
 80023d0:	b083      	sub	sp, #12
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80023d6:	bf00      	nop
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	bc80      	pop	{r7}
 80023de:	4770      	bx	lr

080023e0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bc80      	pop	{r7}
 80023f0:	4770      	bx	lr

080023f2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80023f2:	b480      	push	{r7}
 80023f4:	b083      	sub	sp, #12
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80023fa:	bf00      	nop
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	bc80      	pop	{r7}
 8002402:	4770      	bx	lr

08002404 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	bc80      	pop	{r7}
 8002414:	4770      	bx	lr

08002416 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002416:	b480      	push	{r7}
 8002418:	b083      	sub	sp, #12
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800241e:	bf00      	nop
 8002420:	370c      	adds	r7, #12
 8002422:	46bd      	mov	sp, r7
 8002424:	bc80      	pop	{r7}
 8002426:	4770      	bx	lr

08002428 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	bc80      	pop	{r7}
 8002438:	4770      	bx	lr

0800243a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800243a:	b480      	push	{r7}
 800243c:	b083      	sub	sp, #12
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002442:	bf00      	nop
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	bc80      	pop	{r7}
 800244a:	4770      	bx	lr

0800244c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	bc80      	pop	{r7}
 800245c:	4770      	bx	lr

0800245e <HAL_CAN_ResetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan)
{
 800245e:	b480      	push	{r7}
 8002460:	b085      	sub	sp, #20
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002466:	2300      	movs	r3, #0
 8002468:	73fb      	strb	r3, [r7, #15]
  HAL_CAN_StateTypeDef state = hcan->State;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002470:	73bb      	strb	r3, [r7, #14]

  if ((state == HAL_CAN_STATE_READY) ||
 8002472:	7bbb      	ldrb	r3, [r7, #14]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d002      	beq.n	800247e <HAL_CAN_ResetError+0x20>
 8002478:	7bbb      	ldrb	r3, [r7, #14]
 800247a:	2b02      	cmp	r3, #2
 800247c:	d103      	bne.n	8002486 <HAL_CAN_ResetError+0x28>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Reset CAN error code */
    hcan->ErrorCode = 0U;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	625a      	str	r2, [r3, #36]	; 0x24
 8002484:	e007      	b.n	8002496 <HAL_CAN_ResetError+0x38>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	625a      	str	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the status */
  return status;
 8002496:	7bfb      	ldrb	r3, [r7, #15]
}
 8002498:	4618      	mov	r0, r3
 800249a:	3714      	adds	r7, #20
 800249c:	46bd      	mov	sp, r7
 800249e:	bc80      	pop	{r7}
 80024a0:	4770      	bx	lr
	...

080024a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f003 0307 	and.w	r3, r3, #7
 80024b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024b4:	4b0c      	ldr	r3, [pc, #48]	; (80024e8 <__NVIC_SetPriorityGrouping+0x44>)
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024ba:	68ba      	ldr	r2, [r7, #8]
 80024bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024c0:	4013      	ands	r3, r2
 80024c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024d6:	4a04      	ldr	r2, [pc, #16]	; (80024e8 <__NVIC_SetPriorityGrouping+0x44>)
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	60d3      	str	r3, [r2, #12]
}
 80024dc:	bf00      	nop
 80024de:	3714      	adds	r7, #20
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bc80      	pop	{r7}
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	e000ed00 	.word	0xe000ed00

080024ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024f0:	4b04      	ldr	r3, [pc, #16]	; (8002504 <__NVIC_GetPriorityGrouping+0x18>)
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	0a1b      	lsrs	r3, r3, #8
 80024f6:	f003 0307 	and.w	r3, r3, #7
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bc80      	pop	{r7}
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	e000ed00 	.word	0xe000ed00

08002508 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	4603      	mov	r3, r0
 8002510:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002516:	2b00      	cmp	r3, #0
 8002518:	db0b      	blt.n	8002532 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800251a:	79fb      	ldrb	r3, [r7, #7]
 800251c:	f003 021f 	and.w	r2, r3, #31
 8002520:	4906      	ldr	r1, [pc, #24]	; (800253c <__NVIC_EnableIRQ+0x34>)
 8002522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002526:	095b      	lsrs	r3, r3, #5
 8002528:	2001      	movs	r0, #1
 800252a:	fa00 f202 	lsl.w	r2, r0, r2
 800252e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002532:	bf00      	nop
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	bc80      	pop	{r7}
 800253a:	4770      	bx	lr
 800253c:	e000e100 	.word	0xe000e100

08002540 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	4603      	mov	r3, r0
 8002548:	6039      	str	r1, [r7, #0]
 800254a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800254c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002550:	2b00      	cmp	r3, #0
 8002552:	db0a      	blt.n	800256a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	b2da      	uxtb	r2, r3
 8002558:	490c      	ldr	r1, [pc, #48]	; (800258c <__NVIC_SetPriority+0x4c>)
 800255a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800255e:	0112      	lsls	r2, r2, #4
 8002560:	b2d2      	uxtb	r2, r2
 8002562:	440b      	add	r3, r1
 8002564:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002568:	e00a      	b.n	8002580 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	b2da      	uxtb	r2, r3
 800256e:	4908      	ldr	r1, [pc, #32]	; (8002590 <__NVIC_SetPriority+0x50>)
 8002570:	79fb      	ldrb	r3, [r7, #7]
 8002572:	f003 030f 	and.w	r3, r3, #15
 8002576:	3b04      	subs	r3, #4
 8002578:	0112      	lsls	r2, r2, #4
 800257a:	b2d2      	uxtb	r2, r2
 800257c:	440b      	add	r3, r1
 800257e:	761a      	strb	r2, [r3, #24]
}
 8002580:	bf00      	nop
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	bc80      	pop	{r7}
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	e000e100 	.word	0xe000e100
 8002590:	e000ed00 	.word	0xe000ed00

08002594 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002594:	b480      	push	{r7}
 8002596:	b089      	sub	sp, #36	; 0x24
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f003 0307 	and.w	r3, r3, #7
 80025a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	f1c3 0307 	rsb	r3, r3, #7
 80025ae:	2b04      	cmp	r3, #4
 80025b0:	bf28      	it	cs
 80025b2:	2304      	movcs	r3, #4
 80025b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	3304      	adds	r3, #4
 80025ba:	2b06      	cmp	r3, #6
 80025bc:	d902      	bls.n	80025c4 <NVIC_EncodePriority+0x30>
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	3b03      	subs	r3, #3
 80025c2:	e000      	b.n	80025c6 <NVIC_EncodePriority+0x32>
 80025c4:	2300      	movs	r3, #0
 80025c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025c8:	f04f 32ff 	mov.w	r2, #4294967295
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	fa02 f303 	lsl.w	r3, r2, r3
 80025d2:	43da      	mvns	r2, r3
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	401a      	ands	r2, r3
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025dc:	f04f 31ff 	mov.w	r1, #4294967295
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	fa01 f303 	lsl.w	r3, r1, r3
 80025e6:	43d9      	mvns	r1, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025ec:	4313      	orrs	r3, r2
         );
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3724      	adds	r7, #36	; 0x24
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bc80      	pop	{r7}
 80025f6:	4770      	bx	lr

080025f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f7ff ff4f 	bl	80024a4 <__NVIC_SetPriorityGrouping>
}
 8002606:	bf00      	nop
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800260e:	b580      	push	{r7, lr}
 8002610:	b086      	sub	sp, #24
 8002612:	af00      	add	r7, sp, #0
 8002614:	4603      	mov	r3, r0
 8002616:	60b9      	str	r1, [r7, #8]
 8002618:	607a      	str	r2, [r7, #4]
 800261a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800261c:	2300      	movs	r3, #0
 800261e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002620:	f7ff ff64 	bl	80024ec <__NVIC_GetPriorityGrouping>
 8002624:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	68b9      	ldr	r1, [r7, #8]
 800262a:	6978      	ldr	r0, [r7, #20]
 800262c:	f7ff ffb2 	bl	8002594 <NVIC_EncodePriority>
 8002630:	4602      	mov	r2, r0
 8002632:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002636:	4611      	mov	r1, r2
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff ff81 	bl	8002540 <__NVIC_SetPriority>
}
 800263e:	bf00      	nop
 8002640:	3718      	adds	r7, #24
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002646:	b580      	push	{r7, lr}
 8002648:	b082      	sub	sp, #8
 800264a:	af00      	add	r7, sp, #0
 800264c:	4603      	mov	r3, r0
 800264e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff ff57 	bl	8002508 <__NVIC_EnableIRQ>
}
 800265a:	bf00      	nop
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
	...

08002664 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002664:	b480      	push	{r7}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800266c:	2300      	movs	r3, #0
 800266e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e043      	b.n	8002702 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	461a      	mov	r2, r3
 8002680:	4b22      	ldr	r3, [pc, #136]	; (800270c <HAL_DMA_Init+0xa8>)
 8002682:	4413      	add	r3, r2
 8002684:	4a22      	ldr	r2, [pc, #136]	; (8002710 <HAL_DMA_Init+0xac>)
 8002686:	fba2 2303 	umull	r2, r3, r2, r3
 800268a:	091b      	lsrs	r3, r3, #4
 800268c:	009a      	lsls	r2, r3, #2
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a1f      	ldr	r2, [pc, #124]	; (8002714 <HAL_DMA_Init+0xb0>)
 8002696:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2202      	movs	r2, #2
 800269c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80026ae:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80026b2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80026bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	69db      	ldr	r3, [r3, #28]
 80026da:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	4313      	orrs	r3, r2
 80026e0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68fa      	ldr	r2, [r7, #12]
 80026e8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3714      	adds	r7, #20
 8002706:	46bd      	mov	sp, r7
 8002708:	bc80      	pop	{r7}
 800270a:	4770      	bx	lr
 800270c:	bffdfff8 	.word	0xbffdfff8
 8002710:	cccccccd 	.word	0xcccccccd
 8002714:	40020000 	.word	0x40020000

08002718 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002720:	2300      	movs	r3, #0
 8002722:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800272a:	b2db      	uxtb	r3, r3
 800272c:	2b02      	cmp	r3, #2
 800272e:	d005      	beq.n	800273c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2204      	movs	r2, #4
 8002734:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	73fb      	strb	r3, [r7, #15]
 800273a:	e051      	b.n	80027e0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f022 020e 	bic.w	r2, r2, #14
 800274a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f022 0201 	bic.w	r2, r2, #1
 800275a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a22      	ldr	r2, [pc, #136]	; (80027ec <HAL_DMA_Abort_IT+0xd4>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d029      	beq.n	80027ba <HAL_DMA_Abort_IT+0xa2>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a21      	ldr	r2, [pc, #132]	; (80027f0 <HAL_DMA_Abort_IT+0xd8>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d022      	beq.n	80027b6 <HAL_DMA_Abort_IT+0x9e>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a1f      	ldr	r2, [pc, #124]	; (80027f4 <HAL_DMA_Abort_IT+0xdc>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d01a      	beq.n	80027b0 <HAL_DMA_Abort_IT+0x98>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a1e      	ldr	r2, [pc, #120]	; (80027f8 <HAL_DMA_Abort_IT+0xe0>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d012      	beq.n	80027aa <HAL_DMA_Abort_IT+0x92>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a1c      	ldr	r2, [pc, #112]	; (80027fc <HAL_DMA_Abort_IT+0xe4>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d00a      	beq.n	80027a4 <HAL_DMA_Abort_IT+0x8c>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a1b      	ldr	r2, [pc, #108]	; (8002800 <HAL_DMA_Abort_IT+0xe8>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d102      	bne.n	800279e <HAL_DMA_Abort_IT+0x86>
 8002798:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800279c:	e00e      	b.n	80027bc <HAL_DMA_Abort_IT+0xa4>
 800279e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027a2:	e00b      	b.n	80027bc <HAL_DMA_Abort_IT+0xa4>
 80027a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027a8:	e008      	b.n	80027bc <HAL_DMA_Abort_IT+0xa4>
 80027aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027ae:	e005      	b.n	80027bc <HAL_DMA_Abort_IT+0xa4>
 80027b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027b4:	e002      	b.n	80027bc <HAL_DMA_Abort_IT+0xa4>
 80027b6:	2310      	movs	r3, #16
 80027b8:	e000      	b.n	80027bc <HAL_DMA_Abort_IT+0xa4>
 80027ba:	2301      	movs	r3, #1
 80027bc:	4a11      	ldr	r2, [pc, #68]	; (8002804 <HAL_DMA_Abort_IT+0xec>)
 80027be:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d003      	beq.n	80027e0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	4798      	blx	r3
    } 
  }
  return status;
 80027e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	40020008 	.word	0x40020008
 80027f0:	4002001c 	.word	0x4002001c
 80027f4:	40020030 	.word	0x40020030
 80027f8:	40020044 	.word	0x40020044
 80027fc:	40020058 	.word	0x40020058
 8002800:	4002006c 	.word	0x4002006c
 8002804:	40020000 	.word	0x40020000

08002808 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002824:	2204      	movs	r2, #4
 8002826:	409a      	lsls	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	4013      	ands	r3, r2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d04f      	beq.n	80028d0 <HAL_DMA_IRQHandler+0xc8>
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	f003 0304 	and.w	r3, r3, #4
 8002836:	2b00      	cmp	r3, #0
 8002838:	d04a      	beq.n	80028d0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0320 	and.w	r3, r3, #32
 8002844:	2b00      	cmp	r3, #0
 8002846:	d107      	bne.n	8002858 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f022 0204 	bic.w	r2, r2, #4
 8002856:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a66      	ldr	r2, [pc, #408]	; (80029f8 <HAL_DMA_IRQHandler+0x1f0>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d029      	beq.n	80028b6 <HAL_DMA_IRQHandler+0xae>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a65      	ldr	r2, [pc, #404]	; (80029fc <HAL_DMA_IRQHandler+0x1f4>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d022      	beq.n	80028b2 <HAL_DMA_IRQHandler+0xaa>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a63      	ldr	r2, [pc, #396]	; (8002a00 <HAL_DMA_IRQHandler+0x1f8>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d01a      	beq.n	80028ac <HAL_DMA_IRQHandler+0xa4>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a62      	ldr	r2, [pc, #392]	; (8002a04 <HAL_DMA_IRQHandler+0x1fc>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d012      	beq.n	80028a6 <HAL_DMA_IRQHandler+0x9e>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a60      	ldr	r2, [pc, #384]	; (8002a08 <HAL_DMA_IRQHandler+0x200>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d00a      	beq.n	80028a0 <HAL_DMA_IRQHandler+0x98>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a5f      	ldr	r2, [pc, #380]	; (8002a0c <HAL_DMA_IRQHandler+0x204>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d102      	bne.n	800289a <HAL_DMA_IRQHandler+0x92>
 8002894:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002898:	e00e      	b.n	80028b8 <HAL_DMA_IRQHandler+0xb0>
 800289a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800289e:	e00b      	b.n	80028b8 <HAL_DMA_IRQHandler+0xb0>
 80028a0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80028a4:	e008      	b.n	80028b8 <HAL_DMA_IRQHandler+0xb0>
 80028a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80028aa:	e005      	b.n	80028b8 <HAL_DMA_IRQHandler+0xb0>
 80028ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028b0:	e002      	b.n	80028b8 <HAL_DMA_IRQHandler+0xb0>
 80028b2:	2340      	movs	r3, #64	; 0x40
 80028b4:	e000      	b.n	80028b8 <HAL_DMA_IRQHandler+0xb0>
 80028b6:	2304      	movs	r3, #4
 80028b8:	4a55      	ldr	r2, [pc, #340]	; (8002a10 <HAL_DMA_IRQHandler+0x208>)
 80028ba:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f000 8094 	beq.w	80029ee <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80028ce:	e08e      	b.n	80029ee <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d4:	2202      	movs	r2, #2
 80028d6:	409a      	lsls	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	4013      	ands	r3, r2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d056      	beq.n	800298e <HAL_DMA_IRQHandler+0x186>
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d051      	beq.n	800298e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0320 	and.w	r3, r3, #32
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d10b      	bne.n	8002910 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f022 020a 	bic.w	r2, r2, #10
 8002906:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a38      	ldr	r2, [pc, #224]	; (80029f8 <HAL_DMA_IRQHandler+0x1f0>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d029      	beq.n	800296e <HAL_DMA_IRQHandler+0x166>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a37      	ldr	r2, [pc, #220]	; (80029fc <HAL_DMA_IRQHandler+0x1f4>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d022      	beq.n	800296a <HAL_DMA_IRQHandler+0x162>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a35      	ldr	r2, [pc, #212]	; (8002a00 <HAL_DMA_IRQHandler+0x1f8>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d01a      	beq.n	8002964 <HAL_DMA_IRQHandler+0x15c>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a34      	ldr	r2, [pc, #208]	; (8002a04 <HAL_DMA_IRQHandler+0x1fc>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d012      	beq.n	800295e <HAL_DMA_IRQHandler+0x156>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a32      	ldr	r2, [pc, #200]	; (8002a08 <HAL_DMA_IRQHandler+0x200>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d00a      	beq.n	8002958 <HAL_DMA_IRQHandler+0x150>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a31      	ldr	r2, [pc, #196]	; (8002a0c <HAL_DMA_IRQHandler+0x204>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d102      	bne.n	8002952 <HAL_DMA_IRQHandler+0x14a>
 800294c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002950:	e00e      	b.n	8002970 <HAL_DMA_IRQHandler+0x168>
 8002952:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002956:	e00b      	b.n	8002970 <HAL_DMA_IRQHandler+0x168>
 8002958:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800295c:	e008      	b.n	8002970 <HAL_DMA_IRQHandler+0x168>
 800295e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002962:	e005      	b.n	8002970 <HAL_DMA_IRQHandler+0x168>
 8002964:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002968:	e002      	b.n	8002970 <HAL_DMA_IRQHandler+0x168>
 800296a:	2320      	movs	r3, #32
 800296c:	e000      	b.n	8002970 <HAL_DMA_IRQHandler+0x168>
 800296e:	2302      	movs	r3, #2
 8002970:	4a27      	ldr	r2, [pc, #156]	; (8002a10 <HAL_DMA_IRQHandler+0x208>)
 8002972:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002980:	2b00      	cmp	r3, #0
 8002982:	d034      	beq.n	80029ee <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800298c:	e02f      	b.n	80029ee <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002992:	2208      	movs	r2, #8
 8002994:	409a      	lsls	r2, r3
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	4013      	ands	r3, r2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d028      	beq.n	80029f0 <HAL_DMA_IRQHandler+0x1e8>
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	f003 0308 	and.w	r3, r3, #8
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d023      	beq.n	80029f0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 020e 	bic.w	r2, r2, #14
 80029b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029c0:	2101      	movs	r1, #1
 80029c2:	fa01 f202 	lsl.w	r2, r1, r2
 80029c6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2201      	movs	r2, #1
 80029d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d004      	beq.n	80029f0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	4798      	blx	r3
    }
  }
  return;
 80029ee:	bf00      	nop
 80029f0:	bf00      	nop
}
 80029f2:	3710      	adds	r7, #16
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	40020008 	.word	0x40020008
 80029fc:	4002001c 	.word	0x4002001c
 8002a00:	40020030 	.word	0x40020030
 8002a04:	40020044 	.word	0x40020044
 8002a08:	40020058 	.word	0x40020058
 8002a0c:	4002006c 	.word	0x4002006c
 8002a10:	40020000 	.word	0x40020000

08002a14 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a22:	b2db      	uxtb	r3, r3
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bc80      	pop	{r7}
 8002a2c:	4770      	bx	lr
	...

08002a30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b08b      	sub	sp, #44	; 0x2c
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a42:	e169      	b.n	8002d18 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002a44:	2201      	movs	r2, #1
 8002a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	69fa      	ldr	r2, [r7, #28]
 8002a54:	4013      	ands	r3, r2
 8002a56:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	f040 8158 	bne.w	8002d12 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	4a9a      	ldr	r2, [pc, #616]	; (8002cd0 <HAL_GPIO_Init+0x2a0>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d05e      	beq.n	8002b2a <HAL_GPIO_Init+0xfa>
 8002a6c:	4a98      	ldr	r2, [pc, #608]	; (8002cd0 <HAL_GPIO_Init+0x2a0>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d875      	bhi.n	8002b5e <HAL_GPIO_Init+0x12e>
 8002a72:	4a98      	ldr	r2, [pc, #608]	; (8002cd4 <HAL_GPIO_Init+0x2a4>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d058      	beq.n	8002b2a <HAL_GPIO_Init+0xfa>
 8002a78:	4a96      	ldr	r2, [pc, #600]	; (8002cd4 <HAL_GPIO_Init+0x2a4>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d86f      	bhi.n	8002b5e <HAL_GPIO_Init+0x12e>
 8002a7e:	4a96      	ldr	r2, [pc, #600]	; (8002cd8 <HAL_GPIO_Init+0x2a8>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d052      	beq.n	8002b2a <HAL_GPIO_Init+0xfa>
 8002a84:	4a94      	ldr	r2, [pc, #592]	; (8002cd8 <HAL_GPIO_Init+0x2a8>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d869      	bhi.n	8002b5e <HAL_GPIO_Init+0x12e>
 8002a8a:	4a94      	ldr	r2, [pc, #592]	; (8002cdc <HAL_GPIO_Init+0x2ac>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d04c      	beq.n	8002b2a <HAL_GPIO_Init+0xfa>
 8002a90:	4a92      	ldr	r2, [pc, #584]	; (8002cdc <HAL_GPIO_Init+0x2ac>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d863      	bhi.n	8002b5e <HAL_GPIO_Init+0x12e>
 8002a96:	4a92      	ldr	r2, [pc, #584]	; (8002ce0 <HAL_GPIO_Init+0x2b0>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d046      	beq.n	8002b2a <HAL_GPIO_Init+0xfa>
 8002a9c:	4a90      	ldr	r2, [pc, #576]	; (8002ce0 <HAL_GPIO_Init+0x2b0>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d85d      	bhi.n	8002b5e <HAL_GPIO_Init+0x12e>
 8002aa2:	2b12      	cmp	r3, #18
 8002aa4:	d82a      	bhi.n	8002afc <HAL_GPIO_Init+0xcc>
 8002aa6:	2b12      	cmp	r3, #18
 8002aa8:	d859      	bhi.n	8002b5e <HAL_GPIO_Init+0x12e>
 8002aaa:	a201      	add	r2, pc, #4	; (adr r2, 8002ab0 <HAL_GPIO_Init+0x80>)
 8002aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ab0:	08002b2b 	.word	0x08002b2b
 8002ab4:	08002b05 	.word	0x08002b05
 8002ab8:	08002b17 	.word	0x08002b17
 8002abc:	08002b59 	.word	0x08002b59
 8002ac0:	08002b5f 	.word	0x08002b5f
 8002ac4:	08002b5f 	.word	0x08002b5f
 8002ac8:	08002b5f 	.word	0x08002b5f
 8002acc:	08002b5f 	.word	0x08002b5f
 8002ad0:	08002b5f 	.word	0x08002b5f
 8002ad4:	08002b5f 	.word	0x08002b5f
 8002ad8:	08002b5f 	.word	0x08002b5f
 8002adc:	08002b5f 	.word	0x08002b5f
 8002ae0:	08002b5f 	.word	0x08002b5f
 8002ae4:	08002b5f 	.word	0x08002b5f
 8002ae8:	08002b5f 	.word	0x08002b5f
 8002aec:	08002b5f 	.word	0x08002b5f
 8002af0:	08002b5f 	.word	0x08002b5f
 8002af4:	08002b0d 	.word	0x08002b0d
 8002af8:	08002b21 	.word	0x08002b21
 8002afc:	4a79      	ldr	r2, [pc, #484]	; (8002ce4 <HAL_GPIO_Init+0x2b4>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d013      	beq.n	8002b2a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002b02:	e02c      	b.n	8002b5e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	623b      	str	r3, [r7, #32]
          break;
 8002b0a:	e029      	b.n	8002b60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	3304      	adds	r3, #4
 8002b12:	623b      	str	r3, [r7, #32]
          break;
 8002b14:	e024      	b.n	8002b60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	3308      	adds	r3, #8
 8002b1c:	623b      	str	r3, [r7, #32]
          break;
 8002b1e:	e01f      	b.n	8002b60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	330c      	adds	r3, #12
 8002b26:	623b      	str	r3, [r7, #32]
          break;
 8002b28:	e01a      	b.n	8002b60 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d102      	bne.n	8002b38 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b32:	2304      	movs	r3, #4
 8002b34:	623b      	str	r3, [r7, #32]
          break;
 8002b36:	e013      	b.n	8002b60 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d105      	bne.n	8002b4c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b40:	2308      	movs	r3, #8
 8002b42:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	69fa      	ldr	r2, [r7, #28]
 8002b48:	611a      	str	r2, [r3, #16]
          break;
 8002b4a:	e009      	b.n	8002b60 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b4c:	2308      	movs	r3, #8
 8002b4e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	69fa      	ldr	r2, [r7, #28]
 8002b54:	615a      	str	r2, [r3, #20]
          break;
 8002b56:	e003      	b.n	8002b60 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	623b      	str	r3, [r7, #32]
          break;
 8002b5c:	e000      	b.n	8002b60 <HAL_GPIO_Init+0x130>
          break;
 8002b5e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	2bff      	cmp	r3, #255	; 0xff
 8002b64:	d801      	bhi.n	8002b6a <HAL_GPIO_Init+0x13a>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	e001      	b.n	8002b6e <HAL_GPIO_Init+0x13e>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	3304      	adds	r3, #4
 8002b6e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	2bff      	cmp	r3, #255	; 0xff
 8002b74:	d802      	bhi.n	8002b7c <HAL_GPIO_Init+0x14c>
 8002b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	e002      	b.n	8002b82 <HAL_GPIO_Init+0x152>
 8002b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7e:	3b08      	subs	r3, #8
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	210f      	movs	r1, #15
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b90:	43db      	mvns	r3, r3
 8002b92:	401a      	ands	r2, r3
 8002b94:	6a39      	ldr	r1, [r7, #32]
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	fa01 f303 	lsl.w	r3, r1, r3
 8002b9c:	431a      	orrs	r2, r3
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	f000 80b1 	beq.w	8002d12 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002bb0:	4b4d      	ldr	r3, [pc, #308]	; (8002ce8 <HAL_GPIO_Init+0x2b8>)
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	4a4c      	ldr	r2, [pc, #304]	; (8002ce8 <HAL_GPIO_Init+0x2b8>)
 8002bb6:	f043 0301 	orr.w	r3, r3, #1
 8002bba:	6193      	str	r3, [r2, #24]
 8002bbc:	4b4a      	ldr	r3, [pc, #296]	; (8002ce8 <HAL_GPIO_Init+0x2b8>)
 8002bbe:	699b      	ldr	r3, [r3, #24]
 8002bc0:	f003 0301 	and.w	r3, r3, #1
 8002bc4:	60bb      	str	r3, [r7, #8]
 8002bc6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002bc8:	4a48      	ldr	r2, [pc, #288]	; (8002cec <HAL_GPIO_Init+0x2bc>)
 8002bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bcc:	089b      	lsrs	r3, r3, #2
 8002bce:	3302      	adds	r3, #2
 8002bd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bd4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd8:	f003 0303 	and.w	r3, r3, #3
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	220f      	movs	r2, #15
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	43db      	mvns	r3, r3
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	4013      	ands	r3, r2
 8002bea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4a40      	ldr	r2, [pc, #256]	; (8002cf0 <HAL_GPIO_Init+0x2c0>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d013      	beq.n	8002c1c <HAL_GPIO_Init+0x1ec>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4a3f      	ldr	r2, [pc, #252]	; (8002cf4 <HAL_GPIO_Init+0x2c4>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d00d      	beq.n	8002c18 <HAL_GPIO_Init+0x1e8>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a3e      	ldr	r2, [pc, #248]	; (8002cf8 <HAL_GPIO_Init+0x2c8>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d007      	beq.n	8002c14 <HAL_GPIO_Init+0x1e4>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4a3d      	ldr	r2, [pc, #244]	; (8002cfc <HAL_GPIO_Init+0x2cc>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d101      	bne.n	8002c10 <HAL_GPIO_Init+0x1e0>
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e006      	b.n	8002c1e <HAL_GPIO_Init+0x1ee>
 8002c10:	2304      	movs	r3, #4
 8002c12:	e004      	b.n	8002c1e <HAL_GPIO_Init+0x1ee>
 8002c14:	2302      	movs	r3, #2
 8002c16:	e002      	b.n	8002c1e <HAL_GPIO_Init+0x1ee>
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e000      	b.n	8002c1e <HAL_GPIO_Init+0x1ee>
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c20:	f002 0203 	and.w	r2, r2, #3
 8002c24:	0092      	lsls	r2, r2, #2
 8002c26:	4093      	lsls	r3, r2
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002c2e:	492f      	ldr	r1, [pc, #188]	; (8002cec <HAL_GPIO_Init+0x2bc>)
 8002c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c32:	089b      	lsrs	r3, r3, #2
 8002c34:	3302      	adds	r3, #2
 8002c36:	68fa      	ldr	r2, [r7, #12]
 8002c38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d006      	beq.n	8002c56 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c48:	4b2d      	ldr	r3, [pc, #180]	; (8002d00 <HAL_GPIO_Init+0x2d0>)
 8002c4a:	689a      	ldr	r2, [r3, #8]
 8002c4c:	492c      	ldr	r1, [pc, #176]	; (8002d00 <HAL_GPIO_Init+0x2d0>)
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	608b      	str	r3, [r1, #8]
 8002c54:	e006      	b.n	8002c64 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002c56:	4b2a      	ldr	r3, [pc, #168]	; (8002d00 <HAL_GPIO_Init+0x2d0>)
 8002c58:	689a      	ldr	r2, [r3, #8]
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	43db      	mvns	r3, r3
 8002c5e:	4928      	ldr	r1, [pc, #160]	; (8002d00 <HAL_GPIO_Init+0x2d0>)
 8002c60:	4013      	ands	r3, r2
 8002c62:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d006      	beq.n	8002c7e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c70:	4b23      	ldr	r3, [pc, #140]	; (8002d00 <HAL_GPIO_Init+0x2d0>)
 8002c72:	68da      	ldr	r2, [r3, #12]
 8002c74:	4922      	ldr	r1, [pc, #136]	; (8002d00 <HAL_GPIO_Init+0x2d0>)
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	60cb      	str	r3, [r1, #12]
 8002c7c:	e006      	b.n	8002c8c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c7e:	4b20      	ldr	r3, [pc, #128]	; (8002d00 <HAL_GPIO_Init+0x2d0>)
 8002c80:	68da      	ldr	r2, [r3, #12]
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	43db      	mvns	r3, r3
 8002c86:	491e      	ldr	r1, [pc, #120]	; (8002d00 <HAL_GPIO_Init+0x2d0>)
 8002c88:	4013      	ands	r3, r2
 8002c8a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d006      	beq.n	8002ca6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002c98:	4b19      	ldr	r3, [pc, #100]	; (8002d00 <HAL_GPIO_Init+0x2d0>)
 8002c9a:	685a      	ldr	r2, [r3, #4]
 8002c9c:	4918      	ldr	r1, [pc, #96]	; (8002d00 <HAL_GPIO_Init+0x2d0>)
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	604b      	str	r3, [r1, #4]
 8002ca4:	e006      	b.n	8002cb4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ca6:	4b16      	ldr	r3, [pc, #88]	; (8002d00 <HAL_GPIO_Init+0x2d0>)
 8002ca8:	685a      	ldr	r2, [r3, #4]
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	43db      	mvns	r3, r3
 8002cae:	4914      	ldr	r1, [pc, #80]	; (8002d00 <HAL_GPIO_Init+0x2d0>)
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d021      	beq.n	8002d04 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002cc0:	4b0f      	ldr	r3, [pc, #60]	; (8002d00 <HAL_GPIO_Init+0x2d0>)
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	490e      	ldr	r1, [pc, #56]	; (8002d00 <HAL_GPIO_Init+0x2d0>)
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	600b      	str	r3, [r1, #0]
 8002ccc:	e021      	b.n	8002d12 <HAL_GPIO_Init+0x2e2>
 8002cce:	bf00      	nop
 8002cd0:	10320000 	.word	0x10320000
 8002cd4:	10310000 	.word	0x10310000
 8002cd8:	10220000 	.word	0x10220000
 8002cdc:	10210000 	.word	0x10210000
 8002ce0:	10120000 	.word	0x10120000
 8002ce4:	10110000 	.word	0x10110000
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	40010000 	.word	0x40010000
 8002cf0:	40010800 	.word	0x40010800
 8002cf4:	40010c00 	.word	0x40010c00
 8002cf8:	40011000 	.word	0x40011000
 8002cfc:	40011400 	.word	0x40011400
 8002d00:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002d04:	4b0b      	ldr	r3, [pc, #44]	; (8002d34 <HAL_GPIO_Init+0x304>)
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	43db      	mvns	r3, r3
 8002d0c:	4909      	ldr	r1, [pc, #36]	; (8002d34 <HAL_GPIO_Init+0x304>)
 8002d0e:	4013      	ands	r3, r2
 8002d10:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d14:	3301      	adds	r3, #1
 8002d16:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	f47f ae8e 	bne.w	8002a44 <HAL_GPIO_Init+0x14>
  }
}
 8002d28:	bf00      	nop
 8002d2a:	bf00      	nop
 8002d2c:	372c      	adds	r7, #44	; 0x2c
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bc80      	pop	{r7}
 8002d32:	4770      	bx	lr
 8002d34:	40010400 	.word	0x40010400

08002d38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	460b      	mov	r3, r1
 8002d42:	807b      	strh	r3, [r7, #2]
 8002d44:	4613      	mov	r3, r2
 8002d46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d48:	787b      	ldrb	r3, [r7, #1]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d003      	beq.n	8002d56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d4e:	887a      	ldrh	r2, [r7, #2]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002d54:	e003      	b.n	8002d5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d56:	887b      	ldrh	r3, [r7, #2]
 8002d58:	041a      	lsls	r2, r3, #16
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	611a      	str	r2, [r3, #16]
}
 8002d5e:	bf00      	nop
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bc80      	pop	{r7}
 8002d66:	4770      	bx	lr

08002d68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e12b      	b.n	8002fd2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d106      	bne.n	8002d94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f7fe f9fe 	bl	8001190 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2224      	movs	r2, #36	; 0x24
 8002d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f022 0201 	bic.w	r2, r2, #1
 8002daa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002dba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002dcc:	f002 fad4 	bl	8005378 <HAL_RCC_GetPCLK1Freq>
 8002dd0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	4a81      	ldr	r2, [pc, #516]	; (8002fdc <HAL_I2C_Init+0x274>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d807      	bhi.n	8002dec <HAL_I2C_Init+0x84>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	4a80      	ldr	r2, [pc, #512]	; (8002fe0 <HAL_I2C_Init+0x278>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	bf94      	ite	ls
 8002de4:	2301      	movls	r3, #1
 8002de6:	2300      	movhi	r3, #0
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	e006      	b.n	8002dfa <HAL_I2C_Init+0x92>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	4a7d      	ldr	r2, [pc, #500]	; (8002fe4 <HAL_I2C_Init+0x27c>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	bf94      	ite	ls
 8002df4:	2301      	movls	r3, #1
 8002df6:	2300      	movhi	r3, #0
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d001      	beq.n	8002e02 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e0e7      	b.n	8002fd2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	4a78      	ldr	r2, [pc, #480]	; (8002fe8 <HAL_I2C_Init+0x280>)
 8002e06:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0a:	0c9b      	lsrs	r3, r3, #18
 8002e0c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68ba      	ldr	r2, [r7, #8]
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	6a1b      	ldr	r3, [r3, #32]
 8002e28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	4a6a      	ldr	r2, [pc, #424]	; (8002fdc <HAL_I2C_Init+0x274>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d802      	bhi.n	8002e3c <HAL_I2C_Init+0xd4>
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	3301      	adds	r3, #1
 8002e3a:	e009      	b.n	8002e50 <HAL_I2C_Init+0xe8>
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e42:	fb02 f303 	mul.w	r3, r2, r3
 8002e46:	4a69      	ldr	r2, [pc, #420]	; (8002fec <HAL_I2C_Init+0x284>)
 8002e48:	fba2 2303 	umull	r2, r3, r2, r3
 8002e4c:	099b      	lsrs	r3, r3, #6
 8002e4e:	3301      	adds	r3, #1
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	6812      	ldr	r2, [r2, #0]
 8002e54:	430b      	orrs	r3, r1
 8002e56:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	69db      	ldr	r3, [r3, #28]
 8002e5e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e62:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	495c      	ldr	r1, [pc, #368]	; (8002fdc <HAL_I2C_Init+0x274>)
 8002e6c:	428b      	cmp	r3, r1
 8002e6e:	d819      	bhi.n	8002ea4 <HAL_I2C_Init+0x13c>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	1e59      	subs	r1, r3, #1
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e7e:	1c59      	adds	r1, r3, #1
 8002e80:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e84:	400b      	ands	r3, r1
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00a      	beq.n	8002ea0 <HAL_I2C_Init+0x138>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	1e59      	subs	r1, r3, #1
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e98:	3301      	adds	r3, #1
 8002e9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e9e:	e051      	b.n	8002f44 <HAL_I2C_Init+0x1dc>
 8002ea0:	2304      	movs	r3, #4
 8002ea2:	e04f      	b.n	8002f44 <HAL_I2C_Init+0x1dc>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d111      	bne.n	8002ed0 <HAL_I2C_Init+0x168>
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	1e58      	subs	r0, r3, #1
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6859      	ldr	r1, [r3, #4]
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	005b      	lsls	r3, r3, #1
 8002eb8:	440b      	add	r3, r1
 8002eba:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	bf0c      	ite	eq
 8002ec8:	2301      	moveq	r3, #1
 8002eca:	2300      	movne	r3, #0
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	e012      	b.n	8002ef6 <HAL_I2C_Init+0x18e>
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	1e58      	subs	r0, r3, #1
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6859      	ldr	r1, [r3, #4]
 8002ed8:	460b      	mov	r3, r1
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	440b      	add	r3, r1
 8002ede:	0099      	lsls	r1, r3, #2
 8002ee0:	440b      	add	r3, r1
 8002ee2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	bf0c      	ite	eq
 8002ef0:	2301      	moveq	r3, #1
 8002ef2:	2300      	movne	r3, #0
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <HAL_I2C_Init+0x196>
 8002efa:	2301      	movs	r3, #1
 8002efc:	e022      	b.n	8002f44 <HAL_I2C_Init+0x1dc>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d10e      	bne.n	8002f24 <HAL_I2C_Init+0x1bc>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	1e58      	subs	r0, r3, #1
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6859      	ldr	r1, [r3, #4]
 8002f0e:	460b      	mov	r3, r1
 8002f10:	005b      	lsls	r3, r3, #1
 8002f12:	440b      	add	r3, r1
 8002f14:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f18:	3301      	adds	r3, #1
 8002f1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f22:	e00f      	b.n	8002f44 <HAL_I2C_Init+0x1dc>
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	1e58      	subs	r0, r3, #1
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6859      	ldr	r1, [r3, #4]
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	440b      	add	r3, r1
 8002f32:	0099      	lsls	r1, r3, #2
 8002f34:	440b      	add	r3, r1
 8002f36:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f44:	6879      	ldr	r1, [r7, #4]
 8002f46:	6809      	ldr	r1, [r1, #0]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	69da      	ldr	r2, [r3, #28]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a1b      	ldr	r3, [r3, #32]
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	430a      	orrs	r2, r1
 8002f66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f72:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	6911      	ldr	r1, [r2, #16]
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	68d2      	ldr	r2, [r2, #12]
 8002f7e:	4311      	orrs	r1, r2
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	6812      	ldr	r2, [r2, #0]
 8002f84:	430b      	orrs	r3, r1
 8002f86:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	695a      	ldr	r2, [r3, #20]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	431a      	orrs	r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f042 0201 	orr.w	r2, r2, #1
 8002fb2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2220      	movs	r2, #32
 8002fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3710      	adds	r7, #16
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	000186a0 	.word	0x000186a0
 8002fe0:	001e847f 	.word	0x001e847f
 8002fe4:	003d08ff 	.word	0x003d08ff
 8002fe8:	431bde83 	.word	0x431bde83
 8002fec:	10624dd3 	.word	0x10624dd3

08002ff0 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003002:	2b80      	cmp	r3, #128	; 0x80
 8003004:	d103      	bne.n	800300e <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2200      	movs	r2, #0
 800300c:	611a      	str	r2, [r3, #16]
  }
}
 800300e:	bf00      	nop
 8003010:	370c      	adds	r7, #12
 8003012:	46bd      	mov	sp, r7
 8003014:	bc80      	pop	{r7}
 8003016:	4770      	bx	lr

08003018 <HAL_I2C_Mem_Write_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003018:	b480      	push	{r7}
 800301a:	b087      	sub	sp, #28
 800301c:	af00      	add	r7, sp, #0
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	4608      	mov	r0, r1
 8003022:	4611      	mov	r1, r2
 8003024:	461a      	mov	r2, r3
 8003026:	4603      	mov	r3, r0
 8003028:	817b      	strh	r3, [r7, #10]
 800302a:	460b      	mov	r3, r1
 800302c:	813b      	strh	r3, [r7, #8]
 800302e:	4613      	mov	r3, r2
 8003030:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003032:	2300      	movs	r3, #0
 8003034:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b20      	cmp	r3, #32
 8003040:	f040 808a 	bne.w	8003158 <HAL_I2C_Mem_Write_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003044:	4b47      	ldr	r3, [pc, #284]	; (8003164 <HAL_I2C_Mem_Write_IT+0x14c>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	08db      	lsrs	r3, r3, #3
 800304a:	4a47      	ldr	r2, [pc, #284]	; (8003168 <HAL_I2C_Mem_Write_IT+0x150>)
 800304c:	fba2 2303 	umull	r2, r3, r2, r3
 8003050:	0a1a      	lsrs	r2, r3, #8
 8003052:	4613      	mov	r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	4413      	add	r3, r2
 8003058:	009a      	lsls	r2, r3, #2
 800305a:	4413      	add	r3, r2
 800305c:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	3b01      	subs	r3, #1
 8003062:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d112      	bne.n	8003090 <HAL_I2C_Mem_Write_IT+0x78>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2200      	movs	r2, #0
 800306e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2220      	movs	r2, #32
 8003074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003084:	f043 0220 	orr.w	r2, r3, #32
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	641a      	str	r2, [r3, #64]	; 0x40

        return HAL_BUSY;
 800308c:	2302      	movs	r3, #2
 800308e:	e064      	b.n	800315a <HAL_I2C_Mem_Write_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b02      	cmp	r3, #2
 800309c:	d0df      	beq.n	800305e <HAL_I2C_Mem_Write_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d101      	bne.n	80030ac <HAL_I2C_Mem_Write_IT+0x94>
 80030a8:	2302      	movs	r3, #2
 80030aa:	e056      	b.n	800315a <HAL_I2C_Mem_Write_IT+0x142>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d007      	beq.n	80030d2 <HAL_I2C_Mem_Write_IT+0xba>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f042 0201 	orr.w	r2, r2, #1
 80030d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030e0:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2221      	movs	r2, #33	; 0x21
 80030e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2240      	movs	r2, #64	; 0x40
 80030ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6a3a      	ldr	r2, [r7, #32]
 80030fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003102:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003108:	b29a      	uxth	r2, r3
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	4a16      	ldr	r2, [pc, #88]	; (800316c <HAL_I2C_Mem_Write_IT+0x154>)
 8003112:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8003114:	897a      	ldrh	r2, [r7, #10]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800311a:	893a      	ldrh	r2, [r7, #8]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8003120:	88fa      	ldrh	r2, [r7, #6]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800313a:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	685a      	ldr	r2, [r3, #4]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003152:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8003154:	2300      	movs	r3, #0
 8003156:	e000      	b.n	800315a <HAL_I2C_Mem_Write_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 8003158:	2302      	movs	r3, #2
  }
}
 800315a:	4618      	mov	r0, r3
 800315c:	371c      	adds	r7, #28
 800315e:	46bd      	mov	sp, r7
 8003160:	bc80      	pop	{r7}
 8003162:	4770      	bx	lr
 8003164:	20000018 	.word	0x20000018
 8003168:	14f8b589 	.word	0x14f8b589
 800316c:	ffff0000 	.word	0xffff0000

08003170 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b08a      	sub	sp, #40	; 0x28
 8003174:	af02      	add	r7, sp, #8
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	607a      	str	r2, [r7, #4]
 800317a:	603b      	str	r3, [r7, #0]
 800317c:	460b      	mov	r3, r1
 800317e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003180:	f7fe fba2 	bl	80018c8 <HAL_GetTick>
 8003184:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003186:	2300      	movs	r3, #0
 8003188:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b20      	cmp	r3, #32
 8003194:	f040 8111 	bne.w	80033ba <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	9300      	str	r3, [sp, #0]
 800319c:	2319      	movs	r3, #25
 800319e:	2201      	movs	r2, #1
 80031a0:	4988      	ldr	r1, [pc, #544]	; (80033c4 <HAL_I2C_IsDeviceReady+0x254>)
 80031a2:	68f8      	ldr	r0, [r7, #12]
 80031a4:	f001 fc58 	bl	8004a58 <I2C_WaitOnFlagUntilTimeout>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d001      	beq.n	80031b2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80031ae:	2302      	movs	r3, #2
 80031b0:	e104      	b.n	80033bc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d101      	bne.n	80031c0 <HAL_I2C_IsDeviceReady+0x50>
 80031bc:	2302      	movs	r3, #2
 80031be:	e0fd      	b.n	80033bc <HAL_I2C_IsDeviceReady+0x24c>
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d007      	beq.n	80031e6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f042 0201 	orr.w	r2, r2, #1
 80031e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031f4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2224      	movs	r2, #36	; 0x24
 80031fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	4a70      	ldr	r2, [pc, #448]	; (80033c8 <HAL_I2C_IsDeviceReady+0x258>)
 8003208:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003218:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	9300      	str	r3, [sp, #0]
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	2200      	movs	r2, #0
 8003222:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003226:	68f8      	ldr	r0, [r7, #12]
 8003228:	f001 fc16 	bl	8004a58 <I2C_WaitOnFlagUntilTimeout>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00d      	beq.n	800324e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800323c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003240:	d103      	bne.n	800324a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003248:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e0b6      	b.n	80033bc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800324e:	897b      	ldrh	r3, [r7, #10]
 8003250:	b2db      	uxtb	r3, r3
 8003252:	461a      	mov	r2, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800325c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800325e:	f7fe fb33 	bl	80018c8 <HAL_GetTick>
 8003262:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b02      	cmp	r3, #2
 8003270:	bf0c      	ite	eq
 8003272:	2301      	moveq	r3, #1
 8003274:	2300      	movne	r3, #0
 8003276:	b2db      	uxtb	r3, r3
 8003278:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	695b      	ldr	r3, [r3, #20]
 8003280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003284:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003288:	bf0c      	ite	eq
 800328a:	2301      	moveq	r3, #1
 800328c:	2300      	movne	r3, #0
 800328e:	b2db      	uxtb	r3, r3
 8003290:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003292:	e025      	b.n	80032e0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003294:	f7fe fb18 	bl	80018c8 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	683a      	ldr	r2, [r7, #0]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d302      	bcc.n	80032aa <HAL_I2C_IsDeviceReady+0x13a>
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d103      	bne.n	80032b2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	22a0      	movs	r2, #160	; 0xa0
 80032ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	695b      	ldr	r3, [r3, #20]
 80032b8:	f003 0302 	and.w	r3, r3, #2
 80032bc:	2b02      	cmp	r3, #2
 80032be:	bf0c      	ite	eq
 80032c0:	2301      	moveq	r3, #1
 80032c2:	2300      	movne	r3, #0
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032d6:	bf0c      	ite	eq
 80032d8:	2301      	moveq	r3, #1
 80032da:	2300      	movne	r3, #0
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	2ba0      	cmp	r3, #160	; 0xa0
 80032ea:	d005      	beq.n	80032f8 <HAL_I2C_IsDeviceReady+0x188>
 80032ec:	7dfb      	ldrb	r3, [r7, #23]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d102      	bne.n	80032f8 <HAL_I2C_IsDeviceReady+0x188>
 80032f2:	7dbb      	ldrb	r3, [r7, #22]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d0cd      	beq.n	8003294 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2220      	movs	r2, #32
 80032fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	2b02      	cmp	r3, #2
 800330c:	d129      	bne.n	8003362 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800331c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800331e:	2300      	movs	r3, #0
 8003320:	613b      	str	r3, [r7, #16]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	695b      	ldr	r3, [r3, #20]
 8003328:	613b      	str	r3, [r7, #16]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	699b      	ldr	r3, [r3, #24]
 8003330:	613b      	str	r3, [r7, #16]
 8003332:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	9300      	str	r3, [sp, #0]
 8003338:	2319      	movs	r3, #25
 800333a:	2201      	movs	r2, #1
 800333c:	4921      	ldr	r1, [pc, #132]	; (80033c4 <HAL_I2C_IsDeviceReady+0x254>)
 800333e:	68f8      	ldr	r0, [r7, #12]
 8003340:	f001 fb8a 	bl	8004a58 <I2C_WaitOnFlagUntilTimeout>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d001      	beq.n	800334e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e036      	b.n	80033bc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2220      	movs	r2, #32
 8003352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800335e:	2300      	movs	r3, #0
 8003360:	e02c      	b.n	80033bc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003370:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800337a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	9300      	str	r3, [sp, #0]
 8003380:	2319      	movs	r3, #25
 8003382:	2201      	movs	r2, #1
 8003384:	490f      	ldr	r1, [pc, #60]	; (80033c4 <HAL_I2C_IsDeviceReady+0x254>)
 8003386:	68f8      	ldr	r0, [r7, #12]
 8003388:	f001 fb66 	bl	8004a58 <I2C_WaitOnFlagUntilTimeout>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d001      	beq.n	8003396 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e012      	b.n	80033bc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	3301      	adds	r3, #1
 800339a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	f4ff af32 	bcc.w	800320a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2220      	movs	r2, #32
 80033aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e000      	b.n	80033bc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80033ba:	2302      	movs	r3, #2
  }
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3720      	adds	r7, #32
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	00100002 	.word	0x00100002
 80033c8:	ffff0000 	.word	0xffff0000

080033cc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b088      	sub	sp, #32
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80033d4:	2300      	movs	r3, #0
 80033d6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033ec:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033f4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80033f6:	7bfb      	ldrb	r3, [r7, #15]
 80033f8:	2b10      	cmp	r3, #16
 80033fa:	d003      	beq.n	8003404 <HAL_I2C_EV_IRQHandler+0x38>
 80033fc:	7bfb      	ldrb	r3, [r7, #15]
 80033fe:	2b40      	cmp	r3, #64	; 0x40
 8003400:	f040 80b1 	bne.w	8003566 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	695b      	ldr	r3, [r3, #20]
 8003412:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	2b00      	cmp	r3, #0
 800341c:	d10d      	bne.n	800343a <HAL_I2C_EV_IRQHandler+0x6e>
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003424:	d003      	beq.n	800342e <HAL_I2C_EV_IRQHandler+0x62>
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800342c:	d101      	bne.n	8003432 <HAL_I2C_EV_IRQHandler+0x66>
 800342e:	2301      	movs	r3, #1
 8003430:	e000      	b.n	8003434 <HAL_I2C_EV_IRQHandler+0x68>
 8003432:	2300      	movs	r3, #0
 8003434:	2b01      	cmp	r3, #1
 8003436:	f000 8114 	beq.w	8003662 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	f003 0301 	and.w	r3, r3, #1
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00b      	beq.n	800345c <HAL_I2C_EV_IRQHandler+0x90>
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800344a:	2b00      	cmp	r3, #0
 800344c:	d006      	beq.n	800345c <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f001 fbae 	bl	8004bb0 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 fca7 	bl	8003da8 <I2C_Master_SB>
 800345a:	e083      	b.n	8003564 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	f003 0308 	and.w	r3, r3, #8
 8003462:	2b00      	cmp	r3, #0
 8003464:	d008      	beq.n	8003478 <HAL_I2C_EV_IRQHandler+0xac>
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800346c:	2b00      	cmp	r3, #0
 800346e:	d003      	beq.n	8003478 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f000 fd1e 	bl	8003eb2 <I2C_Master_ADD10>
 8003476:	e075      	b.n	8003564 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d008      	beq.n	8003494 <HAL_I2C_EV_IRQHandler+0xc8>
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003488:	2b00      	cmp	r3, #0
 800348a:	d003      	beq.n	8003494 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f000 fd39 	bl	8003f04 <I2C_Master_ADDR>
 8003492:	e067      	b.n	8003564 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	f003 0304 	and.w	r3, r3, #4
 800349a:	2b00      	cmp	r3, #0
 800349c:	d036      	beq.n	800350c <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034ac:	f000 80db 	beq.w	8003666 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00d      	beq.n	80034d6 <HAL_I2C_EV_IRQHandler+0x10a>
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d008      	beq.n	80034d6 <HAL_I2C_EV_IRQHandler+0x10a>
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	f003 0304 	and.w	r3, r3, #4
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d103      	bne.n	80034d6 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 f91b 	bl	800370a <I2C_MasterTransmit_TXE>
 80034d4:	e046      	b.n	8003564 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	f003 0304 	and.w	r3, r3, #4
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f000 80c2 	beq.w	8003666 <HAL_I2C_EV_IRQHandler+0x29a>
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	f000 80bc 	beq.w	8003666 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80034ee:	7bbb      	ldrb	r3, [r7, #14]
 80034f0:	2b21      	cmp	r3, #33	; 0x21
 80034f2:	d103      	bne.n	80034fc <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f000 f9a4 	bl	8003842 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034fa:	e0b4      	b.n	8003666 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80034fc:	7bfb      	ldrb	r3, [r7, #15]
 80034fe:	2b40      	cmp	r3, #64	; 0x40
 8003500:	f040 80b1 	bne.w	8003666 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 fa12 	bl	800392e <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800350a:	e0ac      	b.n	8003666 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003516:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800351a:	f000 80a4 	beq.w	8003666 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003524:	2b00      	cmp	r3, #0
 8003526:	d00d      	beq.n	8003544 <HAL_I2C_EV_IRQHandler+0x178>
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800352e:	2b00      	cmp	r3, #0
 8003530:	d008      	beq.n	8003544 <HAL_I2C_EV_IRQHandler+0x178>
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	f003 0304 	and.w	r3, r3, #4
 8003538:	2b00      	cmp	r3, #0
 800353a:	d103      	bne.n	8003544 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 fa8e 	bl	8003a5e <I2C_MasterReceive_RXNE>
 8003542:	e00f      	b.n	8003564 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	f003 0304 	and.w	r3, r3, #4
 800354a:	2b00      	cmp	r3, #0
 800354c:	f000 808b 	beq.w	8003666 <HAL_I2C_EV_IRQHandler+0x29a>
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003556:	2b00      	cmp	r3, #0
 8003558:	f000 8085 	beq.w	8003666 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f000 fb39 	bl	8003bd4 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003562:	e080      	b.n	8003666 <HAL_I2C_EV_IRQHandler+0x29a>
 8003564:	e07f      	b.n	8003666 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356a:	2b00      	cmp	r3, #0
 800356c:	d004      	beq.n	8003578 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	695b      	ldr	r3, [r3, #20]
 8003574:	61fb      	str	r3, [r7, #28]
 8003576:	e007      	b.n	8003588 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d011      	beq.n	80035b6 <HAL_I2C_EV_IRQHandler+0x1ea>
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003598:	2b00      	cmp	r3, #0
 800359a:	d00c      	beq.n	80035b6 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d003      	beq.n	80035ac <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80035ac:	69b9      	ldr	r1, [r7, #24]
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 feff 	bl	80043b2 <I2C_Slave_ADDR>
 80035b4:	e05a      	b.n	800366c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	f003 0310 	and.w	r3, r3, #16
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d008      	beq.n	80035d2 <HAL_I2C_EV_IRQHandler+0x206>
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d003      	beq.n	80035d2 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 ff3a 	bl	8004444 <I2C_Slave_STOPF>
 80035d0:	e04c      	b.n	800366c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80035d2:	7bbb      	ldrb	r3, [r7, #14]
 80035d4:	2b21      	cmp	r3, #33	; 0x21
 80035d6:	d002      	beq.n	80035de <HAL_I2C_EV_IRQHandler+0x212>
 80035d8:	7bbb      	ldrb	r3, [r7, #14]
 80035da:	2b29      	cmp	r3, #41	; 0x29
 80035dc:	d120      	bne.n	8003620 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00d      	beq.n	8003604 <HAL_I2C_EV_IRQHandler+0x238>
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d008      	beq.n	8003604 <HAL_I2C_EV_IRQHandler+0x238>
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	f003 0304 	and.w	r3, r3, #4
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d103      	bne.n	8003604 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f000 fe1c 	bl	800423a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003602:	e032      	b.n	800366a <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	f003 0304 	and.w	r3, r3, #4
 800360a:	2b00      	cmp	r3, #0
 800360c:	d02d      	beq.n	800366a <HAL_I2C_EV_IRQHandler+0x29e>
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003614:	2b00      	cmp	r3, #0
 8003616:	d028      	beq.n	800366a <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f000 fe4b 	bl	80042b4 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800361e:	e024      	b.n	800366a <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00d      	beq.n	8003646 <HAL_I2C_EV_IRQHandler+0x27a>
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003630:	2b00      	cmp	r3, #0
 8003632:	d008      	beq.n	8003646 <HAL_I2C_EV_IRQHandler+0x27a>
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	f003 0304 	and.w	r3, r3, #4
 800363a:	2b00      	cmp	r3, #0
 800363c:	d103      	bne.n	8003646 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 fe58 	bl	80042f4 <I2C_SlaveReceive_RXNE>
 8003644:	e012      	b.n	800366c <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	f003 0304 	and.w	r3, r3, #4
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00d      	beq.n	800366c <HAL_I2C_EV_IRQHandler+0x2a0>
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003656:	2b00      	cmp	r3, #0
 8003658:	d008      	beq.n	800366c <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 fe88 	bl	8004370 <I2C_SlaveReceive_BTF>
 8003660:	e004      	b.n	800366c <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8003662:	bf00      	nop
 8003664:	e002      	b.n	800366c <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003666:	bf00      	nop
 8003668:	e000      	b.n	800366c <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800366a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800366c:	3720      	adds	r7, #32
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003672:	b480      	push	{r7}
 8003674:	b083      	sub	sp, #12
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800367a:	bf00      	nop
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	bc80      	pop	{r7}
 8003682:	4770      	bx	lr

08003684 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800368c:	bf00      	nop
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	bc80      	pop	{r7}
 8003694:	4770      	bx	lr

08003696 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003696:	b480      	push	{r7}
 8003698:	b083      	sub	sp, #12
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800369e:	bf00      	nop
 80036a0:	370c      	adds	r7, #12
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bc80      	pop	{r7}
 80036a6:	4770      	bx	lr

080036a8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bc80      	pop	{r7}
 80036b8:	4770      	bx	lr

080036ba <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80036ba:	b480      	push	{r7}
 80036bc:	b083      	sub	sp, #12
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
 80036c2:	460b      	mov	r3, r1
 80036c4:	70fb      	strb	r3, [r7, #3]
 80036c6:	4613      	mov	r3, r2
 80036c8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80036ca:	bf00      	nop
 80036cc:	370c      	adds	r7, #12
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bc80      	pop	{r7}
 80036d2:	4770      	bx	lr

080036d4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bc80      	pop	{r7}
 80036e4:	4770      	bx	lr

080036e6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80036e6:	b480      	push	{r7}
 80036e8:	b083      	sub	sp, #12
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80036ee:	bf00      	nop
 80036f0:	370c      	adds	r7, #12
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bc80      	pop	{r7}
 80036f6:	4770      	bx	lr

080036f8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	bc80      	pop	{r7}
 8003708:	4770      	bx	lr

0800370a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800370a:	b580      	push	{r7, lr}
 800370c:	b084      	sub	sp, #16
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003718:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003720:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003726:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800372c:	2b00      	cmp	r3, #0
 800372e:	d150      	bne.n	80037d2 <I2C_MasterTransmit_TXE+0xc8>
 8003730:	7bfb      	ldrb	r3, [r7, #15]
 8003732:	2b21      	cmp	r3, #33	; 0x21
 8003734:	d14d      	bne.n	80037d2 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	2b08      	cmp	r3, #8
 800373a:	d01d      	beq.n	8003778 <I2C_MasterTransmit_TXE+0x6e>
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	2b20      	cmp	r3, #32
 8003740:	d01a      	beq.n	8003778 <I2C_MasterTransmit_TXE+0x6e>
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003748:	d016      	beq.n	8003778 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	685a      	ldr	r2, [r3, #4]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003758:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2211      	movs	r2, #17
 800375e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2220      	movs	r2, #32
 800376c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f7ff ff7e 	bl	8003672 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003776:	e060      	b.n	800383a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	685a      	ldr	r2, [r3, #4]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003786:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003796:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2220      	movs	r2, #32
 80037a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b40      	cmp	r3, #64	; 0x40
 80037b0:	d107      	bne.n	80037c2 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f7fd faf8 	bl	8000db0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80037c0:	e03b      	b.n	800383a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f7ff ff51 	bl	8003672 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80037d0:	e033      	b.n	800383a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80037d2:	7bfb      	ldrb	r3, [r7, #15]
 80037d4:	2b21      	cmp	r3, #33	; 0x21
 80037d6:	d005      	beq.n	80037e4 <I2C_MasterTransmit_TXE+0xda>
 80037d8:	7bbb      	ldrb	r3, [r7, #14]
 80037da:	2b40      	cmp	r3, #64	; 0x40
 80037dc:	d12d      	bne.n	800383a <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80037de:	7bfb      	ldrb	r3, [r7, #15]
 80037e0:	2b22      	cmp	r3, #34	; 0x22
 80037e2:	d12a      	bne.n	800383a <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d108      	bne.n	8003800 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	685a      	ldr	r2, [r3, #4]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037fc:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80037fe:	e01c      	b.n	800383a <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003806:	b2db      	uxtb	r3, r3
 8003808:	2b40      	cmp	r3, #64	; 0x40
 800380a:	d103      	bne.n	8003814 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 f88e 	bl	800392e <I2C_MemoryTransmit_TXE_BTF>
}
 8003812:	e012      	b.n	800383a <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003818:	781a      	ldrb	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003824:	1c5a      	adds	r2, r3, #1
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800382e:	b29b      	uxth	r3, r3
 8003830:	3b01      	subs	r3, #1
 8003832:	b29a      	uxth	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003838:	e7ff      	b.n	800383a <I2C_MasterTransmit_TXE+0x130>
 800383a:	bf00      	nop
 800383c:	3710      	adds	r7, #16
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}

08003842 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003842:	b580      	push	{r7, lr}
 8003844:	b084      	sub	sp, #16
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384e:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003856:	b2db      	uxtb	r3, r3
 8003858:	2b21      	cmp	r3, #33	; 0x21
 800385a:	d164      	bne.n	8003926 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003860:	b29b      	uxth	r3, r3
 8003862:	2b00      	cmp	r3, #0
 8003864:	d012      	beq.n	800388c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386a:	781a      	ldrb	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003876:	1c5a      	adds	r2, r3, #1
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003880:	b29b      	uxth	r3, r3
 8003882:	3b01      	subs	r3, #1
 8003884:	b29a      	uxth	r2, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800388a:	e04c      	b.n	8003926 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2b08      	cmp	r3, #8
 8003890:	d01d      	beq.n	80038ce <I2C_MasterTransmit_BTF+0x8c>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2b20      	cmp	r3, #32
 8003896:	d01a      	beq.n	80038ce <I2C_MasterTransmit_BTF+0x8c>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800389e:	d016      	beq.n	80038ce <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	685a      	ldr	r2, [r3, #4]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80038ae:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2211      	movs	r2, #17
 80038b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2220      	movs	r2, #32
 80038c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f7ff fed3 	bl	8003672 <HAL_I2C_MasterTxCpltCallback>
}
 80038cc:	e02b      	b.n	8003926 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	685a      	ldr	r2, [r3, #4]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80038dc:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ec:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2220      	movs	r2, #32
 80038f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003902:	b2db      	uxtb	r3, r3
 8003904:	2b40      	cmp	r3, #64	; 0x40
 8003906:	d107      	bne.n	8003918 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f7fd fa4d 	bl	8000db0 <HAL_I2C_MemTxCpltCallback>
}
 8003916:	e006      	b.n	8003926 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f7ff fea6 	bl	8003672 <HAL_I2C_MasterTxCpltCallback>
}
 8003926:	bf00      	nop
 8003928:	3710      	adds	r7, #16
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}

0800392e <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800392e:	b580      	push	{r7, lr}
 8003930:	b084      	sub	sp, #16
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800393c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003942:	2b00      	cmp	r3, #0
 8003944:	d11d      	bne.n	8003982 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800394a:	2b01      	cmp	r3, #1
 800394c:	d10b      	bne.n	8003966 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003952:	b2da      	uxtb	r2, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800395e:	1c9a      	adds	r2, r3, #2
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003964:	e077      	b.n	8003a56 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800396a:	b29b      	uxth	r3, r3
 800396c:	121b      	asrs	r3, r3, #8
 800396e:	b2da      	uxtb	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800397a:	1c5a      	adds	r2, r3, #1
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003980:	e069      	b.n	8003a56 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003986:	2b01      	cmp	r3, #1
 8003988:	d10b      	bne.n	80039a2 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800398e:	b2da      	uxtb	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800399a:	1c5a      	adds	r2, r3, #1
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	651a      	str	r2, [r3, #80]	; 0x50
}
 80039a0:	e059      	b.n	8003a56 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d152      	bne.n	8003a50 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80039aa:	7bfb      	ldrb	r3, [r7, #15]
 80039ac:	2b22      	cmp	r3, #34	; 0x22
 80039ae:	d10d      	bne.n	80039cc <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039be:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039c4:	1c5a      	adds	r2, r3, #1
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80039ca:	e044      	b.n	8003a56 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d015      	beq.n	8003a02 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80039d6:	7bfb      	ldrb	r3, [r7, #15]
 80039d8:	2b21      	cmp	r3, #33	; 0x21
 80039da:	d112      	bne.n	8003a02 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e0:	781a      	ldrb	r2, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ec:	1c5a      	adds	r2, r3, #1
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	3b01      	subs	r3, #1
 80039fa:	b29a      	uxth	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003a00:	e029      	b.n	8003a56 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d124      	bne.n	8003a56 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003a0c:	7bfb      	ldrb	r3, [r7, #15]
 8003a0e:	2b21      	cmp	r3, #33	; 0x21
 8003a10:	d121      	bne.n	8003a56 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	685a      	ldr	r2, [r3, #4]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a20:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a30:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2220      	movs	r2, #32
 8003a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f7fd f9b1 	bl	8000db0 <HAL_I2C_MemTxCpltCallback>
}
 8003a4e:	e002      	b.n	8003a56 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f7ff facd 	bl	8002ff0 <I2C_Flush_DR>
}
 8003a56:	bf00      	nop
 8003a58:	3710      	adds	r7, #16
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b084      	sub	sp, #16
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b22      	cmp	r3, #34	; 0x22
 8003a70:	f040 80ac 	bne.w	8003bcc <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2b03      	cmp	r3, #3
 8003a80:	d921      	bls.n	8003ac6 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	691a      	ldr	r2, [r3, #16]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8c:	b2d2      	uxtb	r2, r2
 8003a8e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a94:	1c5a      	adds	r2, r3, #1
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	3b01      	subs	r3, #1
 8003aa2:	b29a      	uxth	r2, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	2b03      	cmp	r3, #3
 8003ab0:	f040 808c 	bne.w	8003bcc <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	685a      	ldr	r2, [r3, #4]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ac2:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003ac4:	e082      	b.n	8003bcc <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d075      	beq.n	8003bba <I2C_MasterReceive_RXNE+0x15c>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d002      	beq.n	8003ada <I2C_MasterReceive_RXNE+0x7c>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d16f      	bne.n	8003bba <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f001 f836 	bl	8004b4c <I2C_WaitOnSTOPRequestThroughIT>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d142      	bne.n	8003b6c <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003af4:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	685a      	ldr	r2, [r3, #4]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b04:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	691a      	ldr	r2, [r3, #16]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b10:	b2d2      	uxtb	r2, r2
 8003b12:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b18:	1c5a      	adds	r2, r3, #1
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	3b01      	subs	r3, #1
 8003b26:	b29a      	uxth	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2220      	movs	r2, #32
 8003b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	2b40      	cmp	r3, #64	; 0x40
 8003b3e:	d10a      	bne.n	8003b56 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f7fd f91c 	bl	8000d8c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003b54:	e03a      	b.n	8003bcc <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2212      	movs	r2, #18
 8003b62:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f7ff fd8d 	bl	8003684 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003b6a:	e02f      	b.n	8003bcc <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	685a      	ldr	r2, [r3, #4]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b7a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	691a      	ldr	r2, [r3, #16]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b86:	b2d2      	uxtb	r2, r2
 8003b88:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8e:	1c5a      	adds	r2, r3, #1
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	b29a      	uxth	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2220      	movs	r2, #32
 8003ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f7ff fd97 	bl	80036e6 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003bb8:	e008      	b.n	8003bcc <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	685a      	ldr	r2, [r3, #4]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bc8:	605a      	str	r2, [r3, #4]
}
 8003bca:	e7ff      	b.n	8003bcc <I2C_MasterReceive_RXNE+0x16e>
 8003bcc:	bf00      	nop
 8003bce:	3710      	adds	r7, #16
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be0:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	2b04      	cmp	r3, #4
 8003bea:	d11b      	bne.n	8003c24 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	685a      	ldr	r2, [r3, #4]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bfa:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	691a      	ldr	r2, [r3, #16]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c06:	b2d2      	uxtb	r2, r2
 8003c08:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0e:	1c5a      	adds	r2, r3, #1
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	b29a      	uxth	r2, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003c22:	e0bd      	b.n	8003da0 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	2b03      	cmp	r3, #3
 8003c2c:	d129      	bne.n	8003c82 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	685a      	ldr	r2, [r3, #4]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c3c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2b04      	cmp	r3, #4
 8003c42:	d00a      	beq.n	8003c5a <I2C_MasterReceive_BTF+0x86>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d007      	beq.n	8003c5a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c58:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	691a      	ldr	r2, [r3, #16]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c64:	b2d2      	uxtb	r2, r2
 8003c66:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6c:	1c5a      	adds	r2, r3, #1
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	3b01      	subs	r3, #1
 8003c7a:	b29a      	uxth	r2, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003c80:	e08e      	b.n	8003da0 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d176      	bne.n	8003d7a <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d002      	beq.n	8003c98 <I2C_MasterReceive_BTF+0xc4>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2b10      	cmp	r3, #16
 8003c96:	d108      	bne.n	8003caa <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ca6:	601a      	str	r2, [r3, #0]
 8003ca8:	e019      	b.n	8003cde <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2b04      	cmp	r3, #4
 8003cae:	d002      	beq.n	8003cb6 <I2C_MasterReceive_BTF+0xe2>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d108      	bne.n	8003cc8 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003cc4:	601a      	str	r2, [r3, #0]
 8003cc6:	e00a      	b.n	8003cde <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2b10      	cmp	r3, #16
 8003ccc:	d007      	beq.n	8003cde <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cdc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	691a      	ldr	r2, [r3, #16]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce8:	b2d2      	uxtb	r2, r2
 8003cea:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf0:	1c5a      	adds	r2, r3, #1
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	b29a      	uxth	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	691a      	ldr	r2, [r3, #16]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0e:	b2d2      	uxtb	r2, r2
 8003d10:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d16:	1c5a      	adds	r2, r3, #1
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	3b01      	subs	r3, #1
 8003d24:	b29a      	uxth	r2, r3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	685a      	ldr	r2, [r3, #4]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003d38:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2220      	movs	r2, #32
 8003d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b40      	cmp	r3, #64	; 0x40
 8003d4c:	d10a      	bne.n	8003d64 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f7fd f815 	bl	8000d8c <HAL_I2C_MemRxCpltCallback>
}
 8003d62:	e01d      	b.n	8003da0 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2212      	movs	r2, #18
 8003d70:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f7ff fc86 	bl	8003684 <HAL_I2C_MasterRxCpltCallback>
}
 8003d78:	e012      	b.n	8003da0 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	691a      	ldr	r2, [r3, #16]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d84:	b2d2      	uxtb	r2, r2
 8003d86:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8c:	1c5a      	adds	r2, r3, #1
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	b29a      	uxth	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003da0:	bf00      	nop
 8003da2:	3710      	adds	r7, #16
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	2b40      	cmp	r3, #64	; 0x40
 8003dba:	d117      	bne.n	8003dec <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d109      	bne.n	8003dd8 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	461a      	mov	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003dd4:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003dd6:	e067      	b.n	8003ea8 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	f043 0301 	orr.w	r3, r3, #1
 8003de2:	b2da      	uxtb	r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	611a      	str	r2, [r3, #16]
}
 8003dea:	e05d      	b.n	8003ea8 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	691b      	ldr	r3, [r3, #16]
 8003df0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003df4:	d133      	bne.n	8003e5e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	2b21      	cmp	r3, #33	; 0x21
 8003e00:	d109      	bne.n	8003e16 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	461a      	mov	r2, r3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e12:	611a      	str	r2, [r3, #16]
 8003e14:	e008      	b.n	8003e28 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	f043 0301 	orr.w	r3, r3, #1
 8003e20:	b2da      	uxtb	r2, r3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d004      	beq.n	8003e3a <I2C_Master_SB+0x92>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d108      	bne.n	8003e4c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d032      	beq.n	8003ea8 <I2C_Master_SB+0x100>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d02d      	beq.n	8003ea8 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	685a      	ldr	r2, [r3, #4]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e5a:	605a      	str	r2, [r3, #4]
}
 8003e5c:	e024      	b.n	8003ea8 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d10e      	bne.n	8003e84 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	11db      	asrs	r3, r3, #7
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	f003 0306 	and.w	r3, r3, #6
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	f063 030f 	orn	r3, r3, #15
 8003e7a:	b2da      	uxtb	r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	611a      	str	r2, [r3, #16]
}
 8003e82:	e011      	b.n	8003ea8 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d10d      	bne.n	8003ea8 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	11db      	asrs	r3, r3, #7
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	f003 0306 	and.w	r3, r3, #6
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	f063 030e 	orn	r3, r3, #14
 8003ea0:	b2da      	uxtb	r2, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	611a      	str	r2, [r3, #16]
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bc80      	pop	{r7}
 8003eb0:	4770      	bx	lr

08003eb2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	b083      	sub	sp, #12
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ebe:	b2da      	uxtb	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d004      	beq.n	8003ed8 <I2C_Master_ADD10+0x26>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d108      	bne.n	8003eea <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d00c      	beq.n	8003efa <I2C_Master_ADD10+0x48>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d007      	beq.n	8003efa <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	685a      	ldr	r2, [r3, #4]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ef8:	605a      	str	r2, [r3, #4]
  }
}
 8003efa:	bf00      	nop
 8003efc:	370c      	adds	r7, #12
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bc80      	pop	{r7}
 8003f02:	4770      	bx	lr

08003f04 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b091      	sub	sp, #68	; 0x44
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f12:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f20:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	2b22      	cmp	r3, #34	; 0x22
 8003f2c:	f040 8174 	bne.w	8004218 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d10f      	bne.n	8003f58 <I2C_Master_ADDR+0x54>
 8003f38:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003f3c:	2b40      	cmp	r3, #64	; 0x40
 8003f3e:	d10b      	bne.n	8003f58 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f40:	2300      	movs	r3, #0
 8003f42:	633b      	str	r3, [r7, #48]	; 0x30
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	695b      	ldr	r3, [r3, #20]
 8003f4a:	633b      	str	r3, [r7, #48]	; 0x30
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	633b      	str	r3, [r7, #48]	; 0x30
 8003f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f56:	e16b      	b.n	8004230 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d11d      	bne.n	8003f9c <I2C_Master_ADDR+0x98>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003f68:	d118      	bne.n	8003f9c <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	695b      	ldr	r3, [r3, #20]
 8003f74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	699b      	ldr	r3, [r3, #24]
 8003f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f8e:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f94:	1c5a      	adds	r2, r3, #1
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	651a      	str	r2, [r3, #80]	; 0x50
 8003f9a:	e149      	b.n	8004230 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d113      	bne.n	8003fce <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	695b      	ldr	r3, [r3, #20]
 8003fb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	699b      	ldr	r3, [r3, #24]
 8003fb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fba:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fca:	601a      	str	r2, [r3, #0]
 8003fcc:	e120      	b.n	8004210 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	f040 808a 	bne.w	80040ee <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fdc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003fe0:	d137      	bne.n	8004052 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ff0:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ffc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004000:	d113      	bne.n	800402a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004010:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004012:	2300      	movs	r3, #0
 8004014:	627b      	str	r3, [r7, #36]	; 0x24
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	695b      	ldr	r3, [r3, #20]
 800401c:	627b      	str	r3, [r7, #36]	; 0x24
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	699b      	ldr	r3, [r3, #24]
 8004024:	627b      	str	r3, [r7, #36]	; 0x24
 8004026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004028:	e0f2      	b.n	8004210 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800402a:	2300      	movs	r3, #0
 800402c:	623b      	str	r3, [r7, #32]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	695b      	ldr	r3, [r3, #20]
 8004034:	623b      	str	r3, [r7, #32]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	699b      	ldr	r3, [r3, #24]
 800403c:	623b      	str	r3, [r7, #32]
 800403e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800404e:	601a      	str	r2, [r3, #0]
 8004050:	e0de      	b.n	8004210 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004054:	2b08      	cmp	r3, #8
 8004056:	d02e      	beq.n	80040b6 <I2C_Master_ADDR+0x1b2>
 8004058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800405a:	2b20      	cmp	r3, #32
 800405c:	d02b      	beq.n	80040b6 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800405e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004060:	2b12      	cmp	r3, #18
 8004062:	d102      	bne.n	800406a <I2C_Master_ADDR+0x166>
 8004064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004066:	2b01      	cmp	r3, #1
 8004068:	d125      	bne.n	80040b6 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800406a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800406c:	2b04      	cmp	r3, #4
 800406e:	d00e      	beq.n	800408e <I2C_Master_ADDR+0x18a>
 8004070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004072:	2b02      	cmp	r3, #2
 8004074:	d00b      	beq.n	800408e <I2C_Master_ADDR+0x18a>
 8004076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004078:	2b10      	cmp	r3, #16
 800407a:	d008      	beq.n	800408e <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800408a:	601a      	str	r2, [r3, #0]
 800408c:	e007      	b.n	800409e <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800409c:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800409e:	2300      	movs	r3, #0
 80040a0:	61fb      	str	r3, [r7, #28]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	695b      	ldr	r3, [r3, #20]
 80040a8:	61fb      	str	r3, [r7, #28]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	699b      	ldr	r3, [r3, #24]
 80040b0:	61fb      	str	r3, [r7, #28]
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	e0ac      	b.n	8004210 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040c4:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040c6:	2300      	movs	r3, #0
 80040c8:	61bb      	str	r3, [r7, #24]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	695b      	ldr	r3, [r3, #20]
 80040d0:	61bb      	str	r3, [r7, #24]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	699b      	ldr	r3, [r3, #24]
 80040d8:	61bb      	str	r3, [r7, #24]
 80040da:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040ea:	601a      	str	r2, [r3, #0]
 80040ec:	e090      	b.n	8004210 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d158      	bne.n	80041aa <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80040f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040fa:	2b04      	cmp	r3, #4
 80040fc:	d021      	beq.n	8004142 <I2C_Master_ADDR+0x23e>
 80040fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004100:	2b02      	cmp	r3, #2
 8004102:	d01e      	beq.n	8004142 <I2C_Master_ADDR+0x23e>
 8004104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004106:	2b10      	cmp	r3, #16
 8004108:	d01b      	beq.n	8004142 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004118:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800411a:	2300      	movs	r3, #0
 800411c:	617b      	str	r3, [r7, #20]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	695b      	ldr	r3, [r3, #20]
 8004124:	617b      	str	r3, [r7, #20]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	699b      	ldr	r3, [r3, #24]
 800412c:	617b      	str	r3, [r7, #20]
 800412e:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800413e:	601a      	str	r2, [r3, #0]
 8004140:	e012      	b.n	8004168 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004150:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004152:	2300      	movs	r3, #0
 8004154:	613b      	str	r3, [r7, #16]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	695b      	ldr	r3, [r3, #20]
 800415c:	613b      	str	r3, [r7, #16]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	699b      	ldr	r3, [r3, #24]
 8004164:	613b      	str	r3, [r7, #16]
 8004166:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004172:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004176:	d14b      	bne.n	8004210 <I2C_Master_ADDR+0x30c>
 8004178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800417a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800417e:	d00b      	beq.n	8004198 <I2C_Master_ADDR+0x294>
 8004180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004182:	2b01      	cmp	r3, #1
 8004184:	d008      	beq.n	8004198 <I2C_Master_ADDR+0x294>
 8004186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004188:	2b08      	cmp	r3, #8
 800418a:	d005      	beq.n	8004198 <I2C_Master_ADDR+0x294>
 800418c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800418e:	2b10      	cmp	r3, #16
 8004190:	d002      	beq.n	8004198 <I2C_Master_ADDR+0x294>
 8004192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004194:	2b20      	cmp	r3, #32
 8004196:	d13b      	bne.n	8004210 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	685a      	ldr	r2, [r3, #4]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80041a6:	605a      	str	r2, [r3, #4]
 80041a8:	e032      	b.n	8004210 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041b8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041c8:	d117      	bne.n	80041fa <I2C_Master_ADDR+0x2f6>
 80041ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80041d0:	d00b      	beq.n	80041ea <I2C_Master_ADDR+0x2e6>
 80041d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d008      	beq.n	80041ea <I2C_Master_ADDR+0x2e6>
 80041d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041da:	2b08      	cmp	r3, #8
 80041dc:	d005      	beq.n	80041ea <I2C_Master_ADDR+0x2e6>
 80041de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041e0:	2b10      	cmp	r3, #16
 80041e2:	d002      	beq.n	80041ea <I2C_Master_ADDR+0x2e6>
 80041e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041e6:	2b20      	cmp	r3, #32
 80041e8:	d107      	bne.n	80041fa <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	685a      	ldr	r2, [r3, #4]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80041f8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041fa:	2300      	movs	r3, #0
 80041fc:	60fb      	str	r3, [r7, #12]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	695b      	ldr	r3, [r3, #20]
 8004204:	60fb      	str	r3, [r7, #12]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	60fb      	str	r3, [r7, #12]
 800420e:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004216:	e00b      	b.n	8004230 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004218:	2300      	movs	r3, #0
 800421a:	60bb      	str	r3, [r7, #8]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	60bb      	str	r3, [r7, #8]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	699b      	ldr	r3, [r3, #24]
 800422a:	60bb      	str	r3, [r7, #8]
 800422c:	68bb      	ldr	r3, [r7, #8]
}
 800422e:	e7ff      	b.n	8004230 <I2C_Master_ADDR+0x32c>
 8004230:	bf00      	nop
 8004232:	3744      	adds	r7, #68	; 0x44
 8004234:	46bd      	mov	sp, r7
 8004236:	bc80      	pop	{r7}
 8004238:	4770      	bx	lr

0800423a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800423a:	b580      	push	{r7, lr}
 800423c:	b084      	sub	sp, #16
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004248:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800424e:	b29b      	uxth	r3, r3
 8004250:	2b00      	cmp	r3, #0
 8004252:	d02b      	beq.n	80042ac <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004258:	781a      	ldrb	r2, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004264:	1c5a      	adds	r2, r3, #1
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800426e:	b29b      	uxth	r3, r3
 8004270:	3b01      	subs	r3, #1
 8004272:	b29a      	uxth	r2, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800427c:	b29b      	uxth	r3, r3
 800427e:	2b00      	cmp	r3, #0
 8004280:	d114      	bne.n	80042ac <I2C_SlaveTransmit_TXE+0x72>
 8004282:	7bfb      	ldrb	r3, [r7, #15]
 8004284:	2b29      	cmp	r3, #41	; 0x29
 8004286:	d111      	bne.n	80042ac <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	685a      	ldr	r2, [r3, #4]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004296:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2221      	movs	r2, #33	; 0x21
 800429c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2228      	movs	r2, #40	; 0x28
 80042a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f7ff f9f5 	bl	8003696 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80042ac:	bf00      	nop
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d011      	beq.n	80042ea <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ca:	781a      	ldrb	r2, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d6:	1c5a      	adds	r2, r3, #1
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	3b01      	subs	r3, #1
 80042e4:	b29a      	uxth	r2, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80042ea:	bf00      	nop
 80042ec:	370c      	adds	r7, #12
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bc80      	pop	{r7}
 80042f2:	4770      	bx	lr

080042f4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004302:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004308:	b29b      	uxth	r3, r3
 800430a:	2b00      	cmp	r3, #0
 800430c:	d02c      	beq.n	8004368 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	691a      	ldr	r2, [r3, #16]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004318:	b2d2      	uxtb	r2, r2
 800431a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004320:	1c5a      	adds	r2, r3, #1
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800432a:	b29b      	uxth	r3, r3
 800432c:	3b01      	subs	r3, #1
 800432e:	b29a      	uxth	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004338:	b29b      	uxth	r3, r3
 800433a:	2b00      	cmp	r3, #0
 800433c:	d114      	bne.n	8004368 <I2C_SlaveReceive_RXNE+0x74>
 800433e:	7bfb      	ldrb	r3, [r7, #15]
 8004340:	2b2a      	cmp	r3, #42	; 0x2a
 8004342:	d111      	bne.n	8004368 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	685a      	ldr	r2, [r3, #4]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004352:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2222      	movs	r2, #34	; 0x22
 8004358:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2228      	movs	r2, #40	; 0x28
 800435e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f7ff f9a0 	bl	80036a8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004368:	bf00      	nop
 800436a:	3710      	adds	r7, #16
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800437c:	b29b      	uxth	r3, r3
 800437e:	2b00      	cmp	r3, #0
 8004380:	d012      	beq.n	80043a8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	691a      	ldr	r2, [r3, #16]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438c:	b2d2      	uxtb	r2, r2
 800438e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004394:	1c5a      	adds	r2, r3, #1
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800439e:	b29b      	uxth	r3, r3
 80043a0:	3b01      	subs	r3, #1
 80043a2:	b29a      	uxth	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80043a8:	bf00      	nop
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bc80      	pop	{r7}
 80043b0:	4770      	bx	lr

080043b2 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80043b2:	b580      	push	{r7, lr}
 80043b4:	b084      	sub	sp, #16
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
 80043ba:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80043bc:	2300      	movs	r3, #0
 80043be:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80043cc:	2b28      	cmp	r3, #40	; 0x28
 80043ce:	d125      	bne.n	800441c <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	685a      	ldr	r2, [r3, #4]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043de:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	f003 0304 	and.w	r3, r3, #4
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d101      	bne.n	80043ee <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80043ea:	2301      	movs	r3, #1
 80043ec:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d103      	bne.n	8004400 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	81bb      	strh	r3, [r7, #12]
 80043fe:	e002      	b.n	8004406 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800440e:	89ba      	ldrh	r2, [r7, #12]
 8004410:	7bfb      	ldrb	r3, [r7, #15]
 8004412:	4619      	mov	r1, r3
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f7ff f950 	bl	80036ba <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800441a:	e00e      	b.n	800443a <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800441c:	2300      	movs	r3, #0
 800441e:	60bb      	str	r3, [r7, #8]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	60bb      	str	r3, [r7, #8]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	60bb      	str	r3, [r7, #8]
 8004430:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800443a:	bf00      	nop
 800443c:	3710      	adds	r7, #16
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
	...

08004444 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004452:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	685a      	ldr	r2, [r3, #4]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004462:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004464:	2300      	movs	r3, #0
 8004466:	60bb      	str	r3, [r7, #8]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	60bb      	str	r3, [r7, #8]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f042 0201 	orr.w	r2, r2, #1
 800447e:	601a      	str	r2, [r3, #0]
 8004480:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004490:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800449c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044a0:	d172      	bne.n	8004588 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80044a2:	7bfb      	ldrb	r3, [r7, #15]
 80044a4:	2b22      	cmp	r3, #34	; 0x22
 80044a6:	d002      	beq.n	80044ae <I2C_Slave_STOPF+0x6a>
 80044a8:	7bfb      	ldrb	r3, [r7, #15]
 80044aa:	2b2a      	cmp	r3, #42	; 0x2a
 80044ac:	d135      	bne.n	800451a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d005      	beq.n	80044d2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ca:	f043 0204 	orr.w	r2, r3, #4
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	685a      	ldr	r2, [r3, #4]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044e0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7fe fa94 	bl	8002a14 <HAL_DMA_GetState>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d049      	beq.n	8004586 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f6:	4a69      	ldr	r2, [pc, #420]	; (800469c <I2C_Slave_STOPF+0x258>)
 80044f8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044fe:	4618      	mov	r0, r3
 8004500:	f7fe f90a 	bl	8002718 <HAL_DMA_Abort_IT>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d03d      	beq.n	8004586 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800450e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004514:	4610      	mov	r0, r2
 8004516:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004518:	e035      	b.n	8004586 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	b29a      	uxth	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800452c:	b29b      	uxth	r3, r3
 800452e:	2b00      	cmp	r3, #0
 8004530:	d005      	beq.n	800453e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004536:	f043 0204 	orr.w	r2, r3, #4
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	685a      	ldr	r2, [r3, #4]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800454c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004552:	4618      	mov	r0, r3
 8004554:	f7fe fa5e 	bl	8002a14 <HAL_DMA_GetState>
 8004558:	4603      	mov	r3, r0
 800455a:	2b01      	cmp	r3, #1
 800455c:	d014      	beq.n	8004588 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004562:	4a4e      	ldr	r2, [pc, #312]	; (800469c <I2C_Slave_STOPF+0x258>)
 8004564:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800456a:	4618      	mov	r0, r3
 800456c:	f7fe f8d4 	bl	8002718 <HAL_DMA_Abort_IT>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d008      	beq.n	8004588 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800457a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004580:	4610      	mov	r0, r2
 8004582:	4798      	blx	r3
 8004584:	e000      	b.n	8004588 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004586:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800458c:	b29b      	uxth	r3, r3
 800458e:	2b00      	cmp	r3, #0
 8004590:	d03e      	beq.n	8004610 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	695b      	ldr	r3, [r3, #20]
 8004598:	f003 0304 	and.w	r3, r3, #4
 800459c:	2b04      	cmp	r3, #4
 800459e:	d112      	bne.n	80045c6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	691a      	ldr	r2, [r3, #16]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045aa:	b2d2      	uxtb	r2, r2
 80045ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b2:	1c5a      	adds	r2, r3, #1
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045bc:	b29b      	uxth	r3, r3
 80045be:	3b01      	subs	r3, #1
 80045c0:	b29a      	uxth	r2, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	695b      	ldr	r3, [r3, #20]
 80045cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d0:	2b40      	cmp	r3, #64	; 0x40
 80045d2:	d112      	bne.n	80045fa <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	691a      	ldr	r2, [r3, #16]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045de:	b2d2      	uxtb	r2, r2
 80045e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e6:	1c5a      	adds	r2, r3, #1
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	3b01      	subs	r3, #1
 80045f4:	b29a      	uxth	r2, r3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045fe:	b29b      	uxth	r3, r3
 8004600:	2b00      	cmp	r3, #0
 8004602:	d005      	beq.n	8004610 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004608:	f043 0204 	orr.w	r2, r3, #4
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004614:	2b00      	cmp	r3, #0
 8004616:	d003      	beq.n	8004620 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f000 f843 	bl	80046a4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800461e:	e039      	b.n	8004694 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004620:	7bfb      	ldrb	r3, [r7, #15]
 8004622:	2b2a      	cmp	r3, #42	; 0x2a
 8004624:	d109      	bne.n	800463a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2228      	movs	r2, #40	; 0x28
 8004630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f7ff f837 	bl	80036a8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004640:	b2db      	uxtb	r3, r3
 8004642:	2b28      	cmp	r3, #40	; 0x28
 8004644:	d111      	bne.n	800466a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a15      	ldr	r2, [pc, #84]	; (80046a0 <I2C_Slave_STOPF+0x25c>)
 800464a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2220      	movs	r2, #32
 8004656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f7ff f836 	bl	80036d4 <HAL_I2C_ListenCpltCallback>
}
 8004668:	e014      	b.n	8004694 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466e:	2b22      	cmp	r3, #34	; 0x22
 8004670:	d002      	beq.n	8004678 <I2C_Slave_STOPF+0x234>
 8004672:	7bfb      	ldrb	r3, [r7, #15]
 8004674:	2b22      	cmp	r3, #34	; 0x22
 8004676:	d10d      	bne.n	8004694 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2220      	movs	r2, #32
 8004682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f7ff f80a 	bl	80036a8 <HAL_I2C_SlaveRxCpltCallback>
}
 8004694:	bf00      	nop
 8004696:	3710      	adds	r7, #16
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}
 800469c:	08004909 	.word	0x08004909
 80046a0:	ffff0000 	.word	0xffff0000

080046a4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046b2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046ba:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80046bc:	7bbb      	ldrb	r3, [r7, #14]
 80046be:	2b10      	cmp	r3, #16
 80046c0:	d002      	beq.n	80046c8 <I2C_ITError+0x24>
 80046c2:	7bbb      	ldrb	r3, [r7, #14]
 80046c4:	2b40      	cmp	r3, #64	; 0x40
 80046c6:	d10a      	bne.n	80046de <I2C_ITError+0x3a>
 80046c8:	7bfb      	ldrb	r3, [r7, #15]
 80046ca:	2b22      	cmp	r3, #34	; 0x22
 80046cc:	d107      	bne.n	80046de <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046dc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80046de:	7bfb      	ldrb	r3, [r7, #15]
 80046e0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80046e4:	2b28      	cmp	r3, #40	; 0x28
 80046e6:	d107      	bne.n	80046f8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2228      	movs	r2, #40	; 0x28
 80046f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80046f6:	e015      	b.n	8004724 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004702:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004706:	d00a      	beq.n	800471e <I2C_ITError+0x7a>
 8004708:	7bfb      	ldrb	r3, [r7, #15]
 800470a:	2b60      	cmp	r3, #96	; 0x60
 800470c:	d007      	beq.n	800471e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2220      	movs	r2, #32
 8004712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800472e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004732:	d162      	bne.n	80047fa <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	685a      	ldr	r2, [r3, #4]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004742:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004748:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800474c:	b2db      	uxtb	r3, r3
 800474e:	2b01      	cmp	r3, #1
 8004750:	d020      	beq.n	8004794 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004756:	4a6a      	ldr	r2, [pc, #424]	; (8004900 <I2C_ITError+0x25c>)
 8004758:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800475e:	4618      	mov	r0, r3
 8004760:	f7fd ffda 	bl	8002718 <HAL_DMA_Abort_IT>
 8004764:	4603      	mov	r3, r0
 8004766:	2b00      	cmp	r3, #0
 8004768:	f000 8089 	beq.w	800487e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f022 0201 	bic.w	r2, r2, #1
 800477a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2220      	movs	r2, #32
 8004780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800478e:	4610      	mov	r0, r2
 8004790:	4798      	blx	r3
 8004792:	e074      	b.n	800487e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004798:	4a59      	ldr	r2, [pc, #356]	; (8004900 <I2C_ITError+0x25c>)
 800479a:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a0:	4618      	mov	r0, r3
 80047a2:	f7fd ffb9 	bl	8002718 <HAL_DMA_Abort_IT>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d068      	beq.n	800487e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	695b      	ldr	r3, [r3, #20]
 80047b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047b6:	2b40      	cmp	r3, #64	; 0x40
 80047b8:	d10b      	bne.n	80047d2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	691a      	ldr	r2, [r3, #16]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c4:	b2d2      	uxtb	r2, r2
 80047c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047cc:	1c5a      	adds	r2, r3, #1
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f022 0201 	bic.w	r2, r2, #1
 80047e0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2220      	movs	r2, #32
 80047e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80047f4:	4610      	mov	r0, r2
 80047f6:	4798      	blx	r3
 80047f8:	e041      	b.n	800487e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004800:	b2db      	uxtb	r3, r3
 8004802:	2b60      	cmp	r3, #96	; 0x60
 8004804:	d125      	bne.n	8004852 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2220      	movs	r2, #32
 800480a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800481e:	2b40      	cmp	r3, #64	; 0x40
 8004820:	d10b      	bne.n	800483a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	691a      	ldr	r2, [r3, #16]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482c:	b2d2      	uxtb	r2, r2
 800482e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004834:	1c5a      	adds	r2, r3, #1
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f022 0201 	bic.w	r2, r2, #1
 8004848:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f7fe ff54 	bl	80036f8 <HAL_I2C_AbortCpltCallback>
 8004850:	e015      	b.n	800487e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	695b      	ldr	r3, [r3, #20]
 8004858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800485c:	2b40      	cmp	r3, #64	; 0x40
 800485e:	d10b      	bne.n	8004878 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	691a      	ldr	r2, [r3, #16]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486a:	b2d2      	uxtb	r2, r2
 800486c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004872:	1c5a      	adds	r2, r3, #1
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f7fe ff34 	bl	80036e6 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004882:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	f003 0301 	and.w	r3, r3, #1
 800488a:	2b00      	cmp	r3, #0
 800488c:	d10e      	bne.n	80048ac <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004894:	2b00      	cmp	r3, #0
 8004896:	d109      	bne.n	80048ac <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d104      	bne.n	80048ac <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d007      	beq.n	80048bc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	685a      	ldr	r2, [r3, #4]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80048ba:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048c2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c8:	f003 0304 	and.w	r3, r3, #4
 80048cc:	2b04      	cmp	r3, #4
 80048ce:	d113      	bne.n	80048f8 <I2C_ITError+0x254>
 80048d0:	7bfb      	ldrb	r3, [r7, #15]
 80048d2:	2b28      	cmp	r3, #40	; 0x28
 80048d4:	d110      	bne.n	80048f8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a0a      	ldr	r2, [pc, #40]	; (8004904 <I2C_ITError+0x260>)
 80048da:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2220      	movs	r2, #32
 80048e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f7fe feee 	bl	80036d4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80048f8:	bf00      	nop
 80048fa:	3710      	adds	r7, #16
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	08004909 	.word	0x08004909
 8004904:	ffff0000 	.word	0xffff0000

08004908 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b086      	sub	sp, #24
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004910:	2300      	movs	r3, #0
 8004912:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004918:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004920:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004922:	4b4b      	ldr	r3, [pc, #300]	; (8004a50 <I2C_DMAAbort+0x148>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	08db      	lsrs	r3, r3, #3
 8004928:	4a4a      	ldr	r2, [pc, #296]	; (8004a54 <I2C_DMAAbort+0x14c>)
 800492a:	fba2 2303 	umull	r2, r3, r2, r3
 800492e:	0a1a      	lsrs	r2, r3, #8
 8004930:	4613      	mov	r3, r2
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	4413      	add	r3, r2
 8004936:	00da      	lsls	r2, r3, #3
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d106      	bne.n	8004950 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004946:	f043 0220 	orr.w	r2, r3, #32
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800494e:	e00a      	b.n	8004966 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	3b01      	subs	r3, #1
 8004954:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004960:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004964:	d0ea      	beq.n	800493c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800496a:	2b00      	cmp	r3, #0
 800496c:	d003      	beq.n	8004976 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004972:	2200      	movs	r2, #0
 8004974:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800497a:	2b00      	cmp	r3, #0
 800497c:	d003      	beq.n	8004986 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004982:	2200      	movs	r2, #0
 8004984:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004994:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	2200      	movs	r2, #0
 800499a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d003      	beq.n	80049ac <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049a8:	2200      	movs	r2, #0
 80049aa:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d003      	beq.n	80049bc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b8:	2200      	movs	r2, #0
 80049ba:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f022 0201 	bic.w	r2, r2, #1
 80049ca:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	2b60      	cmp	r3, #96	; 0x60
 80049d6:	d10e      	bne.n	80049f6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	2220      	movs	r2, #32
 80049dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	2200      	movs	r2, #0
 80049e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	2200      	movs	r2, #0
 80049ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80049ee:	6978      	ldr	r0, [r7, #20]
 80049f0:	f7fe fe82 	bl	80036f8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80049f4:	e027      	b.n	8004a46 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80049f6:	7cfb      	ldrb	r3, [r7, #19]
 80049f8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80049fc:	2b28      	cmp	r3, #40	; 0x28
 80049fe:	d117      	bne.n	8004a30 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f042 0201 	orr.w	r2, r2, #1
 8004a0e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a1e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	2200      	movs	r2, #0
 8004a24:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	2228      	movs	r2, #40	; 0x28
 8004a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004a2e:	e007      	b.n	8004a40 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	2220      	movs	r2, #32
 8004a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004a40:	6978      	ldr	r0, [r7, #20]
 8004a42:	f7fe fe50 	bl	80036e6 <HAL_I2C_ErrorCallback>
}
 8004a46:	bf00      	nop
 8004a48:	3718      	adds	r7, #24
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	20000018 	.word	0x20000018
 8004a54:	14f8b589 	.word	0x14f8b589

08004a58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	603b      	str	r3, [r7, #0]
 8004a64:	4613      	mov	r3, r2
 8004a66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a68:	e048      	b.n	8004afc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a70:	d044      	beq.n	8004afc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a72:	f7fc ff29 	bl	80018c8 <HAL_GetTick>
 8004a76:	4602      	mov	r2, r0
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	1ad3      	subs	r3, r2, r3
 8004a7c:	683a      	ldr	r2, [r7, #0]
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d302      	bcc.n	8004a88 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d139      	bne.n	8004afc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	0c1b      	lsrs	r3, r3, #16
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d10d      	bne.n	8004aae <I2C_WaitOnFlagUntilTimeout+0x56>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	695b      	ldr	r3, [r3, #20]
 8004a98:	43da      	mvns	r2, r3
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	bf0c      	ite	eq
 8004aa4:	2301      	moveq	r3, #1
 8004aa6:	2300      	movne	r3, #0
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	461a      	mov	r2, r3
 8004aac:	e00c      	b.n	8004ac8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	699b      	ldr	r3, [r3, #24]
 8004ab4:	43da      	mvns	r2, r3
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	4013      	ands	r3, r2
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	bf0c      	ite	eq
 8004ac0:	2301      	moveq	r3, #1
 8004ac2:	2300      	movne	r3, #0
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	79fb      	ldrb	r3, [r7, #7]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d116      	bne.n	8004afc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2220      	movs	r2, #32
 8004ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae8:	f043 0220 	orr.w	r2, r3, #32
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e023      	b.n	8004b44 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	0c1b      	lsrs	r3, r3, #16
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d10d      	bne.n	8004b22 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	695b      	ldr	r3, [r3, #20]
 8004b0c:	43da      	mvns	r2, r3
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	4013      	ands	r3, r2
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	bf0c      	ite	eq
 8004b18:	2301      	moveq	r3, #1
 8004b1a:	2300      	movne	r3, #0
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	461a      	mov	r2, r3
 8004b20:	e00c      	b.n	8004b3c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	699b      	ldr	r3, [r3, #24]
 8004b28:	43da      	mvns	r2, r3
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	bf0c      	ite	eq
 8004b34:	2301      	moveq	r3, #1
 8004b36:	2300      	movne	r3, #0
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	79fb      	ldrb	r3, [r7, #7]
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d093      	beq.n	8004a6a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3710      	adds	r7, #16
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b085      	sub	sp, #20
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b54:	2300      	movs	r3, #0
 8004b56:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004b58:	4b13      	ldr	r3, [pc, #76]	; (8004ba8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	08db      	lsrs	r3, r3, #3
 8004b5e:	4a13      	ldr	r2, [pc, #76]	; (8004bac <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004b60:	fba2 2303 	umull	r2, r3, r2, r3
 8004b64:	0a1a      	lsrs	r2, r3, #8
 8004b66:	4613      	mov	r3, r2
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	4413      	add	r3, r2
 8004b6c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	3b01      	subs	r3, #1
 8004b72:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d107      	bne.n	8004b8a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7e:	f043 0220 	orr.w	r2, r3, #32
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e008      	b.n	8004b9c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b98:	d0e9      	beq.n	8004b6e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3714      	adds	r7, #20
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bc80      	pop	{r7}
 8004ba4:	4770      	bx	lr
 8004ba6:	bf00      	nop
 8004ba8:	20000018 	.word	0x20000018
 8004bac:	14f8b589 	.word	0x14f8b589

08004bb0 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bbc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004bc0:	d103      	bne.n	8004bca <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004bc8:	e007      	b.n	8004bda <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bce:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004bd2:	d102      	bne.n	8004bda <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2208      	movs	r2, #8
 8004bd8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004bda:	bf00      	nop
 8004bdc:	370c      	adds	r7, #12
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bc80      	pop	{r7}
 8004be2:	4770      	bx	lr

08004be4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b086      	sub	sp, #24
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d101      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e272      	b.n	80050dc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0301 	and.w	r3, r3, #1
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	f000 8087 	beq.w	8004d12 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c04:	4b92      	ldr	r3, [pc, #584]	; (8004e50 <HAL_RCC_OscConfig+0x26c>)
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	f003 030c 	and.w	r3, r3, #12
 8004c0c:	2b04      	cmp	r3, #4
 8004c0e:	d00c      	beq.n	8004c2a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004c10:	4b8f      	ldr	r3, [pc, #572]	; (8004e50 <HAL_RCC_OscConfig+0x26c>)
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	f003 030c 	and.w	r3, r3, #12
 8004c18:	2b08      	cmp	r3, #8
 8004c1a:	d112      	bne.n	8004c42 <HAL_RCC_OscConfig+0x5e>
 8004c1c:	4b8c      	ldr	r3, [pc, #560]	; (8004e50 <HAL_RCC_OscConfig+0x26c>)
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c28:	d10b      	bne.n	8004c42 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c2a:	4b89      	ldr	r3, [pc, #548]	; (8004e50 <HAL_RCC_OscConfig+0x26c>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d06c      	beq.n	8004d10 <HAL_RCC_OscConfig+0x12c>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d168      	bne.n	8004d10 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e24c      	b.n	80050dc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c4a:	d106      	bne.n	8004c5a <HAL_RCC_OscConfig+0x76>
 8004c4c:	4b80      	ldr	r3, [pc, #512]	; (8004e50 <HAL_RCC_OscConfig+0x26c>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a7f      	ldr	r2, [pc, #508]	; (8004e50 <HAL_RCC_OscConfig+0x26c>)
 8004c52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c56:	6013      	str	r3, [r2, #0]
 8004c58:	e02e      	b.n	8004cb8 <HAL_RCC_OscConfig+0xd4>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d10c      	bne.n	8004c7c <HAL_RCC_OscConfig+0x98>
 8004c62:	4b7b      	ldr	r3, [pc, #492]	; (8004e50 <HAL_RCC_OscConfig+0x26c>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a7a      	ldr	r2, [pc, #488]	; (8004e50 <HAL_RCC_OscConfig+0x26c>)
 8004c68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c6c:	6013      	str	r3, [r2, #0]
 8004c6e:	4b78      	ldr	r3, [pc, #480]	; (8004e50 <HAL_RCC_OscConfig+0x26c>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a77      	ldr	r2, [pc, #476]	; (8004e50 <HAL_RCC_OscConfig+0x26c>)
 8004c74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c78:	6013      	str	r3, [r2, #0]
 8004c7a:	e01d      	b.n	8004cb8 <HAL_RCC_OscConfig+0xd4>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c84:	d10c      	bne.n	8004ca0 <HAL_RCC_OscConfig+0xbc>
 8004c86:	4b72      	ldr	r3, [pc, #456]	; (8004e50 <HAL_RCC_OscConfig+0x26c>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a71      	ldr	r2, [pc, #452]	; (8004e50 <HAL_RCC_OscConfig+0x26c>)
 8004c8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c90:	6013      	str	r3, [r2, #0]
 8004c92:	4b6f      	ldr	r3, [pc, #444]	; (8004e50 <HAL_RCC_OscConfig+0x26c>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a6e      	ldr	r2, [pc, #440]	; (8004e50 <HAL_RCC_OscConfig+0x26c>)
 8004c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c9c:	6013      	str	r3, [r2, #0]
 8004c9e:	e00b      	b.n	8004cb8 <HAL_RCC_OscConfig+0xd4>
 8004ca0:	4b6b      	ldr	r3, [pc, #428]	; (8004e50 <HAL_RCC_OscConfig+0x26c>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a6a      	ldr	r2, [pc, #424]	; (8004e50 <HAL_RCC_OscConfig+0x26c>)
 8004ca6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004caa:	6013      	str	r3, [r2, #0]
 8004cac:	4b68      	ldr	r3, [pc, #416]	; (8004e50 <HAL_RCC_OscConfig+0x26c>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a67      	ldr	r2, [pc, #412]	; (8004e50 <HAL_RCC_OscConfig+0x26c>)
 8004cb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cb6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d013      	beq.n	8004ce8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cc0:	f7fc fe02 	bl	80018c8 <HAL_GetTick>
 8004cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cc6:	e008      	b.n	8004cda <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cc8:	f7fc fdfe 	bl	80018c8 <HAL_GetTick>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	2b64      	cmp	r3, #100	; 0x64
 8004cd4:	d901      	bls.n	8004cda <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e200      	b.n	80050dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cda:	4b5d      	ldr	r3, [pc, #372]	; (8004e50 <HAL_RCC_OscConfig+0x26c>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d0f0      	beq.n	8004cc8 <HAL_RCC_OscConfig+0xe4>
 8004ce6:	e014      	b.n	8004d12 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ce8:	f7fc fdee 	bl	80018c8 <HAL_GetTick>
 8004cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cee:	e008      	b.n	8004d02 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cf0:	f7fc fdea 	bl	80018c8 <HAL_GetTick>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	2b64      	cmp	r3, #100	; 0x64
 8004cfc:	d901      	bls.n	8004d02 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e1ec      	b.n	80050dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d02:	4b53      	ldr	r3, [pc, #332]	; (8004e50 <HAL_RCC_OscConfig+0x26c>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d1f0      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x10c>
 8004d0e:	e000      	b.n	8004d12 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0302 	and.w	r3, r3, #2
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d063      	beq.n	8004de6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d1e:	4b4c      	ldr	r3, [pc, #304]	; (8004e50 <HAL_RCC_OscConfig+0x26c>)
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f003 030c 	and.w	r3, r3, #12
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d00b      	beq.n	8004d42 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004d2a:	4b49      	ldr	r3, [pc, #292]	; (8004e50 <HAL_RCC_OscConfig+0x26c>)
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	f003 030c 	and.w	r3, r3, #12
 8004d32:	2b08      	cmp	r3, #8
 8004d34:	d11c      	bne.n	8004d70 <HAL_RCC_OscConfig+0x18c>
 8004d36:	4b46      	ldr	r3, [pc, #280]	; (8004e50 <HAL_RCC_OscConfig+0x26c>)
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d116      	bne.n	8004d70 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d42:	4b43      	ldr	r3, [pc, #268]	; (8004e50 <HAL_RCC_OscConfig+0x26c>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0302 	and.w	r3, r3, #2
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d005      	beq.n	8004d5a <HAL_RCC_OscConfig+0x176>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d001      	beq.n	8004d5a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e1c0      	b.n	80050dc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d5a:	4b3d      	ldr	r3, [pc, #244]	; (8004e50 <HAL_RCC_OscConfig+0x26c>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	695b      	ldr	r3, [r3, #20]
 8004d66:	00db      	lsls	r3, r3, #3
 8004d68:	4939      	ldr	r1, [pc, #228]	; (8004e50 <HAL_RCC_OscConfig+0x26c>)
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d6e:	e03a      	b.n	8004de6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	691b      	ldr	r3, [r3, #16]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d020      	beq.n	8004dba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d78:	4b36      	ldr	r3, [pc, #216]	; (8004e54 <HAL_RCC_OscConfig+0x270>)
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d7e:	f7fc fda3 	bl	80018c8 <HAL_GetTick>
 8004d82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d84:	e008      	b.n	8004d98 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d86:	f7fc fd9f 	bl	80018c8 <HAL_GetTick>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	d901      	bls.n	8004d98 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e1a1      	b.n	80050dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d98:	4b2d      	ldr	r3, [pc, #180]	; (8004e50 <HAL_RCC_OscConfig+0x26c>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 0302 	and.w	r3, r3, #2
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d0f0      	beq.n	8004d86 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004da4:	4b2a      	ldr	r3, [pc, #168]	; (8004e50 <HAL_RCC_OscConfig+0x26c>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	695b      	ldr	r3, [r3, #20]
 8004db0:	00db      	lsls	r3, r3, #3
 8004db2:	4927      	ldr	r1, [pc, #156]	; (8004e50 <HAL_RCC_OscConfig+0x26c>)
 8004db4:	4313      	orrs	r3, r2
 8004db6:	600b      	str	r3, [r1, #0]
 8004db8:	e015      	b.n	8004de6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004dba:	4b26      	ldr	r3, [pc, #152]	; (8004e54 <HAL_RCC_OscConfig+0x270>)
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dc0:	f7fc fd82 	bl	80018c8 <HAL_GetTick>
 8004dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dc6:	e008      	b.n	8004dda <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dc8:	f7fc fd7e 	bl	80018c8 <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d901      	bls.n	8004dda <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e180      	b.n	80050dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dda:	4b1d      	ldr	r3, [pc, #116]	; (8004e50 <HAL_RCC_OscConfig+0x26c>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0302 	and.w	r3, r3, #2
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d1f0      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0308 	and.w	r3, r3, #8
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d03a      	beq.n	8004e68 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	699b      	ldr	r3, [r3, #24]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d019      	beq.n	8004e2e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004dfa:	4b17      	ldr	r3, [pc, #92]	; (8004e58 <HAL_RCC_OscConfig+0x274>)
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e00:	f7fc fd62 	bl	80018c8 <HAL_GetTick>
 8004e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e06:	e008      	b.n	8004e1a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e08:	f7fc fd5e 	bl	80018c8 <HAL_GetTick>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	2b02      	cmp	r3, #2
 8004e14:	d901      	bls.n	8004e1a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e160      	b.n	80050dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e1a:	4b0d      	ldr	r3, [pc, #52]	; (8004e50 <HAL_RCC_OscConfig+0x26c>)
 8004e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1e:	f003 0302 	and.w	r3, r3, #2
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d0f0      	beq.n	8004e08 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004e26:	2001      	movs	r0, #1
 8004e28:	f000 fafe 	bl	8005428 <RCC_Delay>
 8004e2c:	e01c      	b.n	8004e68 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e2e:	4b0a      	ldr	r3, [pc, #40]	; (8004e58 <HAL_RCC_OscConfig+0x274>)
 8004e30:	2200      	movs	r2, #0
 8004e32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e34:	f7fc fd48 	bl	80018c8 <HAL_GetTick>
 8004e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e3a:	e00f      	b.n	8004e5c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e3c:	f7fc fd44 	bl	80018c8 <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d908      	bls.n	8004e5c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e146      	b.n	80050dc <HAL_RCC_OscConfig+0x4f8>
 8004e4e:	bf00      	nop
 8004e50:	40021000 	.word	0x40021000
 8004e54:	42420000 	.word	0x42420000
 8004e58:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e5c:	4b92      	ldr	r3, [pc, #584]	; (80050a8 <HAL_RCC_OscConfig+0x4c4>)
 8004e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e60:	f003 0302 	and.w	r3, r3, #2
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d1e9      	bne.n	8004e3c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0304 	and.w	r3, r3, #4
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	f000 80a6 	beq.w	8004fc2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e76:	2300      	movs	r3, #0
 8004e78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e7a:	4b8b      	ldr	r3, [pc, #556]	; (80050a8 <HAL_RCC_OscConfig+0x4c4>)
 8004e7c:	69db      	ldr	r3, [r3, #28]
 8004e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d10d      	bne.n	8004ea2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e86:	4b88      	ldr	r3, [pc, #544]	; (80050a8 <HAL_RCC_OscConfig+0x4c4>)
 8004e88:	69db      	ldr	r3, [r3, #28]
 8004e8a:	4a87      	ldr	r2, [pc, #540]	; (80050a8 <HAL_RCC_OscConfig+0x4c4>)
 8004e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e90:	61d3      	str	r3, [r2, #28]
 8004e92:	4b85      	ldr	r3, [pc, #532]	; (80050a8 <HAL_RCC_OscConfig+0x4c4>)
 8004e94:	69db      	ldr	r3, [r3, #28]
 8004e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e9a:	60bb      	str	r3, [r7, #8]
 8004e9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ea2:	4b82      	ldr	r3, [pc, #520]	; (80050ac <HAL_RCC_OscConfig+0x4c8>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d118      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004eae:	4b7f      	ldr	r3, [pc, #508]	; (80050ac <HAL_RCC_OscConfig+0x4c8>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a7e      	ldr	r2, [pc, #504]	; (80050ac <HAL_RCC_OscConfig+0x4c8>)
 8004eb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004eba:	f7fc fd05 	bl	80018c8 <HAL_GetTick>
 8004ebe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ec0:	e008      	b.n	8004ed4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ec2:	f7fc fd01 	bl	80018c8 <HAL_GetTick>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	2b64      	cmp	r3, #100	; 0x64
 8004ece:	d901      	bls.n	8004ed4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	e103      	b.n	80050dc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ed4:	4b75      	ldr	r3, [pc, #468]	; (80050ac <HAL_RCC_OscConfig+0x4c8>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d0f0      	beq.n	8004ec2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d106      	bne.n	8004ef6 <HAL_RCC_OscConfig+0x312>
 8004ee8:	4b6f      	ldr	r3, [pc, #444]	; (80050a8 <HAL_RCC_OscConfig+0x4c4>)
 8004eea:	6a1b      	ldr	r3, [r3, #32]
 8004eec:	4a6e      	ldr	r2, [pc, #440]	; (80050a8 <HAL_RCC_OscConfig+0x4c4>)
 8004eee:	f043 0301 	orr.w	r3, r3, #1
 8004ef2:	6213      	str	r3, [r2, #32]
 8004ef4:	e02d      	b.n	8004f52 <HAL_RCC_OscConfig+0x36e>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d10c      	bne.n	8004f18 <HAL_RCC_OscConfig+0x334>
 8004efe:	4b6a      	ldr	r3, [pc, #424]	; (80050a8 <HAL_RCC_OscConfig+0x4c4>)
 8004f00:	6a1b      	ldr	r3, [r3, #32]
 8004f02:	4a69      	ldr	r2, [pc, #420]	; (80050a8 <HAL_RCC_OscConfig+0x4c4>)
 8004f04:	f023 0301 	bic.w	r3, r3, #1
 8004f08:	6213      	str	r3, [r2, #32]
 8004f0a:	4b67      	ldr	r3, [pc, #412]	; (80050a8 <HAL_RCC_OscConfig+0x4c4>)
 8004f0c:	6a1b      	ldr	r3, [r3, #32]
 8004f0e:	4a66      	ldr	r2, [pc, #408]	; (80050a8 <HAL_RCC_OscConfig+0x4c4>)
 8004f10:	f023 0304 	bic.w	r3, r3, #4
 8004f14:	6213      	str	r3, [r2, #32]
 8004f16:	e01c      	b.n	8004f52 <HAL_RCC_OscConfig+0x36e>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	2b05      	cmp	r3, #5
 8004f1e:	d10c      	bne.n	8004f3a <HAL_RCC_OscConfig+0x356>
 8004f20:	4b61      	ldr	r3, [pc, #388]	; (80050a8 <HAL_RCC_OscConfig+0x4c4>)
 8004f22:	6a1b      	ldr	r3, [r3, #32]
 8004f24:	4a60      	ldr	r2, [pc, #384]	; (80050a8 <HAL_RCC_OscConfig+0x4c4>)
 8004f26:	f043 0304 	orr.w	r3, r3, #4
 8004f2a:	6213      	str	r3, [r2, #32]
 8004f2c:	4b5e      	ldr	r3, [pc, #376]	; (80050a8 <HAL_RCC_OscConfig+0x4c4>)
 8004f2e:	6a1b      	ldr	r3, [r3, #32]
 8004f30:	4a5d      	ldr	r2, [pc, #372]	; (80050a8 <HAL_RCC_OscConfig+0x4c4>)
 8004f32:	f043 0301 	orr.w	r3, r3, #1
 8004f36:	6213      	str	r3, [r2, #32]
 8004f38:	e00b      	b.n	8004f52 <HAL_RCC_OscConfig+0x36e>
 8004f3a:	4b5b      	ldr	r3, [pc, #364]	; (80050a8 <HAL_RCC_OscConfig+0x4c4>)
 8004f3c:	6a1b      	ldr	r3, [r3, #32]
 8004f3e:	4a5a      	ldr	r2, [pc, #360]	; (80050a8 <HAL_RCC_OscConfig+0x4c4>)
 8004f40:	f023 0301 	bic.w	r3, r3, #1
 8004f44:	6213      	str	r3, [r2, #32]
 8004f46:	4b58      	ldr	r3, [pc, #352]	; (80050a8 <HAL_RCC_OscConfig+0x4c4>)
 8004f48:	6a1b      	ldr	r3, [r3, #32]
 8004f4a:	4a57      	ldr	r2, [pc, #348]	; (80050a8 <HAL_RCC_OscConfig+0x4c4>)
 8004f4c:	f023 0304 	bic.w	r3, r3, #4
 8004f50:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d015      	beq.n	8004f86 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f5a:	f7fc fcb5 	bl	80018c8 <HAL_GetTick>
 8004f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f60:	e00a      	b.n	8004f78 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f62:	f7fc fcb1 	bl	80018c8 <HAL_GetTick>
 8004f66:	4602      	mov	r2, r0
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d901      	bls.n	8004f78 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004f74:	2303      	movs	r3, #3
 8004f76:	e0b1      	b.n	80050dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f78:	4b4b      	ldr	r3, [pc, #300]	; (80050a8 <HAL_RCC_OscConfig+0x4c4>)
 8004f7a:	6a1b      	ldr	r3, [r3, #32]
 8004f7c:	f003 0302 	and.w	r3, r3, #2
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d0ee      	beq.n	8004f62 <HAL_RCC_OscConfig+0x37e>
 8004f84:	e014      	b.n	8004fb0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f86:	f7fc fc9f 	bl	80018c8 <HAL_GetTick>
 8004f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f8c:	e00a      	b.n	8004fa4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f8e:	f7fc fc9b 	bl	80018c8 <HAL_GetTick>
 8004f92:	4602      	mov	r2, r0
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	1ad3      	subs	r3, r2, r3
 8004f98:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d901      	bls.n	8004fa4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e09b      	b.n	80050dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fa4:	4b40      	ldr	r3, [pc, #256]	; (80050a8 <HAL_RCC_OscConfig+0x4c4>)
 8004fa6:	6a1b      	ldr	r3, [r3, #32]
 8004fa8:	f003 0302 	and.w	r3, r3, #2
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d1ee      	bne.n	8004f8e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004fb0:	7dfb      	ldrb	r3, [r7, #23]
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d105      	bne.n	8004fc2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fb6:	4b3c      	ldr	r3, [pc, #240]	; (80050a8 <HAL_RCC_OscConfig+0x4c4>)
 8004fb8:	69db      	ldr	r3, [r3, #28]
 8004fba:	4a3b      	ldr	r2, [pc, #236]	; (80050a8 <HAL_RCC_OscConfig+0x4c4>)
 8004fbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fc0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	69db      	ldr	r3, [r3, #28]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	f000 8087 	beq.w	80050da <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004fcc:	4b36      	ldr	r3, [pc, #216]	; (80050a8 <HAL_RCC_OscConfig+0x4c4>)
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	f003 030c 	and.w	r3, r3, #12
 8004fd4:	2b08      	cmp	r3, #8
 8004fd6:	d061      	beq.n	800509c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	69db      	ldr	r3, [r3, #28]
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	d146      	bne.n	800506e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fe0:	4b33      	ldr	r3, [pc, #204]	; (80050b0 <HAL_RCC_OscConfig+0x4cc>)
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fe6:	f7fc fc6f 	bl	80018c8 <HAL_GetTick>
 8004fea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fec:	e008      	b.n	8005000 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fee:	f7fc fc6b 	bl	80018c8 <HAL_GetTick>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	2b02      	cmp	r3, #2
 8004ffa:	d901      	bls.n	8005000 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	e06d      	b.n	80050dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005000:	4b29      	ldr	r3, [pc, #164]	; (80050a8 <HAL_RCC_OscConfig+0x4c4>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005008:	2b00      	cmp	r3, #0
 800500a:	d1f0      	bne.n	8004fee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a1b      	ldr	r3, [r3, #32]
 8005010:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005014:	d108      	bne.n	8005028 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005016:	4b24      	ldr	r3, [pc, #144]	; (80050a8 <HAL_RCC_OscConfig+0x4c4>)
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	4921      	ldr	r1, [pc, #132]	; (80050a8 <HAL_RCC_OscConfig+0x4c4>)
 8005024:	4313      	orrs	r3, r2
 8005026:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005028:	4b1f      	ldr	r3, [pc, #124]	; (80050a8 <HAL_RCC_OscConfig+0x4c4>)
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6a19      	ldr	r1, [r3, #32]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005038:	430b      	orrs	r3, r1
 800503a:	491b      	ldr	r1, [pc, #108]	; (80050a8 <HAL_RCC_OscConfig+0x4c4>)
 800503c:	4313      	orrs	r3, r2
 800503e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005040:	4b1b      	ldr	r3, [pc, #108]	; (80050b0 <HAL_RCC_OscConfig+0x4cc>)
 8005042:	2201      	movs	r2, #1
 8005044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005046:	f7fc fc3f 	bl	80018c8 <HAL_GetTick>
 800504a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800504c:	e008      	b.n	8005060 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800504e:	f7fc fc3b 	bl	80018c8 <HAL_GetTick>
 8005052:	4602      	mov	r2, r0
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	2b02      	cmp	r3, #2
 800505a:	d901      	bls.n	8005060 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800505c:	2303      	movs	r3, #3
 800505e:	e03d      	b.n	80050dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005060:	4b11      	ldr	r3, [pc, #68]	; (80050a8 <HAL_RCC_OscConfig+0x4c4>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d0f0      	beq.n	800504e <HAL_RCC_OscConfig+0x46a>
 800506c:	e035      	b.n	80050da <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800506e:	4b10      	ldr	r3, [pc, #64]	; (80050b0 <HAL_RCC_OscConfig+0x4cc>)
 8005070:	2200      	movs	r2, #0
 8005072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005074:	f7fc fc28 	bl	80018c8 <HAL_GetTick>
 8005078:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800507a:	e008      	b.n	800508e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800507c:	f7fc fc24 	bl	80018c8 <HAL_GetTick>
 8005080:	4602      	mov	r2, r0
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	2b02      	cmp	r3, #2
 8005088:	d901      	bls.n	800508e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e026      	b.n	80050dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800508e:	4b06      	ldr	r3, [pc, #24]	; (80050a8 <HAL_RCC_OscConfig+0x4c4>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d1f0      	bne.n	800507c <HAL_RCC_OscConfig+0x498>
 800509a:	e01e      	b.n	80050da <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	69db      	ldr	r3, [r3, #28]
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d107      	bne.n	80050b4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e019      	b.n	80050dc <HAL_RCC_OscConfig+0x4f8>
 80050a8:	40021000 	.word	0x40021000
 80050ac:	40007000 	.word	0x40007000
 80050b0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80050b4:	4b0b      	ldr	r3, [pc, #44]	; (80050e4 <HAL_RCC_OscConfig+0x500>)
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6a1b      	ldr	r3, [r3, #32]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d106      	bne.n	80050d6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d001      	beq.n	80050da <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e000      	b.n	80050dc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3718      	adds	r7, #24
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	40021000 	.word	0x40021000

080050e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d101      	bne.n	80050fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e0d0      	b.n	800529e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80050fc:	4b6a      	ldr	r3, [pc, #424]	; (80052a8 <HAL_RCC_ClockConfig+0x1c0>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0307 	and.w	r3, r3, #7
 8005104:	683a      	ldr	r2, [r7, #0]
 8005106:	429a      	cmp	r2, r3
 8005108:	d910      	bls.n	800512c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800510a:	4b67      	ldr	r3, [pc, #412]	; (80052a8 <HAL_RCC_ClockConfig+0x1c0>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f023 0207 	bic.w	r2, r3, #7
 8005112:	4965      	ldr	r1, [pc, #404]	; (80052a8 <HAL_RCC_ClockConfig+0x1c0>)
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	4313      	orrs	r3, r2
 8005118:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800511a:	4b63      	ldr	r3, [pc, #396]	; (80052a8 <HAL_RCC_ClockConfig+0x1c0>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 0307 	and.w	r3, r3, #7
 8005122:	683a      	ldr	r2, [r7, #0]
 8005124:	429a      	cmp	r2, r3
 8005126:	d001      	beq.n	800512c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	e0b8      	b.n	800529e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0302 	and.w	r3, r3, #2
 8005134:	2b00      	cmp	r3, #0
 8005136:	d020      	beq.n	800517a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 0304 	and.w	r3, r3, #4
 8005140:	2b00      	cmp	r3, #0
 8005142:	d005      	beq.n	8005150 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005144:	4b59      	ldr	r3, [pc, #356]	; (80052ac <HAL_RCC_ClockConfig+0x1c4>)
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	4a58      	ldr	r2, [pc, #352]	; (80052ac <HAL_RCC_ClockConfig+0x1c4>)
 800514a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800514e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 0308 	and.w	r3, r3, #8
 8005158:	2b00      	cmp	r3, #0
 800515a:	d005      	beq.n	8005168 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800515c:	4b53      	ldr	r3, [pc, #332]	; (80052ac <HAL_RCC_ClockConfig+0x1c4>)
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	4a52      	ldr	r2, [pc, #328]	; (80052ac <HAL_RCC_ClockConfig+0x1c4>)
 8005162:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005166:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005168:	4b50      	ldr	r3, [pc, #320]	; (80052ac <HAL_RCC_ClockConfig+0x1c4>)
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	494d      	ldr	r1, [pc, #308]	; (80052ac <HAL_RCC_ClockConfig+0x1c4>)
 8005176:	4313      	orrs	r3, r2
 8005178:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 0301 	and.w	r3, r3, #1
 8005182:	2b00      	cmp	r3, #0
 8005184:	d040      	beq.n	8005208 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	2b01      	cmp	r3, #1
 800518c:	d107      	bne.n	800519e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800518e:	4b47      	ldr	r3, [pc, #284]	; (80052ac <HAL_RCC_ClockConfig+0x1c4>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005196:	2b00      	cmp	r3, #0
 8005198:	d115      	bne.n	80051c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e07f      	b.n	800529e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	2b02      	cmp	r3, #2
 80051a4:	d107      	bne.n	80051b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051a6:	4b41      	ldr	r3, [pc, #260]	; (80052ac <HAL_RCC_ClockConfig+0x1c4>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d109      	bne.n	80051c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e073      	b.n	800529e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051b6:	4b3d      	ldr	r3, [pc, #244]	; (80052ac <HAL_RCC_ClockConfig+0x1c4>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0302 	and.w	r3, r3, #2
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d101      	bne.n	80051c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e06b      	b.n	800529e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051c6:	4b39      	ldr	r3, [pc, #228]	; (80052ac <HAL_RCC_ClockConfig+0x1c4>)
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	f023 0203 	bic.w	r2, r3, #3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	4936      	ldr	r1, [pc, #216]	; (80052ac <HAL_RCC_ClockConfig+0x1c4>)
 80051d4:	4313      	orrs	r3, r2
 80051d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80051d8:	f7fc fb76 	bl	80018c8 <HAL_GetTick>
 80051dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051de:	e00a      	b.n	80051f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051e0:	f7fc fb72 	bl	80018c8 <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d901      	bls.n	80051f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e053      	b.n	800529e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051f6:	4b2d      	ldr	r3, [pc, #180]	; (80052ac <HAL_RCC_ClockConfig+0x1c4>)
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	f003 020c 	and.w	r2, r3, #12
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	429a      	cmp	r2, r3
 8005206:	d1eb      	bne.n	80051e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005208:	4b27      	ldr	r3, [pc, #156]	; (80052a8 <HAL_RCC_ClockConfig+0x1c0>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 0307 	and.w	r3, r3, #7
 8005210:	683a      	ldr	r2, [r7, #0]
 8005212:	429a      	cmp	r2, r3
 8005214:	d210      	bcs.n	8005238 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005216:	4b24      	ldr	r3, [pc, #144]	; (80052a8 <HAL_RCC_ClockConfig+0x1c0>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f023 0207 	bic.w	r2, r3, #7
 800521e:	4922      	ldr	r1, [pc, #136]	; (80052a8 <HAL_RCC_ClockConfig+0x1c0>)
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	4313      	orrs	r3, r2
 8005224:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005226:	4b20      	ldr	r3, [pc, #128]	; (80052a8 <HAL_RCC_ClockConfig+0x1c0>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0307 	and.w	r3, r3, #7
 800522e:	683a      	ldr	r2, [r7, #0]
 8005230:	429a      	cmp	r2, r3
 8005232:	d001      	beq.n	8005238 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e032      	b.n	800529e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 0304 	and.w	r3, r3, #4
 8005240:	2b00      	cmp	r3, #0
 8005242:	d008      	beq.n	8005256 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005244:	4b19      	ldr	r3, [pc, #100]	; (80052ac <HAL_RCC_ClockConfig+0x1c4>)
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	4916      	ldr	r1, [pc, #88]	; (80052ac <HAL_RCC_ClockConfig+0x1c4>)
 8005252:	4313      	orrs	r3, r2
 8005254:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 0308 	and.w	r3, r3, #8
 800525e:	2b00      	cmp	r3, #0
 8005260:	d009      	beq.n	8005276 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005262:	4b12      	ldr	r3, [pc, #72]	; (80052ac <HAL_RCC_ClockConfig+0x1c4>)
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	00db      	lsls	r3, r3, #3
 8005270:	490e      	ldr	r1, [pc, #56]	; (80052ac <HAL_RCC_ClockConfig+0x1c4>)
 8005272:	4313      	orrs	r3, r2
 8005274:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005276:	f000 f821 	bl	80052bc <HAL_RCC_GetSysClockFreq>
 800527a:	4602      	mov	r2, r0
 800527c:	4b0b      	ldr	r3, [pc, #44]	; (80052ac <HAL_RCC_ClockConfig+0x1c4>)
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	091b      	lsrs	r3, r3, #4
 8005282:	f003 030f 	and.w	r3, r3, #15
 8005286:	490a      	ldr	r1, [pc, #40]	; (80052b0 <HAL_RCC_ClockConfig+0x1c8>)
 8005288:	5ccb      	ldrb	r3, [r1, r3]
 800528a:	fa22 f303 	lsr.w	r3, r2, r3
 800528e:	4a09      	ldr	r2, [pc, #36]	; (80052b4 <HAL_RCC_ClockConfig+0x1cc>)
 8005290:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005292:	4b09      	ldr	r3, [pc, #36]	; (80052b8 <HAL_RCC_ClockConfig+0x1d0>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4618      	mov	r0, r3
 8005298:	f7fc f952 	bl	8001540 <HAL_InitTick>

  return HAL_OK;
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3710      	adds	r7, #16
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	40022000 	.word	0x40022000
 80052ac:	40021000 	.word	0x40021000
 80052b0:	0800bb74 	.word	0x0800bb74
 80052b4:	20000018 	.word	0x20000018
 80052b8:	2000001c 	.word	0x2000001c

080052bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052bc:	b480      	push	{r7}
 80052be:	b087      	sub	sp, #28
 80052c0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80052c2:	2300      	movs	r3, #0
 80052c4:	60fb      	str	r3, [r7, #12]
 80052c6:	2300      	movs	r3, #0
 80052c8:	60bb      	str	r3, [r7, #8]
 80052ca:	2300      	movs	r3, #0
 80052cc:	617b      	str	r3, [r7, #20]
 80052ce:	2300      	movs	r3, #0
 80052d0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80052d2:	2300      	movs	r3, #0
 80052d4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80052d6:	4b1e      	ldr	r3, [pc, #120]	; (8005350 <HAL_RCC_GetSysClockFreq+0x94>)
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f003 030c 	and.w	r3, r3, #12
 80052e2:	2b04      	cmp	r3, #4
 80052e4:	d002      	beq.n	80052ec <HAL_RCC_GetSysClockFreq+0x30>
 80052e6:	2b08      	cmp	r3, #8
 80052e8:	d003      	beq.n	80052f2 <HAL_RCC_GetSysClockFreq+0x36>
 80052ea:	e027      	b.n	800533c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80052ec:	4b19      	ldr	r3, [pc, #100]	; (8005354 <HAL_RCC_GetSysClockFreq+0x98>)
 80052ee:	613b      	str	r3, [r7, #16]
      break;
 80052f0:	e027      	b.n	8005342 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	0c9b      	lsrs	r3, r3, #18
 80052f6:	f003 030f 	and.w	r3, r3, #15
 80052fa:	4a17      	ldr	r2, [pc, #92]	; (8005358 <HAL_RCC_GetSysClockFreq+0x9c>)
 80052fc:	5cd3      	ldrb	r3, [r2, r3]
 80052fe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d010      	beq.n	800532c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800530a:	4b11      	ldr	r3, [pc, #68]	; (8005350 <HAL_RCC_GetSysClockFreq+0x94>)
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	0c5b      	lsrs	r3, r3, #17
 8005310:	f003 0301 	and.w	r3, r3, #1
 8005314:	4a11      	ldr	r2, [pc, #68]	; (800535c <HAL_RCC_GetSysClockFreq+0xa0>)
 8005316:	5cd3      	ldrb	r3, [r2, r3]
 8005318:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a0d      	ldr	r2, [pc, #52]	; (8005354 <HAL_RCC_GetSysClockFreq+0x98>)
 800531e:	fb03 f202 	mul.w	r2, r3, r2
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	fbb2 f3f3 	udiv	r3, r2, r3
 8005328:	617b      	str	r3, [r7, #20]
 800532a:	e004      	b.n	8005336 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4a0c      	ldr	r2, [pc, #48]	; (8005360 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005330:	fb02 f303 	mul.w	r3, r2, r3
 8005334:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	613b      	str	r3, [r7, #16]
      break;
 800533a:	e002      	b.n	8005342 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800533c:	4b05      	ldr	r3, [pc, #20]	; (8005354 <HAL_RCC_GetSysClockFreq+0x98>)
 800533e:	613b      	str	r3, [r7, #16]
      break;
 8005340:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005342:	693b      	ldr	r3, [r7, #16]
}
 8005344:	4618      	mov	r0, r3
 8005346:	371c      	adds	r7, #28
 8005348:	46bd      	mov	sp, r7
 800534a:	bc80      	pop	{r7}
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	40021000 	.word	0x40021000
 8005354:	007a1200 	.word	0x007a1200
 8005358:	0800bb8c 	.word	0x0800bb8c
 800535c:	0800bb9c 	.word	0x0800bb9c
 8005360:	003d0900 	.word	0x003d0900

08005364 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005364:	b480      	push	{r7}
 8005366:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005368:	4b02      	ldr	r3, [pc, #8]	; (8005374 <HAL_RCC_GetHCLKFreq+0x10>)
 800536a:	681b      	ldr	r3, [r3, #0]
}
 800536c:	4618      	mov	r0, r3
 800536e:	46bd      	mov	sp, r7
 8005370:	bc80      	pop	{r7}
 8005372:	4770      	bx	lr
 8005374:	20000018 	.word	0x20000018

08005378 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800537c:	f7ff fff2 	bl	8005364 <HAL_RCC_GetHCLKFreq>
 8005380:	4602      	mov	r2, r0
 8005382:	4b05      	ldr	r3, [pc, #20]	; (8005398 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	0a1b      	lsrs	r3, r3, #8
 8005388:	f003 0307 	and.w	r3, r3, #7
 800538c:	4903      	ldr	r1, [pc, #12]	; (800539c <HAL_RCC_GetPCLK1Freq+0x24>)
 800538e:	5ccb      	ldrb	r3, [r1, r3]
 8005390:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005394:	4618      	mov	r0, r3
 8005396:	bd80      	pop	{r7, pc}
 8005398:	40021000 	.word	0x40021000
 800539c:	0800bb84 	.word	0x0800bb84

080053a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80053a4:	f7ff ffde 	bl	8005364 <HAL_RCC_GetHCLKFreq>
 80053a8:	4602      	mov	r2, r0
 80053aa:	4b05      	ldr	r3, [pc, #20]	; (80053c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	0adb      	lsrs	r3, r3, #11
 80053b0:	f003 0307 	and.w	r3, r3, #7
 80053b4:	4903      	ldr	r1, [pc, #12]	; (80053c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053b6:	5ccb      	ldrb	r3, [r1, r3]
 80053b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053bc:	4618      	mov	r0, r3
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	40021000 	.word	0x40021000
 80053c4:	0800bb84 	.word	0x0800bb84

080053c8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	220f      	movs	r2, #15
 80053d6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80053d8:	4b11      	ldr	r3, [pc, #68]	; (8005420 <HAL_RCC_GetClockConfig+0x58>)
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	f003 0203 	and.w	r2, r3, #3
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80053e4:	4b0e      	ldr	r3, [pc, #56]	; (8005420 <HAL_RCC_GetClockConfig+0x58>)
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80053f0:	4b0b      	ldr	r3, [pc, #44]	; (8005420 <HAL_RCC_GetClockConfig+0x58>)
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80053fc:	4b08      	ldr	r3, [pc, #32]	; (8005420 <HAL_RCC_GetClockConfig+0x58>)
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	08db      	lsrs	r3, r3, #3
 8005402:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800540a:	4b06      	ldr	r3, [pc, #24]	; (8005424 <HAL_RCC_GetClockConfig+0x5c>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0207 	and.w	r2, r3, #7
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8005416:	bf00      	nop
 8005418:	370c      	adds	r7, #12
 800541a:	46bd      	mov	sp, r7
 800541c:	bc80      	pop	{r7}
 800541e:	4770      	bx	lr
 8005420:	40021000 	.word	0x40021000
 8005424:	40022000 	.word	0x40022000

08005428 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005428:	b480      	push	{r7}
 800542a:	b085      	sub	sp, #20
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005430:	4b0a      	ldr	r3, [pc, #40]	; (800545c <RCC_Delay+0x34>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a0a      	ldr	r2, [pc, #40]	; (8005460 <RCC_Delay+0x38>)
 8005436:	fba2 2303 	umull	r2, r3, r2, r3
 800543a:	0a5b      	lsrs	r3, r3, #9
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	fb02 f303 	mul.w	r3, r2, r3
 8005442:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005444:	bf00      	nop
  }
  while (Delay --);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	1e5a      	subs	r2, r3, #1
 800544a:	60fa      	str	r2, [r7, #12]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d1f9      	bne.n	8005444 <RCC_Delay+0x1c>
}
 8005450:	bf00      	nop
 8005452:	bf00      	nop
 8005454:	3714      	adds	r7, #20
 8005456:	46bd      	mov	sp, r7
 8005458:	bc80      	pop	{r7}
 800545a:	4770      	bx	lr
 800545c:	20000018 	.word	0x20000018
 8005460:	10624dd3 	.word	0x10624dd3

08005464 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b082      	sub	sp, #8
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d101      	bne.n	8005476 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e041      	b.n	80054fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800547c:	b2db      	uxtb	r3, r3
 800547e:	2b00      	cmp	r3, #0
 8005480:	d106      	bne.n	8005490 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 f839 	bl	8005502 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2202      	movs	r2, #2
 8005494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	3304      	adds	r3, #4
 80054a0:	4619      	mov	r1, r3
 80054a2:	4610      	mov	r0, r2
 80054a4:	f000 fd30 	bl	8005f08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2201      	movs	r2, #1
 80054d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3708      	adds	r7, #8
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}

08005502 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005502:	b480      	push	{r7}
 8005504:	b083      	sub	sp, #12
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800550a:	bf00      	nop
 800550c:	370c      	adds	r7, #12
 800550e:	46bd      	mov	sp, r7
 8005510:	bc80      	pop	{r7}
 8005512:	4770      	bx	lr

08005514 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005514:	b480      	push	{r7}
 8005516:	b085      	sub	sp, #20
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005522:	b2db      	uxtb	r3, r3
 8005524:	2b01      	cmp	r3, #1
 8005526:	d001      	beq.n	800552c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	e03a      	b.n	80055a2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2202      	movs	r2, #2
 8005530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68da      	ldr	r2, [r3, #12]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f042 0201 	orr.w	r2, r2, #1
 8005542:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a18      	ldr	r2, [pc, #96]	; (80055ac <HAL_TIM_Base_Start_IT+0x98>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d00e      	beq.n	800556c <HAL_TIM_Base_Start_IT+0x58>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005556:	d009      	beq.n	800556c <HAL_TIM_Base_Start_IT+0x58>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a14      	ldr	r2, [pc, #80]	; (80055b0 <HAL_TIM_Base_Start_IT+0x9c>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d004      	beq.n	800556c <HAL_TIM_Base_Start_IT+0x58>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a13      	ldr	r2, [pc, #76]	; (80055b4 <HAL_TIM_Base_Start_IT+0xa0>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d111      	bne.n	8005590 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	f003 0307 	and.w	r3, r3, #7
 8005576:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2b06      	cmp	r3, #6
 800557c:	d010      	beq.n	80055a0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f042 0201 	orr.w	r2, r2, #1
 800558c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800558e:	e007      	b.n	80055a0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f042 0201 	orr.w	r2, r2, #1
 800559e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055a0:	2300      	movs	r3, #0
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3714      	adds	r7, #20
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bc80      	pop	{r7}
 80055aa:	4770      	bx	lr
 80055ac:	40012c00 	.word	0x40012c00
 80055b0:	40000400 	.word	0x40000400
 80055b4:	40000800 	.word	0x40000800

080055b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b082      	sub	sp, #8
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d101      	bne.n	80055ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e041      	b.n	800564e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d106      	bne.n	80055e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f7fb fe70 	bl	80012c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2202      	movs	r2, #2
 80055e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	3304      	adds	r3, #4
 80055f4:	4619      	mov	r1, r3
 80055f6:	4610      	mov	r0, r2
 80055f8:	f000 fc86 	bl	8005f08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	3708      	adds	r7, #8
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
	...

08005658 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d109      	bne.n	800567c <HAL_TIM_PWM_Start+0x24>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800566e:	b2db      	uxtb	r3, r3
 8005670:	2b01      	cmp	r3, #1
 8005672:	bf14      	ite	ne
 8005674:	2301      	movne	r3, #1
 8005676:	2300      	moveq	r3, #0
 8005678:	b2db      	uxtb	r3, r3
 800567a:	e022      	b.n	80056c2 <HAL_TIM_PWM_Start+0x6a>
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	2b04      	cmp	r3, #4
 8005680:	d109      	bne.n	8005696 <HAL_TIM_PWM_Start+0x3e>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005688:	b2db      	uxtb	r3, r3
 800568a:	2b01      	cmp	r3, #1
 800568c:	bf14      	ite	ne
 800568e:	2301      	movne	r3, #1
 8005690:	2300      	moveq	r3, #0
 8005692:	b2db      	uxtb	r3, r3
 8005694:	e015      	b.n	80056c2 <HAL_TIM_PWM_Start+0x6a>
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	2b08      	cmp	r3, #8
 800569a:	d109      	bne.n	80056b0 <HAL_TIM_PWM_Start+0x58>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	bf14      	ite	ne
 80056a8:	2301      	movne	r3, #1
 80056aa:	2300      	moveq	r3, #0
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	e008      	b.n	80056c2 <HAL_TIM_PWM_Start+0x6a>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	bf14      	ite	ne
 80056bc:	2301      	movne	r3, #1
 80056be:	2300      	moveq	r3, #0
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d001      	beq.n	80056ca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e05e      	b.n	8005788 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d104      	bne.n	80056da <HAL_TIM_PWM_Start+0x82>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2202      	movs	r2, #2
 80056d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056d8:	e013      	b.n	8005702 <HAL_TIM_PWM_Start+0xaa>
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	2b04      	cmp	r3, #4
 80056de:	d104      	bne.n	80056ea <HAL_TIM_PWM_Start+0x92>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2202      	movs	r2, #2
 80056e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056e8:	e00b      	b.n	8005702 <HAL_TIM_PWM_Start+0xaa>
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	2b08      	cmp	r3, #8
 80056ee:	d104      	bne.n	80056fa <HAL_TIM_PWM_Start+0xa2>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2202      	movs	r2, #2
 80056f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056f8:	e003      	b.n	8005702 <HAL_TIM_PWM_Start+0xaa>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2202      	movs	r2, #2
 80056fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2201      	movs	r2, #1
 8005708:	6839      	ldr	r1, [r7, #0]
 800570a:	4618      	mov	r0, r3
 800570c:	f000 fde6 	bl	80062dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a1e      	ldr	r2, [pc, #120]	; (8005790 <HAL_TIM_PWM_Start+0x138>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d107      	bne.n	800572a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005728:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a18      	ldr	r2, [pc, #96]	; (8005790 <HAL_TIM_PWM_Start+0x138>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d00e      	beq.n	8005752 <HAL_TIM_PWM_Start+0xfa>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800573c:	d009      	beq.n	8005752 <HAL_TIM_PWM_Start+0xfa>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a14      	ldr	r2, [pc, #80]	; (8005794 <HAL_TIM_PWM_Start+0x13c>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d004      	beq.n	8005752 <HAL_TIM_PWM_Start+0xfa>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a12      	ldr	r2, [pc, #72]	; (8005798 <HAL_TIM_PWM_Start+0x140>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d111      	bne.n	8005776 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	f003 0307 	and.w	r3, r3, #7
 800575c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2b06      	cmp	r3, #6
 8005762:	d010      	beq.n	8005786 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f042 0201 	orr.w	r2, r2, #1
 8005772:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005774:	e007      	b.n	8005786 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f042 0201 	orr.w	r2, r2, #1
 8005784:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005786:	2300      	movs	r3, #0
}
 8005788:	4618      	mov	r0, r3
 800578a:	3710      	adds	r7, #16
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}
 8005790:	40012c00 	.word	0x40012c00
 8005794:	40000400 	.word	0x40000400
 8005798:	40000800 	.word	0x40000800

0800579c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b086      	sub	sp, #24
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d101      	bne.n	80057b0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	e093      	b.n	80058d8 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d106      	bne.n	80057ca <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f7fb fd99 	bl	80012fc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2202      	movs	r2, #2
 80057ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	6812      	ldr	r2, [r2, #0]
 80057dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057e0:	f023 0307 	bic.w	r3, r3, #7
 80057e4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	3304      	adds	r3, #4
 80057ee:	4619      	mov	r1, r3
 80057f0:	4610      	mov	r0, r2
 80057f2:	f000 fb89 	bl	8005f08 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	699b      	ldr	r3, [r3, #24]
 8005804:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	6a1b      	ldr	r3, [r3, #32]
 800580c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	697a      	ldr	r2, [r7, #20]
 8005814:	4313      	orrs	r3, r2
 8005816:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800581e:	f023 0303 	bic.w	r3, r3, #3
 8005822:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	689a      	ldr	r2, [r3, #8]
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	699b      	ldr	r3, [r3, #24]
 800582c:	021b      	lsls	r3, r3, #8
 800582e:	4313      	orrs	r3, r2
 8005830:	693a      	ldr	r2, [r7, #16]
 8005832:	4313      	orrs	r3, r2
 8005834:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800583c:	f023 030c 	bic.w	r3, r3, #12
 8005840:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005848:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800584c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	68da      	ldr	r2, [r3, #12]
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	69db      	ldr	r3, [r3, #28]
 8005856:	021b      	lsls	r3, r3, #8
 8005858:	4313      	orrs	r3, r2
 800585a:	693a      	ldr	r2, [r7, #16]
 800585c:	4313      	orrs	r3, r2
 800585e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	691b      	ldr	r3, [r3, #16]
 8005864:	011a      	lsls	r2, r3, #4
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	6a1b      	ldr	r3, [r3, #32]
 800586a:	031b      	lsls	r3, r3, #12
 800586c:	4313      	orrs	r3, r2
 800586e:	693a      	ldr	r2, [r7, #16]
 8005870:	4313      	orrs	r3, r2
 8005872:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800587a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	685a      	ldr	r2, [r3, #4]
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	695b      	ldr	r3, [r3, #20]
 8005884:	011b      	lsls	r3, r3, #4
 8005886:	4313      	orrs	r3, r2
 8005888:	68fa      	ldr	r2, [r7, #12]
 800588a:	4313      	orrs	r3, r2
 800588c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	697a      	ldr	r2, [r7, #20]
 8005894:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	693a      	ldr	r2, [r7, #16]
 800589c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	68fa      	ldr	r2, [r7, #12]
 80058a4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2201      	movs	r2, #1
 80058aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2201      	movs	r2, #1
 80058b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2201      	movs	r2, #1
 80058ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2201      	movs	r2, #1
 80058c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2201      	movs	r2, #1
 80058ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2201      	movs	r2, #1
 80058d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058d6:	2300      	movs	r3, #0
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3718      	adds	r7, #24
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}

080058e0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b084      	sub	sp, #16
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058f0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80058f8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005900:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005908:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d110      	bne.n	8005932 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005910:	7bfb      	ldrb	r3, [r7, #15]
 8005912:	2b01      	cmp	r3, #1
 8005914:	d102      	bne.n	800591c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005916:	7b7b      	ldrb	r3, [r7, #13]
 8005918:	2b01      	cmp	r3, #1
 800591a:	d001      	beq.n	8005920 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	e069      	b.n	80059f4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2202      	movs	r2, #2
 8005924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2202      	movs	r2, #2
 800592c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005930:	e031      	b.n	8005996 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	2b04      	cmp	r3, #4
 8005936:	d110      	bne.n	800595a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005938:	7bbb      	ldrb	r3, [r7, #14]
 800593a:	2b01      	cmp	r3, #1
 800593c:	d102      	bne.n	8005944 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800593e:	7b3b      	ldrb	r3, [r7, #12]
 8005940:	2b01      	cmp	r3, #1
 8005942:	d001      	beq.n	8005948 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e055      	b.n	80059f4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2202      	movs	r2, #2
 800594c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2202      	movs	r2, #2
 8005954:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005958:	e01d      	b.n	8005996 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800595a:	7bfb      	ldrb	r3, [r7, #15]
 800595c:	2b01      	cmp	r3, #1
 800595e:	d108      	bne.n	8005972 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005960:	7bbb      	ldrb	r3, [r7, #14]
 8005962:	2b01      	cmp	r3, #1
 8005964:	d105      	bne.n	8005972 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005966:	7b7b      	ldrb	r3, [r7, #13]
 8005968:	2b01      	cmp	r3, #1
 800596a:	d102      	bne.n	8005972 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800596c:	7b3b      	ldrb	r3, [r7, #12]
 800596e:	2b01      	cmp	r3, #1
 8005970:	d001      	beq.n	8005976 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e03e      	b.n	80059f4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2202      	movs	r2, #2
 800597a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2202      	movs	r2, #2
 8005982:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2202      	movs	r2, #2
 800598a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2202      	movs	r2, #2
 8005992:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d003      	beq.n	80059a4 <HAL_TIM_Encoder_Start+0xc4>
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	2b04      	cmp	r3, #4
 80059a0:	d008      	beq.n	80059b4 <HAL_TIM_Encoder_Start+0xd4>
 80059a2:	e00f      	b.n	80059c4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	2201      	movs	r2, #1
 80059aa:	2100      	movs	r1, #0
 80059ac:	4618      	mov	r0, r3
 80059ae:	f000 fc95 	bl	80062dc <TIM_CCxChannelCmd>
      break;
 80059b2:	e016      	b.n	80059e2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	2201      	movs	r2, #1
 80059ba:	2104      	movs	r1, #4
 80059bc:	4618      	mov	r0, r3
 80059be:	f000 fc8d 	bl	80062dc <TIM_CCxChannelCmd>
      break;
 80059c2:	e00e      	b.n	80059e2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2201      	movs	r2, #1
 80059ca:	2100      	movs	r1, #0
 80059cc:	4618      	mov	r0, r3
 80059ce:	f000 fc85 	bl	80062dc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	2201      	movs	r2, #1
 80059d8:	2104      	movs	r1, #4
 80059da:	4618      	mov	r0, r3
 80059dc:	f000 fc7e 	bl	80062dc <TIM_CCxChannelCmd>
      break;
 80059e0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f042 0201 	orr.w	r2, r2, #1
 80059f0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80059f2:	2300      	movs	r3, #0
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3710      	adds	r7, #16
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d003      	beq.n	8005a14 <HAL_TIM_Encoder_Stop+0x18>
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	2b04      	cmp	r3, #4
 8005a10:	d008      	beq.n	8005a24 <HAL_TIM_Encoder_Stop+0x28>
 8005a12:	e00f      	b.n	8005a34 <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	2100      	movs	r1, #0
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f000 fc5d 	bl	80062dc <TIM_CCxChannelCmd>
      break;
 8005a22:	e016      	b.n	8005a52 <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	2104      	movs	r1, #4
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f000 fc55 	bl	80062dc <TIM_CCxChannelCmd>
      break;
 8005a32:	e00e      	b.n	8005a52 <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	2100      	movs	r1, #0
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f000 fc4d 	bl	80062dc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2200      	movs	r2, #0
 8005a48:	2104      	movs	r1, #4
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f000 fc46 	bl	80062dc <TIM_CCxChannelCmd>
      break;
 8005a50:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	6a1a      	ldr	r2, [r3, #32]
 8005a58:	f241 1311 	movw	r3, #4369	; 0x1111
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d10f      	bne.n	8005a82 <HAL_TIM_Encoder_Stop+0x86>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	6a1a      	ldr	r2, [r3, #32]
 8005a68:	f240 4344 	movw	r3, #1092	; 0x444
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d107      	bne.n	8005a82 <HAL_TIM_Encoder_Stop+0x86>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f022 0201 	bic.w	r2, r2, #1
 8005a80:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d002      	beq.n	8005a8e <HAL_TIM_Encoder_Stop+0x92>
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	2b04      	cmp	r3, #4
 8005a8c:	d138      	bne.n	8005b00 <HAL_TIM_Encoder_Stop+0x104>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d104      	bne.n	8005a9e <HAL_TIM_Encoder_Stop+0xa2>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a9c:	e013      	b.n	8005ac6 <HAL_TIM_Encoder_Stop+0xca>
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	2b04      	cmp	r3, #4
 8005aa2:	d104      	bne.n	8005aae <HAL_TIM_Encoder_Stop+0xb2>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005aac:	e00b      	b.n	8005ac6 <HAL_TIM_Encoder_Stop+0xca>
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	2b08      	cmp	r3, #8
 8005ab2:	d104      	bne.n	8005abe <HAL_TIM_Encoder_Stop+0xc2>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005abc:	e003      	b.n	8005ac6 <HAL_TIM_Encoder_Stop+0xca>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d104      	bne.n	8005ad6 <HAL_TIM_Encoder_Stop+0xda>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ad4:	e024      	b.n	8005b20 <HAL_TIM_Encoder_Stop+0x124>
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	2b04      	cmp	r3, #4
 8005ada:	d104      	bne.n	8005ae6 <HAL_TIM_Encoder_Stop+0xea>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ae4:	e01c      	b.n	8005b20 <HAL_TIM_Encoder_Stop+0x124>
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	2b08      	cmp	r3, #8
 8005aea:	d104      	bne.n	8005af6 <HAL_TIM_Encoder_Stop+0xfa>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005af4:	e014      	b.n	8005b20 <HAL_TIM_Encoder_Stop+0x124>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2201      	movs	r2, #1
 8005afa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005afe:	e00f      	b.n	8005b20 <HAL_TIM_Encoder_Stop+0x124>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return HAL_OK;
 8005b20:	2300      	movs	r3, #0
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3708      	adds	r7, #8
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}

08005b2a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b2a:	b580      	push	{r7, lr}
 8005b2c:	b082      	sub	sp, #8
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	691b      	ldr	r3, [r3, #16]
 8005b38:	f003 0302 	and.w	r3, r3, #2
 8005b3c:	2b02      	cmp	r3, #2
 8005b3e:	d122      	bne.n	8005b86 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	f003 0302 	and.w	r3, r3, #2
 8005b4a:	2b02      	cmp	r3, #2
 8005b4c:	d11b      	bne.n	8005b86 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f06f 0202 	mvn.w	r2, #2
 8005b56:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	699b      	ldr	r3, [r3, #24]
 8005b64:	f003 0303 	and.w	r3, r3, #3
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d003      	beq.n	8005b74 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f000 f9b0 	bl	8005ed2 <HAL_TIM_IC_CaptureCallback>
 8005b72:	e005      	b.n	8005b80 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f000 f9a3 	bl	8005ec0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 f9b2 	bl	8005ee4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	691b      	ldr	r3, [r3, #16]
 8005b8c:	f003 0304 	and.w	r3, r3, #4
 8005b90:	2b04      	cmp	r3, #4
 8005b92:	d122      	bne.n	8005bda <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	f003 0304 	and.w	r3, r3, #4
 8005b9e:	2b04      	cmp	r3, #4
 8005ba0:	d11b      	bne.n	8005bda <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f06f 0204 	mvn.w	r2, #4
 8005baa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2202      	movs	r2, #2
 8005bb0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	699b      	ldr	r3, [r3, #24]
 8005bb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d003      	beq.n	8005bc8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f000 f986 	bl	8005ed2 <HAL_TIM_IC_CaptureCallback>
 8005bc6:	e005      	b.n	8005bd4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f000 f979 	bl	8005ec0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 f988 	bl	8005ee4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	f003 0308 	and.w	r3, r3, #8
 8005be4:	2b08      	cmp	r3, #8
 8005be6:	d122      	bne.n	8005c2e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	f003 0308 	and.w	r3, r3, #8
 8005bf2:	2b08      	cmp	r3, #8
 8005bf4:	d11b      	bne.n	8005c2e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f06f 0208 	mvn.w	r2, #8
 8005bfe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2204      	movs	r2, #4
 8005c04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	69db      	ldr	r3, [r3, #28]
 8005c0c:	f003 0303 	and.w	r3, r3, #3
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d003      	beq.n	8005c1c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f000 f95c 	bl	8005ed2 <HAL_TIM_IC_CaptureCallback>
 8005c1a:	e005      	b.n	8005c28 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f000 f94f 	bl	8005ec0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 f95e 	bl	8005ee4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	691b      	ldr	r3, [r3, #16]
 8005c34:	f003 0310 	and.w	r3, r3, #16
 8005c38:	2b10      	cmp	r3, #16
 8005c3a:	d122      	bne.n	8005c82 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	f003 0310 	and.w	r3, r3, #16
 8005c46:	2b10      	cmp	r3, #16
 8005c48:	d11b      	bne.n	8005c82 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f06f 0210 	mvn.w	r2, #16
 8005c52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2208      	movs	r2, #8
 8005c58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	69db      	ldr	r3, [r3, #28]
 8005c60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d003      	beq.n	8005c70 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f000 f932 	bl	8005ed2 <HAL_TIM_IC_CaptureCallback>
 8005c6e:	e005      	b.n	8005c7c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f000 f925 	bl	8005ec0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 f934 	bl	8005ee4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	691b      	ldr	r3, [r3, #16]
 8005c88:	f003 0301 	and.w	r3, r3, #1
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d10e      	bne.n	8005cae <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	f003 0301 	and.w	r3, r3, #1
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d107      	bne.n	8005cae <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f06f 0201 	mvn.w	r2, #1
 8005ca6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f7fb f9bd 	bl	8001028 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	691b      	ldr	r3, [r3, #16]
 8005cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cb8:	2b80      	cmp	r3, #128	; 0x80
 8005cba:	d10e      	bne.n	8005cda <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cc6:	2b80      	cmp	r3, #128	; 0x80
 8005cc8:	d107      	bne.n	8005cda <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005cd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f000 fb8c 	bl	80063f2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	691b      	ldr	r3, [r3, #16]
 8005ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ce4:	2b40      	cmp	r3, #64	; 0x40
 8005ce6:	d10e      	bne.n	8005d06 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cf2:	2b40      	cmp	r3, #64	; 0x40
 8005cf4:	d107      	bne.n	8005d06 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005cfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f000 f8f8 	bl	8005ef6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	691b      	ldr	r3, [r3, #16]
 8005d0c:	f003 0320 	and.w	r3, r3, #32
 8005d10:	2b20      	cmp	r3, #32
 8005d12:	d10e      	bne.n	8005d32 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	f003 0320 	and.w	r3, r3, #32
 8005d1e:	2b20      	cmp	r3, #32
 8005d20:	d107      	bne.n	8005d32 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f06f 0220 	mvn.w	r2, #32
 8005d2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f000 fb57 	bl	80063e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d32:	bf00      	nop
 8005d34:	3708      	adds	r7, #8
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
	...

08005d3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b086      	sub	sp, #24
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	60b9      	str	r1, [r7, #8]
 8005d46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d101      	bne.n	8005d5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005d56:	2302      	movs	r3, #2
 8005d58:	e0ae      	b.n	8005eb8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2b0c      	cmp	r3, #12
 8005d66:	f200 809f 	bhi.w	8005ea8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005d6a:	a201      	add	r2, pc, #4	; (adr r2, 8005d70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d70:	08005da5 	.word	0x08005da5
 8005d74:	08005ea9 	.word	0x08005ea9
 8005d78:	08005ea9 	.word	0x08005ea9
 8005d7c:	08005ea9 	.word	0x08005ea9
 8005d80:	08005de5 	.word	0x08005de5
 8005d84:	08005ea9 	.word	0x08005ea9
 8005d88:	08005ea9 	.word	0x08005ea9
 8005d8c:	08005ea9 	.word	0x08005ea9
 8005d90:	08005e27 	.word	0x08005e27
 8005d94:	08005ea9 	.word	0x08005ea9
 8005d98:	08005ea9 	.word	0x08005ea9
 8005d9c:	08005ea9 	.word	0x08005ea9
 8005da0:	08005e67 	.word	0x08005e67
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68b9      	ldr	r1, [r7, #8]
 8005daa:	4618      	mov	r0, r3
 8005dac:	f000 f90e 	bl	8005fcc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	699a      	ldr	r2, [r3, #24]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f042 0208 	orr.w	r2, r2, #8
 8005dbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	699a      	ldr	r2, [r3, #24]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f022 0204 	bic.w	r2, r2, #4
 8005dce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	6999      	ldr	r1, [r3, #24]
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	691a      	ldr	r2, [r3, #16]
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	430a      	orrs	r2, r1
 8005de0:	619a      	str	r2, [r3, #24]
      break;
 8005de2:	e064      	b.n	8005eae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	68b9      	ldr	r1, [r7, #8]
 8005dea:	4618      	mov	r0, r3
 8005dec:	f000 f954 	bl	8006098 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	699a      	ldr	r2, [r3, #24]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	699a      	ldr	r2, [r3, #24]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	6999      	ldr	r1, [r3, #24]
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	021a      	lsls	r2, r3, #8
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	430a      	orrs	r2, r1
 8005e22:	619a      	str	r2, [r3, #24]
      break;
 8005e24:	e043      	b.n	8005eae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	68b9      	ldr	r1, [r7, #8]
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f000 f99d 	bl	800616c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	69da      	ldr	r2, [r3, #28]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f042 0208 	orr.w	r2, r2, #8
 8005e40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	69da      	ldr	r2, [r3, #28]
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f022 0204 	bic.w	r2, r2, #4
 8005e50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	69d9      	ldr	r1, [r3, #28]
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	691a      	ldr	r2, [r3, #16]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	430a      	orrs	r2, r1
 8005e62:	61da      	str	r2, [r3, #28]
      break;
 8005e64:	e023      	b.n	8005eae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	68b9      	ldr	r1, [r7, #8]
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f000 f9e7 	bl	8006240 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	69da      	ldr	r2, [r3, #28]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	69da      	ldr	r2, [r3, #28]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	69d9      	ldr	r1, [r3, #28]
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	691b      	ldr	r3, [r3, #16]
 8005e9c:	021a      	lsls	r2, r3, #8
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	430a      	orrs	r2, r1
 8005ea4:	61da      	str	r2, [r3, #28]
      break;
 8005ea6:	e002      	b.n	8005eae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	75fb      	strb	r3, [r7, #23]
      break;
 8005eac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005eb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3718      	adds	r7, #24
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}

08005ec0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ec8:	bf00      	nop
 8005eca:	370c      	adds	r7, #12
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bc80      	pop	{r7}
 8005ed0:	4770      	bx	lr

08005ed2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ed2:	b480      	push	{r7}
 8005ed4:	b083      	sub	sp, #12
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005eda:	bf00      	nop
 8005edc:	370c      	adds	r7, #12
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bc80      	pop	{r7}
 8005ee2:	4770      	bx	lr

08005ee4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005eec:	bf00      	nop
 8005eee:	370c      	adds	r7, #12
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bc80      	pop	{r7}
 8005ef4:	4770      	bx	lr

08005ef6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ef6:	b480      	push	{r7}
 8005ef8:	b083      	sub	sp, #12
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005efe:	bf00      	nop
 8005f00:	370c      	adds	r7, #12
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bc80      	pop	{r7}
 8005f06:	4770      	bx	lr

08005f08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b085      	sub	sp, #20
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	4a29      	ldr	r2, [pc, #164]	; (8005fc0 <TIM_Base_SetConfig+0xb8>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d00b      	beq.n	8005f38 <TIM_Base_SetConfig+0x30>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f26:	d007      	beq.n	8005f38 <TIM_Base_SetConfig+0x30>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	4a26      	ldr	r2, [pc, #152]	; (8005fc4 <TIM_Base_SetConfig+0xbc>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d003      	beq.n	8005f38 <TIM_Base_SetConfig+0x30>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4a25      	ldr	r2, [pc, #148]	; (8005fc8 <TIM_Base_SetConfig+0xc0>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d108      	bne.n	8005f4a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	68fa      	ldr	r2, [r7, #12]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	4a1c      	ldr	r2, [pc, #112]	; (8005fc0 <TIM_Base_SetConfig+0xb8>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d00b      	beq.n	8005f6a <TIM_Base_SetConfig+0x62>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f58:	d007      	beq.n	8005f6a <TIM_Base_SetConfig+0x62>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4a19      	ldr	r2, [pc, #100]	; (8005fc4 <TIM_Base_SetConfig+0xbc>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d003      	beq.n	8005f6a <TIM_Base_SetConfig+0x62>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4a18      	ldr	r2, [pc, #96]	; (8005fc8 <TIM_Base_SetConfig+0xc0>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d108      	bne.n	8005f7c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	68fa      	ldr	r2, [r7, #12]
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	695b      	ldr	r3, [r3, #20]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	68fa      	ldr	r2, [r7, #12]
 8005f8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	689a      	ldr	r2, [r3, #8]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	4a07      	ldr	r2, [pc, #28]	; (8005fc0 <TIM_Base_SetConfig+0xb8>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d103      	bne.n	8005fb0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	691a      	ldr	r2, [r3, #16]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	615a      	str	r2, [r3, #20]
}
 8005fb6:	bf00      	nop
 8005fb8:	3714      	adds	r7, #20
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bc80      	pop	{r7}
 8005fbe:	4770      	bx	lr
 8005fc0:	40012c00 	.word	0x40012c00
 8005fc4:	40000400 	.word	0x40000400
 8005fc8:	40000800 	.word	0x40000800

08005fcc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b087      	sub	sp, #28
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6a1b      	ldr	r3, [r3, #32]
 8005fda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6a1b      	ldr	r3, [r3, #32]
 8005fe0:	f023 0201 	bic.w	r2, r3, #1
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	699b      	ldr	r3, [r3, #24]
 8005ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ffa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f023 0303 	bic.w	r3, r3, #3
 8006002:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	68fa      	ldr	r2, [r7, #12]
 800600a:	4313      	orrs	r3, r2
 800600c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	f023 0302 	bic.w	r3, r3, #2
 8006014:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	697a      	ldr	r2, [r7, #20]
 800601c:	4313      	orrs	r3, r2
 800601e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4a1c      	ldr	r2, [pc, #112]	; (8006094 <TIM_OC1_SetConfig+0xc8>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d10c      	bne.n	8006042 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	f023 0308 	bic.w	r3, r3, #8
 800602e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	68db      	ldr	r3, [r3, #12]
 8006034:	697a      	ldr	r2, [r7, #20]
 8006036:	4313      	orrs	r3, r2
 8006038:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	f023 0304 	bic.w	r3, r3, #4
 8006040:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a13      	ldr	r2, [pc, #76]	; (8006094 <TIM_OC1_SetConfig+0xc8>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d111      	bne.n	800606e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006050:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006058:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	695b      	ldr	r3, [r3, #20]
 800605e:	693a      	ldr	r2, [r7, #16]
 8006060:	4313      	orrs	r3, r2
 8006062:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	699b      	ldr	r3, [r3, #24]
 8006068:	693a      	ldr	r2, [r7, #16]
 800606a:	4313      	orrs	r3, r2
 800606c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	693a      	ldr	r2, [r7, #16]
 8006072:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	68fa      	ldr	r2, [r7, #12]
 8006078:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	685a      	ldr	r2, [r3, #4]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	697a      	ldr	r2, [r7, #20]
 8006086:	621a      	str	r2, [r3, #32]
}
 8006088:	bf00      	nop
 800608a:	371c      	adds	r7, #28
 800608c:	46bd      	mov	sp, r7
 800608e:	bc80      	pop	{r7}
 8006090:	4770      	bx	lr
 8006092:	bf00      	nop
 8006094:	40012c00 	.word	0x40012c00

08006098 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006098:	b480      	push	{r7}
 800609a:	b087      	sub	sp, #28
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6a1b      	ldr	r3, [r3, #32]
 80060a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6a1b      	ldr	r3, [r3, #32]
 80060ac:	f023 0210 	bic.w	r2, r3, #16
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	699b      	ldr	r3, [r3, #24]
 80060be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	021b      	lsls	r3, r3, #8
 80060d6:	68fa      	ldr	r2, [r7, #12]
 80060d8:	4313      	orrs	r3, r2
 80060da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	f023 0320 	bic.w	r3, r3, #32
 80060e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	011b      	lsls	r3, r3, #4
 80060ea:	697a      	ldr	r2, [r7, #20]
 80060ec:	4313      	orrs	r3, r2
 80060ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4a1d      	ldr	r2, [pc, #116]	; (8006168 <TIM_OC2_SetConfig+0xd0>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d10d      	bne.n	8006114 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	68db      	ldr	r3, [r3, #12]
 8006104:	011b      	lsls	r3, r3, #4
 8006106:	697a      	ldr	r2, [r7, #20]
 8006108:	4313      	orrs	r3, r2
 800610a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006112:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	4a14      	ldr	r2, [pc, #80]	; (8006168 <TIM_OC2_SetConfig+0xd0>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d113      	bne.n	8006144 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006122:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800612a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	695b      	ldr	r3, [r3, #20]
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	693a      	ldr	r2, [r7, #16]
 8006134:	4313      	orrs	r3, r2
 8006136:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	699b      	ldr	r3, [r3, #24]
 800613c:	009b      	lsls	r3, r3, #2
 800613e:	693a      	ldr	r2, [r7, #16]
 8006140:	4313      	orrs	r3, r2
 8006142:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	693a      	ldr	r2, [r7, #16]
 8006148:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	68fa      	ldr	r2, [r7, #12]
 800614e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	685a      	ldr	r2, [r3, #4]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	697a      	ldr	r2, [r7, #20]
 800615c:	621a      	str	r2, [r3, #32]
}
 800615e:	bf00      	nop
 8006160:	371c      	adds	r7, #28
 8006162:	46bd      	mov	sp, r7
 8006164:	bc80      	pop	{r7}
 8006166:	4770      	bx	lr
 8006168:	40012c00 	.word	0x40012c00

0800616c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800616c:	b480      	push	{r7}
 800616e:	b087      	sub	sp, #28
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6a1b      	ldr	r3, [r3, #32]
 800617a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6a1b      	ldr	r3, [r3, #32]
 8006180:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	69db      	ldr	r3, [r3, #28]
 8006192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800619a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f023 0303 	bic.w	r3, r3, #3
 80061a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80061b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	021b      	lsls	r3, r3, #8
 80061bc:	697a      	ldr	r2, [r7, #20]
 80061be:	4313      	orrs	r3, r2
 80061c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a1d      	ldr	r2, [pc, #116]	; (800623c <TIM_OC3_SetConfig+0xd0>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d10d      	bne.n	80061e6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80061d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	68db      	ldr	r3, [r3, #12]
 80061d6:	021b      	lsls	r3, r3, #8
 80061d8:	697a      	ldr	r2, [r7, #20]
 80061da:	4313      	orrs	r3, r2
 80061dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80061e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	4a14      	ldr	r2, [pc, #80]	; (800623c <TIM_OC3_SetConfig+0xd0>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d113      	bne.n	8006216 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80061fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	695b      	ldr	r3, [r3, #20]
 8006202:	011b      	lsls	r3, r3, #4
 8006204:	693a      	ldr	r2, [r7, #16]
 8006206:	4313      	orrs	r3, r2
 8006208:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	699b      	ldr	r3, [r3, #24]
 800620e:	011b      	lsls	r3, r3, #4
 8006210:	693a      	ldr	r2, [r7, #16]
 8006212:	4313      	orrs	r3, r2
 8006214:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	693a      	ldr	r2, [r7, #16]
 800621a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	68fa      	ldr	r2, [r7, #12]
 8006220:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	685a      	ldr	r2, [r3, #4]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	697a      	ldr	r2, [r7, #20]
 800622e:	621a      	str	r2, [r3, #32]
}
 8006230:	bf00      	nop
 8006232:	371c      	adds	r7, #28
 8006234:	46bd      	mov	sp, r7
 8006236:	bc80      	pop	{r7}
 8006238:	4770      	bx	lr
 800623a:	bf00      	nop
 800623c:	40012c00 	.word	0x40012c00

08006240 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006240:	b480      	push	{r7}
 8006242:	b087      	sub	sp, #28
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6a1b      	ldr	r3, [r3, #32]
 800624e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6a1b      	ldr	r3, [r3, #32]
 8006254:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	69db      	ldr	r3, [r3, #28]
 8006266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800626e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006276:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	021b      	lsls	r3, r3, #8
 800627e:	68fa      	ldr	r2, [r7, #12]
 8006280:	4313      	orrs	r3, r2
 8006282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800628a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	031b      	lsls	r3, r3, #12
 8006292:	693a      	ldr	r2, [r7, #16]
 8006294:	4313      	orrs	r3, r2
 8006296:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	4a0f      	ldr	r2, [pc, #60]	; (80062d8 <TIM_OC4_SetConfig+0x98>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d109      	bne.n	80062b4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	695b      	ldr	r3, [r3, #20]
 80062ac:	019b      	lsls	r3, r3, #6
 80062ae:	697a      	ldr	r2, [r7, #20]
 80062b0:	4313      	orrs	r3, r2
 80062b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	697a      	ldr	r2, [r7, #20]
 80062b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	68fa      	ldr	r2, [r7, #12]
 80062be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	685a      	ldr	r2, [r3, #4]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	693a      	ldr	r2, [r7, #16]
 80062cc:	621a      	str	r2, [r3, #32]
}
 80062ce:	bf00      	nop
 80062d0:	371c      	adds	r7, #28
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bc80      	pop	{r7}
 80062d6:	4770      	bx	lr
 80062d8:	40012c00 	.word	0x40012c00

080062dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80062dc:	b480      	push	{r7}
 80062de:	b087      	sub	sp, #28
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	f003 031f 	and.w	r3, r3, #31
 80062ee:	2201      	movs	r2, #1
 80062f0:	fa02 f303 	lsl.w	r3, r2, r3
 80062f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	6a1a      	ldr	r2, [r3, #32]
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	43db      	mvns	r3, r3
 80062fe:	401a      	ands	r2, r3
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6a1a      	ldr	r2, [r3, #32]
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	f003 031f 	and.w	r3, r3, #31
 800630e:	6879      	ldr	r1, [r7, #4]
 8006310:	fa01 f303 	lsl.w	r3, r1, r3
 8006314:	431a      	orrs	r2, r3
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	621a      	str	r2, [r3, #32]
}
 800631a:	bf00      	nop
 800631c:	371c      	adds	r7, #28
 800631e:	46bd      	mov	sp, r7
 8006320:	bc80      	pop	{r7}
 8006322:	4770      	bx	lr

08006324 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006324:	b480      	push	{r7}
 8006326:	b085      	sub	sp, #20
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006334:	2b01      	cmp	r3, #1
 8006336:	d101      	bne.n	800633c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006338:	2302      	movs	r3, #2
 800633a:	e046      	b.n	80063ca <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2201      	movs	r2, #1
 8006340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2202      	movs	r2, #2
 8006348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006362:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	68fa      	ldr	r2, [r7, #12]
 800636a:	4313      	orrs	r3, r2
 800636c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a16      	ldr	r2, [pc, #88]	; (80063d4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d00e      	beq.n	800639e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006388:	d009      	beq.n	800639e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a12      	ldr	r2, [pc, #72]	; (80063d8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d004      	beq.n	800639e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a10      	ldr	r2, [pc, #64]	; (80063dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d10c      	bne.n	80063b8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	68ba      	ldr	r2, [r7, #8]
 80063ac:	4313      	orrs	r3, r2
 80063ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	68ba      	ldr	r2, [r7, #8]
 80063b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2201      	movs	r2, #1
 80063bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063c8:	2300      	movs	r3, #0
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3714      	adds	r7, #20
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bc80      	pop	{r7}
 80063d2:	4770      	bx	lr
 80063d4:	40012c00 	.word	0x40012c00
 80063d8:	40000400 	.word	0x40000400
 80063dc:	40000800 	.word	0x40000800

080063e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b083      	sub	sp, #12
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80063e8:	bf00      	nop
 80063ea:	370c      	adds	r7, #12
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bc80      	pop	{r7}
 80063f0:	4770      	bx	lr

080063f2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80063f2:	b480      	push	{r7}
 80063f4:	b083      	sub	sp, #12
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063fa:	bf00      	nop
 80063fc:	370c      	adds	r7, #12
 80063fe:	46bd      	mov	sp, r7
 8006400:	bc80      	pop	{r7}
 8006402:	4770      	bx	lr

08006404 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b082      	sub	sp, #8
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d101      	bne.n	8006416 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e042      	b.n	800649c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800641c:	b2db      	uxtb	r3, r3
 800641e:	2b00      	cmp	r3, #0
 8006420:	d106      	bne.n	8006430 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f7fa ffe8 	bl	8001400 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2224      	movs	r2, #36	; 0x24
 8006434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	68da      	ldr	r2, [r3, #12]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006446:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 f82b 	bl	80064a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	691a      	ldr	r2, [r3, #16]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800645c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	695a      	ldr	r2, [r3, #20]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800646c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68da      	ldr	r2, [r3, #12]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800647c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2220      	movs	r2, #32
 8006488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2220      	movs	r2, #32
 8006490:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800649a:	2300      	movs	r3, #0
}
 800649c:	4618      	mov	r0, r3
 800649e:	3708      	adds	r7, #8
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b084      	sub	sp, #16
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	691b      	ldr	r3, [r3, #16]
 80064b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	68da      	ldr	r2, [r3, #12]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	430a      	orrs	r2, r1
 80064c0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	689a      	ldr	r2, [r3, #8]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	691b      	ldr	r3, [r3, #16]
 80064ca:	431a      	orrs	r2, r3
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	695b      	ldr	r3, [r3, #20]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	68db      	ldr	r3, [r3, #12]
 80064da:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80064de:	f023 030c 	bic.w	r3, r3, #12
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	6812      	ldr	r2, [r2, #0]
 80064e6:	68b9      	ldr	r1, [r7, #8]
 80064e8:	430b      	orrs	r3, r1
 80064ea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	695b      	ldr	r3, [r3, #20]
 80064f2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	699a      	ldr	r2, [r3, #24]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	430a      	orrs	r2, r1
 8006500:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a2c      	ldr	r2, [pc, #176]	; (80065b8 <UART_SetConfig+0x114>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d103      	bne.n	8006514 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800650c:	f7fe ff48 	bl	80053a0 <HAL_RCC_GetPCLK2Freq>
 8006510:	60f8      	str	r0, [r7, #12]
 8006512:	e002      	b.n	800651a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006514:	f7fe ff30 	bl	8005378 <HAL_RCC_GetPCLK1Freq>
 8006518:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800651a:	68fa      	ldr	r2, [r7, #12]
 800651c:	4613      	mov	r3, r2
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	4413      	add	r3, r2
 8006522:	009a      	lsls	r2, r3, #2
 8006524:	441a      	add	r2, r3
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006530:	4a22      	ldr	r2, [pc, #136]	; (80065bc <UART_SetConfig+0x118>)
 8006532:	fba2 2303 	umull	r2, r3, r2, r3
 8006536:	095b      	lsrs	r3, r3, #5
 8006538:	0119      	lsls	r1, r3, #4
 800653a:	68fa      	ldr	r2, [r7, #12]
 800653c:	4613      	mov	r3, r2
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	4413      	add	r3, r2
 8006542:	009a      	lsls	r2, r3, #2
 8006544:	441a      	add	r2, r3
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006550:	4b1a      	ldr	r3, [pc, #104]	; (80065bc <UART_SetConfig+0x118>)
 8006552:	fba3 0302 	umull	r0, r3, r3, r2
 8006556:	095b      	lsrs	r3, r3, #5
 8006558:	2064      	movs	r0, #100	; 0x64
 800655a:	fb00 f303 	mul.w	r3, r0, r3
 800655e:	1ad3      	subs	r3, r2, r3
 8006560:	011b      	lsls	r3, r3, #4
 8006562:	3332      	adds	r3, #50	; 0x32
 8006564:	4a15      	ldr	r2, [pc, #84]	; (80065bc <UART_SetConfig+0x118>)
 8006566:	fba2 2303 	umull	r2, r3, r2, r3
 800656a:	095b      	lsrs	r3, r3, #5
 800656c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006570:	4419      	add	r1, r3
 8006572:	68fa      	ldr	r2, [r7, #12]
 8006574:	4613      	mov	r3, r2
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	4413      	add	r3, r2
 800657a:	009a      	lsls	r2, r3, #2
 800657c:	441a      	add	r2, r3
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	fbb2 f2f3 	udiv	r2, r2, r3
 8006588:	4b0c      	ldr	r3, [pc, #48]	; (80065bc <UART_SetConfig+0x118>)
 800658a:	fba3 0302 	umull	r0, r3, r3, r2
 800658e:	095b      	lsrs	r3, r3, #5
 8006590:	2064      	movs	r0, #100	; 0x64
 8006592:	fb00 f303 	mul.w	r3, r0, r3
 8006596:	1ad3      	subs	r3, r2, r3
 8006598:	011b      	lsls	r3, r3, #4
 800659a:	3332      	adds	r3, #50	; 0x32
 800659c:	4a07      	ldr	r2, [pc, #28]	; (80065bc <UART_SetConfig+0x118>)
 800659e:	fba2 2303 	umull	r2, r3, r2, r3
 80065a2:	095b      	lsrs	r3, r3, #5
 80065a4:	f003 020f 	and.w	r2, r3, #15
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	440a      	add	r2, r1
 80065ae:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80065b0:	bf00      	nop
 80065b2:	3710      	adds	r7, #16
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}
 80065b8:	40013800 	.word	0x40013800
 80065bc:	51eb851f 	.word	0x51eb851f

080065c0 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80065c0:	b480      	push	{r7}
 80065c2:	b085      	sub	sp, #20
 80065c4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065c6:	f3ef 8305 	mrs	r3, IPSR
 80065ca:	60bb      	str	r3, [r7, #8]
  return(result);
 80065cc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d10f      	bne.n	80065f2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065d2:	f3ef 8310 	mrs	r3, PRIMASK
 80065d6:	607b      	str	r3, [r7, #4]
  return(result);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d109      	bne.n	80065f2 <osKernelInitialize+0x32>
 80065de:	4b10      	ldr	r3, [pc, #64]	; (8006620 <osKernelInitialize+0x60>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	2b02      	cmp	r3, #2
 80065e4:	d109      	bne.n	80065fa <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80065e6:	f3ef 8311 	mrs	r3, BASEPRI
 80065ea:	603b      	str	r3, [r7, #0]
  return(result);
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d003      	beq.n	80065fa <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80065f2:	f06f 0305 	mvn.w	r3, #5
 80065f6:	60fb      	str	r3, [r7, #12]
 80065f8:	e00c      	b.n	8006614 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80065fa:	4b09      	ldr	r3, [pc, #36]	; (8006620 <osKernelInitialize+0x60>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d105      	bne.n	800660e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8006602:	4b07      	ldr	r3, [pc, #28]	; (8006620 <osKernelInitialize+0x60>)
 8006604:	2201      	movs	r2, #1
 8006606:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006608:	2300      	movs	r3, #0
 800660a:	60fb      	str	r3, [r7, #12]
 800660c:	e002      	b.n	8006614 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800660e:	f04f 33ff 	mov.w	r3, #4294967295
 8006612:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006614:	68fb      	ldr	r3, [r7, #12]
}
 8006616:	4618      	mov	r0, r3
 8006618:	3714      	adds	r7, #20
 800661a:	46bd      	mov	sp, r7
 800661c:	bc80      	pop	{r7}
 800661e:	4770      	bx	lr
 8006620:	200004a4 	.word	0x200004a4

08006624 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006624:	b580      	push	{r7, lr}
 8006626:	b084      	sub	sp, #16
 8006628:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800662a:	f3ef 8305 	mrs	r3, IPSR
 800662e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006630:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006632:	2b00      	cmp	r3, #0
 8006634:	d10f      	bne.n	8006656 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006636:	f3ef 8310 	mrs	r3, PRIMASK
 800663a:	607b      	str	r3, [r7, #4]
  return(result);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d109      	bne.n	8006656 <osKernelStart+0x32>
 8006642:	4b11      	ldr	r3, [pc, #68]	; (8006688 <osKernelStart+0x64>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	2b02      	cmp	r3, #2
 8006648:	d109      	bne.n	800665e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800664a:	f3ef 8311 	mrs	r3, BASEPRI
 800664e:	603b      	str	r3, [r7, #0]
  return(result);
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d003      	beq.n	800665e <osKernelStart+0x3a>
    stat = osErrorISR;
 8006656:	f06f 0305 	mvn.w	r3, #5
 800665a:	60fb      	str	r3, [r7, #12]
 800665c:	e00e      	b.n	800667c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800665e:	4b0a      	ldr	r3, [pc, #40]	; (8006688 <osKernelStart+0x64>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	2b01      	cmp	r3, #1
 8006664:	d107      	bne.n	8006676 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8006666:	4b08      	ldr	r3, [pc, #32]	; (8006688 <osKernelStart+0x64>)
 8006668:	2202      	movs	r2, #2
 800666a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800666c:	f002 fd58 	bl	8009120 <vTaskStartScheduler>
      stat = osOK;
 8006670:	2300      	movs	r3, #0
 8006672:	60fb      	str	r3, [r7, #12]
 8006674:	e002      	b.n	800667c <osKernelStart+0x58>
    } else {
      stat = osError;
 8006676:	f04f 33ff 	mov.w	r3, #4294967295
 800667a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800667c:	68fb      	ldr	r3, [r7, #12]
}
 800667e:	4618      	mov	r0, r3
 8006680:	3710      	adds	r7, #16
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	200004a4 	.word	0x200004a4

0800668c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800668c:	b580      	push	{r7, lr}
 800668e:	b084      	sub	sp, #16
 8006690:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006692:	f3ef 8305 	mrs	r3, IPSR
 8006696:	60bb      	str	r3, [r7, #8]
  return(result);
 8006698:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 800669a:	2b00      	cmp	r3, #0
 800669c:	d10f      	bne.n	80066be <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800669e:	f3ef 8310 	mrs	r3, PRIMASK
 80066a2:	607b      	str	r3, [r7, #4]
  return(result);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d109      	bne.n	80066be <osKernelGetTickCount+0x32>
 80066aa:	4b0b      	ldr	r3, [pc, #44]	; (80066d8 <osKernelGetTickCount+0x4c>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	2b02      	cmp	r3, #2
 80066b0:	d109      	bne.n	80066c6 <osKernelGetTickCount+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80066b2:	f3ef 8311 	mrs	r3, BASEPRI
 80066b6:	603b      	str	r3, [r7, #0]
  return(result);
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d003      	beq.n	80066c6 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 80066be:	f002 fe59 	bl	8009374 <xTaskGetTickCountFromISR>
 80066c2:	60f8      	str	r0, [r7, #12]
 80066c4:	e002      	b.n	80066cc <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 80066c6:	f002 fe47 	bl	8009358 <xTaskGetTickCount>
 80066ca:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 80066cc:	68fb      	ldr	r3, [r7, #12]
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3710      	adds	r7, #16
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	bf00      	nop
 80066d8:	200004a4 	.word	0x200004a4

080066dc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80066dc:	b580      	push	{r7, lr}
 80066de:	b092      	sub	sp, #72	; 0x48
 80066e0:	af04      	add	r7, sp, #16
 80066e2:	60f8      	str	r0, [r7, #12]
 80066e4:	60b9      	str	r1, [r7, #8]
 80066e6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80066e8:	2300      	movs	r3, #0
 80066ea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066ec:	f3ef 8305 	mrs	r3, IPSR
 80066f0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80066f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	f040 8094 	bne.w	8006822 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066fa:	f3ef 8310 	mrs	r3, PRIMASK
 80066fe:	623b      	str	r3, [r7, #32]
  return(result);
 8006700:	6a3b      	ldr	r3, [r7, #32]
 8006702:	2b00      	cmp	r3, #0
 8006704:	f040 808d 	bne.w	8006822 <osThreadNew+0x146>
 8006708:	4b48      	ldr	r3, [pc, #288]	; (800682c <osThreadNew+0x150>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	2b02      	cmp	r3, #2
 800670e:	d106      	bne.n	800671e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006710:	f3ef 8311 	mrs	r3, BASEPRI
 8006714:	61fb      	str	r3, [r7, #28]
  return(result);
 8006716:	69fb      	ldr	r3, [r7, #28]
 8006718:	2b00      	cmp	r3, #0
 800671a:	f040 8082 	bne.w	8006822 <osThreadNew+0x146>
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d07e      	beq.n	8006822 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8006724:	2340      	movs	r3, #64	; 0x40
 8006726:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8006728:	2318      	movs	r3, #24
 800672a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800672c:	2300      	movs	r3, #0
 800672e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8006730:	f107 031b 	add.w	r3, r7, #27
 8006734:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8006736:	f04f 33ff 	mov.w	r3, #4294967295
 800673a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d045      	beq.n	80067ce <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d002      	beq.n	8006750 <osThreadNew+0x74>
        name = attr->name;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	699b      	ldr	r3, [r3, #24]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d002      	beq.n	800675e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	699b      	ldr	r3, [r3, #24]
 800675c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800675e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006760:	2b00      	cmp	r3, #0
 8006762:	d008      	beq.n	8006776 <osThreadNew+0x9a>
 8006764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006766:	2b38      	cmp	r3, #56	; 0x38
 8006768:	d805      	bhi.n	8006776 <osThreadNew+0x9a>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	f003 0301 	and.w	r3, r3, #1
 8006772:	2b00      	cmp	r3, #0
 8006774:	d001      	beq.n	800677a <osThreadNew+0x9e>
        return (NULL);
 8006776:	2300      	movs	r3, #0
 8006778:	e054      	b.n	8006824 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	695b      	ldr	r3, [r3, #20]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d003      	beq.n	800678a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	695b      	ldr	r3, [r3, #20]
 8006786:	089b      	lsrs	r3, r3, #2
 8006788:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d00e      	beq.n	80067b0 <osThreadNew+0xd4>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	2ba3      	cmp	r3, #163	; 0xa3
 8006798:	d90a      	bls.n	80067b0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d006      	beq.n	80067b0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	695b      	ldr	r3, [r3, #20]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d002      	beq.n	80067b0 <osThreadNew+0xd4>
        mem = 1;
 80067aa:	2301      	movs	r3, #1
 80067ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80067ae:	e010      	b.n	80067d2 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d10c      	bne.n	80067d2 <osThreadNew+0xf6>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d108      	bne.n	80067d2 <osThreadNew+0xf6>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	691b      	ldr	r3, [r3, #16]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d104      	bne.n	80067d2 <osThreadNew+0xf6>
          mem = 0;
 80067c8:	2300      	movs	r3, #0
 80067ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80067cc:	e001      	b.n	80067d2 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80067ce:	2300      	movs	r3, #0
 80067d0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80067d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d110      	bne.n	80067fa <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80067e0:	9202      	str	r2, [sp, #8]
 80067e2:	9301      	str	r3, [sp, #4]
 80067e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e6:	9300      	str	r3, [sp, #0]
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067ec:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80067ee:	68f8      	ldr	r0, [r7, #12]
 80067f0:	f002 f902 	bl	80089f8 <xTaskCreateStatic>
 80067f4:	4603      	mov	r3, r0
 80067f6:	617b      	str	r3, [r7, #20]
 80067f8:	e013      	b.n	8006822 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80067fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d110      	bne.n	8006822 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006802:	b29a      	uxth	r2, r3
 8006804:	f107 0314 	add.w	r3, r7, #20
 8006808:	9301      	str	r3, [sp, #4]
 800680a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800680c:	9300      	str	r3, [sp, #0]
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006812:	68f8      	ldr	r0, [r7, #12]
 8006814:	f002 f94c 	bl	8008ab0 <xTaskCreate>
 8006818:	4603      	mov	r3, r0
 800681a:	2b01      	cmp	r3, #1
 800681c:	d001      	beq.n	8006822 <osThreadNew+0x146>
          hTask = NULL;
 800681e:	2300      	movs	r3, #0
 8006820:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006822:	697b      	ldr	r3, [r7, #20]
}
 8006824:	4618      	mov	r0, r3
 8006826:	3738      	adds	r7, #56	; 0x38
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}
 800682c:	200004a4 	.word	0x200004a4

08006830 <osThreadSetPriority>:
   */
  (void) thread_id;
  return 0;
}

osStatus_t osThreadSetPriority (osThreadId_t thread_id, osPriority_t priority) {
 8006830:	b580      	push	{r7, lr}
 8006832:	b088      	sub	sp, #32
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800683e:	f3ef 8305 	mrs	r3, IPSR
 8006842:	617b      	str	r3, [r7, #20]
  return(result);
 8006844:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006846:	2b00      	cmp	r3, #0
 8006848:	d10f      	bne.n	800686a <osThreadSetPriority+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800684a:	f3ef 8310 	mrs	r3, PRIMASK
 800684e:	613b      	str	r3, [r7, #16]
  return(result);
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d109      	bne.n	800686a <osThreadSetPriority+0x3a>
 8006856:	4b13      	ldr	r3, [pc, #76]	; (80068a4 <osThreadSetPriority+0x74>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	2b02      	cmp	r3, #2
 800685c:	d109      	bne.n	8006872 <osThreadSetPriority+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800685e:	f3ef 8311 	mrs	r3, BASEPRI
 8006862:	60fb      	str	r3, [r7, #12]
  return(result);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d003      	beq.n	8006872 <osThreadSetPriority+0x42>
    stat = osErrorISR;
 800686a:	f06f 0305 	mvn.w	r3, #5
 800686e:	61fb      	str	r3, [r7, #28]
 8006870:	e013      	b.n	800689a <osThreadSetPriority+0x6a>
  }
  else if ((hTask == NULL) || (priority < osPriorityIdle) || (priority > osPriorityISR)) {
 8006872:	69bb      	ldr	r3, [r7, #24]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d005      	beq.n	8006884 <osThreadSetPriority+0x54>
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	2b00      	cmp	r3, #0
 800687c:	dd02      	ble.n	8006884 <osThreadSetPriority+0x54>
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	2b38      	cmp	r3, #56	; 0x38
 8006882:	dd03      	ble.n	800688c <osThreadSetPriority+0x5c>
    stat = osErrorParameter;
 8006884:	f06f 0303 	mvn.w	r3, #3
 8006888:	61fb      	str	r3, [r7, #28]
 800688a:	e006      	b.n	800689a <osThreadSetPriority+0x6a>
  }
  else {
    stat = osOK;
 800688c:	2300      	movs	r3, #0
 800688e:	61fb      	str	r3, [r7, #28]
    vTaskPrioritySet (hTask, (UBaseType_t)priority);
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	4619      	mov	r1, r3
 8006894:	69b8      	ldr	r0, [r7, #24]
 8006896:	f002 fa93 	bl	8008dc0 <vTaskPrioritySet>
  }

  return (stat);
 800689a:	69fb      	ldr	r3, [r7, #28]
}
 800689c:	4618      	mov	r0, r3
 800689e:	3720      	adds	r7, #32
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}
 80068a4:	200004a4 	.word	0x200004a4

080068a8 <osThreadSuspend>:
  }

  return (stat);
}

osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b088      	sub	sp, #32
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068b4:	f3ef 8305 	mrs	r3, IPSR
 80068b8:	617b      	str	r3, [r7, #20]
  return(result);
 80068ba:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d10f      	bne.n	80068e0 <osThreadSuspend+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068c0:	f3ef 8310 	mrs	r3, PRIMASK
 80068c4:	613b      	str	r3, [r7, #16]
  return(result);
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d109      	bne.n	80068e0 <osThreadSuspend+0x38>
 80068cc:	4b0f      	ldr	r3, [pc, #60]	; (800690c <osThreadSuspend+0x64>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	2b02      	cmp	r3, #2
 80068d2:	d109      	bne.n	80068e8 <osThreadSuspend+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80068d4:	f3ef 8311 	mrs	r3, BASEPRI
 80068d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d003      	beq.n	80068e8 <osThreadSuspend+0x40>
    stat = osErrorISR;
 80068e0:	f06f 0305 	mvn.w	r3, #5
 80068e4:	61fb      	str	r3, [r7, #28]
 80068e6:	e00b      	b.n	8006900 <osThreadSuspend+0x58>
  }
  else if (hTask == NULL) {
 80068e8:	69bb      	ldr	r3, [r7, #24]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d103      	bne.n	80068f6 <osThreadSuspend+0x4e>
    stat = osErrorParameter;
 80068ee:	f06f 0303 	mvn.w	r3, #3
 80068f2:	61fb      	str	r3, [r7, #28]
 80068f4:	e004      	b.n	8006900 <osThreadSuspend+0x58>
  }
  else {
    stat = osOK;
 80068f6:	2300      	movs	r3, #0
 80068f8:	61fb      	str	r3, [r7, #28]
    vTaskSuspend (hTask);
 80068fa:	69b8      	ldr	r0, [r7, #24]
 80068fc:	f002 fb02 	bl	8008f04 <vTaskSuspend>
  }

  return (stat);
 8006900:	69fb      	ldr	r3, [r7, #28]
}
 8006902:	4618      	mov	r0, r3
 8006904:	3720      	adds	r7, #32
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	200004a4 	.word	0x200004a4

08006910 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8006910:	b580      	push	{r7, lr}
 8006912:	b088      	sub	sp, #32
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800691c:	f3ef 8305 	mrs	r3, IPSR
 8006920:	617b      	str	r3, [r7, #20]
  return(result);
 8006922:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006924:	2b00      	cmp	r3, #0
 8006926:	d10f      	bne.n	8006948 <osThreadResume+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006928:	f3ef 8310 	mrs	r3, PRIMASK
 800692c:	613b      	str	r3, [r7, #16]
  return(result);
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d109      	bne.n	8006948 <osThreadResume+0x38>
 8006934:	4b0f      	ldr	r3, [pc, #60]	; (8006974 <osThreadResume+0x64>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	2b02      	cmp	r3, #2
 800693a:	d109      	bne.n	8006950 <osThreadResume+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800693c:	f3ef 8311 	mrs	r3, BASEPRI
 8006940:	60fb      	str	r3, [r7, #12]
  return(result);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d003      	beq.n	8006950 <osThreadResume+0x40>
    stat = osErrorISR;
 8006948:	f06f 0305 	mvn.w	r3, #5
 800694c:	61fb      	str	r3, [r7, #28]
 800694e:	e00b      	b.n	8006968 <osThreadResume+0x58>
  }
  else if (hTask == NULL) {
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d103      	bne.n	800695e <osThreadResume+0x4e>
    stat = osErrorParameter;
 8006956:	f06f 0303 	mvn.w	r3, #3
 800695a:	61fb      	str	r3, [r7, #28]
 800695c:	e004      	b.n	8006968 <osThreadResume+0x58>
  }
  else {
    stat = osOK;
 800695e:	2300      	movs	r3, #0
 8006960:	61fb      	str	r3, [r7, #28]
    vTaskResume (hTask);
 8006962:	69b8      	ldr	r0, [r7, #24]
 8006964:	f002 fb7e 	bl	8009064 <vTaskResume>
  }

  return (stat);
 8006968:	69fb      	ldr	r3, [r7, #28]
}
 800696a:	4618      	mov	r0, r3
 800696c:	3720      	adds	r7, #32
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop
 8006974:	200004a4 	.word	0x200004a4

08006978 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006978:	b580      	push	{r7, lr}
 800697a:	b086      	sub	sp, #24
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006980:	f3ef 8305 	mrs	r3, IPSR
 8006984:	613b      	str	r3, [r7, #16]
  return(result);
 8006986:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006988:	2b00      	cmp	r3, #0
 800698a:	d10f      	bne.n	80069ac <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800698c:	f3ef 8310 	mrs	r3, PRIMASK
 8006990:	60fb      	str	r3, [r7, #12]
  return(result);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d109      	bne.n	80069ac <osDelay+0x34>
 8006998:	4b0d      	ldr	r3, [pc, #52]	; (80069d0 <osDelay+0x58>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	2b02      	cmp	r3, #2
 800699e:	d109      	bne.n	80069b4 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80069a0:	f3ef 8311 	mrs	r3, BASEPRI
 80069a4:	60bb      	str	r3, [r7, #8]
  return(result);
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d003      	beq.n	80069b4 <osDelay+0x3c>
    stat = osErrorISR;
 80069ac:	f06f 0305 	mvn.w	r3, #5
 80069b0:	617b      	str	r3, [r7, #20]
 80069b2:	e007      	b.n	80069c4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80069b4:	2300      	movs	r3, #0
 80069b6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d002      	beq.n	80069c4 <osDelay+0x4c>
      vTaskDelay(ticks);
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f002 f9ca 	bl	8008d58 <vTaskDelay>
    }
  }

  return (stat);
 80069c4:	697b      	ldr	r3, [r7, #20]
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3718      	adds	r7, #24
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}
 80069ce:	bf00      	nop
 80069d0:	200004a4 	.word	0x200004a4

080069d4 <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b088      	sub	sp, #32
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 80069dc:	2300      	movs	r3, #0
 80069de:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069e0:	f3ef 8305 	mrs	r3, IPSR
 80069e4:	617b      	str	r3, [r7, #20]
  return(result);
 80069e6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d13d      	bne.n	8006a68 <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069ec:	f3ef 8310 	mrs	r3, PRIMASK
 80069f0:	613b      	str	r3, [r7, #16]
  return(result);
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d137      	bne.n	8006a68 <osEventFlagsNew+0x94>
 80069f8:	4b1e      	ldr	r3, [pc, #120]	; (8006a74 <osEventFlagsNew+0xa0>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	2b02      	cmp	r3, #2
 80069fe:	d105      	bne.n	8006a0c <osEventFlagsNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006a00:	f3ef 8311 	mrs	r3, BASEPRI
 8006a04:	60fb      	str	r3, [r7, #12]
  return(result);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d12d      	bne.n	8006a68 <osEventFlagsNew+0x94>
    mem = -1;
 8006a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8006a10:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d015      	beq.n	8006a44 <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d006      	beq.n	8006a2e <osEventFlagsNew+0x5a>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	2b1f      	cmp	r3, #31
 8006a26:	d902      	bls.n	8006a2e <osEventFlagsNew+0x5a>
        mem = 1;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	61bb      	str	r3, [r7, #24]
 8006a2c:	e00c      	b.n	8006a48 <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d108      	bne.n	8006a48 <osEventFlagsNew+0x74>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	68db      	ldr	r3, [r3, #12]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d104      	bne.n	8006a48 <osEventFlagsNew+0x74>
          mem = 0;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	61bb      	str	r3, [r7, #24]
 8006a42:	e001      	b.n	8006a48 <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 8006a44:	2300      	movs	r3, #0
 8006a46:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006a48:	69bb      	ldr	r3, [r7, #24]
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	d106      	bne.n	8006a5c <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	4618      	mov	r0, r3
 8006a54:	f000 fbf4 	bl	8007240 <xEventGroupCreateStatic>
 8006a58:	61f8      	str	r0, [r7, #28]
 8006a5a:	e005      	b.n	8006a68 <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 8006a5c:	69bb      	ldr	r3, [r7, #24]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d102      	bne.n	8006a68 <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 8006a62:	f000 fc24 	bl	80072ae <xEventGroupCreate>
 8006a66:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8006a68:	69fb      	ldr	r3, [r7, #28]
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3720      	adds	r7, #32
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
 8006a72:	bf00      	nop
 8006a74:	200004a4 	.word	0x200004a4

08006a78 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b088      	sub	sp, #32
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8006a86:	69bb      	ldr	r3, [r7, #24]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d004      	beq.n	8006a96 <osEventFlagsSet+0x1e>
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d003      	beq.n	8006a9e <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8006a96:	f06f 0303 	mvn.w	r3, #3
 8006a9a:	61fb      	str	r3, [r7, #28]
 8006a9c:	e03a      	b.n	8006b14 <osEventFlagsSet+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a9e:	f3ef 8305 	mrs	r3, IPSR
 8006aa2:	617b      	str	r3, [r7, #20]
  return(result);
 8006aa4:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d10f      	bne.n	8006aca <osEventFlagsSet+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006aaa:	f3ef 8310 	mrs	r3, PRIMASK
 8006aae:	613b      	str	r3, [r7, #16]
  return(result);
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d109      	bne.n	8006aca <osEventFlagsSet+0x52>
 8006ab6:	4b1a      	ldr	r3, [pc, #104]	; (8006b20 <osEventFlagsSet+0xa8>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	2b02      	cmp	r3, #2
 8006abc:	d123      	bne.n	8006b06 <osEventFlagsSet+0x8e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006abe:	f3ef 8311 	mrs	r3, BASEPRI
 8006ac2:	60fb      	str	r3, [r7, #12]
  return(result);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d01d      	beq.n	8006b06 <osEventFlagsSet+0x8e>
    yield = pdFALSE;
 8006aca:	2300      	movs	r3, #0
 8006acc:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8006ace:	f107 0308 	add.w	r3, r7, #8
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	6839      	ldr	r1, [r7, #0]
 8006ad6:	69b8      	ldr	r0, [r7, #24]
 8006ad8:	f000 fe08 	bl	80076ec <xEventGroupSetBitsFromISR>
 8006adc:	4603      	mov	r3, r0
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d003      	beq.n	8006aea <osEventFlagsSet+0x72>
      rflags = (uint32_t)osErrorResource;
 8006ae2:	f06f 0302 	mvn.w	r3, #2
 8006ae6:	61fb      	str	r3, [r7, #28]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8006ae8:	e013      	b.n	8006b12 <osEventFlagsSet+0x9a>
    } else {
      rflags = flags;
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	61fb      	str	r3, [r7, #28]
      portYIELD_FROM_ISR (yield);
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d00e      	beq.n	8006b12 <osEventFlagsSet+0x9a>
 8006af4:	4b0b      	ldr	r3, [pc, #44]	; (8006b24 <osEventFlagsSet+0xac>)
 8006af6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006afa:	601a      	str	r2, [r3, #0]
 8006afc:	f3bf 8f4f 	dsb	sy
 8006b00:	f3bf 8f6f 	isb	sy
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8006b04:	e005      	b.n	8006b12 <osEventFlagsSet+0x9a>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8006b06:	6839      	ldr	r1, [r7, #0]
 8006b08:	69b8      	ldr	r0, [r7, #24]
 8006b0a:	f000 fd28 	bl	800755e <xEventGroupSetBits>
 8006b0e:	61f8      	str	r0, [r7, #28]
 8006b10:	e000      	b.n	8006b14 <osEventFlagsSet+0x9c>
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8006b12:	bf00      	nop
  }

  return (rflags);
 8006b14:	69fb      	ldr	r3, [r7, #28]
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3720      	adds	r7, #32
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	bf00      	nop
 8006b20:	200004a4 	.word	0x200004a4
 8006b24:	e000ed04 	.word	0xe000ed04

08006b28 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b088      	sub	sp, #32
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8006b36:	69bb      	ldr	r3, [r7, #24]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d004      	beq.n	8006b46 <osEventFlagsClear+0x1e>
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d003      	beq.n	8006b4e <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 8006b46:	f06f 0303 	mvn.w	r3, #3
 8006b4a:	61fb      	str	r3, [r7, #28]
 8006b4c:	e029      	b.n	8006ba2 <osEventFlagsClear+0x7a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b4e:	f3ef 8305 	mrs	r3, IPSR
 8006b52:	617b      	str	r3, [r7, #20]
  return(result);
 8006b54:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d10f      	bne.n	8006b7a <osEventFlagsClear+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b5a:	f3ef 8310 	mrs	r3, PRIMASK
 8006b5e:	613b      	str	r3, [r7, #16]
  return(result);
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d109      	bne.n	8006b7a <osEventFlagsClear+0x52>
 8006b66:	4b11      	ldr	r3, [pc, #68]	; (8006bac <osEventFlagsClear+0x84>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	2b02      	cmp	r3, #2
 8006b6c:	d114      	bne.n	8006b98 <osEventFlagsClear+0x70>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006b6e:	f3ef 8311 	mrs	r3, BASEPRI
 8006b72:	60fb      	str	r3, [r7, #12]
  return(result);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d00e      	beq.n	8006b98 <osEventFlagsClear+0x70>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8006b7a:	69b8      	ldr	r0, [r7, #24]
 8006b7c:	f000 fccc 	bl	8007518 <xEventGroupGetBitsFromISR>
 8006b80:	61f8      	str	r0, [r7, #28]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8006b82:	6839      	ldr	r1, [r7, #0]
 8006b84:	69b8      	ldr	r0, [r7, #24]
 8006b86:	f000 fcb3 	bl	80074f0 <xEventGroupClearBitsFromISR>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d108      	bne.n	8006ba2 <osEventFlagsClear+0x7a>
      rflags = (uint32_t)osErrorResource;
 8006b90:	f06f 0302 	mvn.w	r3, #2
 8006b94:	61fb      	str	r3, [r7, #28]
    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8006b96:	e004      	b.n	8006ba2 <osEventFlagsClear+0x7a>
    }
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8006b98:	6839      	ldr	r1, [r7, #0]
 8006b9a:	69b8      	ldr	r0, [r7, #24]
 8006b9c:	f000 fc70 	bl	8007480 <xEventGroupClearBits>
 8006ba0:	61f8      	str	r0, [r7, #28]
  }

  return (rflags);
 8006ba2:	69fb      	ldr	r3, [r7, #28]
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3720      	adds	r7, #32
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}
 8006bac:	200004a4 	.word	0x200004a4

08006bb0 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b08e      	sub	sp, #56	; 0x38
 8006bb4:	af02      	add	r7, sp, #8
 8006bb6:	60f8      	str	r0, [r7, #12]
 8006bb8:	60b9      	str	r1, [r7, #8]
 8006bba:	607a      	str	r2, [r7, #4]
 8006bbc:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	623b      	str	r3, [r7, #32]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8006bc2:	6a3b      	ldr	r3, [r7, #32]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d004      	beq.n	8006bd2 <osEventFlagsWait+0x22>
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d003      	beq.n	8006bda <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8006bd2:	f06f 0303 	mvn.w	r3, #3
 8006bd6:	627b      	str	r3, [r7, #36]	; 0x24
 8006bd8:	e059      	b.n	8006c8e <osEventFlagsWait+0xde>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006bda:	f3ef 8305 	mrs	r3, IPSR
 8006bde:	61fb      	str	r3, [r7, #28]
  return(result);
 8006be0:	69fb      	ldr	r3, [r7, #28]
  }
  else if (IS_IRQ()) {
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d10f      	bne.n	8006c06 <osEventFlagsWait+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006be6:	f3ef 8310 	mrs	r3, PRIMASK
 8006bea:	61bb      	str	r3, [r7, #24]
  return(result);
 8006bec:	69bb      	ldr	r3, [r7, #24]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d109      	bne.n	8006c06 <osEventFlagsWait+0x56>
 8006bf2:	4b29      	ldr	r3, [pc, #164]	; (8006c98 <osEventFlagsWait+0xe8>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	2b02      	cmp	r3, #2
 8006bf8:	d109      	bne.n	8006c0e <osEventFlagsWait+0x5e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006bfa:	f3ef 8311 	mrs	r3, BASEPRI
 8006bfe:	617b      	str	r3, [r7, #20]
  return(result);
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d003      	beq.n	8006c0e <osEventFlagsWait+0x5e>
    rflags = (uint32_t)osErrorISR;
 8006c06:	f06f 0305 	mvn.w	r3, #5
 8006c0a:	627b      	str	r3, [r7, #36]	; 0x24
 8006c0c:	e03f      	b.n	8006c8e <osEventFlagsWait+0xde>
  }
  else {
    if (options & osFlagsWaitAll) {
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f003 0301 	and.w	r3, r3, #1
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d002      	beq.n	8006c1e <osEventFlagsWait+0x6e>
      wait_all = pdTRUE;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c1c:	e001      	b.n	8006c22 <osEventFlagsWait+0x72>
    } else {
      wait_all = pdFAIL;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    if (options & osFlagsNoClear) {
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f003 0302 	and.w	r3, r3, #2
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d002      	beq.n	8006c32 <osEventFlagsWait+0x82>
      exit_clr = pdFAIL;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c30:	e001      	b.n	8006c36 <osEventFlagsWait+0x86>
    } else {
      exit_clr = pdTRUE;
 8006c32:	2301      	movs	r3, #1
 8006c34:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	9300      	str	r3, [sp, #0]
 8006c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c3e:	68b9      	ldr	r1, [r7, #8]
 8006c40:	6a38      	ldr	r0, [r7, #32]
 8006c42:	f000 fb4f 	bl	80072e4 <xEventGroupWaitBits>
 8006c46:	6278      	str	r0, [r7, #36]	; 0x24

    if (options & osFlagsWaitAll) {
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f003 0301 	and.w	r3, r3, #1
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d00e      	beq.n	8006c70 <osEventFlagsWait+0xc0>
      if (flags != rflags) {
 8006c52:	68ba      	ldr	r2, [r7, #8]
 8006c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d019      	beq.n	8006c8e <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d003      	beq.n	8006c68 <osEventFlagsWait+0xb8>
          rflags = (uint32_t)osErrorTimeout;
 8006c60:	f06f 0301 	mvn.w	r3, #1
 8006c64:	627b      	str	r3, [r7, #36]	; 0x24
 8006c66:	e012      	b.n	8006c8e <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 8006c68:	f06f 0302 	mvn.w	r3, #2
 8006c6c:	627b      	str	r3, [r7, #36]	; 0x24
 8006c6e:	e00e      	b.n	8006c8e <osEventFlagsWait+0xde>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8006c70:	68ba      	ldr	r2, [r7, #8]
 8006c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c74:	4013      	ands	r3, r2
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d109      	bne.n	8006c8e <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d003      	beq.n	8006c88 <osEventFlagsWait+0xd8>
          rflags = (uint32_t)osErrorTimeout;
 8006c80:	f06f 0301 	mvn.w	r3, #1
 8006c84:	627b      	str	r3, [r7, #36]	; 0x24
 8006c86:	e002      	b.n	8006c8e <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 8006c88:	f06f 0302 	mvn.w	r3, #2
 8006c8c:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }
  }

  return (rflags);
 8006c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3730      	adds	r7, #48	; 0x30
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}
 8006c98:	200004a4 	.word	0x200004a4

08006c9c <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b08a      	sub	sp, #40	; 0x28
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ca8:	f3ef 8305 	mrs	r3, IPSR
 8006cac:	613b      	str	r3, [r7, #16]
  return(result);
 8006cae:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	f040 8085 	bne.w	8006dc0 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cb6:	f3ef 8310 	mrs	r3, PRIMASK
 8006cba:	60fb      	str	r3, [r7, #12]
  return(result);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d17e      	bne.n	8006dc0 <osMutexNew+0x124>
 8006cc2:	4b42      	ldr	r3, [pc, #264]	; (8006dcc <osMutexNew+0x130>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	2b02      	cmp	r3, #2
 8006cc8:	d105      	bne.n	8006cd6 <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006cca:	f3ef 8311 	mrs	r3, BASEPRI
 8006cce:	60bb      	str	r3, [r7, #8]
  return(result);
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d174      	bne.n	8006dc0 <osMutexNew+0x124>
    if (attr != NULL) {
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d003      	beq.n	8006ce4 <osMutexNew+0x48>
      type = attr->attr_bits;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	623b      	str	r3, [r7, #32]
 8006ce2:	e001      	b.n	8006ce8 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8006ce8:	6a3b      	ldr	r3, [r7, #32]
 8006cea:	f003 0301 	and.w	r3, r3, #1
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d002      	beq.n	8006cf8 <osMutexNew+0x5c>
      rmtx = 1U;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	61fb      	str	r3, [r7, #28]
 8006cf6:	e001      	b.n	8006cfc <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8006cfc:	6a3b      	ldr	r3, [r7, #32]
 8006cfe:	f003 0308 	and.w	r3, r3, #8
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d15c      	bne.n	8006dc0 <osMutexNew+0x124>
      mem = -1;
 8006d06:	f04f 33ff 	mov.w	r3, #4294967295
 8006d0a:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d015      	beq.n	8006d3e <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d006      	beq.n	8006d28 <osMutexNew+0x8c>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	68db      	ldr	r3, [r3, #12]
 8006d1e:	2b4f      	cmp	r3, #79	; 0x4f
 8006d20:	d902      	bls.n	8006d28 <osMutexNew+0x8c>
          mem = 1;
 8006d22:	2301      	movs	r3, #1
 8006d24:	61bb      	str	r3, [r7, #24]
 8006d26:	e00c      	b.n	8006d42 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d108      	bne.n	8006d42 <osMutexNew+0xa6>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	68db      	ldr	r3, [r3, #12]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d104      	bne.n	8006d42 <osMutexNew+0xa6>
            mem = 0;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	61bb      	str	r3, [r7, #24]
 8006d3c:	e001      	b.n	8006d42 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8006d42:	69bb      	ldr	r3, [r7, #24]
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d112      	bne.n	8006d6e <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8006d48:	69fb      	ldr	r3, [r7, #28]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d007      	beq.n	8006d5e <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	4619      	mov	r1, r3
 8006d54:	2004      	movs	r0, #4
 8006d56:	f000 feff 	bl	8007b58 <xQueueCreateMutexStatic>
 8006d5a:	6278      	str	r0, [r7, #36]	; 0x24
 8006d5c:	e016      	b.n	8006d8c <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	4619      	mov	r1, r3
 8006d64:	2001      	movs	r0, #1
 8006d66:	f000 fef7 	bl	8007b58 <xQueueCreateMutexStatic>
 8006d6a:	6278      	str	r0, [r7, #36]	; 0x24
 8006d6c:	e00e      	b.n	8006d8c <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8006d6e:	69bb      	ldr	r3, [r7, #24]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d10b      	bne.n	8006d8c <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8006d74:	69fb      	ldr	r3, [r7, #28]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d004      	beq.n	8006d84 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8006d7a:	2004      	movs	r0, #4
 8006d7c:	f000 fed4 	bl	8007b28 <xQueueCreateMutex>
 8006d80:	6278      	str	r0, [r7, #36]	; 0x24
 8006d82:	e003      	b.n	8006d8c <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8006d84:	2001      	movs	r0, #1
 8006d86:	f000 fecf 	bl	8007b28 <xQueueCreateMutex>
 8006d8a:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8006d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d00c      	beq.n	8006dac <osMutexNew+0x110>
        if (attr != NULL) {
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d003      	beq.n	8006da0 <osMutexNew+0x104>
          name = attr->name;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	617b      	str	r3, [r7, #20]
 8006d9e:	e001      	b.n	8006da4 <osMutexNew+0x108>
        } else {
          name = NULL;
 8006da0:	2300      	movs	r3, #0
 8006da2:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8006da4:	6979      	ldr	r1, [r7, #20]
 8006da6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006da8:	f001 fda0 	bl	80088ec <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8006dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d006      	beq.n	8006dc0 <osMutexNew+0x124>
 8006db2:	69fb      	ldr	r3, [r7, #28]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d003      	beq.n	8006dc0 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8006db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dba:	f043 0301 	orr.w	r3, r3, #1
 8006dbe:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8006dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3728      	adds	r7, #40	; 0x28
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	bf00      	nop
 8006dcc:	200004a4 	.word	0x200004a4

08006dd0 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b088      	sub	sp, #32
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f023 0301 	bic.w	r3, r3, #1
 8006de0:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f003 0301 	and.w	r3, r3, #1
 8006de8:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8006dea:	2300      	movs	r3, #0
 8006dec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006dee:	f3ef 8305 	mrs	r3, IPSR
 8006df2:	613b      	str	r3, [r7, #16]
  return(result);
 8006df4:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d10f      	bne.n	8006e1a <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006dfa:	f3ef 8310 	mrs	r3, PRIMASK
 8006dfe:	60fb      	str	r3, [r7, #12]
  return(result);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d109      	bne.n	8006e1a <osMutexAcquire+0x4a>
 8006e06:	4b20      	ldr	r3, [pc, #128]	; (8006e88 <osMutexAcquire+0xb8>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	2b02      	cmp	r3, #2
 8006e0c:	d109      	bne.n	8006e22 <osMutexAcquire+0x52>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006e0e:	f3ef 8311 	mrs	r3, BASEPRI
 8006e12:	60bb      	str	r3, [r7, #8]
  return(result);
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d003      	beq.n	8006e22 <osMutexAcquire+0x52>
    stat = osErrorISR;
 8006e1a:	f06f 0305 	mvn.w	r3, #5
 8006e1e:	61fb      	str	r3, [r7, #28]
 8006e20:	e02c      	b.n	8006e7c <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8006e22:	69bb      	ldr	r3, [r7, #24]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d103      	bne.n	8006e30 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8006e28:	f06f 0303 	mvn.w	r3, #3
 8006e2c:	61fb      	str	r3, [r7, #28]
 8006e2e:	e025      	b.n	8006e7c <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d011      	beq.n	8006e5a <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8006e36:	6839      	ldr	r1, [r7, #0]
 8006e38:	69b8      	ldr	r0, [r7, #24]
 8006e3a:	f000 fedc 	bl	8007bf6 <xQueueTakeMutexRecursive>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d01b      	beq.n	8006e7c <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d003      	beq.n	8006e52 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8006e4a:	f06f 0301 	mvn.w	r3, #1
 8006e4e:	61fb      	str	r3, [r7, #28]
 8006e50:	e014      	b.n	8006e7c <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8006e52:	f06f 0302 	mvn.w	r3, #2
 8006e56:	61fb      	str	r3, [r7, #28]
 8006e58:	e010      	b.n	8006e7c <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8006e5a:	6839      	ldr	r1, [r7, #0]
 8006e5c:	69b8      	ldr	r0, [r7, #24]
 8006e5e:	f001 fa6f 	bl	8008340 <xQueueSemaphoreTake>
 8006e62:	4603      	mov	r3, r0
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d009      	beq.n	8006e7c <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d003      	beq.n	8006e76 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8006e6e:	f06f 0301 	mvn.w	r3, #1
 8006e72:	61fb      	str	r3, [r7, #28]
 8006e74:	e002      	b.n	8006e7c <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8006e76:	f06f 0302 	mvn.w	r3, #2
 8006e7a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006e7c:	69fb      	ldr	r3, [r7, #28]
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3720      	adds	r7, #32
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	bf00      	nop
 8006e88:	200004a4 	.word	0x200004a4

08006e8c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b088      	sub	sp, #32
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f023 0301 	bic.w	r3, r3, #1
 8006e9a:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f003 0301 	and.w	r3, r3, #1
 8006ea2:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ea8:	f3ef 8305 	mrs	r3, IPSR
 8006eac:	613b      	str	r3, [r7, #16]
  return(result);
 8006eae:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d10f      	bne.n	8006ed4 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006eb4:	f3ef 8310 	mrs	r3, PRIMASK
 8006eb8:	60fb      	str	r3, [r7, #12]
  return(result);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d109      	bne.n	8006ed4 <osMutexRelease+0x48>
 8006ec0:	4b19      	ldr	r3, [pc, #100]	; (8006f28 <osMutexRelease+0x9c>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	2b02      	cmp	r3, #2
 8006ec6:	d109      	bne.n	8006edc <osMutexRelease+0x50>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006ec8:	f3ef 8311 	mrs	r3, BASEPRI
 8006ecc:	60bb      	str	r3, [r7, #8]
  return(result);
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d003      	beq.n	8006edc <osMutexRelease+0x50>
    stat = osErrorISR;
 8006ed4:	f06f 0305 	mvn.w	r3, #5
 8006ed8:	61fb      	str	r3, [r7, #28]
 8006eda:	e01f      	b.n	8006f1c <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8006edc:	69bb      	ldr	r3, [r7, #24]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d103      	bne.n	8006eea <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8006ee2:	f06f 0303 	mvn.w	r3, #3
 8006ee6:	61fb      	str	r3, [r7, #28]
 8006ee8:	e018      	b.n	8006f1c <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d009      	beq.n	8006f04 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8006ef0:	69b8      	ldr	r0, [r7, #24]
 8006ef2:	f000 fe4c 	bl	8007b8e <xQueueGiveMutexRecursive>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	d00f      	beq.n	8006f1c <osMutexRelease+0x90>
        stat = osErrorResource;
 8006efc:	f06f 0302 	mvn.w	r3, #2
 8006f00:	61fb      	str	r3, [r7, #28]
 8006f02:	e00b      	b.n	8006f1c <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8006f04:	2300      	movs	r3, #0
 8006f06:	2200      	movs	r2, #0
 8006f08:	2100      	movs	r1, #0
 8006f0a:	69b8      	ldr	r0, [r7, #24]
 8006f0c:	f000 ff14 	bl	8007d38 <xQueueGenericSend>
 8006f10:	4603      	mov	r3, r0
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d002      	beq.n	8006f1c <osMutexRelease+0x90>
        stat = osErrorResource;
 8006f16:	f06f 0302 	mvn.w	r3, #2
 8006f1a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8006f1c:	69fb      	ldr	r3, [r7, #28]
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3720      	adds	r7, #32
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop
 8006f28:	200004a4 	.word	0x200004a4

08006f2c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b08c      	sub	sp, #48	; 0x30
 8006f30:	af02      	add	r7, sp, #8
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	60b9      	str	r1, [r7, #8]
 8006f36:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f3c:	f3ef 8305 	mrs	r3, IPSR
 8006f40:	61bb      	str	r3, [r7, #24]
  return(result);
 8006f42:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	f040 8086 	bne.w	8007056 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f4a:	f3ef 8310 	mrs	r3, PRIMASK
 8006f4e:	617b      	str	r3, [r7, #20]
  return(result);
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d17f      	bne.n	8007056 <osSemaphoreNew+0x12a>
 8006f56:	4b42      	ldr	r3, [pc, #264]	; (8007060 <osSemaphoreNew+0x134>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	2b02      	cmp	r3, #2
 8006f5c:	d105      	bne.n	8006f6a <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006f5e:	f3ef 8311 	mrs	r3, BASEPRI
 8006f62:	613b      	str	r3, [r7, #16]
  return(result);
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d175      	bne.n	8007056 <osSemaphoreNew+0x12a>
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d072      	beq.n	8007056 <osSemaphoreNew+0x12a>
 8006f70:	68ba      	ldr	r2, [r7, #8]
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d86e      	bhi.n	8007056 <osSemaphoreNew+0x12a>
    mem = -1;
 8006f78:	f04f 33ff 	mov.w	r3, #4294967295
 8006f7c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d015      	beq.n	8006fb0 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d006      	beq.n	8006f9a <osSemaphoreNew+0x6e>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	68db      	ldr	r3, [r3, #12]
 8006f90:	2b4f      	cmp	r3, #79	; 0x4f
 8006f92:	d902      	bls.n	8006f9a <osSemaphoreNew+0x6e>
        mem = 1;
 8006f94:	2301      	movs	r3, #1
 8006f96:	623b      	str	r3, [r7, #32]
 8006f98:	e00c      	b.n	8006fb4 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d108      	bne.n	8006fb4 <osSemaphoreNew+0x88>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	68db      	ldr	r3, [r3, #12]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d104      	bne.n	8006fb4 <osSemaphoreNew+0x88>
          mem = 0;
 8006faa:	2300      	movs	r3, #0
 8006fac:	623b      	str	r3, [r7, #32]
 8006fae:	e001      	b.n	8006fb4 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8006fb4:	6a3b      	ldr	r3, [r7, #32]
 8006fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fba:	d04c      	beq.n	8007056 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d128      	bne.n	8007014 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8006fc2:	6a3b      	ldr	r3, [r7, #32]
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d10a      	bne.n	8006fde <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	2203      	movs	r2, #3
 8006fce:	9200      	str	r2, [sp, #0]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	2100      	movs	r1, #0
 8006fd4:	2001      	movs	r0, #1
 8006fd6:	f000 fcb5 	bl	8007944 <xQueueGenericCreateStatic>
 8006fda:	6278      	str	r0, [r7, #36]	; 0x24
 8006fdc:	e005      	b.n	8006fea <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8006fde:	2203      	movs	r2, #3
 8006fe0:	2100      	movs	r1, #0
 8006fe2:	2001      	movs	r0, #1
 8006fe4:	f000 fd25 	bl	8007a32 <xQueueGenericCreate>
 8006fe8:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d022      	beq.n	8007036 <osSemaphoreNew+0x10a>
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d01f      	beq.n	8007036 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	2100      	movs	r1, #0
 8006ffc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006ffe:	f000 fe9b 	bl	8007d38 <xQueueGenericSend>
 8007002:	4603      	mov	r3, r0
 8007004:	2b01      	cmp	r3, #1
 8007006:	d016      	beq.n	8007036 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8007008:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800700a:	f001 fb25 	bl	8008658 <vQueueDelete>
            hSemaphore = NULL;
 800700e:	2300      	movs	r3, #0
 8007010:	627b      	str	r3, [r7, #36]	; 0x24
 8007012:	e010      	b.n	8007036 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8007014:	6a3b      	ldr	r3, [r7, #32]
 8007016:	2b01      	cmp	r3, #1
 8007018:	d108      	bne.n	800702c <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	461a      	mov	r2, r3
 8007020:	68b9      	ldr	r1, [r7, #8]
 8007022:	68f8      	ldr	r0, [r7, #12]
 8007024:	f000 fe1d 	bl	8007c62 <xQueueCreateCountingSemaphoreStatic>
 8007028:	6278      	str	r0, [r7, #36]	; 0x24
 800702a:	e004      	b.n	8007036 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800702c:	68b9      	ldr	r1, [r7, #8]
 800702e:	68f8      	ldr	r0, [r7, #12]
 8007030:	f000 fe4e 	bl	8007cd0 <xQueueCreateCountingSemaphore>
 8007034:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8007036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007038:	2b00      	cmp	r3, #0
 800703a:	d00c      	beq.n	8007056 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d003      	beq.n	800704a <osSemaphoreNew+0x11e>
          name = attr->name;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	61fb      	str	r3, [r7, #28]
 8007048:	e001      	b.n	800704e <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800704a:	2300      	movs	r3, #0
 800704c:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800704e:	69f9      	ldr	r1, [r7, #28]
 8007050:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007052:	f001 fc4b 	bl	80088ec <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8007056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007058:	4618      	mov	r0, r3
 800705a:	3728      	adds	r7, #40	; 0x28
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}
 8007060:	200004a4 	.word	0x200004a4

08007064 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8007064:	b580      	push	{r7, lr}
 8007066:	b088      	sub	sp, #32
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
 800706c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8007072:	2300      	movs	r3, #0
 8007074:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8007076:	69bb      	ldr	r3, [r7, #24]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d103      	bne.n	8007084 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800707c:	f06f 0303 	mvn.w	r3, #3
 8007080:	61fb      	str	r3, [r7, #28]
 8007082:	e04b      	b.n	800711c <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007084:	f3ef 8305 	mrs	r3, IPSR
 8007088:	617b      	str	r3, [r7, #20]
  return(result);
 800708a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800708c:	2b00      	cmp	r3, #0
 800708e:	d10f      	bne.n	80070b0 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007090:	f3ef 8310 	mrs	r3, PRIMASK
 8007094:	613b      	str	r3, [r7, #16]
  return(result);
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d109      	bne.n	80070b0 <osSemaphoreAcquire+0x4c>
 800709c:	4b22      	ldr	r3, [pc, #136]	; (8007128 <osSemaphoreAcquire+0xc4>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	2b02      	cmp	r3, #2
 80070a2:	d128      	bne.n	80070f6 <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80070a4:	f3ef 8311 	mrs	r3, BASEPRI
 80070a8:	60fb      	str	r3, [r7, #12]
  return(result);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d022      	beq.n	80070f6 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d003      	beq.n	80070be <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 80070b6:	f06f 0303 	mvn.w	r3, #3
 80070ba:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80070bc:	e02d      	b.n	800711a <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 80070be:	2300      	movs	r3, #0
 80070c0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80070c2:	f107 0308 	add.w	r3, r7, #8
 80070c6:	461a      	mov	r2, r3
 80070c8:	2100      	movs	r1, #0
 80070ca:	69b8      	ldr	r0, [r7, #24]
 80070cc:	f001 fa44 	bl	8008558 <xQueueReceiveFromISR>
 80070d0:	4603      	mov	r3, r0
 80070d2:	2b01      	cmp	r3, #1
 80070d4:	d003      	beq.n	80070de <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 80070d6:	f06f 0302 	mvn.w	r3, #2
 80070da:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80070dc:	e01d      	b.n	800711a <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d01a      	beq.n	800711a <osSemaphoreAcquire+0xb6>
 80070e4:	4b11      	ldr	r3, [pc, #68]	; (800712c <osSemaphoreAcquire+0xc8>)
 80070e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070ea:	601a      	str	r2, [r3, #0]
 80070ec:	f3bf 8f4f 	dsb	sy
 80070f0:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 80070f4:	e011      	b.n	800711a <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80070f6:	6839      	ldr	r1, [r7, #0]
 80070f8:	69b8      	ldr	r0, [r7, #24]
 80070fa:	f001 f921 	bl	8008340 <xQueueSemaphoreTake>
 80070fe:	4603      	mov	r3, r0
 8007100:	2b01      	cmp	r3, #1
 8007102:	d00b      	beq.n	800711c <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d003      	beq.n	8007112 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800710a:	f06f 0301 	mvn.w	r3, #1
 800710e:	61fb      	str	r3, [r7, #28]
 8007110:	e004      	b.n	800711c <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8007112:	f06f 0302 	mvn.w	r3, #2
 8007116:	61fb      	str	r3, [r7, #28]
 8007118:	e000      	b.n	800711c <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800711a:	bf00      	nop
      }
    }
  }

  return (stat);
 800711c:	69fb      	ldr	r3, [r7, #28]
}
 800711e:	4618      	mov	r0, r3
 8007120:	3720      	adds	r7, #32
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
 8007126:	bf00      	nop
 8007128:	200004a4 	.word	0x200004a4
 800712c:	e000ed04 	.word	0xe000ed04

08007130 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8007130:	b580      	push	{r7, lr}
 8007132:	b088      	sub	sp, #32
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800713c:	2300      	movs	r3, #0
 800713e:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8007140:	69bb      	ldr	r3, [r7, #24]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d103      	bne.n	800714e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8007146:	f06f 0303 	mvn.w	r3, #3
 800714a:	61fb      	str	r3, [r7, #28]
 800714c:	e03e      	b.n	80071cc <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800714e:	f3ef 8305 	mrs	r3, IPSR
 8007152:	617b      	str	r3, [r7, #20]
  return(result);
 8007154:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8007156:	2b00      	cmp	r3, #0
 8007158:	d10f      	bne.n	800717a <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800715a:	f3ef 8310 	mrs	r3, PRIMASK
 800715e:	613b      	str	r3, [r7, #16]
  return(result);
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d109      	bne.n	800717a <osSemaphoreRelease+0x4a>
 8007166:	4b1c      	ldr	r3, [pc, #112]	; (80071d8 <osSemaphoreRelease+0xa8>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	2b02      	cmp	r3, #2
 800716c:	d120      	bne.n	80071b0 <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800716e:	f3ef 8311 	mrs	r3, BASEPRI
 8007172:	60fb      	str	r3, [r7, #12]
  return(result);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d01a      	beq.n	80071b0 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800717a:	2300      	movs	r3, #0
 800717c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800717e:	f107 0308 	add.w	r3, r7, #8
 8007182:	4619      	mov	r1, r3
 8007184:	69b8      	ldr	r0, [r7, #24]
 8007186:	f000 ff6d 	bl	8008064 <xQueueGiveFromISR>
 800718a:	4603      	mov	r3, r0
 800718c:	2b01      	cmp	r3, #1
 800718e:	d003      	beq.n	8007198 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8007190:	f06f 0302 	mvn.w	r3, #2
 8007194:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007196:	e018      	b.n	80071ca <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d015      	beq.n	80071ca <osSemaphoreRelease+0x9a>
 800719e:	4b0f      	ldr	r3, [pc, #60]	; (80071dc <osSemaphoreRelease+0xac>)
 80071a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071a4:	601a      	str	r2, [r3, #0]
 80071a6:	f3bf 8f4f 	dsb	sy
 80071aa:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80071ae:	e00c      	b.n	80071ca <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80071b0:	2300      	movs	r3, #0
 80071b2:	2200      	movs	r2, #0
 80071b4:	2100      	movs	r1, #0
 80071b6:	69b8      	ldr	r0, [r7, #24]
 80071b8:	f000 fdbe 	bl	8007d38 <xQueueGenericSend>
 80071bc:	4603      	mov	r3, r0
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d004      	beq.n	80071cc <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 80071c2:	f06f 0302 	mvn.w	r3, #2
 80071c6:	61fb      	str	r3, [r7, #28]
 80071c8:	e000      	b.n	80071cc <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80071ca:	bf00      	nop
    }
  }

  return (stat);
 80071cc:	69fb      	ldr	r3, [r7, #28]
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3720      	adds	r7, #32
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
 80071d6:	bf00      	nop
 80071d8:	200004a4 	.word	0x200004a4
 80071dc:	e000ed04 	.word	0xe000ed04

080071e0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80071e0:	b480      	push	{r7}
 80071e2:	b085      	sub	sp, #20
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	60b9      	str	r1, [r7, #8]
 80071ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	4a06      	ldr	r2, [pc, #24]	; (8007208 <vApplicationGetIdleTaskMemory+0x28>)
 80071f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	4a05      	ldr	r2, [pc, #20]	; (800720c <vApplicationGetIdleTaskMemory+0x2c>)
 80071f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2240      	movs	r2, #64	; 0x40
 80071fc:	601a      	str	r2, [r3, #0]
}
 80071fe:	bf00      	nop
 8007200:	3714      	adds	r7, #20
 8007202:	46bd      	mov	sp, r7
 8007204:	bc80      	pop	{r7}
 8007206:	4770      	bx	lr
 8007208:	200004a8 	.word	0x200004a8
 800720c:	2000054c 	.word	0x2000054c

08007210 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007210:	b480      	push	{r7}
 8007212:	b085      	sub	sp, #20
 8007214:	af00      	add	r7, sp, #0
 8007216:	60f8      	str	r0, [r7, #12]
 8007218:	60b9      	str	r1, [r7, #8]
 800721a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	4a06      	ldr	r2, [pc, #24]	; (8007238 <vApplicationGetTimerTaskMemory+0x28>)
 8007220:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	4a05      	ldr	r2, [pc, #20]	; (800723c <vApplicationGetTimerTaskMemory+0x2c>)
 8007226:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2240      	movs	r2, #64	; 0x40
 800722c:	601a      	str	r2, [r3, #0]
}
 800722e:	bf00      	nop
 8007230:	3714      	adds	r7, #20
 8007232:	46bd      	mov	sp, r7
 8007234:	bc80      	pop	{r7}
 8007236:	4770      	bx	lr
 8007238:	2000064c 	.word	0x2000064c
 800723c:	200006f0 	.word	0x200006f0

08007240 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8007240:	b580      	push	{r7, lr}
 8007242:	b086      	sub	sp, #24
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d10a      	bne.n	8007264 <xEventGroupCreateStatic+0x24>
	__asm volatile
 800724e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007252:	f383 8811 	msr	BASEPRI, r3
 8007256:	f3bf 8f6f 	isb	sy
 800725a:	f3bf 8f4f 	dsb	sy
 800725e:	613b      	str	r3, [r7, #16]
}
 8007260:	bf00      	nop
 8007262:	e7fe      	b.n	8007262 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8007264:	2320      	movs	r3, #32
 8007266:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	2b20      	cmp	r3, #32
 800726c:	d00a      	beq.n	8007284 <xEventGroupCreateStatic+0x44>
	__asm volatile
 800726e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007272:	f383 8811 	msr	BASEPRI, r3
 8007276:	f3bf 8f6f 	isb	sy
 800727a:	f3bf 8f4f 	dsb	sy
 800727e:	60fb      	str	r3, [r7, #12]
}
 8007280:	bf00      	nop
 8007282:	e7fe      	b.n	8007282 <xEventGroupCreateStatic+0x42>
		}
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 EventGroup_t and StaticEventGroup_t are guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d00a      	beq.n	80072a4 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	2200      	movs	r2, #0
 8007292:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	3304      	adds	r3, #4
 8007298:	4618      	mov	r0, r3
 800729a:	f000 fa3b 	bl	8007714 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	2201      	movs	r2, #1
 80072a2:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 80072a4:	697b      	ldr	r3, [r7, #20]
	}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3718      	adds	r7, #24
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}

080072ae <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80072ae:	b580      	push	{r7, lr}
 80072b0:	b082      	sub	sp, #8
 80072b2:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 80072b4:	2020      	movs	r0, #32
 80072b6:	f003 fb79 	bl	800a9ac <pvPortMalloc>
 80072ba:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d00a      	beq.n	80072d8 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2200      	movs	r2, #0
 80072c6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	3304      	adds	r3, #4
 80072cc:	4618      	mov	r0, r3
 80072ce:	f000 fa21 	bl	8007714 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2200      	movs	r2, #0
 80072d6:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 80072d8:	687b      	ldr	r3, [r7, #4]
	}
 80072da:	4618      	mov	r0, r3
 80072dc:	3708      	adds	r7, #8
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
	...

080072e4 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b090      	sub	sp, #64	; 0x40
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	60b9      	str	r1, [r7, #8]
 80072ee:	607a      	str	r2, [r7, #4]
 80072f0:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80072f6:	2300      	movs	r3, #0
 80072f8:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80072fa:	2300      	movs	r3, #0
 80072fc:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d10a      	bne.n	800731a <xEventGroupWaitBits+0x36>
	__asm volatile
 8007304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007308:	f383 8811 	msr	BASEPRI, r3
 800730c:	f3bf 8f6f 	isb	sy
 8007310:	f3bf 8f4f 	dsb	sy
 8007314:	623b      	str	r3, [r7, #32]
}
 8007316:	bf00      	nop
 8007318:	e7fe      	b.n	8007318 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007320:	2b00      	cmp	r3, #0
 8007322:	d00a      	beq.n	800733a <xEventGroupWaitBits+0x56>
	__asm volatile
 8007324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007328:	f383 8811 	msr	BASEPRI, r3
 800732c:	f3bf 8f6f 	isb	sy
 8007330:	f3bf 8f4f 	dsb	sy
 8007334:	61fb      	str	r3, [r7, #28]
}
 8007336:	bf00      	nop
 8007338:	e7fe      	b.n	8007338 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d10a      	bne.n	8007356 <xEventGroupWaitBits+0x72>
	__asm volatile
 8007340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007344:	f383 8811 	msr	BASEPRI, r3
 8007348:	f3bf 8f6f 	isb	sy
 800734c:	f3bf 8f4f 	dsb	sy
 8007350:	61bb      	str	r3, [r7, #24]
}
 8007352:	bf00      	nop
 8007354:	e7fe      	b.n	8007354 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007356:	f002 fc03 	bl	8009b60 <xTaskGetSchedulerState>
 800735a:	4603      	mov	r3, r0
 800735c:	2b00      	cmp	r3, #0
 800735e:	d102      	bne.n	8007366 <xEventGroupWaitBits+0x82>
 8007360:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007362:	2b00      	cmp	r3, #0
 8007364:	d101      	bne.n	800736a <xEventGroupWaitBits+0x86>
 8007366:	2301      	movs	r3, #1
 8007368:	e000      	b.n	800736c <xEventGroupWaitBits+0x88>
 800736a:	2300      	movs	r3, #0
 800736c:	2b00      	cmp	r3, #0
 800736e:	d10a      	bne.n	8007386 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8007370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007374:	f383 8811 	msr	BASEPRI, r3
 8007378:	f3bf 8f6f 	isb	sy
 800737c:	f3bf 8f4f 	dsb	sy
 8007380:	617b      	str	r3, [r7, #20]
}
 8007382:	bf00      	nop
 8007384:	e7fe      	b.n	8007384 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8007386:	f001 ff3b 	bl	8009200 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800738a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8007390:	683a      	ldr	r2, [r7, #0]
 8007392:	68b9      	ldr	r1, [r7, #8]
 8007394:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007396:	f000 f987 	bl	80076a8 <prvTestWaitCondition>
 800739a:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 800739c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d00e      	beq.n	80073c0 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80073a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a4:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80073a6:	2300      	movs	r3, #0
 80073a8:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d028      	beq.n	8007402 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80073b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	43db      	mvns	r3, r3
 80073b8:	401a      	ands	r2, r3
 80073ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073bc:	601a      	str	r2, [r3, #0]
 80073be:	e020      	b.n	8007402 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80073c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d104      	bne.n	80073d0 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80073c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 80073ca:	2301      	movs	r3, #1
 80073cc:	633b      	str	r3, [r7, #48]	; 0x30
 80073ce:	e018      	b.n	8007402 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d003      	beq.n	80073de <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80073d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80073dc:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d003      	beq.n	80073ec <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80073e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80073ea:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80073ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073ee:	1d18      	adds	r0, r3, #4
 80073f0:	68ba      	ldr	r2, [r7, #8]
 80073f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f4:	4313      	orrs	r3, r2
 80073f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073f8:	4619      	mov	r1, r3
 80073fa:	f002 f913 	bl	8009624 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80073fe:	2300      	movs	r3, #0
 8007400:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8007402:	f001 ff0b 	bl	800921c <xTaskResumeAll>
 8007406:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8007408:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800740a:	2b00      	cmp	r3, #0
 800740c:	d031      	beq.n	8007472 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800740e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007410:	2b00      	cmp	r3, #0
 8007412:	d107      	bne.n	8007424 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8007414:	4b19      	ldr	r3, [pc, #100]	; (800747c <xEventGroupWaitBits+0x198>)
 8007416:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800741a:	601a      	str	r2, [r3, #0]
 800741c:	f3bf 8f4f 	dsb	sy
 8007420:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8007424:	f002 fd1c 	bl	8009e60 <uxTaskResetEventItemValue>
 8007428:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800742a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800742c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007430:	2b00      	cmp	r3, #0
 8007432:	d11a      	bne.n	800746a <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8007434:	f003 f9ba 	bl	800a7ac <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8007438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800743e:	683a      	ldr	r2, [r7, #0]
 8007440:	68b9      	ldr	r1, [r7, #8]
 8007442:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007444:	f000 f930 	bl	80076a8 <prvTestWaitCondition>
 8007448:	4603      	mov	r3, r0
 800744a:	2b00      	cmp	r3, #0
 800744c:	d009      	beq.n	8007462 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d006      	beq.n	8007462 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8007454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007456:	681a      	ldr	r2, [r3, #0]
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	43db      	mvns	r3, r3
 800745c:	401a      	ands	r2, r3
 800745e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007460:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8007462:	2301      	movs	r3, #1
 8007464:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8007466:	f003 f9d1 	bl	800a80c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800746a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800746c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007470:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8007472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007474:	4618      	mov	r0, r3
 8007476:	3740      	adds	r7, #64	; 0x40
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}
 800747c:	e000ed04 	.word	0xe000ed04

08007480 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b086      	sub	sp, #24
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d10a      	bne.n	80074aa <xEventGroupClearBits+0x2a>
	__asm volatile
 8007494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007498:	f383 8811 	msr	BASEPRI, r3
 800749c:	f3bf 8f6f 	isb	sy
 80074a0:	f3bf 8f4f 	dsb	sy
 80074a4:	60fb      	str	r3, [r7, #12]
}
 80074a6:	bf00      	nop
 80074a8:	e7fe      	b.n	80074a8 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d00a      	beq.n	80074ca <xEventGroupClearBits+0x4a>
	__asm volatile
 80074b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b8:	f383 8811 	msr	BASEPRI, r3
 80074bc:	f3bf 8f6f 	isb	sy
 80074c0:	f3bf 8f4f 	dsb	sy
 80074c4:	60bb      	str	r3, [r7, #8]
}
 80074c6:	bf00      	nop
 80074c8:	e7fe      	b.n	80074c8 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 80074ca:	f003 f96f 	bl	800a7ac <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	681a      	ldr	r2, [r3, #0]
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	43db      	mvns	r3, r3
 80074dc:	401a      	ands	r2, r3
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 80074e2:	f003 f993 	bl	800a80c <vPortExitCritical>

	return uxReturn;
 80074e6:	693b      	ldr	r3, [r7, #16]
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3718      	adds	r7, #24
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b084      	sub	sp, #16
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL );
 80074fa:	2300      	movs	r3, #0
 80074fc:	683a      	ldr	r2, [r7, #0]
 80074fe:	6879      	ldr	r1, [r7, #4]
 8007500:	4804      	ldr	r0, [pc, #16]	; (8007514 <xEventGroupClearBitsFromISR+0x24>)
 8007502:	f003 f83f 	bl	800a584 <xTimerPendFunctionCallFromISR>
 8007506:	60f8      	str	r0, [r7, #12]

		return xReturn;
 8007508:	68fb      	ldr	r3, [r7, #12]
	}
 800750a:	4618      	mov	r0, r3
 800750c:	3710      	adds	r7, #16
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
 8007512:	bf00      	nop
 8007514:	0800768f 	.word	0x0800768f

08007518 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8007518:	b480      	push	{r7}
 800751a:	b089      	sub	sp, #36	; 0x24
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	61fb      	str	r3, [r7, #28]
	__asm volatile
 8007524:	f3ef 8211 	mrs	r2, BASEPRI
 8007528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800752c:	f383 8811 	msr	BASEPRI, r3
 8007530:	f3bf 8f6f 	isb	sy
 8007534:	f3bf 8f4f 	dsb	sy
 8007538:	60fa      	str	r2, [r7, #12]
 800753a:	60bb      	str	r3, [r7, #8]
	return ulOriginalBASEPRI;
 800753c:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800753e:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8007540:	69fb      	ldr	r3, [r7, #28]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	617b      	str	r3, [r7, #20]
 8007546:	69bb      	ldr	r3, [r7, #24]
 8007548:	613b      	str	r3, [r7, #16]
	__asm volatile
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	f383 8811 	msr	BASEPRI, r3
}
 8007550:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 8007552:	697b      	ldr	r3, [r7, #20]
}
 8007554:	4618      	mov	r0, r3
 8007556:	3724      	adds	r7, #36	; 0x24
 8007558:	46bd      	mov	sp, r7
 800755a:	bc80      	pop	{r7}
 800755c:	4770      	bx	lr

0800755e <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800755e:	b580      	push	{r7, lr}
 8007560:	b08e      	sub	sp, #56	; 0x38
 8007562:	af00      	add	r7, sp, #0
 8007564:	6078      	str	r0, [r7, #4]
 8007566:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8007568:	2300      	movs	r3, #0
 800756a:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8007570:	2300      	movs	r3, #0
 8007572:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d10a      	bne.n	8007590 <xEventGroupSetBits+0x32>
	__asm volatile
 800757a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800757e:	f383 8811 	msr	BASEPRI, r3
 8007582:	f3bf 8f6f 	isb	sy
 8007586:	f3bf 8f4f 	dsb	sy
 800758a:	613b      	str	r3, [r7, #16]
}
 800758c:	bf00      	nop
 800758e:	e7fe      	b.n	800758e <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007596:	2b00      	cmp	r3, #0
 8007598:	d00a      	beq.n	80075b0 <xEventGroupSetBits+0x52>
	__asm volatile
 800759a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800759e:	f383 8811 	msr	BASEPRI, r3
 80075a2:	f3bf 8f6f 	isb	sy
 80075a6:	f3bf 8f4f 	dsb	sy
 80075aa:	60fb      	str	r3, [r7, #12]
}
 80075ac:	bf00      	nop
 80075ae:	e7fe      	b.n	80075ae <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80075b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075b2:	3304      	adds	r3, #4
 80075b4:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80075b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b8:	3308      	adds	r3, #8
 80075ba:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80075bc:	f001 fe20 	bl	8009200 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80075c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c2:	68db      	ldr	r3, [r3, #12]
 80075c4:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80075c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c8:	681a      	ldr	r2, [r3, #0]
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	431a      	orrs	r2, r3
 80075ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d0:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80075d2:	e03c      	b.n	800764e <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80075d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80075da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80075e0:	2300      	movs	r3, #0
 80075e2:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80075e4:	69bb      	ldr	r3, [r7, #24]
 80075e6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80075ea:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80075ec:	69bb      	ldr	r3, [r7, #24]
 80075ee:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80075f2:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d108      	bne.n	8007610 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80075fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	69bb      	ldr	r3, [r7, #24]
 8007604:	4013      	ands	r3, r2
 8007606:	2b00      	cmp	r3, #0
 8007608:	d00b      	beq.n	8007622 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 800760a:	2301      	movs	r3, #1
 800760c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800760e:	e008      	b.n	8007622 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8007610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007612:	681a      	ldr	r2, [r3, #0]
 8007614:	69bb      	ldr	r3, [r7, #24]
 8007616:	4013      	ands	r3, r2
 8007618:	69ba      	ldr	r2, [r7, #24]
 800761a:	429a      	cmp	r2, r3
 800761c:	d101      	bne.n	8007622 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800761e:	2301      	movs	r3, #1
 8007620:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8007622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007624:	2b00      	cmp	r3, #0
 8007626:	d010      	beq.n	800764a <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800762e:	2b00      	cmp	r3, #0
 8007630:	d003      	beq.n	800763a <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8007632:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007634:	69bb      	ldr	r3, [r7, #24]
 8007636:	4313      	orrs	r3, r2
 8007638:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800763a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007642:	4619      	mov	r1, r3
 8007644:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007646:	f002 f8b9 	bl	80097bc <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800764a:	69fb      	ldr	r3, [r7, #28]
 800764c:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 800764e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007650:	6a3b      	ldr	r3, [r7, #32]
 8007652:	429a      	cmp	r2, r3
 8007654:	d1be      	bne.n	80075d4 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8007656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007658:	681a      	ldr	r2, [r3, #0]
 800765a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800765c:	43db      	mvns	r3, r3
 800765e:	401a      	ands	r2, r3
 8007660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007662:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8007664:	f001 fdda 	bl	800921c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8007668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800766a:	681b      	ldr	r3, [r3, #0]
}
 800766c:	4618      	mov	r0, r3
 800766e:	3738      	adds	r7, #56	; 0x38
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}

08007674 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b082      	sub	sp, #8
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
 800767c:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 800767e:	6839      	ldr	r1, [r7, #0]
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f7ff ff6c 	bl	800755e <xEventGroupSetBits>
}
 8007686:	bf00      	nop
 8007688:	3708      	adds	r7, #8
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}

0800768e <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 800768e:	b580      	push	{r7, lr}
 8007690:	b082      	sub	sp, #8
 8007692:	af00      	add	r7, sp, #0
 8007694:	6078      	str	r0, [r7, #4]
 8007696:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
 8007698:	6839      	ldr	r1, [r7, #0]
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f7ff fef0 	bl	8007480 <xEventGroupClearBits>
}
 80076a0:	bf00      	nop
 80076a2:	3708      	adds	r7, #8
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}

080076a8 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80076a8:	b480      	push	{r7}
 80076aa:	b087      	sub	sp, #28
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	60f8      	str	r0, [r7, #12]
 80076b0:	60b9      	str	r1, [r7, #8]
 80076b2:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80076b4:	2300      	movs	r3, #0
 80076b6:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d107      	bne.n	80076ce <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80076be:	68fa      	ldr	r2, [r7, #12]
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	4013      	ands	r3, r2
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d00a      	beq.n	80076de <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80076c8:	2301      	movs	r3, #1
 80076ca:	617b      	str	r3, [r7, #20]
 80076cc:	e007      	b.n	80076de <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80076ce:	68fa      	ldr	r2, [r7, #12]
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	4013      	ands	r3, r2
 80076d4:	68ba      	ldr	r2, [r7, #8]
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d101      	bne.n	80076de <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80076da:	2301      	movs	r3, #1
 80076dc:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80076de:	697b      	ldr	r3, [r7, #20]
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	371c      	adds	r7, #28
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bc80      	pop	{r7}
 80076e8:	4770      	bx	lr
	...

080076ec <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b086      	sub	sp, #24
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	60f8      	str	r0, [r7, #12]
 80076f4:	60b9      	str	r1, [r7, #8]
 80076f6:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	68ba      	ldr	r2, [r7, #8]
 80076fc:	68f9      	ldr	r1, [r7, #12]
 80076fe:	4804      	ldr	r0, [pc, #16]	; (8007710 <xEventGroupSetBitsFromISR+0x24>)
 8007700:	f002 ff40 	bl	800a584 <xTimerPendFunctionCallFromISR>
 8007704:	6178      	str	r0, [r7, #20]

		return xReturn;
 8007706:	697b      	ldr	r3, [r7, #20]
	}
 8007708:	4618      	mov	r0, r3
 800770a:	3718      	adds	r7, #24
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}
 8007710:	08007675 	.word	0x08007675

08007714 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007714:	b480      	push	{r7}
 8007716:	b083      	sub	sp, #12
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f103 0208 	add.w	r2, r3, #8
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f04f 32ff 	mov.w	r2, #4294967295
 800772c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f103 0208 	add.w	r2, r3, #8
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f103 0208 	add.w	r2, r3, #8
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2200      	movs	r2, #0
 8007746:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007748:	bf00      	nop
 800774a:	370c      	adds	r7, #12
 800774c:	46bd      	mov	sp, r7
 800774e:	bc80      	pop	{r7}
 8007750:	4770      	bx	lr

08007752 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007752:	b480      	push	{r7}
 8007754:	b083      	sub	sp, #12
 8007756:	af00      	add	r7, sp, #0
 8007758:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2200      	movs	r2, #0
 800775e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007760:	bf00      	nop
 8007762:	370c      	adds	r7, #12
 8007764:	46bd      	mov	sp, r7
 8007766:	bc80      	pop	{r7}
 8007768:	4770      	bx	lr

0800776a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800776a:	b480      	push	{r7}
 800776c:	b085      	sub	sp, #20
 800776e:	af00      	add	r7, sp, #0
 8007770:	6078      	str	r0, [r7, #4]
 8007772:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	68fa      	ldr	r2, [r7, #12]
 800777e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	689a      	ldr	r2, [r3, #8]
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	683a      	ldr	r2, [r7, #0]
 800778e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	683a      	ldr	r2, [r7, #0]
 8007794:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	687a      	ldr	r2, [r7, #4]
 800779a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	1c5a      	adds	r2, r3, #1
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	601a      	str	r2, [r3, #0]
}
 80077a6:	bf00      	nop
 80077a8:	3714      	adds	r7, #20
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bc80      	pop	{r7}
 80077ae:	4770      	bx	lr

080077b0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80077b0:	b480      	push	{r7}
 80077b2:	b085      	sub	sp, #20
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077c6:	d103      	bne.n	80077d0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	691b      	ldr	r3, [r3, #16]
 80077cc:	60fb      	str	r3, [r7, #12]
 80077ce:	e00c      	b.n	80077ea <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	3308      	adds	r3, #8
 80077d4:	60fb      	str	r3, [r7, #12]
 80077d6:	e002      	b.n	80077de <vListInsert+0x2e>
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	60fb      	str	r3, [r7, #12]
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	68ba      	ldr	r2, [r7, #8]
 80077e6:	429a      	cmp	r2, r3
 80077e8:	d2f6      	bcs.n	80077d8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	685a      	ldr	r2, [r3, #4]
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	683a      	ldr	r2, [r7, #0]
 80077f8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	68fa      	ldr	r2, [r7, #12]
 80077fe:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	683a      	ldr	r2, [r7, #0]
 8007804:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	1c5a      	adds	r2, r3, #1
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	601a      	str	r2, [r3, #0]
}
 8007816:	bf00      	nop
 8007818:	3714      	adds	r7, #20
 800781a:	46bd      	mov	sp, r7
 800781c:	bc80      	pop	{r7}
 800781e:	4770      	bx	lr

08007820 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007820:	b480      	push	{r7}
 8007822:	b085      	sub	sp, #20
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	691b      	ldr	r3, [r3, #16]
 800782c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	687a      	ldr	r2, [r7, #4]
 8007834:	6892      	ldr	r2, [r2, #8]
 8007836:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	687a      	ldr	r2, [r7, #4]
 800783e:	6852      	ldr	r2, [r2, #4]
 8007840:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	687a      	ldr	r2, [r7, #4]
 8007848:	429a      	cmp	r2, r3
 800784a:	d103      	bne.n	8007854 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	689a      	ldr	r2, [r3, #8]
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2200      	movs	r2, #0
 8007858:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	1e5a      	subs	r2, r3, #1
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
}
 8007868:	4618      	mov	r0, r3
 800786a:	3714      	adds	r7, #20
 800786c:	46bd      	mov	sp, r7
 800786e:	bc80      	pop	{r7}
 8007870:	4770      	bx	lr
	...

08007874 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b084      	sub	sp, #16
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d10a      	bne.n	800789e <xQueueGenericReset+0x2a>
	__asm volatile
 8007888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800788c:	f383 8811 	msr	BASEPRI, r3
 8007890:	f3bf 8f6f 	isb	sy
 8007894:	f3bf 8f4f 	dsb	sy
 8007898:	60bb      	str	r3, [r7, #8]
}
 800789a:	bf00      	nop
 800789c:	e7fe      	b.n	800789c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800789e:	f002 ff85 	bl	800a7ac <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681a      	ldr	r2, [r3, #0]
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078aa:	68f9      	ldr	r1, [r7, #12]
 80078ac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80078ae:	fb01 f303 	mul.w	r3, r1, r3
 80078b2:	441a      	add	r2, r3
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2200      	movs	r2, #0
 80078bc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681a      	ldr	r2, [r3, #0]
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078ce:	3b01      	subs	r3, #1
 80078d0:	68f9      	ldr	r1, [r7, #12]
 80078d2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80078d4:	fb01 f303 	mul.w	r3, r1, r3
 80078d8:	441a      	add	r2, r3
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	22ff      	movs	r2, #255	; 0xff
 80078e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	22ff      	movs	r2, #255	; 0xff
 80078ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d114      	bne.n	800791e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	691b      	ldr	r3, [r3, #16]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d01a      	beq.n	8007932 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	3310      	adds	r3, #16
 8007900:	4618      	mov	r0, r3
 8007902:	f001 fef7 	bl	80096f4 <xTaskRemoveFromEventList>
 8007906:	4603      	mov	r3, r0
 8007908:	2b00      	cmp	r3, #0
 800790a:	d012      	beq.n	8007932 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800790c:	4b0c      	ldr	r3, [pc, #48]	; (8007940 <xQueueGenericReset+0xcc>)
 800790e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007912:	601a      	str	r2, [r3, #0]
 8007914:	f3bf 8f4f 	dsb	sy
 8007918:	f3bf 8f6f 	isb	sy
 800791c:	e009      	b.n	8007932 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	3310      	adds	r3, #16
 8007922:	4618      	mov	r0, r3
 8007924:	f7ff fef6 	bl	8007714 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	3324      	adds	r3, #36	; 0x24
 800792c:	4618      	mov	r0, r3
 800792e:	f7ff fef1 	bl	8007714 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007932:	f002 ff6b 	bl	800a80c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007936:	2301      	movs	r3, #1
}
 8007938:	4618      	mov	r0, r3
 800793a:	3710      	adds	r7, #16
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}
 8007940:	e000ed04 	.word	0xe000ed04

08007944 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007944:	b580      	push	{r7, lr}
 8007946:	b08e      	sub	sp, #56	; 0x38
 8007948:	af02      	add	r7, sp, #8
 800794a:	60f8      	str	r0, [r7, #12]
 800794c:	60b9      	str	r1, [r7, #8]
 800794e:	607a      	str	r2, [r7, #4]
 8007950:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d10a      	bne.n	800796e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800795c:	f383 8811 	msr	BASEPRI, r3
 8007960:	f3bf 8f6f 	isb	sy
 8007964:	f3bf 8f4f 	dsb	sy
 8007968:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800796a:	bf00      	nop
 800796c:	e7fe      	b.n	800796c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d10a      	bne.n	800798a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007978:	f383 8811 	msr	BASEPRI, r3
 800797c:	f3bf 8f6f 	isb	sy
 8007980:	f3bf 8f4f 	dsb	sy
 8007984:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007986:	bf00      	nop
 8007988:	e7fe      	b.n	8007988 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d002      	beq.n	8007996 <xQueueGenericCreateStatic+0x52>
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d001      	beq.n	800799a <xQueueGenericCreateStatic+0x56>
 8007996:	2301      	movs	r3, #1
 8007998:	e000      	b.n	800799c <xQueueGenericCreateStatic+0x58>
 800799a:	2300      	movs	r3, #0
 800799c:	2b00      	cmp	r3, #0
 800799e:	d10a      	bne.n	80079b6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80079a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a4:	f383 8811 	msr	BASEPRI, r3
 80079a8:	f3bf 8f6f 	isb	sy
 80079ac:	f3bf 8f4f 	dsb	sy
 80079b0:	623b      	str	r3, [r7, #32]
}
 80079b2:	bf00      	nop
 80079b4:	e7fe      	b.n	80079b4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d102      	bne.n	80079c2 <xQueueGenericCreateStatic+0x7e>
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d101      	bne.n	80079c6 <xQueueGenericCreateStatic+0x82>
 80079c2:	2301      	movs	r3, #1
 80079c4:	e000      	b.n	80079c8 <xQueueGenericCreateStatic+0x84>
 80079c6:	2300      	movs	r3, #0
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d10a      	bne.n	80079e2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80079cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d0:	f383 8811 	msr	BASEPRI, r3
 80079d4:	f3bf 8f6f 	isb	sy
 80079d8:	f3bf 8f4f 	dsb	sy
 80079dc:	61fb      	str	r3, [r7, #28]
}
 80079de:	bf00      	nop
 80079e0:	e7fe      	b.n	80079e0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80079e2:	2350      	movs	r3, #80	; 0x50
 80079e4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	2b50      	cmp	r3, #80	; 0x50
 80079ea:	d00a      	beq.n	8007a02 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80079ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f0:	f383 8811 	msr	BASEPRI, r3
 80079f4:	f3bf 8f6f 	isb	sy
 80079f8:	f3bf 8f4f 	dsb	sy
 80079fc:	61bb      	str	r3, [r7, #24]
}
 80079fe:	bf00      	nop
 8007a00:	e7fe      	b.n	8007a00 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d00d      	beq.n	8007a28 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a0e:	2201      	movs	r2, #1
 8007a10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007a14:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a1a:	9300      	str	r3, [sp, #0]
 8007a1c:	4613      	mov	r3, r2
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	68b9      	ldr	r1, [r7, #8]
 8007a22:	68f8      	ldr	r0, [r7, #12]
 8007a24:	f000 f843 	bl	8007aae <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3730      	adds	r7, #48	; 0x30
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}

08007a32 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007a32:	b580      	push	{r7, lr}
 8007a34:	b08a      	sub	sp, #40	; 0x28
 8007a36:	af02      	add	r7, sp, #8
 8007a38:	60f8      	str	r0, [r7, #12]
 8007a3a:	60b9      	str	r1, [r7, #8]
 8007a3c:	4613      	mov	r3, r2
 8007a3e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d10a      	bne.n	8007a5c <xQueueGenericCreate+0x2a>
	__asm volatile
 8007a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a4a:	f383 8811 	msr	BASEPRI, r3
 8007a4e:	f3bf 8f6f 	isb	sy
 8007a52:	f3bf 8f4f 	dsb	sy
 8007a56:	613b      	str	r3, [r7, #16]
}
 8007a58:	bf00      	nop
 8007a5a:	e7fe      	b.n	8007a5a <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d102      	bne.n	8007a68 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007a62:	2300      	movs	r3, #0
 8007a64:	61fb      	str	r3, [r7, #28]
 8007a66:	e004      	b.n	8007a72 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	68ba      	ldr	r2, [r7, #8]
 8007a6c:	fb02 f303 	mul.w	r3, r2, r3
 8007a70:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8007a72:	69fb      	ldr	r3, [r7, #28]
 8007a74:	3350      	adds	r3, #80	; 0x50
 8007a76:	4618      	mov	r0, r3
 8007a78:	f002 ff98 	bl	800a9ac <pvPortMalloc>
 8007a7c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007a7e:	69bb      	ldr	r3, [r7, #24]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d00f      	beq.n	8007aa4 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8007a84:	69bb      	ldr	r3, [r7, #24]
 8007a86:	3350      	adds	r3, #80	; 0x50
 8007a88:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007a8a:	69bb      	ldr	r3, [r7, #24]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007a92:	79fa      	ldrb	r2, [r7, #7]
 8007a94:	69bb      	ldr	r3, [r7, #24]
 8007a96:	9300      	str	r3, [sp, #0]
 8007a98:	4613      	mov	r3, r2
 8007a9a:	697a      	ldr	r2, [r7, #20]
 8007a9c:	68b9      	ldr	r1, [r7, #8]
 8007a9e:	68f8      	ldr	r0, [r7, #12]
 8007aa0:	f000 f805 	bl	8007aae <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007aa4:	69bb      	ldr	r3, [r7, #24]
	}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3720      	adds	r7, #32
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}

08007aae <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007aae:	b580      	push	{r7, lr}
 8007ab0:	b084      	sub	sp, #16
 8007ab2:	af00      	add	r7, sp, #0
 8007ab4:	60f8      	str	r0, [r7, #12]
 8007ab6:	60b9      	str	r1, [r7, #8]
 8007ab8:	607a      	str	r2, [r7, #4]
 8007aba:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d103      	bne.n	8007aca <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007ac2:	69bb      	ldr	r3, [r7, #24]
 8007ac4:	69ba      	ldr	r2, [r7, #24]
 8007ac6:	601a      	str	r2, [r3, #0]
 8007ac8:	e002      	b.n	8007ad0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007aca:	69bb      	ldr	r3, [r7, #24]
 8007acc:	687a      	ldr	r2, [r7, #4]
 8007ace:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007ad0:	69bb      	ldr	r3, [r7, #24]
 8007ad2:	68fa      	ldr	r2, [r7, #12]
 8007ad4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007ad6:	69bb      	ldr	r3, [r7, #24]
 8007ad8:	68ba      	ldr	r2, [r7, #8]
 8007ada:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007adc:	2101      	movs	r1, #1
 8007ade:	69b8      	ldr	r0, [r7, #24]
 8007ae0:	f7ff fec8 	bl	8007874 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007ae4:	69bb      	ldr	r3, [r7, #24]
 8007ae6:	78fa      	ldrb	r2, [r7, #3]
 8007ae8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007aec:	bf00      	nop
 8007aee:	3710      	adds	r7, #16
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b082      	sub	sp, #8
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d00e      	beq.n	8007b20 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2200      	movs	r2, #0
 8007b06:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2200      	movs	r2, #0
 8007b12:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007b14:	2300      	movs	r3, #0
 8007b16:	2200      	movs	r2, #0
 8007b18:	2100      	movs	r1, #0
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 f90c 	bl	8007d38 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007b20:	bf00      	nop
 8007b22:	3708      	adds	r7, #8
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}

08007b28 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b086      	sub	sp, #24
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	4603      	mov	r3, r0
 8007b30:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007b32:	2301      	movs	r3, #1
 8007b34:	617b      	str	r3, [r7, #20]
 8007b36:	2300      	movs	r3, #0
 8007b38:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007b3a:	79fb      	ldrb	r3, [r7, #7]
 8007b3c:	461a      	mov	r2, r3
 8007b3e:	6939      	ldr	r1, [r7, #16]
 8007b40:	6978      	ldr	r0, [r7, #20]
 8007b42:	f7ff ff76 	bl	8007a32 <xQueueGenericCreate>
 8007b46:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8007b48:	68f8      	ldr	r0, [r7, #12]
 8007b4a:	f7ff ffd3 	bl	8007af4 <prvInitialiseMutex>

		return pxNewQueue;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
	}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3718      	adds	r7, #24
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}

08007b58 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b088      	sub	sp, #32
 8007b5c:	af02      	add	r7, sp, #8
 8007b5e:	4603      	mov	r3, r0
 8007b60:	6039      	str	r1, [r7, #0]
 8007b62:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007b64:	2301      	movs	r3, #1
 8007b66:	617b      	str	r3, [r7, #20]
 8007b68:	2300      	movs	r3, #0
 8007b6a:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007b6c:	79fb      	ldrb	r3, [r7, #7]
 8007b6e:	9300      	str	r3, [sp, #0]
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	2200      	movs	r2, #0
 8007b74:	6939      	ldr	r1, [r7, #16]
 8007b76:	6978      	ldr	r0, [r7, #20]
 8007b78:	f7ff fee4 	bl	8007944 <xQueueGenericCreateStatic>
 8007b7c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8007b7e:	68f8      	ldr	r0, [r7, #12]
 8007b80:	f7ff ffb8 	bl	8007af4 <prvInitialiseMutex>

		return pxNewQueue;
 8007b84:	68fb      	ldr	r3, [r7, #12]
	}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3718      	adds	r7, #24
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}

08007b8e <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8007b8e:	b590      	push	{r4, r7, lr}
 8007b90:	b087      	sub	sp, #28
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d10a      	bne.n	8007bb6 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8007ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba4:	f383 8811 	msr	BASEPRI, r3
 8007ba8:	f3bf 8f6f 	isb	sy
 8007bac:	f3bf 8f4f 	dsb	sy
 8007bb0:	60fb      	str	r3, [r7, #12]
}
 8007bb2:	bf00      	nop
 8007bb4:	e7fe      	b.n	8007bb4 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	685c      	ldr	r4, [r3, #4]
 8007bba:	f001 ffc3 	bl	8009b44 <xTaskGetCurrentTaskHandle>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	429c      	cmp	r4, r3
 8007bc2:	d111      	bne.n	8007be8 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	68db      	ldr	r3, [r3, #12]
 8007bc8:	1e5a      	subs	r2, r3, #1
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	68db      	ldr	r3, [r3, #12]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d105      	bne.n	8007be2 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	2200      	movs	r2, #0
 8007bda:	2100      	movs	r1, #0
 8007bdc:	6938      	ldr	r0, [r7, #16]
 8007bde:	f000 f8ab 	bl	8007d38 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8007be2:	2301      	movs	r3, #1
 8007be4:	617b      	str	r3, [r7, #20]
 8007be6:	e001      	b.n	8007bec <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8007be8:	2300      	movs	r3, #0
 8007bea:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8007bec:	697b      	ldr	r3, [r7, #20]
	}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	371c      	adds	r7, #28
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd90      	pop	{r4, r7, pc}

08007bf6 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8007bf6:	b590      	push	{r4, r7, lr}
 8007bf8:	b087      	sub	sp, #28
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
 8007bfe:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d10a      	bne.n	8007c20 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8007c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c0e:	f383 8811 	msr	BASEPRI, r3
 8007c12:	f3bf 8f6f 	isb	sy
 8007c16:	f3bf 8f4f 	dsb	sy
 8007c1a:	60fb      	str	r3, [r7, #12]
}
 8007c1c:	bf00      	nop
 8007c1e:	e7fe      	b.n	8007c1e <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	685c      	ldr	r4, [r3, #4]
 8007c24:	f001 ff8e 	bl	8009b44 <xTaskGetCurrentTaskHandle>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	429c      	cmp	r4, r3
 8007c2c:	d107      	bne.n	8007c3e <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	68db      	ldr	r3, [r3, #12]
 8007c32:	1c5a      	adds	r2, r3, #1
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8007c38:	2301      	movs	r3, #1
 8007c3a:	617b      	str	r3, [r7, #20]
 8007c3c:	e00c      	b.n	8007c58 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8007c3e:	6839      	ldr	r1, [r7, #0]
 8007c40:	6938      	ldr	r0, [r7, #16]
 8007c42:	f000 fb7d 	bl	8008340 <xQueueSemaphoreTake>
 8007c46:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d004      	beq.n	8007c58 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	68db      	ldr	r3, [r3, #12]
 8007c52:	1c5a      	adds	r2, r3, #1
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8007c58:	697b      	ldr	r3, [r7, #20]
	}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	371c      	adds	r7, #28
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd90      	pop	{r4, r7, pc}

08007c62 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007c62:	b580      	push	{r7, lr}
 8007c64:	b08a      	sub	sp, #40	; 0x28
 8007c66:	af02      	add	r7, sp, #8
 8007c68:	60f8      	str	r0, [r7, #12]
 8007c6a:	60b9      	str	r1, [r7, #8]
 8007c6c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d10a      	bne.n	8007c8a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8007c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c78:	f383 8811 	msr	BASEPRI, r3
 8007c7c:	f3bf 8f6f 	isb	sy
 8007c80:	f3bf 8f4f 	dsb	sy
 8007c84:	61bb      	str	r3, [r7, #24]
}
 8007c86:	bf00      	nop
 8007c88:	e7fe      	b.n	8007c88 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007c8a:	68ba      	ldr	r2, [r7, #8]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	429a      	cmp	r2, r3
 8007c90:	d90a      	bls.n	8007ca8 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8007c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c96:	f383 8811 	msr	BASEPRI, r3
 8007c9a:	f3bf 8f6f 	isb	sy
 8007c9e:	f3bf 8f4f 	dsb	sy
 8007ca2:	617b      	str	r3, [r7, #20]
}
 8007ca4:	bf00      	nop
 8007ca6:	e7fe      	b.n	8007ca6 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007ca8:	2302      	movs	r3, #2
 8007caa:	9300      	str	r3, [sp, #0]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	2100      	movs	r1, #0
 8007cb2:	68f8      	ldr	r0, [r7, #12]
 8007cb4:	f7ff fe46 	bl	8007944 <xQueueGenericCreateStatic>
 8007cb8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007cba:	69fb      	ldr	r3, [r7, #28]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d002      	beq.n	8007cc6 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007cc0:	69fb      	ldr	r3, [r7, #28]
 8007cc2:	68ba      	ldr	r2, [r7, #8]
 8007cc4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007cc6:	69fb      	ldr	r3, [r7, #28]
	}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3720      	adds	r7, #32
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}

08007cd0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b086      	sub	sp, #24
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d10a      	bne.n	8007cf6 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8007ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce4:	f383 8811 	msr	BASEPRI, r3
 8007ce8:	f3bf 8f6f 	isb	sy
 8007cec:	f3bf 8f4f 	dsb	sy
 8007cf0:	613b      	str	r3, [r7, #16]
}
 8007cf2:	bf00      	nop
 8007cf4:	e7fe      	b.n	8007cf4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007cf6:	683a      	ldr	r2, [r7, #0]
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	d90a      	bls.n	8007d14 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8007cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d02:	f383 8811 	msr	BASEPRI, r3
 8007d06:	f3bf 8f6f 	isb	sy
 8007d0a:	f3bf 8f4f 	dsb	sy
 8007d0e:	60fb      	str	r3, [r7, #12]
}
 8007d10:	bf00      	nop
 8007d12:	e7fe      	b.n	8007d12 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007d14:	2202      	movs	r2, #2
 8007d16:	2100      	movs	r1, #0
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f7ff fe8a 	bl	8007a32 <xQueueGenericCreate>
 8007d1e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d002      	beq.n	8007d2c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	683a      	ldr	r2, [r7, #0]
 8007d2a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007d2c:	697b      	ldr	r3, [r7, #20]
	}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3718      	adds	r7, #24
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}
	...

08007d38 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b08e      	sub	sp, #56	; 0x38
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	60f8      	str	r0, [r7, #12]
 8007d40:	60b9      	str	r1, [r7, #8]
 8007d42:	607a      	str	r2, [r7, #4]
 8007d44:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007d46:	2300      	movs	r3, #0
 8007d48:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d10a      	bne.n	8007d6a <xQueueGenericSend+0x32>
	__asm volatile
 8007d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d58:	f383 8811 	msr	BASEPRI, r3
 8007d5c:	f3bf 8f6f 	isb	sy
 8007d60:	f3bf 8f4f 	dsb	sy
 8007d64:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007d66:	bf00      	nop
 8007d68:	e7fe      	b.n	8007d68 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d103      	bne.n	8007d78 <xQueueGenericSend+0x40>
 8007d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d101      	bne.n	8007d7c <xQueueGenericSend+0x44>
 8007d78:	2301      	movs	r3, #1
 8007d7a:	e000      	b.n	8007d7e <xQueueGenericSend+0x46>
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d10a      	bne.n	8007d98 <xQueueGenericSend+0x60>
	__asm volatile
 8007d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d86:	f383 8811 	msr	BASEPRI, r3
 8007d8a:	f3bf 8f6f 	isb	sy
 8007d8e:	f3bf 8f4f 	dsb	sy
 8007d92:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007d94:	bf00      	nop
 8007d96:	e7fe      	b.n	8007d96 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	2b02      	cmp	r3, #2
 8007d9c:	d103      	bne.n	8007da6 <xQueueGenericSend+0x6e>
 8007d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007da2:	2b01      	cmp	r3, #1
 8007da4:	d101      	bne.n	8007daa <xQueueGenericSend+0x72>
 8007da6:	2301      	movs	r3, #1
 8007da8:	e000      	b.n	8007dac <xQueueGenericSend+0x74>
 8007daa:	2300      	movs	r3, #0
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d10a      	bne.n	8007dc6 <xQueueGenericSend+0x8e>
	__asm volatile
 8007db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db4:	f383 8811 	msr	BASEPRI, r3
 8007db8:	f3bf 8f6f 	isb	sy
 8007dbc:	f3bf 8f4f 	dsb	sy
 8007dc0:	623b      	str	r3, [r7, #32]
}
 8007dc2:	bf00      	nop
 8007dc4:	e7fe      	b.n	8007dc4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007dc6:	f001 fecb 	bl	8009b60 <xTaskGetSchedulerState>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d102      	bne.n	8007dd6 <xQueueGenericSend+0x9e>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d101      	bne.n	8007dda <xQueueGenericSend+0xa2>
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	e000      	b.n	8007ddc <xQueueGenericSend+0xa4>
 8007dda:	2300      	movs	r3, #0
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d10a      	bne.n	8007df6 <xQueueGenericSend+0xbe>
	__asm volatile
 8007de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007de4:	f383 8811 	msr	BASEPRI, r3
 8007de8:	f3bf 8f6f 	isb	sy
 8007dec:	f3bf 8f4f 	dsb	sy
 8007df0:	61fb      	str	r3, [r7, #28]
}
 8007df2:	bf00      	nop
 8007df4:	e7fe      	b.n	8007df4 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007df6:	f002 fcd9 	bl	800a7ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e02:	429a      	cmp	r2, r3
 8007e04:	d302      	bcc.n	8007e0c <xQueueGenericSend+0xd4>
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	2b02      	cmp	r3, #2
 8007e0a:	d129      	bne.n	8007e60 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007e0c:	683a      	ldr	r2, [r7, #0]
 8007e0e:	68b9      	ldr	r1, [r7, #8]
 8007e10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e12:	f000 fc5b 	bl	80086cc <prvCopyDataToQueue>
 8007e16:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d010      	beq.n	8007e42 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e22:	3324      	adds	r3, #36	; 0x24
 8007e24:	4618      	mov	r0, r3
 8007e26:	f001 fc65 	bl	80096f4 <xTaskRemoveFromEventList>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d013      	beq.n	8007e58 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007e30:	4b3f      	ldr	r3, [pc, #252]	; (8007f30 <xQueueGenericSend+0x1f8>)
 8007e32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e36:	601a      	str	r2, [r3, #0]
 8007e38:	f3bf 8f4f 	dsb	sy
 8007e3c:	f3bf 8f6f 	isb	sy
 8007e40:	e00a      	b.n	8007e58 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d007      	beq.n	8007e58 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007e48:	4b39      	ldr	r3, [pc, #228]	; (8007f30 <xQueueGenericSend+0x1f8>)
 8007e4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e4e:	601a      	str	r2, [r3, #0]
 8007e50:	f3bf 8f4f 	dsb	sy
 8007e54:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007e58:	f002 fcd8 	bl	800a80c <vPortExitCritical>
				return pdPASS;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	e063      	b.n	8007f28 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d103      	bne.n	8007e6e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007e66:	f002 fcd1 	bl	800a80c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	e05c      	b.n	8007f28 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d106      	bne.n	8007e82 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007e74:	f107 0314 	add.w	r3, r7, #20
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f001 fd01 	bl	8009880 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007e7e:	2301      	movs	r3, #1
 8007e80:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007e82:	f002 fcc3 	bl	800a80c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007e86:	f001 f9bb 	bl	8009200 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007e8a:	f002 fc8f 	bl	800a7ac <vPortEnterCritical>
 8007e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e94:	b25b      	sxtb	r3, r3
 8007e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e9a:	d103      	bne.n	8007ea4 <xQueueGenericSend+0x16c>
 8007e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007eaa:	b25b      	sxtb	r3, r3
 8007eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eb0:	d103      	bne.n	8007eba <xQueueGenericSend+0x182>
 8007eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007eba:	f002 fca7 	bl	800a80c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007ebe:	1d3a      	adds	r2, r7, #4
 8007ec0:	f107 0314 	add.w	r3, r7, #20
 8007ec4:	4611      	mov	r1, r2
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f001 fcf0 	bl	80098ac <xTaskCheckForTimeOut>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d124      	bne.n	8007f1c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007ed2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ed4:	f000 fcf2 	bl	80088bc <prvIsQueueFull>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d018      	beq.n	8007f10 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee0:	3310      	adds	r3, #16
 8007ee2:	687a      	ldr	r2, [r7, #4]
 8007ee4:	4611      	mov	r1, r2
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f001 fb78 	bl	80095dc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007eec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007eee:	f000 fc7d 	bl	80087ec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007ef2:	f001 f993 	bl	800921c <xTaskResumeAll>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	f47f af7c 	bne.w	8007df6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007efe:	4b0c      	ldr	r3, [pc, #48]	; (8007f30 <xQueueGenericSend+0x1f8>)
 8007f00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f04:	601a      	str	r2, [r3, #0]
 8007f06:	f3bf 8f4f 	dsb	sy
 8007f0a:	f3bf 8f6f 	isb	sy
 8007f0e:	e772      	b.n	8007df6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007f10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f12:	f000 fc6b 	bl	80087ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007f16:	f001 f981 	bl	800921c <xTaskResumeAll>
 8007f1a:	e76c      	b.n	8007df6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007f1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f1e:	f000 fc65 	bl	80087ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007f22:	f001 f97b 	bl	800921c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007f26:	2300      	movs	r3, #0
		}
	}
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3738      	adds	r7, #56	; 0x38
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}
 8007f30:	e000ed04 	.word	0xe000ed04

08007f34 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b08e      	sub	sp, #56	; 0x38
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	60f8      	str	r0, [r7, #12]
 8007f3c:	60b9      	str	r1, [r7, #8]
 8007f3e:	607a      	str	r2, [r7, #4]
 8007f40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d10a      	bne.n	8007f62 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f50:	f383 8811 	msr	BASEPRI, r3
 8007f54:	f3bf 8f6f 	isb	sy
 8007f58:	f3bf 8f4f 	dsb	sy
 8007f5c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007f5e:	bf00      	nop
 8007f60:	e7fe      	b.n	8007f60 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d103      	bne.n	8007f70 <xQueueGenericSendFromISR+0x3c>
 8007f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d101      	bne.n	8007f74 <xQueueGenericSendFromISR+0x40>
 8007f70:	2301      	movs	r3, #1
 8007f72:	e000      	b.n	8007f76 <xQueueGenericSendFromISR+0x42>
 8007f74:	2300      	movs	r3, #0
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d10a      	bne.n	8007f90 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f7e:	f383 8811 	msr	BASEPRI, r3
 8007f82:	f3bf 8f6f 	isb	sy
 8007f86:	f3bf 8f4f 	dsb	sy
 8007f8a:	623b      	str	r3, [r7, #32]
}
 8007f8c:	bf00      	nop
 8007f8e:	e7fe      	b.n	8007f8e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	2b02      	cmp	r3, #2
 8007f94:	d103      	bne.n	8007f9e <xQueueGenericSendFromISR+0x6a>
 8007f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f9a:	2b01      	cmp	r3, #1
 8007f9c:	d101      	bne.n	8007fa2 <xQueueGenericSendFromISR+0x6e>
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	e000      	b.n	8007fa4 <xQueueGenericSendFromISR+0x70>
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d10a      	bne.n	8007fbe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fac:	f383 8811 	msr	BASEPRI, r3
 8007fb0:	f3bf 8f6f 	isb	sy
 8007fb4:	f3bf 8f4f 	dsb	sy
 8007fb8:	61fb      	str	r3, [r7, #28]
}
 8007fba:	bf00      	nop
 8007fbc:	e7fe      	b.n	8007fbc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007fbe:	f002 fcb7 	bl	800a930 <vPortValidateInterruptPriority>
	__asm volatile
 8007fc2:	f3ef 8211 	mrs	r2, BASEPRI
 8007fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fca:	f383 8811 	msr	BASEPRI, r3
 8007fce:	f3bf 8f6f 	isb	sy
 8007fd2:	f3bf 8f4f 	dsb	sy
 8007fd6:	61ba      	str	r2, [r7, #24]
 8007fd8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007fda:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	d302      	bcc.n	8007ff0 <xQueueGenericSendFromISR+0xbc>
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	2b02      	cmp	r3, #2
 8007fee:	d12c      	bne.n	800804a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ff6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007ffa:	683a      	ldr	r2, [r7, #0]
 8007ffc:	68b9      	ldr	r1, [r7, #8]
 8007ffe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008000:	f000 fb64 	bl	80086cc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008004:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800800c:	d112      	bne.n	8008034 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800800e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008012:	2b00      	cmp	r3, #0
 8008014:	d016      	beq.n	8008044 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008018:	3324      	adds	r3, #36	; 0x24
 800801a:	4618      	mov	r0, r3
 800801c:	f001 fb6a 	bl	80096f4 <xTaskRemoveFromEventList>
 8008020:	4603      	mov	r3, r0
 8008022:	2b00      	cmp	r3, #0
 8008024:	d00e      	beq.n	8008044 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d00b      	beq.n	8008044 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2201      	movs	r2, #1
 8008030:	601a      	str	r2, [r3, #0]
 8008032:	e007      	b.n	8008044 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008034:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008038:	3301      	adds	r3, #1
 800803a:	b2db      	uxtb	r3, r3
 800803c:	b25a      	sxtb	r2, r3
 800803e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008040:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008044:	2301      	movs	r3, #1
 8008046:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008048:	e001      	b.n	800804e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800804a:	2300      	movs	r3, #0
 800804c:	637b      	str	r3, [r7, #52]	; 0x34
 800804e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008050:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	f383 8811 	msr	BASEPRI, r3
}
 8008058:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800805a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800805c:	4618      	mov	r0, r3
 800805e:	3738      	adds	r7, #56	; 0x38
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}

08008064 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b08e      	sub	sp, #56	; 0x38
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008074:	2b00      	cmp	r3, #0
 8008076:	d10a      	bne.n	800808e <xQueueGiveFromISR+0x2a>
	__asm volatile
 8008078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800807c:	f383 8811 	msr	BASEPRI, r3
 8008080:	f3bf 8f6f 	isb	sy
 8008084:	f3bf 8f4f 	dsb	sy
 8008088:	623b      	str	r3, [r7, #32]
}
 800808a:	bf00      	nop
 800808c:	e7fe      	b.n	800808c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800808e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008092:	2b00      	cmp	r3, #0
 8008094:	d00a      	beq.n	80080ac <xQueueGiveFromISR+0x48>
	__asm volatile
 8008096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800809a:	f383 8811 	msr	BASEPRI, r3
 800809e:	f3bf 8f6f 	isb	sy
 80080a2:	f3bf 8f4f 	dsb	sy
 80080a6:	61fb      	str	r3, [r7, #28]
}
 80080a8:	bf00      	nop
 80080aa:	e7fe      	b.n	80080aa <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80080ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d103      	bne.n	80080bc <xQueueGiveFromISR+0x58>
 80080b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d101      	bne.n	80080c0 <xQueueGiveFromISR+0x5c>
 80080bc:	2301      	movs	r3, #1
 80080be:	e000      	b.n	80080c2 <xQueueGiveFromISR+0x5e>
 80080c0:	2300      	movs	r3, #0
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d10a      	bne.n	80080dc <xQueueGiveFromISR+0x78>
	__asm volatile
 80080c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ca:	f383 8811 	msr	BASEPRI, r3
 80080ce:	f3bf 8f6f 	isb	sy
 80080d2:	f3bf 8f4f 	dsb	sy
 80080d6:	61bb      	str	r3, [r7, #24]
}
 80080d8:	bf00      	nop
 80080da:	e7fe      	b.n	80080da <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80080dc:	f002 fc28 	bl	800a930 <vPortValidateInterruptPriority>
	__asm volatile
 80080e0:	f3ef 8211 	mrs	r2, BASEPRI
 80080e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e8:	f383 8811 	msr	BASEPRI, r3
 80080ec:	f3bf 8f6f 	isb	sy
 80080f0:	f3bf 8f4f 	dsb	sy
 80080f4:	617a      	str	r2, [r7, #20]
 80080f6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80080f8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80080fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80080fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008100:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008106:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008108:	429a      	cmp	r2, r3
 800810a:	d22b      	bcs.n	8008164 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800810c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800810e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008112:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008118:	1c5a      	adds	r2, r3, #1
 800811a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800811c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800811e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008126:	d112      	bne.n	800814e <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800812a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800812c:	2b00      	cmp	r3, #0
 800812e:	d016      	beq.n	800815e <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008132:	3324      	adds	r3, #36	; 0x24
 8008134:	4618      	mov	r0, r3
 8008136:	f001 fadd 	bl	80096f4 <xTaskRemoveFromEventList>
 800813a:	4603      	mov	r3, r0
 800813c:	2b00      	cmp	r3, #0
 800813e:	d00e      	beq.n	800815e <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d00b      	beq.n	800815e <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	2201      	movs	r2, #1
 800814a:	601a      	str	r2, [r3, #0]
 800814c:	e007      	b.n	800815e <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800814e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008152:	3301      	adds	r3, #1
 8008154:	b2db      	uxtb	r3, r3
 8008156:	b25a      	sxtb	r2, r3
 8008158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800815a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800815e:	2301      	movs	r3, #1
 8008160:	637b      	str	r3, [r7, #52]	; 0x34
 8008162:	e001      	b.n	8008168 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008164:	2300      	movs	r3, #0
 8008166:	637b      	str	r3, [r7, #52]	; 0x34
 8008168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800816a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f383 8811 	msr	BASEPRI, r3
}
 8008172:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008176:	4618      	mov	r0, r3
 8008178:	3738      	adds	r7, #56	; 0x38
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}
	...

08008180 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b08c      	sub	sp, #48	; 0x30
 8008184:	af00      	add	r7, sp, #0
 8008186:	60f8      	str	r0, [r7, #12]
 8008188:	60b9      	str	r1, [r7, #8]
 800818a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800818c:	2300      	movs	r3, #0
 800818e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008196:	2b00      	cmp	r3, #0
 8008198:	d10a      	bne.n	80081b0 <xQueueReceive+0x30>
	__asm volatile
 800819a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800819e:	f383 8811 	msr	BASEPRI, r3
 80081a2:	f3bf 8f6f 	isb	sy
 80081a6:	f3bf 8f4f 	dsb	sy
 80081aa:	623b      	str	r3, [r7, #32]
}
 80081ac:	bf00      	nop
 80081ae:	e7fe      	b.n	80081ae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d103      	bne.n	80081be <xQueueReceive+0x3e>
 80081b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d101      	bne.n	80081c2 <xQueueReceive+0x42>
 80081be:	2301      	movs	r3, #1
 80081c0:	e000      	b.n	80081c4 <xQueueReceive+0x44>
 80081c2:	2300      	movs	r3, #0
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d10a      	bne.n	80081de <xQueueReceive+0x5e>
	__asm volatile
 80081c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081cc:	f383 8811 	msr	BASEPRI, r3
 80081d0:	f3bf 8f6f 	isb	sy
 80081d4:	f3bf 8f4f 	dsb	sy
 80081d8:	61fb      	str	r3, [r7, #28]
}
 80081da:	bf00      	nop
 80081dc:	e7fe      	b.n	80081dc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80081de:	f001 fcbf 	bl	8009b60 <xTaskGetSchedulerState>
 80081e2:	4603      	mov	r3, r0
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d102      	bne.n	80081ee <xQueueReceive+0x6e>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d101      	bne.n	80081f2 <xQueueReceive+0x72>
 80081ee:	2301      	movs	r3, #1
 80081f0:	e000      	b.n	80081f4 <xQueueReceive+0x74>
 80081f2:	2300      	movs	r3, #0
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d10a      	bne.n	800820e <xQueueReceive+0x8e>
	__asm volatile
 80081f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081fc:	f383 8811 	msr	BASEPRI, r3
 8008200:	f3bf 8f6f 	isb	sy
 8008204:	f3bf 8f4f 	dsb	sy
 8008208:	61bb      	str	r3, [r7, #24]
}
 800820a:	bf00      	nop
 800820c:	e7fe      	b.n	800820c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800820e:	f002 facd 	bl	800a7ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008216:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800821a:	2b00      	cmp	r3, #0
 800821c:	d01f      	beq.n	800825e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800821e:	68b9      	ldr	r1, [r7, #8]
 8008220:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008222:	f000 fabd 	bl	80087a0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008228:	1e5a      	subs	r2, r3, #1
 800822a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800822c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800822e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008230:	691b      	ldr	r3, [r3, #16]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d00f      	beq.n	8008256 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008238:	3310      	adds	r3, #16
 800823a:	4618      	mov	r0, r3
 800823c:	f001 fa5a 	bl	80096f4 <xTaskRemoveFromEventList>
 8008240:	4603      	mov	r3, r0
 8008242:	2b00      	cmp	r3, #0
 8008244:	d007      	beq.n	8008256 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008246:	4b3d      	ldr	r3, [pc, #244]	; (800833c <xQueueReceive+0x1bc>)
 8008248:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800824c:	601a      	str	r2, [r3, #0]
 800824e:	f3bf 8f4f 	dsb	sy
 8008252:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008256:	f002 fad9 	bl	800a80c <vPortExitCritical>
				return pdPASS;
 800825a:	2301      	movs	r3, #1
 800825c:	e069      	b.n	8008332 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d103      	bne.n	800826c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008264:	f002 fad2 	bl	800a80c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008268:	2300      	movs	r3, #0
 800826a:	e062      	b.n	8008332 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800826c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800826e:	2b00      	cmp	r3, #0
 8008270:	d106      	bne.n	8008280 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008272:	f107 0310 	add.w	r3, r7, #16
 8008276:	4618      	mov	r0, r3
 8008278:	f001 fb02 	bl	8009880 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800827c:	2301      	movs	r3, #1
 800827e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008280:	f002 fac4 	bl	800a80c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008284:	f000 ffbc 	bl	8009200 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008288:	f002 fa90 	bl	800a7ac <vPortEnterCritical>
 800828c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800828e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008292:	b25b      	sxtb	r3, r3
 8008294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008298:	d103      	bne.n	80082a2 <xQueueReceive+0x122>
 800829a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800829c:	2200      	movs	r2, #0
 800829e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80082a8:	b25b      	sxtb	r3, r3
 80082aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082ae:	d103      	bne.n	80082b8 <xQueueReceive+0x138>
 80082b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b2:	2200      	movs	r2, #0
 80082b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80082b8:	f002 faa8 	bl	800a80c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80082bc:	1d3a      	adds	r2, r7, #4
 80082be:	f107 0310 	add.w	r3, r7, #16
 80082c2:	4611      	mov	r1, r2
 80082c4:	4618      	mov	r0, r3
 80082c6:	f001 faf1 	bl	80098ac <xTaskCheckForTimeOut>
 80082ca:	4603      	mov	r3, r0
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d123      	bne.n	8008318 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80082d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082d2:	f000 fadd 	bl	8008890 <prvIsQueueEmpty>
 80082d6:	4603      	mov	r3, r0
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d017      	beq.n	800830c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80082dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082de:	3324      	adds	r3, #36	; 0x24
 80082e0:	687a      	ldr	r2, [r7, #4]
 80082e2:	4611      	mov	r1, r2
 80082e4:	4618      	mov	r0, r3
 80082e6:	f001 f979 	bl	80095dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80082ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082ec:	f000 fa7e 	bl	80087ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80082f0:	f000 ff94 	bl	800921c <xTaskResumeAll>
 80082f4:	4603      	mov	r3, r0
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d189      	bne.n	800820e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80082fa:	4b10      	ldr	r3, [pc, #64]	; (800833c <xQueueReceive+0x1bc>)
 80082fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008300:	601a      	str	r2, [r3, #0]
 8008302:	f3bf 8f4f 	dsb	sy
 8008306:	f3bf 8f6f 	isb	sy
 800830a:	e780      	b.n	800820e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800830c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800830e:	f000 fa6d 	bl	80087ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008312:	f000 ff83 	bl	800921c <xTaskResumeAll>
 8008316:	e77a      	b.n	800820e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008318:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800831a:	f000 fa67 	bl	80087ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800831e:	f000 ff7d 	bl	800921c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008322:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008324:	f000 fab4 	bl	8008890 <prvIsQueueEmpty>
 8008328:	4603      	mov	r3, r0
 800832a:	2b00      	cmp	r3, #0
 800832c:	f43f af6f 	beq.w	800820e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008330:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8008332:	4618      	mov	r0, r3
 8008334:	3730      	adds	r7, #48	; 0x30
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}
 800833a:	bf00      	nop
 800833c:	e000ed04 	.word	0xe000ed04

08008340 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b08e      	sub	sp, #56	; 0x38
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800834a:	2300      	movs	r3, #0
 800834c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008352:	2300      	movs	r3, #0
 8008354:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008358:	2b00      	cmp	r3, #0
 800835a:	d10a      	bne.n	8008372 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800835c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008360:	f383 8811 	msr	BASEPRI, r3
 8008364:	f3bf 8f6f 	isb	sy
 8008368:	f3bf 8f4f 	dsb	sy
 800836c:	623b      	str	r3, [r7, #32]
}
 800836e:	bf00      	nop
 8008370:	e7fe      	b.n	8008370 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008376:	2b00      	cmp	r3, #0
 8008378:	d00a      	beq.n	8008390 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800837a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800837e:	f383 8811 	msr	BASEPRI, r3
 8008382:	f3bf 8f6f 	isb	sy
 8008386:	f3bf 8f4f 	dsb	sy
 800838a:	61fb      	str	r3, [r7, #28]
}
 800838c:	bf00      	nop
 800838e:	e7fe      	b.n	800838e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008390:	f001 fbe6 	bl	8009b60 <xTaskGetSchedulerState>
 8008394:	4603      	mov	r3, r0
 8008396:	2b00      	cmp	r3, #0
 8008398:	d102      	bne.n	80083a0 <xQueueSemaphoreTake+0x60>
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d101      	bne.n	80083a4 <xQueueSemaphoreTake+0x64>
 80083a0:	2301      	movs	r3, #1
 80083a2:	e000      	b.n	80083a6 <xQueueSemaphoreTake+0x66>
 80083a4:	2300      	movs	r3, #0
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d10a      	bne.n	80083c0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80083aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ae:	f383 8811 	msr	BASEPRI, r3
 80083b2:	f3bf 8f6f 	isb	sy
 80083b6:	f3bf 8f4f 	dsb	sy
 80083ba:	61bb      	str	r3, [r7, #24]
}
 80083bc:	bf00      	nop
 80083be:	e7fe      	b.n	80083be <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80083c0:	f002 f9f4 	bl	800a7ac <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80083c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083c8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80083ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d024      	beq.n	800841a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80083d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d2:	1e5a      	subs	r2, r3, #1
 80083d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083d6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80083d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d104      	bne.n	80083ea <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80083e0:	f001 fd56 	bl	8009e90 <pvTaskIncrementMutexHeldCount>
 80083e4:	4602      	mov	r2, r0
 80083e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083e8:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80083ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ec:	691b      	ldr	r3, [r3, #16]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d00f      	beq.n	8008412 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80083f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083f4:	3310      	adds	r3, #16
 80083f6:	4618      	mov	r0, r3
 80083f8:	f001 f97c 	bl	80096f4 <xTaskRemoveFromEventList>
 80083fc:	4603      	mov	r3, r0
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d007      	beq.n	8008412 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008402:	4b54      	ldr	r3, [pc, #336]	; (8008554 <xQueueSemaphoreTake+0x214>)
 8008404:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008408:	601a      	str	r2, [r3, #0]
 800840a:	f3bf 8f4f 	dsb	sy
 800840e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008412:	f002 f9fb 	bl	800a80c <vPortExitCritical>
				return pdPASS;
 8008416:	2301      	movs	r3, #1
 8008418:	e097      	b.n	800854a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d111      	bne.n	8008444 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008422:	2b00      	cmp	r3, #0
 8008424:	d00a      	beq.n	800843c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8008426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800842a:	f383 8811 	msr	BASEPRI, r3
 800842e:	f3bf 8f6f 	isb	sy
 8008432:	f3bf 8f4f 	dsb	sy
 8008436:	617b      	str	r3, [r7, #20]
}
 8008438:	bf00      	nop
 800843a:	e7fe      	b.n	800843a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800843c:	f002 f9e6 	bl	800a80c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008440:	2300      	movs	r3, #0
 8008442:	e082      	b.n	800854a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008446:	2b00      	cmp	r3, #0
 8008448:	d106      	bne.n	8008458 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800844a:	f107 030c 	add.w	r3, r7, #12
 800844e:	4618      	mov	r0, r3
 8008450:	f001 fa16 	bl	8009880 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008454:	2301      	movs	r3, #1
 8008456:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008458:	f002 f9d8 	bl	800a80c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800845c:	f000 fed0 	bl	8009200 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008460:	f002 f9a4 	bl	800a7ac <vPortEnterCritical>
 8008464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008466:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800846a:	b25b      	sxtb	r3, r3
 800846c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008470:	d103      	bne.n	800847a <xQueueSemaphoreTake+0x13a>
 8008472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008474:	2200      	movs	r2, #0
 8008476:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800847a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800847c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008480:	b25b      	sxtb	r3, r3
 8008482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008486:	d103      	bne.n	8008490 <xQueueSemaphoreTake+0x150>
 8008488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800848a:	2200      	movs	r2, #0
 800848c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008490:	f002 f9bc 	bl	800a80c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008494:	463a      	mov	r2, r7
 8008496:	f107 030c 	add.w	r3, r7, #12
 800849a:	4611      	mov	r1, r2
 800849c:	4618      	mov	r0, r3
 800849e:	f001 fa05 	bl	80098ac <xTaskCheckForTimeOut>
 80084a2:	4603      	mov	r3, r0
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d132      	bne.n	800850e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80084a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80084aa:	f000 f9f1 	bl	8008890 <prvIsQueueEmpty>
 80084ae:	4603      	mov	r3, r0
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d026      	beq.n	8008502 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80084b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d109      	bne.n	80084d0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80084bc:	f002 f976 	bl	800a7ac <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80084c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084c2:	685b      	ldr	r3, [r3, #4]
 80084c4:	4618      	mov	r0, r3
 80084c6:	f001 fb69 	bl	8009b9c <xTaskPriorityInherit>
 80084ca:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80084cc:	f002 f99e 	bl	800a80c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80084d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084d2:	3324      	adds	r3, #36	; 0x24
 80084d4:	683a      	ldr	r2, [r7, #0]
 80084d6:	4611      	mov	r1, r2
 80084d8:	4618      	mov	r0, r3
 80084da:	f001 f87f 	bl	80095dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80084de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80084e0:	f000 f984 	bl	80087ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80084e4:	f000 fe9a 	bl	800921c <xTaskResumeAll>
 80084e8:	4603      	mov	r3, r0
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	f47f af68 	bne.w	80083c0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80084f0:	4b18      	ldr	r3, [pc, #96]	; (8008554 <xQueueSemaphoreTake+0x214>)
 80084f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084f6:	601a      	str	r2, [r3, #0]
 80084f8:	f3bf 8f4f 	dsb	sy
 80084fc:	f3bf 8f6f 	isb	sy
 8008500:	e75e      	b.n	80083c0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008502:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008504:	f000 f972 	bl	80087ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008508:	f000 fe88 	bl	800921c <xTaskResumeAll>
 800850c:	e758      	b.n	80083c0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800850e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008510:	f000 f96c 	bl	80087ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008514:	f000 fe82 	bl	800921c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008518:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800851a:	f000 f9b9 	bl	8008890 <prvIsQueueEmpty>
 800851e:	4603      	mov	r3, r0
 8008520:	2b00      	cmp	r3, #0
 8008522:	f43f af4d 	beq.w	80083c0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008528:	2b00      	cmp	r3, #0
 800852a:	d00d      	beq.n	8008548 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800852c:	f002 f93e 	bl	800a7ac <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008530:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008532:	f000 f8b4 	bl	800869e <prvGetDisinheritPriorityAfterTimeout>
 8008536:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8008538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800853a:	685b      	ldr	r3, [r3, #4]
 800853c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800853e:	4618      	mov	r0, r3
 8008540:	f001 fc08 	bl	8009d54 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008544:	f002 f962 	bl	800a80c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008548:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800854a:	4618      	mov	r0, r3
 800854c:	3738      	adds	r7, #56	; 0x38
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}
 8008552:	bf00      	nop
 8008554:	e000ed04 	.word	0xe000ed04

08008558 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b08e      	sub	sp, #56	; 0x38
 800855c:	af00      	add	r7, sp, #0
 800855e:	60f8      	str	r0, [r7, #12]
 8008560:	60b9      	str	r1, [r7, #8]
 8008562:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800856a:	2b00      	cmp	r3, #0
 800856c:	d10a      	bne.n	8008584 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800856e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008572:	f383 8811 	msr	BASEPRI, r3
 8008576:	f3bf 8f6f 	isb	sy
 800857a:	f3bf 8f4f 	dsb	sy
 800857e:	623b      	str	r3, [r7, #32]
}
 8008580:	bf00      	nop
 8008582:	e7fe      	b.n	8008582 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d103      	bne.n	8008592 <xQueueReceiveFromISR+0x3a>
 800858a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800858c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800858e:	2b00      	cmp	r3, #0
 8008590:	d101      	bne.n	8008596 <xQueueReceiveFromISR+0x3e>
 8008592:	2301      	movs	r3, #1
 8008594:	e000      	b.n	8008598 <xQueueReceiveFromISR+0x40>
 8008596:	2300      	movs	r3, #0
 8008598:	2b00      	cmp	r3, #0
 800859a:	d10a      	bne.n	80085b2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800859c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a0:	f383 8811 	msr	BASEPRI, r3
 80085a4:	f3bf 8f6f 	isb	sy
 80085a8:	f3bf 8f4f 	dsb	sy
 80085ac:	61fb      	str	r3, [r7, #28]
}
 80085ae:	bf00      	nop
 80085b0:	e7fe      	b.n	80085b0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80085b2:	f002 f9bd 	bl	800a930 <vPortValidateInterruptPriority>
	__asm volatile
 80085b6:	f3ef 8211 	mrs	r2, BASEPRI
 80085ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085be:	f383 8811 	msr	BASEPRI, r3
 80085c2:	f3bf 8f6f 	isb	sy
 80085c6:	f3bf 8f4f 	dsb	sy
 80085ca:	61ba      	str	r2, [r7, #24]
 80085cc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80085ce:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80085d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80085d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085d6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80085d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d02f      	beq.n	800863e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80085de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80085e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80085e8:	68b9      	ldr	r1, [r7, #8]
 80085ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80085ec:	f000 f8d8 	bl	80087a0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80085f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085f2:	1e5a      	subs	r2, r3, #1
 80085f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80085f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80085fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008600:	d112      	bne.n	8008628 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008604:	691b      	ldr	r3, [r3, #16]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d016      	beq.n	8008638 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800860a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800860c:	3310      	adds	r3, #16
 800860e:	4618      	mov	r0, r3
 8008610:	f001 f870 	bl	80096f4 <xTaskRemoveFromEventList>
 8008614:	4603      	mov	r3, r0
 8008616:	2b00      	cmp	r3, #0
 8008618:	d00e      	beq.n	8008638 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d00b      	beq.n	8008638 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2201      	movs	r2, #1
 8008624:	601a      	str	r2, [r3, #0]
 8008626:	e007      	b.n	8008638 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008628:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800862c:	3301      	adds	r3, #1
 800862e:	b2db      	uxtb	r3, r3
 8008630:	b25a      	sxtb	r2, r3
 8008632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008634:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008638:	2301      	movs	r3, #1
 800863a:	637b      	str	r3, [r7, #52]	; 0x34
 800863c:	e001      	b.n	8008642 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800863e:	2300      	movs	r3, #0
 8008640:	637b      	str	r3, [r7, #52]	; 0x34
 8008642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008644:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	f383 8811 	msr	BASEPRI, r3
}
 800864c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800864e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008650:	4618      	mov	r0, r3
 8008652:	3738      	adds	r7, #56	; 0x38
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}

08008658 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b084      	sub	sp, #16
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d10a      	bne.n	8008680 <vQueueDelete+0x28>
	__asm volatile
 800866a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800866e:	f383 8811 	msr	BASEPRI, r3
 8008672:	f3bf 8f6f 	isb	sy
 8008676:	f3bf 8f4f 	dsb	sy
 800867a:	60bb      	str	r3, [r7, #8]
}
 800867c:	bf00      	nop
 800867e:	e7fe      	b.n	800867e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008680:	68f8      	ldr	r0, [r7, #12]
 8008682:	f000 f95b 	bl	800893c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800868c:	2b00      	cmp	r3, #0
 800868e:	d102      	bne.n	8008696 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8008690:	68f8      	ldr	r0, [r7, #12]
 8008692:	f002 fa4f 	bl	800ab34 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8008696:	bf00      	nop
 8008698:	3710      	adds	r7, #16
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}

0800869e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800869e:	b480      	push	{r7}
 80086a0:	b085      	sub	sp, #20
 80086a2:	af00      	add	r7, sp, #0
 80086a4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d006      	beq.n	80086bc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80086b8:	60fb      	str	r3, [r7, #12]
 80086ba:	e001      	b.n	80086c0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80086bc:	2300      	movs	r3, #0
 80086be:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80086c0:	68fb      	ldr	r3, [r7, #12]
	}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3714      	adds	r7, #20
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bc80      	pop	{r7}
 80086ca:	4770      	bx	lr

080086cc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b086      	sub	sp, #24
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	60f8      	str	r0, [r7, #12]
 80086d4:	60b9      	str	r1, [r7, #8]
 80086d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80086d8:	2300      	movs	r3, #0
 80086da:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086e0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d10d      	bne.n	8008706 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d14d      	bne.n	800878e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	4618      	mov	r0, r3
 80086f8:	f001 fabe 	bl	8009c78 <xTaskPriorityDisinherit>
 80086fc:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	2200      	movs	r2, #0
 8008702:	605a      	str	r2, [r3, #4]
 8008704:	e043      	b.n	800878e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d119      	bne.n	8008740 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	6898      	ldr	r0, [r3, #8]
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008714:	461a      	mov	r2, r3
 8008716:	68b9      	ldr	r1, [r7, #8]
 8008718:	f003 f990 	bl	800ba3c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	689a      	ldr	r2, [r3, #8]
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008724:	441a      	add	r2, r3
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	689a      	ldr	r2, [r3, #8]
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	685b      	ldr	r3, [r3, #4]
 8008732:	429a      	cmp	r2, r3
 8008734:	d32b      	bcc.n	800878e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681a      	ldr	r2, [r3, #0]
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	609a      	str	r2, [r3, #8]
 800873e:	e026      	b.n	800878e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	68d8      	ldr	r0, [r3, #12]
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008748:	461a      	mov	r2, r3
 800874a:	68b9      	ldr	r1, [r7, #8]
 800874c:	f003 f976 	bl	800ba3c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	68da      	ldr	r2, [r3, #12]
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008758:	425b      	negs	r3, r3
 800875a:	441a      	add	r2, r3
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	68da      	ldr	r2, [r3, #12]
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	429a      	cmp	r2, r3
 800876a:	d207      	bcs.n	800877c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	685a      	ldr	r2, [r3, #4]
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008774:	425b      	negs	r3, r3
 8008776:	441a      	add	r2, r3
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2b02      	cmp	r3, #2
 8008780:	d105      	bne.n	800878e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d002      	beq.n	800878e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	3b01      	subs	r3, #1
 800878c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	1c5a      	adds	r2, r3, #1
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008796:	697b      	ldr	r3, [r7, #20]
}
 8008798:	4618      	mov	r0, r3
 800879a:	3718      	adds	r7, #24
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}

080087a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b082      	sub	sp, #8
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d018      	beq.n	80087e4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	68da      	ldr	r2, [r3, #12]
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ba:	441a      	add	r2, r3
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	68da      	ldr	r2, [r3, #12]
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	685b      	ldr	r3, [r3, #4]
 80087c8:	429a      	cmp	r2, r3
 80087ca:	d303      	bcc.n	80087d4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681a      	ldr	r2, [r3, #0]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	68d9      	ldr	r1, [r3, #12]
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087dc:	461a      	mov	r2, r3
 80087de:	6838      	ldr	r0, [r7, #0]
 80087e0:	f003 f92c 	bl	800ba3c <memcpy>
	}
}
 80087e4:	bf00      	nop
 80087e6:	3708      	adds	r7, #8
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}

080087ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b084      	sub	sp, #16
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80087f4:	f001 ffda 	bl	800a7ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80087fe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008800:	e011      	b.n	8008826 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008806:	2b00      	cmp	r3, #0
 8008808:	d012      	beq.n	8008830 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	3324      	adds	r3, #36	; 0x24
 800880e:	4618      	mov	r0, r3
 8008810:	f000 ff70 	bl	80096f4 <xTaskRemoveFromEventList>
 8008814:	4603      	mov	r3, r0
 8008816:	2b00      	cmp	r3, #0
 8008818:	d001      	beq.n	800881e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800881a:	f001 f8a9 	bl	8009970 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800881e:	7bfb      	ldrb	r3, [r7, #15]
 8008820:	3b01      	subs	r3, #1
 8008822:	b2db      	uxtb	r3, r3
 8008824:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800882a:	2b00      	cmp	r3, #0
 800882c:	dce9      	bgt.n	8008802 <prvUnlockQueue+0x16>
 800882e:	e000      	b.n	8008832 <prvUnlockQueue+0x46>
					break;
 8008830:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	22ff      	movs	r2, #255	; 0xff
 8008836:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800883a:	f001 ffe7 	bl	800a80c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800883e:	f001 ffb5 	bl	800a7ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008848:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800884a:	e011      	b.n	8008870 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	691b      	ldr	r3, [r3, #16]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d012      	beq.n	800887a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	3310      	adds	r3, #16
 8008858:	4618      	mov	r0, r3
 800885a:	f000 ff4b 	bl	80096f4 <xTaskRemoveFromEventList>
 800885e:	4603      	mov	r3, r0
 8008860:	2b00      	cmp	r3, #0
 8008862:	d001      	beq.n	8008868 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008864:	f001 f884 	bl	8009970 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008868:	7bbb      	ldrb	r3, [r7, #14]
 800886a:	3b01      	subs	r3, #1
 800886c:	b2db      	uxtb	r3, r3
 800886e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008870:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008874:	2b00      	cmp	r3, #0
 8008876:	dce9      	bgt.n	800884c <prvUnlockQueue+0x60>
 8008878:	e000      	b.n	800887c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800887a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	22ff      	movs	r2, #255	; 0xff
 8008880:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008884:	f001 ffc2 	bl	800a80c <vPortExitCritical>
}
 8008888:	bf00      	nop
 800888a:	3710      	adds	r7, #16
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}

08008890 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b084      	sub	sp, #16
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008898:	f001 ff88 	bl	800a7ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d102      	bne.n	80088aa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80088a4:	2301      	movs	r3, #1
 80088a6:	60fb      	str	r3, [r7, #12]
 80088a8:	e001      	b.n	80088ae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80088aa:	2300      	movs	r3, #0
 80088ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80088ae:	f001 ffad 	bl	800a80c <vPortExitCritical>

	return xReturn;
 80088b2:	68fb      	ldr	r3, [r7, #12]
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3710      	adds	r7, #16
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}

080088bc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b084      	sub	sp, #16
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80088c4:	f001 ff72 	bl	800a7ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088d0:	429a      	cmp	r2, r3
 80088d2:	d102      	bne.n	80088da <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80088d4:	2301      	movs	r3, #1
 80088d6:	60fb      	str	r3, [r7, #12]
 80088d8:	e001      	b.n	80088de <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80088da:	2300      	movs	r3, #0
 80088dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80088de:	f001 ff95 	bl	800a80c <vPortExitCritical>

	return xReturn;
 80088e2:	68fb      	ldr	r3, [r7, #12]
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	3710      	adds	r7, #16
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}

080088ec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80088ec:	b480      	push	{r7}
 80088ee:	b085      	sub	sp, #20
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
 80088f4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80088f6:	2300      	movs	r3, #0
 80088f8:	60fb      	str	r3, [r7, #12]
 80088fa:	e014      	b.n	8008926 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80088fc:	4a0e      	ldr	r2, [pc, #56]	; (8008938 <vQueueAddToRegistry+0x4c>)
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d10b      	bne.n	8008920 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008908:	490b      	ldr	r1, [pc, #44]	; (8008938 <vQueueAddToRegistry+0x4c>)
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	683a      	ldr	r2, [r7, #0]
 800890e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008912:	4a09      	ldr	r2, [pc, #36]	; (8008938 <vQueueAddToRegistry+0x4c>)
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	00db      	lsls	r3, r3, #3
 8008918:	4413      	add	r3, r2
 800891a:	687a      	ldr	r2, [r7, #4]
 800891c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800891e:	e006      	b.n	800892e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	3301      	adds	r3, #1
 8008924:	60fb      	str	r3, [r7, #12]
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2b07      	cmp	r3, #7
 800892a:	d9e7      	bls.n	80088fc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800892c:	bf00      	nop
 800892e:	bf00      	nop
 8008930:	3714      	adds	r7, #20
 8008932:	46bd      	mov	sp, r7
 8008934:	bc80      	pop	{r7}
 8008936:	4770      	bx	lr
 8008938:	200007f0 	.word	0x200007f0

0800893c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800893c:	b480      	push	{r7}
 800893e:	b085      	sub	sp, #20
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008944:	2300      	movs	r3, #0
 8008946:	60fb      	str	r3, [r7, #12]
 8008948:	e016      	b.n	8008978 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800894a:	4a10      	ldr	r2, [pc, #64]	; (800898c <vQueueUnregisterQueue+0x50>)
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	00db      	lsls	r3, r3, #3
 8008950:	4413      	add	r3, r2
 8008952:	685b      	ldr	r3, [r3, #4]
 8008954:	687a      	ldr	r2, [r7, #4]
 8008956:	429a      	cmp	r2, r3
 8008958:	d10b      	bne.n	8008972 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800895a:	4a0c      	ldr	r2, [pc, #48]	; (800898c <vQueueUnregisterQueue+0x50>)
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	2100      	movs	r1, #0
 8008960:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008964:	4a09      	ldr	r2, [pc, #36]	; (800898c <vQueueUnregisterQueue+0x50>)
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	00db      	lsls	r3, r3, #3
 800896a:	4413      	add	r3, r2
 800896c:	2200      	movs	r2, #0
 800896e:	605a      	str	r2, [r3, #4]
				break;
 8008970:	e006      	b.n	8008980 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	3301      	adds	r3, #1
 8008976:	60fb      	str	r3, [r7, #12]
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2b07      	cmp	r3, #7
 800897c:	d9e5      	bls.n	800894a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800897e:	bf00      	nop
 8008980:	bf00      	nop
 8008982:	3714      	adds	r7, #20
 8008984:	46bd      	mov	sp, r7
 8008986:	bc80      	pop	{r7}
 8008988:	4770      	bx	lr
 800898a:	bf00      	nop
 800898c:	200007f0 	.word	0x200007f0

08008990 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008990:	b580      	push	{r7, lr}
 8008992:	b086      	sub	sp, #24
 8008994:	af00      	add	r7, sp, #0
 8008996:	60f8      	str	r0, [r7, #12]
 8008998:	60b9      	str	r1, [r7, #8]
 800899a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80089a0:	f001 ff04 	bl	800a7ac <vPortEnterCritical>
 80089a4:	697b      	ldr	r3, [r7, #20]
 80089a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80089aa:	b25b      	sxtb	r3, r3
 80089ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089b0:	d103      	bne.n	80089ba <vQueueWaitForMessageRestricted+0x2a>
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	2200      	movs	r2, #0
 80089b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80089c0:	b25b      	sxtb	r3, r3
 80089c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089c6:	d103      	bne.n	80089d0 <vQueueWaitForMessageRestricted+0x40>
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	2200      	movs	r2, #0
 80089cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80089d0:	f001 ff1c 	bl	800a80c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d106      	bne.n	80089ea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	3324      	adds	r3, #36	; 0x24
 80089e0:	687a      	ldr	r2, [r7, #4]
 80089e2:	68b9      	ldr	r1, [r7, #8]
 80089e4:	4618      	mov	r0, r3
 80089e6:	f000 fe59 	bl	800969c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80089ea:	6978      	ldr	r0, [r7, #20]
 80089ec:	f7ff fefe 	bl	80087ec <prvUnlockQueue>
	}
 80089f0:	bf00      	nop
 80089f2:	3718      	adds	r7, #24
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}

080089f8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b08e      	sub	sp, #56	; 0x38
 80089fc:	af04      	add	r7, sp, #16
 80089fe:	60f8      	str	r0, [r7, #12]
 8008a00:	60b9      	str	r1, [r7, #8]
 8008a02:	607a      	str	r2, [r7, #4]
 8008a04:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d10a      	bne.n	8008a22 <xTaskCreateStatic+0x2a>
	__asm volatile
 8008a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a10:	f383 8811 	msr	BASEPRI, r3
 8008a14:	f3bf 8f6f 	isb	sy
 8008a18:	f3bf 8f4f 	dsb	sy
 8008a1c:	623b      	str	r3, [r7, #32]
}
 8008a1e:	bf00      	nop
 8008a20:	e7fe      	b.n	8008a20 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d10a      	bne.n	8008a3e <xTaskCreateStatic+0x46>
	__asm volatile
 8008a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a2c:	f383 8811 	msr	BASEPRI, r3
 8008a30:	f3bf 8f6f 	isb	sy
 8008a34:	f3bf 8f4f 	dsb	sy
 8008a38:	61fb      	str	r3, [r7, #28]
}
 8008a3a:	bf00      	nop
 8008a3c:	e7fe      	b.n	8008a3c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008a3e:	23a4      	movs	r3, #164	; 0xa4
 8008a40:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008a42:	693b      	ldr	r3, [r7, #16]
 8008a44:	2ba4      	cmp	r3, #164	; 0xa4
 8008a46:	d00a      	beq.n	8008a5e <xTaskCreateStatic+0x66>
	__asm volatile
 8008a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a4c:	f383 8811 	msr	BASEPRI, r3
 8008a50:	f3bf 8f6f 	isb	sy
 8008a54:	f3bf 8f4f 	dsb	sy
 8008a58:	61bb      	str	r3, [r7, #24]
}
 8008a5a:	bf00      	nop
 8008a5c:	e7fe      	b.n	8008a5c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d01e      	beq.n	8008aa2 <xTaskCreateStatic+0xaa>
 8008a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d01b      	beq.n	8008aa2 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a6c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a72:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a76:	2202      	movs	r2, #2
 8008a78:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	9303      	str	r3, [sp, #12]
 8008a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a82:	9302      	str	r3, [sp, #8]
 8008a84:	f107 0314 	add.w	r3, r7, #20
 8008a88:	9301      	str	r3, [sp, #4]
 8008a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a8c:	9300      	str	r3, [sp, #0]
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	687a      	ldr	r2, [r7, #4]
 8008a92:	68b9      	ldr	r1, [r7, #8]
 8008a94:	68f8      	ldr	r0, [r7, #12]
 8008a96:	f000 f851 	bl	8008b3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008a9a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a9c:	f000 f8ec 	bl	8008c78 <prvAddNewTaskToReadyList>
 8008aa0:	e001      	b.n	8008aa6 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008aa6:	697b      	ldr	r3, [r7, #20]
	}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3728      	adds	r7, #40	; 0x28
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}

08008ab0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b08c      	sub	sp, #48	; 0x30
 8008ab4:	af04      	add	r7, sp, #16
 8008ab6:	60f8      	str	r0, [r7, #12]
 8008ab8:	60b9      	str	r1, [r7, #8]
 8008aba:	603b      	str	r3, [r7, #0]
 8008abc:	4613      	mov	r3, r2
 8008abe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ac0:	88fb      	ldrh	r3, [r7, #6]
 8008ac2:	009b      	lsls	r3, r3, #2
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f001 ff71 	bl	800a9ac <pvPortMalloc>
 8008aca:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d00e      	beq.n	8008af0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8008ad2:	20a4      	movs	r0, #164	; 0xa4
 8008ad4:	f001 ff6a 	bl	800a9ac <pvPortMalloc>
 8008ad8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008ada:	69fb      	ldr	r3, [r7, #28]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d003      	beq.n	8008ae8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008ae0:	69fb      	ldr	r3, [r7, #28]
 8008ae2:	697a      	ldr	r2, [r7, #20]
 8008ae4:	631a      	str	r2, [r3, #48]	; 0x30
 8008ae6:	e005      	b.n	8008af4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008ae8:	6978      	ldr	r0, [r7, #20]
 8008aea:	f002 f823 	bl	800ab34 <vPortFree>
 8008aee:	e001      	b.n	8008af4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008af0:	2300      	movs	r3, #0
 8008af2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008af4:	69fb      	ldr	r3, [r7, #28]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d017      	beq.n	8008b2a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008afa:	69fb      	ldr	r3, [r7, #28]
 8008afc:	2200      	movs	r2, #0
 8008afe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008b02:	88fa      	ldrh	r2, [r7, #6]
 8008b04:	2300      	movs	r3, #0
 8008b06:	9303      	str	r3, [sp, #12]
 8008b08:	69fb      	ldr	r3, [r7, #28]
 8008b0a:	9302      	str	r3, [sp, #8]
 8008b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b0e:	9301      	str	r3, [sp, #4]
 8008b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b12:	9300      	str	r3, [sp, #0]
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	68b9      	ldr	r1, [r7, #8]
 8008b18:	68f8      	ldr	r0, [r7, #12]
 8008b1a:	f000 f80f 	bl	8008b3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008b1e:	69f8      	ldr	r0, [r7, #28]
 8008b20:	f000 f8aa 	bl	8008c78 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008b24:	2301      	movs	r3, #1
 8008b26:	61bb      	str	r3, [r7, #24]
 8008b28:	e002      	b.n	8008b30 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8008b2e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008b30:	69bb      	ldr	r3, [r7, #24]
	}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3720      	adds	r7, #32
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}
	...

08008b3c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b088      	sub	sp, #32
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	60f8      	str	r0, [r7, #12]
 8008b44:	60b9      	str	r1, [r7, #8]
 8008b46:	607a      	str	r2, [r7, #4]
 8008b48:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b4c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	009b      	lsls	r3, r3, #2
 8008b52:	461a      	mov	r2, r3
 8008b54:	21a5      	movs	r1, #165	; 0xa5
 8008b56:	f002 feef 	bl	800b938 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8008b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008b64:	3b01      	subs	r3, #1
 8008b66:	009b      	lsls	r3, r3, #2
 8008b68:	4413      	add	r3, r2
 8008b6a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008b6c:	69bb      	ldr	r3, [r7, #24]
 8008b6e:	f023 0307 	bic.w	r3, r3, #7
 8008b72:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008b74:	69bb      	ldr	r3, [r7, #24]
 8008b76:	f003 0307 	and.w	r3, r3, #7
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d00a      	beq.n	8008b94 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b82:	f383 8811 	msr	BASEPRI, r3
 8008b86:	f3bf 8f6f 	isb	sy
 8008b8a:	f3bf 8f4f 	dsb	sy
 8008b8e:	617b      	str	r3, [r7, #20]
}
 8008b90:	bf00      	nop
 8008b92:	e7fe      	b.n	8008b92 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008b94:	2300      	movs	r3, #0
 8008b96:	61fb      	str	r3, [r7, #28]
 8008b98:	e012      	b.n	8008bc0 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008b9a:	68ba      	ldr	r2, [r7, #8]
 8008b9c:	69fb      	ldr	r3, [r7, #28]
 8008b9e:	4413      	add	r3, r2
 8008ba0:	7819      	ldrb	r1, [r3, #0]
 8008ba2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ba4:	69fb      	ldr	r3, [r7, #28]
 8008ba6:	4413      	add	r3, r2
 8008ba8:	3334      	adds	r3, #52	; 0x34
 8008baa:	460a      	mov	r2, r1
 8008bac:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8008bae:	68ba      	ldr	r2, [r7, #8]
 8008bb0:	69fb      	ldr	r3, [r7, #28]
 8008bb2:	4413      	add	r3, r2
 8008bb4:	781b      	ldrb	r3, [r3, #0]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d006      	beq.n	8008bc8 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008bba:	69fb      	ldr	r3, [r7, #28]
 8008bbc:	3301      	adds	r3, #1
 8008bbe:	61fb      	str	r3, [r7, #28]
 8008bc0:	69fb      	ldr	r3, [r7, #28]
 8008bc2:	2b0b      	cmp	r3, #11
 8008bc4:	d9e9      	bls.n	8008b9a <prvInitialiseNewTask+0x5e>
 8008bc6:	e000      	b.n	8008bca <prvInitialiseNewTask+0x8e>
		{
			break;
 8008bc8:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bcc:	2200      	movs	r2, #0
 8008bce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bd4:	2b37      	cmp	r3, #55	; 0x37
 8008bd6:	d901      	bls.n	8008bdc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008bd8:	2337      	movs	r3, #55	; 0x37
 8008bda:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008be0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008be4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008be6:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8008be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bea:	2200      	movs	r2, #0
 8008bec:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bf0:	3304      	adds	r3, #4
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f7fe fdad 	bl	8007752 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bfa:	3318      	adds	r3, #24
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	f7fe fda8 	bl	8007752 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c06:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c0a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c10:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c16:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c22:	2200      	movs	r2, #0
 8008c24:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c2a:	3350      	adds	r3, #80	; 0x50
 8008c2c:	224c      	movs	r2, #76	; 0x4c
 8008c2e:	2100      	movs	r1, #0
 8008c30:	4618      	mov	r0, r3
 8008c32:	f002 fe81 	bl	800b938 <memset>
 8008c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c38:	4a0c      	ldr	r2, [pc, #48]	; (8008c6c <prvInitialiseNewTask+0x130>)
 8008c3a:	655a      	str	r2, [r3, #84]	; 0x54
 8008c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c3e:	4a0c      	ldr	r2, [pc, #48]	; (8008c70 <prvInitialiseNewTask+0x134>)
 8008c40:	659a      	str	r2, [r3, #88]	; 0x58
 8008c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c44:	4a0b      	ldr	r2, [pc, #44]	; (8008c74 <prvInitialiseNewTask+0x138>)
 8008c46:	65da      	str	r2, [r3, #92]	; 0x5c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008c48:	683a      	ldr	r2, [r7, #0]
 8008c4a:	68f9      	ldr	r1, [r7, #12]
 8008c4c:	69b8      	ldr	r0, [r7, #24]
 8008c4e:	f001 fcb9 	bl	800a5c4 <pxPortInitialiseStack>
 8008c52:	4602      	mov	r2, r0
 8008c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c56:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8008c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d002      	beq.n	8008c64 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c62:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c64:	bf00      	nop
 8008c66:	3720      	adds	r7, #32
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}
 8008c6c:	20002e84 	.word	0x20002e84
 8008c70:	20002eec 	.word	0x20002eec
 8008c74:	20002f54 	.word	0x20002f54

08008c78 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b082      	sub	sp, #8
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008c80:	f001 fd94 	bl	800a7ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008c84:	4b2d      	ldr	r3, [pc, #180]	; (8008d3c <prvAddNewTaskToReadyList+0xc4>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	3301      	adds	r3, #1
 8008c8a:	4a2c      	ldr	r2, [pc, #176]	; (8008d3c <prvAddNewTaskToReadyList+0xc4>)
 8008c8c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008c8e:	4b2c      	ldr	r3, [pc, #176]	; (8008d40 <prvAddNewTaskToReadyList+0xc8>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d109      	bne.n	8008caa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008c96:	4a2a      	ldr	r2, [pc, #168]	; (8008d40 <prvAddNewTaskToReadyList+0xc8>)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008c9c:	4b27      	ldr	r3, [pc, #156]	; (8008d3c <prvAddNewTaskToReadyList+0xc4>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	2b01      	cmp	r3, #1
 8008ca2:	d110      	bne.n	8008cc6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008ca4:	f000 fe88 	bl	80099b8 <prvInitialiseTaskLists>
 8008ca8:	e00d      	b.n	8008cc6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008caa:	4b26      	ldr	r3, [pc, #152]	; (8008d44 <prvAddNewTaskToReadyList+0xcc>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d109      	bne.n	8008cc6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008cb2:	4b23      	ldr	r3, [pc, #140]	; (8008d40 <prvAddNewTaskToReadyList+0xc8>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	d802      	bhi.n	8008cc6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008cc0:	4a1f      	ldr	r2, [pc, #124]	; (8008d40 <prvAddNewTaskToReadyList+0xc8>)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008cc6:	4b20      	ldr	r3, [pc, #128]	; (8008d48 <prvAddNewTaskToReadyList+0xd0>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	3301      	adds	r3, #1
 8008ccc:	4a1e      	ldr	r2, [pc, #120]	; (8008d48 <prvAddNewTaskToReadyList+0xd0>)
 8008cce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008cd0:	4b1d      	ldr	r3, [pc, #116]	; (8008d48 <prvAddNewTaskToReadyList+0xd0>)
 8008cd2:	681a      	ldr	r2, [r3, #0]
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cdc:	4b1b      	ldr	r3, [pc, #108]	; (8008d4c <prvAddNewTaskToReadyList+0xd4>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d903      	bls.n	8008cec <prvAddNewTaskToReadyList+0x74>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ce8:	4a18      	ldr	r2, [pc, #96]	; (8008d4c <prvAddNewTaskToReadyList+0xd4>)
 8008cea:	6013      	str	r3, [r2, #0]
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cf0:	4613      	mov	r3, r2
 8008cf2:	009b      	lsls	r3, r3, #2
 8008cf4:	4413      	add	r3, r2
 8008cf6:	009b      	lsls	r3, r3, #2
 8008cf8:	4a15      	ldr	r2, [pc, #84]	; (8008d50 <prvAddNewTaskToReadyList+0xd8>)
 8008cfa:	441a      	add	r2, r3
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	3304      	adds	r3, #4
 8008d00:	4619      	mov	r1, r3
 8008d02:	4610      	mov	r0, r2
 8008d04:	f7fe fd31 	bl	800776a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008d08:	f001 fd80 	bl	800a80c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008d0c:	4b0d      	ldr	r3, [pc, #52]	; (8008d44 <prvAddNewTaskToReadyList+0xcc>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d00e      	beq.n	8008d32 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008d14:	4b0a      	ldr	r3, [pc, #40]	; (8008d40 <prvAddNewTaskToReadyList+0xc8>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d1e:	429a      	cmp	r2, r3
 8008d20:	d207      	bcs.n	8008d32 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008d22:	4b0c      	ldr	r3, [pc, #48]	; (8008d54 <prvAddNewTaskToReadyList+0xdc>)
 8008d24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d28:	601a      	str	r2, [r3, #0]
 8008d2a:	f3bf 8f4f 	dsb	sy
 8008d2e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d32:	bf00      	nop
 8008d34:	3708      	adds	r7, #8
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}
 8008d3a:	bf00      	nop
 8008d3c:	20000d04 	.word	0x20000d04
 8008d40:	20000830 	.word	0x20000830
 8008d44:	20000d10 	.word	0x20000d10
 8008d48:	20000d20 	.word	0x20000d20
 8008d4c:	20000d0c 	.word	0x20000d0c
 8008d50:	20000834 	.word	0x20000834
 8008d54:	e000ed04 	.word	0xe000ed04

08008d58 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b084      	sub	sp, #16
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008d60:	2300      	movs	r3, #0
 8008d62:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d017      	beq.n	8008d9a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008d6a:	4b13      	ldr	r3, [pc, #76]	; (8008db8 <vTaskDelay+0x60>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d00a      	beq.n	8008d88 <vTaskDelay+0x30>
	__asm volatile
 8008d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d76:	f383 8811 	msr	BASEPRI, r3
 8008d7a:	f3bf 8f6f 	isb	sy
 8008d7e:	f3bf 8f4f 	dsb	sy
 8008d82:	60bb      	str	r3, [r7, #8]
}
 8008d84:	bf00      	nop
 8008d86:	e7fe      	b.n	8008d86 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008d88:	f000 fa3a 	bl	8009200 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008d8c:	2100      	movs	r1, #0
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f001 f892 	bl	8009eb8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008d94:	f000 fa42 	bl	800921c <xTaskResumeAll>
 8008d98:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d107      	bne.n	8008db0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008da0:	4b06      	ldr	r3, [pc, #24]	; (8008dbc <vTaskDelay+0x64>)
 8008da2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008da6:	601a      	str	r2, [r3, #0]
 8008da8:	f3bf 8f4f 	dsb	sy
 8008dac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008db0:	bf00      	nop
 8008db2:	3710      	adds	r7, #16
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}
 8008db8:	20000d2c 	.word	0x20000d2c
 8008dbc:	e000ed04 	.word	0xe000ed04

08008dc0 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b088      	sub	sp, #32
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
 8008dc8:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	2b37      	cmp	r3, #55	; 0x37
 8008dd2:	d90a      	bls.n	8008dea <vTaskPrioritySet+0x2a>
	__asm volatile
 8008dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd8:	f383 8811 	msr	BASEPRI, r3
 8008ddc:	f3bf 8f6f 	isb	sy
 8008de0:	f3bf 8f4f 	dsb	sy
 8008de4:	60fb      	str	r3, [r7, #12]
}
 8008de6:	bf00      	nop
 8008de8:	e7fe      	b.n	8008de8 <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	2b37      	cmp	r3, #55	; 0x37
 8008dee:	d901      	bls.n	8008df4 <vTaskPrioritySet+0x34>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008df0:	2337      	movs	r3, #55	; 0x37
 8008df2:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 8008df4:	f001 fcda 	bl	800a7ac <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d102      	bne.n	8008e04 <vTaskPrioritySet+0x44>
 8008dfe:	4b3d      	ldr	r3, [pc, #244]	; (8008ef4 <vTaskPrioritySet+0x134>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	e000      	b.n	8008e06 <vTaskPrioritySet+0x46>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 8008e08:	69bb      	ldr	r3, [r7, #24]
 8008e0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e0c:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 8008e0e:	697a      	ldr	r2, [r7, #20]
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	429a      	cmp	r2, r3
 8008e14:	d068      	beq.n	8008ee8 <vTaskPrioritySet+0x128>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 8008e16:	683a      	ldr	r2, [r7, #0]
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	429a      	cmp	r2, r3
 8008e1c:	d90d      	bls.n	8008e3a <vTaskPrioritySet+0x7a>
				{
					if( pxTCB != pxCurrentTCB )
 8008e1e:	4b35      	ldr	r3, [pc, #212]	; (8008ef4 <vTaskPrioritySet+0x134>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	69ba      	ldr	r2, [r7, #24]
 8008e24:	429a      	cmp	r2, r3
 8008e26:	d00f      	beq.n	8008e48 <vTaskPrioritySet+0x88>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8008e28:	4b32      	ldr	r3, [pc, #200]	; (8008ef4 <vTaskPrioritySet+0x134>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e2e:	683a      	ldr	r2, [r7, #0]
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d309      	bcc.n	8008e48 <vTaskPrioritySet+0x88>
						{
							xYieldRequired = pdTRUE;
 8008e34:	2301      	movs	r3, #1
 8008e36:	61fb      	str	r3, [r7, #28]
 8008e38:	e006      	b.n	8008e48 <vTaskPrioritySet+0x88>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 8008e3a:	4b2e      	ldr	r3, [pc, #184]	; (8008ef4 <vTaskPrioritySet+0x134>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	69ba      	ldr	r2, [r7, #24]
 8008e40:	429a      	cmp	r2, r3
 8008e42:	d101      	bne.n	8008e48 <vTaskPrioritySet+0x88>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 8008e44:	2301      	movs	r3, #1
 8008e46:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008e48:	69bb      	ldr	r3, [r7, #24]
 8008e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e4c:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8008e4e:	69bb      	ldr	r3, [r7, #24]
 8008e50:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008e52:	69bb      	ldr	r3, [r7, #24]
 8008e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d102      	bne.n	8008e60 <vTaskPrioritySet+0xa0>
					{
						pxTCB->uxPriority = uxNewPriority;
 8008e5a:	69bb      	ldr	r3, [r7, #24]
 8008e5c:	683a      	ldr	r2, [r7, #0]
 8008e5e:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 8008e60:	69bb      	ldr	r3, [r7, #24]
 8008e62:	683a      	ldr	r2, [r7, #0]
 8008e64:	649a      	str	r2, [r3, #72]	; 0x48
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008e66:	69bb      	ldr	r3, [r7, #24]
 8008e68:	699b      	ldr	r3, [r3, #24]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	db04      	blt.n	8008e78 <vTaskPrioritySet+0xb8>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008e74:	69bb      	ldr	r3, [r7, #24]
 8008e76:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008e78:	69bb      	ldr	r3, [r7, #24]
 8008e7a:	6959      	ldr	r1, [r3, #20]
 8008e7c:	693a      	ldr	r2, [r7, #16]
 8008e7e:	4613      	mov	r3, r2
 8008e80:	009b      	lsls	r3, r3, #2
 8008e82:	4413      	add	r3, r2
 8008e84:	009b      	lsls	r3, r3, #2
 8008e86:	4a1c      	ldr	r2, [pc, #112]	; (8008ef8 <vTaskPrioritySet+0x138>)
 8008e88:	4413      	add	r3, r2
 8008e8a:	4299      	cmp	r1, r3
 8008e8c:	d101      	bne.n	8008e92 <vTaskPrioritySet+0xd2>
 8008e8e:	2301      	movs	r3, #1
 8008e90:	e000      	b.n	8008e94 <vTaskPrioritySet+0xd4>
 8008e92:	2300      	movs	r3, #0
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d01c      	beq.n	8008ed2 <vTaskPrioritySet+0x112>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e98:	69bb      	ldr	r3, [r7, #24]
 8008e9a:	3304      	adds	r3, #4
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f7fe fcbf 	bl	8007820 <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 8008ea2:	69bb      	ldr	r3, [r7, #24]
 8008ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ea6:	4b15      	ldr	r3, [pc, #84]	; (8008efc <vTaskPrioritySet+0x13c>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	429a      	cmp	r2, r3
 8008eac:	d903      	bls.n	8008eb6 <vTaskPrioritySet+0xf6>
 8008eae:	69bb      	ldr	r3, [r7, #24]
 8008eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eb2:	4a12      	ldr	r2, [pc, #72]	; (8008efc <vTaskPrioritySet+0x13c>)
 8008eb4:	6013      	str	r3, [r2, #0]
 8008eb6:	69bb      	ldr	r3, [r7, #24]
 8008eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eba:	4613      	mov	r3, r2
 8008ebc:	009b      	lsls	r3, r3, #2
 8008ebe:	4413      	add	r3, r2
 8008ec0:	009b      	lsls	r3, r3, #2
 8008ec2:	4a0d      	ldr	r2, [pc, #52]	; (8008ef8 <vTaskPrioritySet+0x138>)
 8008ec4:	441a      	add	r2, r3
 8008ec6:	69bb      	ldr	r3, [r7, #24]
 8008ec8:	3304      	adds	r3, #4
 8008eca:	4619      	mov	r1, r3
 8008ecc:	4610      	mov	r0, r2
 8008ece:	f7fe fc4c 	bl	800776a <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 8008ed2:	69fb      	ldr	r3, [r7, #28]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d007      	beq.n	8008ee8 <vTaskPrioritySet+0x128>
				{
					taskYIELD_IF_USING_PREEMPTION();
 8008ed8:	4b09      	ldr	r3, [pc, #36]	; (8008f00 <vTaskPrioritySet+0x140>)
 8008eda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ede:	601a      	str	r2, [r3, #0]
 8008ee0:	f3bf 8f4f 	dsb	sy
 8008ee4:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 8008ee8:	f001 fc90 	bl	800a80c <vPortExitCritical>
	}
 8008eec:	bf00      	nop
 8008eee:	3720      	adds	r7, #32
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}
 8008ef4:	20000830 	.word	0x20000830
 8008ef8:	20000834 	.word	0x20000834
 8008efc:	20000d0c 	.word	0x20000d0c
 8008f00:	e000ed04 	.word	0xe000ed04

08008f04 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b084      	sub	sp, #16
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8008f0c:	f001 fc4e 	bl	800a7ac <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d102      	bne.n	8008f1c <vTaskSuspend+0x18>
 8008f16:	4b30      	ldr	r3, [pc, #192]	; (8008fd8 <vTaskSuspend+0xd4>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	e000      	b.n	8008f1e <vTaskSuspend+0x1a>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	3304      	adds	r3, #4
 8008f24:	4618      	mov	r0, r3
 8008f26:	f7fe fc7b 	bl	8007820 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d004      	beq.n	8008f3c <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	3318      	adds	r3, #24
 8008f36:	4618      	mov	r0, r3
 8008f38:	f7fe fc72 	bl	8007820 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	3304      	adds	r3, #4
 8008f40:	4619      	mov	r1, r3
 8008f42:	4826      	ldr	r0, [pc, #152]	; (8008fdc <vTaskSuspend+0xd8>)
 8008f44:	f7fe fc11 	bl	800776a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8008f4e:	b2db      	uxtb	r3, r3
 8008f50:	2b01      	cmp	r3, #1
 8008f52:	d103      	bne.n	8008f5c <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2200      	movs	r2, #0
 8008f58:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8008f5c:	f001 fc56 	bl	800a80c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8008f60:	4b1f      	ldr	r3, [pc, #124]	; (8008fe0 <vTaskSuspend+0xdc>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d005      	beq.n	8008f74 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8008f68:	f001 fc20 	bl	800a7ac <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8008f6c:	f000 fdc6 	bl	8009afc <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8008f70:	f001 fc4c 	bl	800a80c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8008f74:	4b18      	ldr	r3, [pc, #96]	; (8008fd8 <vTaskSuspend+0xd4>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	68fa      	ldr	r2, [r7, #12]
 8008f7a:	429a      	cmp	r2, r3
 8008f7c:	d127      	bne.n	8008fce <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 8008f7e:	4b18      	ldr	r3, [pc, #96]	; (8008fe0 <vTaskSuspend+0xdc>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d017      	beq.n	8008fb6 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8008f86:	4b17      	ldr	r3, [pc, #92]	; (8008fe4 <vTaskSuspend+0xe0>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d00a      	beq.n	8008fa4 <vTaskSuspend+0xa0>
	__asm volatile
 8008f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f92:	f383 8811 	msr	BASEPRI, r3
 8008f96:	f3bf 8f6f 	isb	sy
 8008f9a:	f3bf 8f4f 	dsb	sy
 8008f9e:	60bb      	str	r3, [r7, #8]
}
 8008fa0:	bf00      	nop
 8008fa2:	e7fe      	b.n	8008fa2 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8008fa4:	4b10      	ldr	r3, [pc, #64]	; (8008fe8 <vTaskSuspend+0xe4>)
 8008fa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008faa:	601a      	str	r2, [r3, #0]
 8008fac:	f3bf 8f4f 	dsb	sy
 8008fb0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008fb4:	e00b      	b.n	8008fce <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8008fb6:	4b09      	ldr	r3, [pc, #36]	; (8008fdc <vTaskSuspend+0xd8>)
 8008fb8:	681a      	ldr	r2, [r3, #0]
 8008fba:	4b0c      	ldr	r3, [pc, #48]	; (8008fec <vTaskSuspend+0xe8>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	429a      	cmp	r2, r3
 8008fc0:	d103      	bne.n	8008fca <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8008fc2:	4b05      	ldr	r3, [pc, #20]	; (8008fd8 <vTaskSuspend+0xd4>)
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	601a      	str	r2, [r3, #0]
	}
 8008fc8:	e001      	b.n	8008fce <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8008fca:	f000 faa3 	bl	8009514 <vTaskSwitchContext>
	}
 8008fce:	bf00      	nop
 8008fd0:	3710      	adds	r7, #16
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}
 8008fd6:	bf00      	nop
 8008fd8:	20000830 	.word	0x20000830
 8008fdc:	20000cf0 	.word	0x20000cf0
 8008fe0:	20000d10 	.word	0x20000d10
 8008fe4:	20000d2c 	.word	0x20000d2c
 8008fe8:	e000ed04 	.word	0xe000ed04
 8008fec:	20000d04 	.word	0x20000d04

08008ff0 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b087      	sub	sp, #28
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d10a      	bne.n	800901c <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8009006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800900a:	f383 8811 	msr	BASEPRI, r3
 800900e:	f3bf 8f6f 	isb	sy
 8009012:	f3bf 8f4f 	dsb	sy
 8009016:	60fb      	str	r3, [r7, #12]
}
 8009018:	bf00      	nop
 800901a:	e7fe      	b.n	800901a <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800901c:	693b      	ldr	r3, [r7, #16]
 800901e:	695b      	ldr	r3, [r3, #20]
 8009020:	4a0e      	ldr	r2, [pc, #56]	; (800905c <prvTaskIsTaskSuspended+0x6c>)
 8009022:	4293      	cmp	r3, r2
 8009024:	d101      	bne.n	800902a <prvTaskIsTaskSuspended+0x3a>
 8009026:	2301      	movs	r3, #1
 8009028:	e000      	b.n	800902c <prvTaskIsTaskSuspended+0x3c>
 800902a:	2300      	movs	r3, #0
 800902c:	2b00      	cmp	r3, #0
 800902e:	d00f      	beq.n	8009050 <prvTaskIsTaskSuspended+0x60>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8009030:	693b      	ldr	r3, [r7, #16]
 8009032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009034:	4a0a      	ldr	r2, [pc, #40]	; (8009060 <prvTaskIsTaskSuspended+0x70>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d00a      	beq.n	8009050 <prvTaskIsTaskSuspended+0x60>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800903e:	2b00      	cmp	r3, #0
 8009040:	d101      	bne.n	8009046 <prvTaskIsTaskSuspended+0x56>
 8009042:	2301      	movs	r3, #1
 8009044:	e000      	b.n	8009048 <prvTaskIsTaskSuspended+0x58>
 8009046:	2300      	movs	r3, #0
 8009048:	2b00      	cmp	r3, #0
 800904a:	d001      	beq.n	8009050 <prvTaskIsTaskSuspended+0x60>
				{
					xReturn = pdTRUE;
 800904c:	2301      	movs	r3, #1
 800904e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009050:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8009052:	4618      	mov	r0, r3
 8009054:	371c      	adds	r7, #28
 8009056:	46bd      	mov	sp, r7
 8009058:	bc80      	pop	{r7}
 800905a:	4770      	bx	lr
 800905c:	20000cf0 	.word	0x20000cf0
 8009060:	20000cc4 	.word	0x20000cc4

08009064 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8009064:	b580      	push	{r7, lr}
 8009066:	b084      	sub	sp, #16
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d10a      	bne.n	800908c <vTaskResume+0x28>
	__asm volatile
 8009076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800907a:	f383 8811 	msr	BASEPRI, r3
 800907e:	f3bf 8f6f 	isb	sy
 8009082:	f3bf 8f4f 	dsb	sy
 8009086:	60bb      	str	r3, [r7, #8]
}
 8009088:	bf00      	nop
 800908a:	e7fe      	b.n	800908a <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d03a      	beq.n	8009108 <vTaskResume+0xa4>
 8009092:	4b1f      	ldr	r3, [pc, #124]	; (8009110 <vTaskResume+0xac>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	68fa      	ldr	r2, [r7, #12]
 8009098:	429a      	cmp	r2, r3
 800909a:	d035      	beq.n	8009108 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 800909c:	f001 fb86 	bl	800a7ac <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80090a0:	68f8      	ldr	r0, [r7, #12]
 80090a2:	f7ff ffa5 	bl	8008ff0 <prvTaskIsTaskSuspended>
 80090a6:	4603      	mov	r3, r0
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d02b      	beq.n	8009104 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	3304      	adds	r3, #4
 80090b0:	4618      	mov	r0, r3
 80090b2:	f7fe fbb5 	bl	8007820 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090ba:	4b16      	ldr	r3, [pc, #88]	; (8009114 <vTaskResume+0xb0>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	429a      	cmp	r2, r3
 80090c0:	d903      	bls.n	80090ca <vTaskResume+0x66>
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090c6:	4a13      	ldr	r2, [pc, #76]	; (8009114 <vTaskResume+0xb0>)
 80090c8:	6013      	str	r3, [r2, #0]
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090ce:	4613      	mov	r3, r2
 80090d0:	009b      	lsls	r3, r3, #2
 80090d2:	4413      	add	r3, r2
 80090d4:	009b      	lsls	r3, r3, #2
 80090d6:	4a10      	ldr	r2, [pc, #64]	; (8009118 <vTaskResume+0xb4>)
 80090d8:	441a      	add	r2, r3
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	3304      	adds	r3, #4
 80090de:	4619      	mov	r1, r3
 80090e0:	4610      	mov	r0, r2
 80090e2:	f7fe fb42 	bl	800776a <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090ea:	4b09      	ldr	r3, [pc, #36]	; (8009110 <vTaskResume+0xac>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090f0:	429a      	cmp	r2, r3
 80090f2:	d307      	bcc.n	8009104 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 80090f4:	4b09      	ldr	r3, [pc, #36]	; (800911c <vTaskResume+0xb8>)
 80090f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090fa:	601a      	str	r2, [r3, #0]
 80090fc:	f3bf 8f4f 	dsb	sy
 8009100:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8009104:	f001 fb82 	bl	800a80c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009108:	bf00      	nop
 800910a:	3710      	adds	r7, #16
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}
 8009110:	20000830 	.word	0x20000830
 8009114:	20000d0c 	.word	0x20000d0c
 8009118:	20000834 	.word	0x20000834
 800911c:	e000ed04 	.word	0xe000ed04

08009120 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b08a      	sub	sp, #40	; 0x28
 8009124:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009126:	2300      	movs	r3, #0
 8009128:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800912a:	2300      	movs	r3, #0
 800912c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800912e:	463a      	mov	r2, r7
 8009130:	1d39      	adds	r1, r7, #4
 8009132:	f107 0308 	add.w	r3, r7, #8
 8009136:	4618      	mov	r0, r3
 8009138:	f7fe f852 	bl	80071e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800913c:	6839      	ldr	r1, [r7, #0]
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	68ba      	ldr	r2, [r7, #8]
 8009142:	9202      	str	r2, [sp, #8]
 8009144:	9301      	str	r3, [sp, #4]
 8009146:	2300      	movs	r3, #0
 8009148:	9300      	str	r3, [sp, #0]
 800914a:	2300      	movs	r3, #0
 800914c:	460a      	mov	r2, r1
 800914e:	4924      	ldr	r1, [pc, #144]	; (80091e0 <vTaskStartScheduler+0xc0>)
 8009150:	4824      	ldr	r0, [pc, #144]	; (80091e4 <vTaskStartScheduler+0xc4>)
 8009152:	f7ff fc51 	bl	80089f8 <xTaskCreateStatic>
 8009156:	4603      	mov	r3, r0
 8009158:	4a23      	ldr	r2, [pc, #140]	; (80091e8 <vTaskStartScheduler+0xc8>)
 800915a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800915c:	4b22      	ldr	r3, [pc, #136]	; (80091e8 <vTaskStartScheduler+0xc8>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d002      	beq.n	800916a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009164:	2301      	movs	r3, #1
 8009166:	617b      	str	r3, [r7, #20]
 8009168:	e001      	b.n	800916e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800916a:	2300      	movs	r3, #0
 800916c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	2b01      	cmp	r3, #1
 8009172:	d102      	bne.n	800917a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009174:	f000 fef4 	bl	8009f60 <xTimerCreateTimerTask>
 8009178:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	2b01      	cmp	r3, #1
 800917e:	d11b      	bne.n	80091b8 <vTaskStartScheduler+0x98>
	__asm volatile
 8009180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009184:	f383 8811 	msr	BASEPRI, r3
 8009188:	f3bf 8f6f 	isb	sy
 800918c:	f3bf 8f4f 	dsb	sy
 8009190:	613b      	str	r3, [r7, #16]
}
 8009192:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009194:	4b15      	ldr	r3, [pc, #84]	; (80091ec <vTaskStartScheduler+0xcc>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	3350      	adds	r3, #80	; 0x50
 800919a:	4a15      	ldr	r2, [pc, #84]	; (80091f0 <vTaskStartScheduler+0xd0>)
 800919c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800919e:	4b15      	ldr	r3, [pc, #84]	; (80091f4 <vTaskStartScheduler+0xd4>)
 80091a0:	f04f 32ff 	mov.w	r2, #4294967295
 80091a4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80091a6:	4b14      	ldr	r3, [pc, #80]	; (80091f8 <vTaskStartScheduler+0xd8>)
 80091a8:	2201      	movs	r2, #1
 80091aa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80091ac:	4b13      	ldr	r3, [pc, #76]	; (80091fc <vTaskStartScheduler+0xdc>)
 80091ae:	2200      	movs	r2, #0
 80091b0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80091b2:	f001 fa89 	bl	800a6c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80091b6:	e00e      	b.n	80091d6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091be:	d10a      	bne.n	80091d6 <vTaskStartScheduler+0xb6>
	__asm volatile
 80091c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c4:	f383 8811 	msr	BASEPRI, r3
 80091c8:	f3bf 8f6f 	isb	sy
 80091cc:	f3bf 8f4f 	dsb	sy
 80091d0:	60fb      	str	r3, [r7, #12]
}
 80091d2:	bf00      	nop
 80091d4:	e7fe      	b.n	80091d4 <vTaskStartScheduler+0xb4>
}
 80091d6:	bf00      	nop
 80091d8:	3718      	adds	r7, #24
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}
 80091de:	bf00      	nop
 80091e0:	0800bb18 	.word	0x0800bb18
 80091e4:	08009989 	.word	0x08009989
 80091e8:	20000d28 	.word	0x20000d28
 80091ec:	20000830 	.word	0x20000830
 80091f0:	20000074 	.word	0x20000074
 80091f4:	20000d24 	.word	0x20000d24
 80091f8:	20000d10 	.word	0x20000d10
 80091fc:	20000d08 	.word	0x20000d08

08009200 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009200:	b480      	push	{r7}
 8009202:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009204:	4b04      	ldr	r3, [pc, #16]	; (8009218 <vTaskSuspendAll+0x18>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	3301      	adds	r3, #1
 800920a:	4a03      	ldr	r2, [pc, #12]	; (8009218 <vTaskSuspendAll+0x18>)
 800920c:	6013      	str	r3, [r2, #0]
}
 800920e:	bf00      	nop
 8009210:	46bd      	mov	sp, r7
 8009212:	bc80      	pop	{r7}
 8009214:	4770      	bx	lr
 8009216:	bf00      	nop
 8009218:	20000d2c 	.word	0x20000d2c

0800921c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b084      	sub	sp, #16
 8009220:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009222:	2300      	movs	r3, #0
 8009224:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009226:	2300      	movs	r3, #0
 8009228:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800922a:	4b42      	ldr	r3, [pc, #264]	; (8009334 <xTaskResumeAll+0x118>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d10a      	bne.n	8009248 <xTaskResumeAll+0x2c>
	__asm volatile
 8009232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009236:	f383 8811 	msr	BASEPRI, r3
 800923a:	f3bf 8f6f 	isb	sy
 800923e:	f3bf 8f4f 	dsb	sy
 8009242:	603b      	str	r3, [r7, #0]
}
 8009244:	bf00      	nop
 8009246:	e7fe      	b.n	8009246 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009248:	f001 fab0 	bl	800a7ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800924c:	4b39      	ldr	r3, [pc, #228]	; (8009334 <xTaskResumeAll+0x118>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	3b01      	subs	r3, #1
 8009252:	4a38      	ldr	r2, [pc, #224]	; (8009334 <xTaskResumeAll+0x118>)
 8009254:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009256:	4b37      	ldr	r3, [pc, #220]	; (8009334 <xTaskResumeAll+0x118>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d162      	bne.n	8009324 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800925e:	4b36      	ldr	r3, [pc, #216]	; (8009338 <xTaskResumeAll+0x11c>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d05e      	beq.n	8009324 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009266:	e02f      	b.n	80092c8 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8009268:	4b34      	ldr	r3, [pc, #208]	; (800933c <xTaskResumeAll+0x120>)
 800926a:	68db      	ldr	r3, [r3, #12]
 800926c:	68db      	ldr	r3, [r3, #12]
 800926e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	3318      	adds	r3, #24
 8009274:	4618      	mov	r0, r3
 8009276:	f7fe fad3 	bl	8007820 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	3304      	adds	r3, #4
 800927e:	4618      	mov	r0, r3
 8009280:	f7fe face 	bl	8007820 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009288:	4b2d      	ldr	r3, [pc, #180]	; (8009340 <xTaskResumeAll+0x124>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	429a      	cmp	r2, r3
 800928e:	d903      	bls.n	8009298 <xTaskResumeAll+0x7c>
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009294:	4a2a      	ldr	r2, [pc, #168]	; (8009340 <xTaskResumeAll+0x124>)
 8009296:	6013      	str	r3, [r2, #0]
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800929c:	4613      	mov	r3, r2
 800929e:	009b      	lsls	r3, r3, #2
 80092a0:	4413      	add	r3, r2
 80092a2:	009b      	lsls	r3, r3, #2
 80092a4:	4a27      	ldr	r2, [pc, #156]	; (8009344 <xTaskResumeAll+0x128>)
 80092a6:	441a      	add	r2, r3
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	3304      	adds	r3, #4
 80092ac:	4619      	mov	r1, r3
 80092ae:	4610      	mov	r0, r2
 80092b0:	f7fe fa5b 	bl	800776a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092b8:	4b23      	ldr	r3, [pc, #140]	; (8009348 <xTaskResumeAll+0x12c>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092be:	429a      	cmp	r2, r3
 80092c0:	d302      	bcc.n	80092c8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80092c2:	4b22      	ldr	r3, [pc, #136]	; (800934c <xTaskResumeAll+0x130>)
 80092c4:	2201      	movs	r2, #1
 80092c6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80092c8:	4b1c      	ldr	r3, [pc, #112]	; (800933c <xTaskResumeAll+0x120>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d1cb      	bne.n	8009268 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d001      	beq.n	80092da <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80092d6:	f000 fc11 	bl	8009afc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80092da:	4b1d      	ldr	r3, [pc, #116]	; (8009350 <xTaskResumeAll+0x134>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d010      	beq.n	8009308 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80092e6:	f000 f857 	bl	8009398 <xTaskIncrementTick>
 80092ea:	4603      	mov	r3, r0
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d002      	beq.n	80092f6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80092f0:	4b16      	ldr	r3, [pc, #88]	; (800934c <xTaskResumeAll+0x130>)
 80092f2:	2201      	movs	r2, #1
 80092f4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	3b01      	subs	r3, #1
 80092fa:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d1f1      	bne.n	80092e6 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8009302:	4b13      	ldr	r3, [pc, #76]	; (8009350 <xTaskResumeAll+0x134>)
 8009304:	2200      	movs	r2, #0
 8009306:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009308:	4b10      	ldr	r3, [pc, #64]	; (800934c <xTaskResumeAll+0x130>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d009      	beq.n	8009324 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009310:	2301      	movs	r3, #1
 8009312:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009314:	4b0f      	ldr	r3, [pc, #60]	; (8009354 <xTaskResumeAll+0x138>)
 8009316:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800931a:	601a      	str	r2, [r3, #0]
 800931c:	f3bf 8f4f 	dsb	sy
 8009320:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009324:	f001 fa72 	bl	800a80c <vPortExitCritical>

	return xAlreadyYielded;
 8009328:	68bb      	ldr	r3, [r7, #8]
}
 800932a:	4618      	mov	r0, r3
 800932c:	3710      	adds	r7, #16
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}
 8009332:	bf00      	nop
 8009334:	20000d2c 	.word	0x20000d2c
 8009338:	20000d04 	.word	0x20000d04
 800933c:	20000cc4 	.word	0x20000cc4
 8009340:	20000d0c 	.word	0x20000d0c
 8009344:	20000834 	.word	0x20000834
 8009348:	20000830 	.word	0x20000830
 800934c:	20000d18 	.word	0x20000d18
 8009350:	20000d14 	.word	0x20000d14
 8009354:	e000ed04 	.word	0xe000ed04

08009358 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009358:	b480      	push	{r7}
 800935a:	b083      	sub	sp, #12
 800935c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800935e:	4b04      	ldr	r3, [pc, #16]	; (8009370 <xTaskGetTickCount+0x18>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009364:	687b      	ldr	r3, [r7, #4]
}
 8009366:	4618      	mov	r0, r3
 8009368:	370c      	adds	r7, #12
 800936a:	46bd      	mov	sp, r7
 800936c:	bc80      	pop	{r7}
 800936e:	4770      	bx	lr
 8009370:	20000d08 	.word	0x20000d08

08009374 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b082      	sub	sp, #8
 8009378:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800937a:	f001 fad9 	bl	800a930 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800937e:	2300      	movs	r3, #0
 8009380:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8009382:	4b04      	ldr	r3, [pc, #16]	; (8009394 <xTaskGetTickCountFromISR+0x20>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009388:	683b      	ldr	r3, [r7, #0]
}
 800938a:	4618      	mov	r0, r3
 800938c:	3708      	adds	r7, #8
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}
 8009392:	bf00      	nop
 8009394:	20000d08 	.word	0x20000d08

08009398 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b086      	sub	sp, #24
 800939c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800939e:	2300      	movs	r3, #0
 80093a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80093a2:	4b51      	ldr	r3, [pc, #324]	; (80094e8 <xTaskIncrementTick+0x150>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	f040 808e 	bne.w	80094c8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80093ac:	4b4f      	ldr	r3, [pc, #316]	; (80094ec <xTaskIncrementTick+0x154>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	3301      	adds	r3, #1
 80093b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80093b4:	4a4d      	ldr	r2, [pc, #308]	; (80094ec <xTaskIncrementTick+0x154>)
 80093b6:	693b      	ldr	r3, [r7, #16]
 80093b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d120      	bne.n	8009402 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80093c0:	4b4b      	ldr	r3, [pc, #300]	; (80094f0 <xTaskIncrementTick+0x158>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d00a      	beq.n	80093e0 <xTaskIncrementTick+0x48>
	__asm volatile
 80093ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ce:	f383 8811 	msr	BASEPRI, r3
 80093d2:	f3bf 8f6f 	isb	sy
 80093d6:	f3bf 8f4f 	dsb	sy
 80093da:	603b      	str	r3, [r7, #0]
}
 80093dc:	bf00      	nop
 80093de:	e7fe      	b.n	80093de <xTaskIncrementTick+0x46>
 80093e0:	4b43      	ldr	r3, [pc, #268]	; (80094f0 <xTaskIncrementTick+0x158>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	60fb      	str	r3, [r7, #12]
 80093e6:	4b43      	ldr	r3, [pc, #268]	; (80094f4 <xTaskIncrementTick+0x15c>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	4a41      	ldr	r2, [pc, #260]	; (80094f0 <xTaskIncrementTick+0x158>)
 80093ec:	6013      	str	r3, [r2, #0]
 80093ee:	4a41      	ldr	r2, [pc, #260]	; (80094f4 <xTaskIncrementTick+0x15c>)
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	6013      	str	r3, [r2, #0]
 80093f4:	4b40      	ldr	r3, [pc, #256]	; (80094f8 <xTaskIncrementTick+0x160>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	3301      	adds	r3, #1
 80093fa:	4a3f      	ldr	r2, [pc, #252]	; (80094f8 <xTaskIncrementTick+0x160>)
 80093fc:	6013      	str	r3, [r2, #0]
 80093fe:	f000 fb7d 	bl	8009afc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009402:	4b3e      	ldr	r3, [pc, #248]	; (80094fc <xTaskIncrementTick+0x164>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	693a      	ldr	r2, [r7, #16]
 8009408:	429a      	cmp	r2, r3
 800940a:	d34e      	bcc.n	80094aa <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800940c:	4b38      	ldr	r3, [pc, #224]	; (80094f0 <xTaskIncrementTick+0x158>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d101      	bne.n	800941a <xTaskIncrementTick+0x82>
 8009416:	2301      	movs	r3, #1
 8009418:	e000      	b.n	800941c <xTaskIncrementTick+0x84>
 800941a:	2300      	movs	r3, #0
 800941c:	2b00      	cmp	r3, #0
 800941e:	d004      	beq.n	800942a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009420:	4b36      	ldr	r3, [pc, #216]	; (80094fc <xTaskIncrementTick+0x164>)
 8009422:	f04f 32ff 	mov.w	r2, #4294967295
 8009426:	601a      	str	r2, [r3, #0]
					break;
 8009428:	e03f      	b.n	80094aa <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800942a:	4b31      	ldr	r3, [pc, #196]	; (80094f0 <xTaskIncrementTick+0x158>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	68db      	ldr	r3, [r3, #12]
 8009430:	68db      	ldr	r3, [r3, #12]
 8009432:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	685b      	ldr	r3, [r3, #4]
 8009438:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800943a:	693a      	ldr	r2, [r7, #16]
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	429a      	cmp	r2, r3
 8009440:	d203      	bcs.n	800944a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009442:	4a2e      	ldr	r2, [pc, #184]	; (80094fc <xTaskIncrementTick+0x164>)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6013      	str	r3, [r2, #0]
						break;
 8009448:	e02f      	b.n	80094aa <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	3304      	adds	r3, #4
 800944e:	4618      	mov	r0, r3
 8009450:	f7fe f9e6 	bl	8007820 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009458:	2b00      	cmp	r3, #0
 800945a:	d004      	beq.n	8009466 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	3318      	adds	r3, #24
 8009460:	4618      	mov	r0, r3
 8009462:	f7fe f9dd 	bl	8007820 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800946a:	4b25      	ldr	r3, [pc, #148]	; (8009500 <xTaskIncrementTick+0x168>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	429a      	cmp	r2, r3
 8009470:	d903      	bls.n	800947a <xTaskIncrementTick+0xe2>
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009476:	4a22      	ldr	r2, [pc, #136]	; (8009500 <xTaskIncrementTick+0x168>)
 8009478:	6013      	str	r3, [r2, #0]
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800947e:	4613      	mov	r3, r2
 8009480:	009b      	lsls	r3, r3, #2
 8009482:	4413      	add	r3, r2
 8009484:	009b      	lsls	r3, r3, #2
 8009486:	4a1f      	ldr	r2, [pc, #124]	; (8009504 <xTaskIncrementTick+0x16c>)
 8009488:	441a      	add	r2, r3
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	3304      	adds	r3, #4
 800948e:	4619      	mov	r1, r3
 8009490:	4610      	mov	r0, r2
 8009492:	f7fe f96a 	bl	800776a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800949a:	4b1b      	ldr	r3, [pc, #108]	; (8009508 <xTaskIncrementTick+0x170>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094a0:	429a      	cmp	r2, r3
 80094a2:	d3b3      	bcc.n	800940c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80094a4:	2301      	movs	r3, #1
 80094a6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80094a8:	e7b0      	b.n	800940c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80094aa:	4b17      	ldr	r3, [pc, #92]	; (8009508 <xTaskIncrementTick+0x170>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094b0:	4914      	ldr	r1, [pc, #80]	; (8009504 <xTaskIncrementTick+0x16c>)
 80094b2:	4613      	mov	r3, r2
 80094b4:	009b      	lsls	r3, r3, #2
 80094b6:	4413      	add	r3, r2
 80094b8:	009b      	lsls	r3, r3, #2
 80094ba:	440b      	add	r3, r1
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	2b01      	cmp	r3, #1
 80094c0:	d907      	bls.n	80094d2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80094c2:	2301      	movs	r3, #1
 80094c4:	617b      	str	r3, [r7, #20]
 80094c6:	e004      	b.n	80094d2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80094c8:	4b10      	ldr	r3, [pc, #64]	; (800950c <xTaskIncrementTick+0x174>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	3301      	adds	r3, #1
 80094ce:	4a0f      	ldr	r2, [pc, #60]	; (800950c <xTaskIncrementTick+0x174>)
 80094d0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80094d2:	4b0f      	ldr	r3, [pc, #60]	; (8009510 <xTaskIncrementTick+0x178>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d001      	beq.n	80094de <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80094da:	2301      	movs	r3, #1
 80094dc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80094de:	697b      	ldr	r3, [r7, #20]
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	3718      	adds	r7, #24
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}
 80094e8:	20000d2c 	.word	0x20000d2c
 80094ec:	20000d08 	.word	0x20000d08
 80094f0:	20000cbc 	.word	0x20000cbc
 80094f4:	20000cc0 	.word	0x20000cc0
 80094f8:	20000d1c 	.word	0x20000d1c
 80094fc:	20000d24 	.word	0x20000d24
 8009500:	20000d0c 	.word	0x20000d0c
 8009504:	20000834 	.word	0x20000834
 8009508:	20000830 	.word	0x20000830
 800950c:	20000d14 	.word	0x20000d14
 8009510:	20000d18 	.word	0x20000d18

08009514 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009514:	b480      	push	{r7}
 8009516:	b085      	sub	sp, #20
 8009518:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800951a:	4b2a      	ldr	r3, [pc, #168]	; (80095c4 <vTaskSwitchContext+0xb0>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d003      	beq.n	800952a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009522:	4b29      	ldr	r3, [pc, #164]	; (80095c8 <vTaskSwitchContext+0xb4>)
 8009524:	2201      	movs	r2, #1
 8009526:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009528:	e046      	b.n	80095b8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800952a:	4b27      	ldr	r3, [pc, #156]	; (80095c8 <vTaskSwitchContext+0xb4>)
 800952c:	2200      	movs	r2, #0
 800952e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009530:	4b26      	ldr	r3, [pc, #152]	; (80095cc <vTaskSwitchContext+0xb8>)
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	60fb      	str	r3, [r7, #12]
 8009536:	e010      	b.n	800955a <vTaskSwitchContext+0x46>
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d10a      	bne.n	8009554 <vTaskSwitchContext+0x40>
	__asm volatile
 800953e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009542:	f383 8811 	msr	BASEPRI, r3
 8009546:	f3bf 8f6f 	isb	sy
 800954a:	f3bf 8f4f 	dsb	sy
 800954e:	607b      	str	r3, [r7, #4]
}
 8009550:	bf00      	nop
 8009552:	e7fe      	b.n	8009552 <vTaskSwitchContext+0x3e>
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	3b01      	subs	r3, #1
 8009558:	60fb      	str	r3, [r7, #12]
 800955a:	491d      	ldr	r1, [pc, #116]	; (80095d0 <vTaskSwitchContext+0xbc>)
 800955c:	68fa      	ldr	r2, [r7, #12]
 800955e:	4613      	mov	r3, r2
 8009560:	009b      	lsls	r3, r3, #2
 8009562:	4413      	add	r3, r2
 8009564:	009b      	lsls	r3, r3, #2
 8009566:	440b      	add	r3, r1
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d0e4      	beq.n	8009538 <vTaskSwitchContext+0x24>
 800956e:	68fa      	ldr	r2, [r7, #12]
 8009570:	4613      	mov	r3, r2
 8009572:	009b      	lsls	r3, r3, #2
 8009574:	4413      	add	r3, r2
 8009576:	009b      	lsls	r3, r3, #2
 8009578:	4a15      	ldr	r2, [pc, #84]	; (80095d0 <vTaskSwitchContext+0xbc>)
 800957a:	4413      	add	r3, r2
 800957c:	60bb      	str	r3, [r7, #8]
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	685b      	ldr	r3, [r3, #4]
 8009582:	685a      	ldr	r2, [r3, #4]
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	605a      	str	r2, [r3, #4]
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	685a      	ldr	r2, [r3, #4]
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	3308      	adds	r3, #8
 8009590:	429a      	cmp	r2, r3
 8009592:	d104      	bne.n	800959e <vTaskSwitchContext+0x8a>
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	685b      	ldr	r3, [r3, #4]
 8009598:	685a      	ldr	r2, [r3, #4]
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	605a      	str	r2, [r3, #4]
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	685b      	ldr	r3, [r3, #4]
 80095a2:	68db      	ldr	r3, [r3, #12]
 80095a4:	4a0b      	ldr	r2, [pc, #44]	; (80095d4 <vTaskSwitchContext+0xc0>)
 80095a6:	6013      	str	r3, [r2, #0]
 80095a8:	4a08      	ldr	r2, [pc, #32]	; (80095cc <vTaskSwitchContext+0xb8>)
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80095ae:	4b09      	ldr	r3, [pc, #36]	; (80095d4 <vTaskSwitchContext+0xc0>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	3350      	adds	r3, #80	; 0x50
 80095b4:	4a08      	ldr	r2, [pc, #32]	; (80095d8 <vTaskSwitchContext+0xc4>)
 80095b6:	6013      	str	r3, [r2, #0]
}
 80095b8:	bf00      	nop
 80095ba:	3714      	adds	r7, #20
 80095bc:	46bd      	mov	sp, r7
 80095be:	bc80      	pop	{r7}
 80095c0:	4770      	bx	lr
 80095c2:	bf00      	nop
 80095c4:	20000d2c 	.word	0x20000d2c
 80095c8:	20000d18 	.word	0x20000d18
 80095cc:	20000d0c 	.word	0x20000d0c
 80095d0:	20000834 	.word	0x20000834
 80095d4:	20000830 	.word	0x20000830
 80095d8:	20000074 	.word	0x20000074

080095dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b084      	sub	sp, #16
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
 80095e4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d10a      	bne.n	8009602 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80095ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095f0:	f383 8811 	msr	BASEPRI, r3
 80095f4:	f3bf 8f6f 	isb	sy
 80095f8:	f3bf 8f4f 	dsb	sy
 80095fc:	60fb      	str	r3, [r7, #12]
}
 80095fe:	bf00      	nop
 8009600:	e7fe      	b.n	8009600 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009602:	4b07      	ldr	r3, [pc, #28]	; (8009620 <vTaskPlaceOnEventList+0x44>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	3318      	adds	r3, #24
 8009608:	4619      	mov	r1, r3
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f7fe f8d0 	bl	80077b0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009610:	2101      	movs	r1, #1
 8009612:	6838      	ldr	r0, [r7, #0]
 8009614:	f000 fc50 	bl	8009eb8 <prvAddCurrentTaskToDelayedList>
}
 8009618:	bf00      	nop
 800961a:	3710      	adds	r7, #16
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}
 8009620:	20000830 	.word	0x20000830

08009624 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b086      	sub	sp, #24
 8009628:	af00      	add	r7, sp, #0
 800962a:	60f8      	str	r0, [r7, #12]
 800962c:	60b9      	str	r1, [r7, #8]
 800962e:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d10a      	bne.n	800964c <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8009636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800963a:	f383 8811 	msr	BASEPRI, r3
 800963e:	f3bf 8f6f 	isb	sy
 8009642:	f3bf 8f4f 	dsb	sy
 8009646:	617b      	str	r3, [r7, #20]
}
 8009648:	bf00      	nop
 800964a:	e7fe      	b.n	800964a <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800964c:	4b11      	ldr	r3, [pc, #68]	; (8009694 <vTaskPlaceOnUnorderedEventList+0x70>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d10a      	bne.n	800966a <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8009654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009658:	f383 8811 	msr	BASEPRI, r3
 800965c:	f3bf 8f6f 	isb	sy
 8009660:	f3bf 8f4f 	dsb	sy
 8009664:	613b      	str	r3, [r7, #16]
}
 8009666:	bf00      	nop
 8009668:	e7fe      	b.n	8009668 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800966a:	4b0b      	ldr	r3, [pc, #44]	; (8009698 <vTaskPlaceOnUnorderedEventList+0x74>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	68ba      	ldr	r2, [r7, #8]
 8009670:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8009674:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009676:	4b08      	ldr	r3, [pc, #32]	; (8009698 <vTaskPlaceOnUnorderedEventList+0x74>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	3318      	adds	r3, #24
 800967c:	4619      	mov	r1, r3
 800967e:	68f8      	ldr	r0, [r7, #12]
 8009680:	f7fe f873 	bl	800776a <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009684:	2101      	movs	r1, #1
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f000 fc16 	bl	8009eb8 <prvAddCurrentTaskToDelayedList>
}
 800968c:	bf00      	nop
 800968e:	3718      	adds	r7, #24
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}
 8009694:	20000d2c 	.word	0x20000d2c
 8009698:	20000830 	.word	0x20000830

0800969c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800969c:	b580      	push	{r7, lr}
 800969e:	b086      	sub	sp, #24
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	60f8      	str	r0, [r7, #12]
 80096a4:	60b9      	str	r1, [r7, #8]
 80096a6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d10a      	bne.n	80096c4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80096ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b2:	f383 8811 	msr	BASEPRI, r3
 80096b6:	f3bf 8f6f 	isb	sy
 80096ba:	f3bf 8f4f 	dsb	sy
 80096be:	617b      	str	r3, [r7, #20]
}
 80096c0:	bf00      	nop
 80096c2:	e7fe      	b.n	80096c2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80096c4:	4b0a      	ldr	r3, [pc, #40]	; (80096f0 <vTaskPlaceOnEventListRestricted+0x54>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	3318      	adds	r3, #24
 80096ca:	4619      	mov	r1, r3
 80096cc:	68f8      	ldr	r0, [r7, #12]
 80096ce:	f7fe f84c 	bl	800776a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d002      	beq.n	80096de <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80096d8:	f04f 33ff 	mov.w	r3, #4294967295
 80096dc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80096de:	6879      	ldr	r1, [r7, #4]
 80096e0:	68b8      	ldr	r0, [r7, #8]
 80096e2:	f000 fbe9 	bl	8009eb8 <prvAddCurrentTaskToDelayedList>
	}
 80096e6:	bf00      	nop
 80096e8:	3718      	adds	r7, #24
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}
 80096ee:	bf00      	nop
 80096f0:	20000830 	.word	0x20000830

080096f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b086      	sub	sp, #24
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	68db      	ldr	r3, [r3, #12]
 8009700:	68db      	ldr	r3, [r3, #12]
 8009702:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009704:	693b      	ldr	r3, [r7, #16]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d10a      	bne.n	8009720 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800970a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800970e:	f383 8811 	msr	BASEPRI, r3
 8009712:	f3bf 8f6f 	isb	sy
 8009716:	f3bf 8f4f 	dsb	sy
 800971a:	60fb      	str	r3, [r7, #12]
}
 800971c:	bf00      	nop
 800971e:	e7fe      	b.n	800971e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	3318      	adds	r3, #24
 8009724:	4618      	mov	r0, r3
 8009726:	f7fe f87b 	bl	8007820 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800972a:	4b1e      	ldr	r3, [pc, #120]	; (80097a4 <xTaskRemoveFromEventList+0xb0>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d11d      	bne.n	800976e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009732:	693b      	ldr	r3, [r7, #16]
 8009734:	3304      	adds	r3, #4
 8009736:	4618      	mov	r0, r3
 8009738:	f7fe f872 	bl	8007820 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009740:	4b19      	ldr	r3, [pc, #100]	; (80097a8 <xTaskRemoveFromEventList+0xb4>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	429a      	cmp	r2, r3
 8009746:	d903      	bls.n	8009750 <xTaskRemoveFromEventList+0x5c>
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800974c:	4a16      	ldr	r2, [pc, #88]	; (80097a8 <xTaskRemoveFromEventList+0xb4>)
 800974e:	6013      	str	r3, [r2, #0]
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009754:	4613      	mov	r3, r2
 8009756:	009b      	lsls	r3, r3, #2
 8009758:	4413      	add	r3, r2
 800975a:	009b      	lsls	r3, r3, #2
 800975c:	4a13      	ldr	r2, [pc, #76]	; (80097ac <xTaskRemoveFromEventList+0xb8>)
 800975e:	441a      	add	r2, r3
 8009760:	693b      	ldr	r3, [r7, #16]
 8009762:	3304      	adds	r3, #4
 8009764:	4619      	mov	r1, r3
 8009766:	4610      	mov	r0, r2
 8009768:	f7fd ffff 	bl	800776a <vListInsertEnd>
 800976c:	e005      	b.n	800977a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800976e:	693b      	ldr	r3, [r7, #16]
 8009770:	3318      	adds	r3, #24
 8009772:	4619      	mov	r1, r3
 8009774:	480e      	ldr	r0, [pc, #56]	; (80097b0 <xTaskRemoveFromEventList+0xbc>)
 8009776:	f7fd fff8 	bl	800776a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800977e:	4b0d      	ldr	r3, [pc, #52]	; (80097b4 <xTaskRemoveFromEventList+0xc0>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009784:	429a      	cmp	r2, r3
 8009786:	d905      	bls.n	8009794 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009788:	2301      	movs	r3, #1
 800978a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800978c:	4b0a      	ldr	r3, [pc, #40]	; (80097b8 <xTaskRemoveFromEventList+0xc4>)
 800978e:	2201      	movs	r2, #1
 8009790:	601a      	str	r2, [r3, #0]
 8009792:	e001      	b.n	8009798 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009794:	2300      	movs	r3, #0
 8009796:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8009798:	697b      	ldr	r3, [r7, #20]
}
 800979a:	4618      	mov	r0, r3
 800979c:	3718      	adds	r7, #24
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}
 80097a2:	bf00      	nop
 80097a4:	20000d2c 	.word	0x20000d2c
 80097a8:	20000d0c 	.word	0x20000d0c
 80097ac:	20000834 	.word	0x20000834
 80097b0:	20000cc4 	.word	0x20000cc4
 80097b4:	20000830 	.word	0x20000830
 80097b8:	20000d18 	.word	0x20000d18

080097bc <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b086      	sub	sp, #24
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
 80097c4:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80097c6:	4b29      	ldr	r3, [pc, #164]	; (800986c <vTaskRemoveFromUnorderedEventList+0xb0>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d10a      	bne.n	80097e4 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 80097ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d2:	f383 8811 	msr	BASEPRI, r3
 80097d6:	f3bf 8f6f 	isb	sy
 80097da:	f3bf 8f4f 	dsb	sy
 80097de:	613b      	str	r3, [r7, #16]
}
 80097e0:	bf00      	nop
 80097e2:	e7fe      	b.n	80097e2 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	68db      	ldr	r3, [r3, #12]
 80097f2:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 80097f4:	697b      	ldr	r3, [r7, #20]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d10a      	bne.n	8009810 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 80097fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097fe:	f383 8811 	msr	BASEPRI, r3
 8009802:	f3bf 8f6f 	isb	sy
 8009806:	f3bf 8f4f 	dsb	sy
 800980a:	60fb      	str	r3, [r7, #12]
}
 800980c:	bf00      	nop
 800980e:	e7fe      	b.n	800980e <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f7fe f805 	bl	8007820 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009816:	697b      	ldr	r3, [r7, #20]
 8009818:	3304      	adds	r3, #4
 800981a:	4618      	mov	r0, r3
 800981c:	f7fe f800 	bl	8007820 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8009820:	697b      	ldr	r3, [r7, #20]
 8009822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009824:	4b12      	ldr	r3, [pc, #72]	; (8009870 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	429a      	cmp	r2, r3
 800982a:	d903      	bls.n	8009834 <vTaskRemoveFromUnorderedEventList+0x78>
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009830:	4a0f      	ldr	r2, [pc, #60]	; (8009870 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8009832:	6013      	str	r3, [r2, #0]
 8009834:	697b      	ldr	r3, [r7, #20]
 8009836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009838:	4613      	mov	r3, r2
 800983a:	009b      	lsls	r3, r3, #2
 800983c:	4413      	add	r3, r2
 800983e:	009b      	lsls	r3, r3, #2
 8009840:	4a0c      	ldr	r2, [pc, #48]	; (8009874 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8009842:	441a      	add	r2, r3
 8009844:	697b      	ldr	r3, [r7, #20]
 8009846:	3304      	adds	r3, #4
 8009848:	4619      	mov	r1, r3
 800984a:	4610      	mov	r0, r2
 800984c:	f7fd ff8d 	bl	800776a <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009850:	697b      	ldr	r3, [r7, #20]
 8009852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009854:	4b08      	ldr	r3, [pc, #32]	; (8009878 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800985a:	429a      	cmp	r2, r3
 800985c:	d902      	bls.n	8009864 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800985e:	4b07      	ldr	r3, [pc, #28]	; (800987c <vTaskRemoveFromUnorderedEventList+0xc0>)
 8009860:	2201      	movs	r2, #1
 8009862:	601a      	str	r2, [r3, #0]
	}
}
 8009864:	bf00      	nop
 8009866:	3718      	adds	r7, #24
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}
 800986c:	20000d2c 	.word	0x20000d2c
 8009870:	20000d0c 	.word	0x20000d0c
 8009874:	20000834 	.word	0x20000834
 8009878:	20000830 	.word	0x20000830
 800987c:	20000d18 	.word	0x20000d18

08009880 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009880:	b480      	push	{r7}
 8009882:	b083      	sub	sp, #12
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009888:	4b06      	ldr	r3, [pc, #24]	; (80098a4 <vTaskInternalSetTimeOutState+0x24>)
 800988a:	681a      	ldr	r2, [r3, #0]
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009890:	4b05      	ldr	r3, [pc, #20]	; (80098a8 <vTaskInternalSetTimeOutState+0x28>)
 8009892:	681a      	ldr	r2, [r3, #0]
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	605a      	str	r2, [r3, #4]
}
 8009898:	bf00      	nop
 800989a:	370c      	adds	r7, #12
 800989c:	46bd      	mov	sp, r7
 800989e:	bc80      	pop	{r7}
 80098a0:	4770      	bx	lr
 80098a2:	bf00      	nop
 80098a4:	20000d1c 	.word	0x20000d1c
 80098a8:	20000d08 	.word	0x20000d08

080098ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b088      	sub	sp, #32
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
 80098b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d10a      	bne.n	80098d2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80098bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098c0:	f383 8811 	msr	BASEPRI, r3
 80098c4:	f3bf 8f6f 	isb	sy
 80098c8:	f3bf 8f4f 	dsb	sy
 80098cc:	613b      	str	r3, [r7, #16]
}
 80098ce:	bf00      	nop
 80098d0:	e7fe      	b.n	80098d0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d10a      	bne.n	80098ee <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80098d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098dc:	f383 8811 	msr	BASEPRI, r3
 80098e0:	f3bf 8f6f 	isb	sy
 80098e4:	f3bf 8f4f 	dsb	sy
 80098e8:	60fb      	str	r3, [r7, #12]
}
 80098ea:	bf00      	nop
 80098ec:	e7fe      	b.n	80098ec <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80098ee:	f000 ff5d 	bl	800a7ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80098f2:	4b1d      	ldr	r3, [pc, #116]	; (8009968 <xTaskCheckForTimeOut+0xbc>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	685b      	ldr	r3, [r3, #4]
 80098fc:	69ba      	ldr	r2, [r7, #24]
 80098fe:	1ad3      	subs	r3, r2, r3
 8009900:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800990a:	d102      	bne.n	8009912 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800990c:	2300      	movs	r3, #0
 800990e:	61fb      	str	r3, [r7, #28]
 8009910:	e023      	b.n	800995a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681a      	ldr	r2, [r3, #0]
 8009916:	4b15      	ldr	r3, [pc, #84]	; (800996c <xTaskCheckForTimeOut+0xc0>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	429a      	cmp	r2, r3
 800991c:	d007      	beq.n	800992e <xTaskCheckForTimeOut+0x82>
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	685b      	ldr	r3, [r3, #4]
 8009922:	69ba      	ldr	r2, [r7, #24]
 8009924:	429a      	cmp	r2, r3
 8009926:	d302      	bcc.n	800992e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009928:	2301      	movs	r3, #1
 800992a:	61fb      	str	r3, [r7, #28]
 800992c:	e015      	b.n	800995a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	697a      	ldr	r2, [r7, #20]
 8009934:	429a      	cmp	r2, r3
 8009936:	d20b      	bcs.n	8009950 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	681a      	ldr	r2, [r3, #0]
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	1ad2      	subs	r2, r2, r3
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f7ff ff9b 	bl	8009880 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800994a:	2300      	movs	r3, #0
 800994c:	61fb      	str	r3, [r7, #28]
 800994e:	e004      	b.n	800995a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	2200      	movs	r2, #0
 8009954:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009956:	2301      	movs	r3, #1
 8009958:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800995a:	f000 ff57 	bl	800a80c <vPortExitCritical>

	return xReturn;
 800995e:	69fb      	ldr	r3, [r7, #28]
}
 8009960:	4618      	mov	r0, r3
 8009962:	3720      	adds	r7, #32
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}
 8009968:	20000d08 	.word	0x20000d08
 800996c:	20000d1c 	.word	0x20000d1c

08009970 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009970:	b480      	push	{r7}
 8009972:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009974:	4b03      	ldr	r3, [pc, #12]	; (8009984 <vTaskMissedYield+0x14>)
 8009976:	2201      	movs	r2, #1
 8009978:	601a      	str	r2, [r3, #0]
}
 800997a:	bf00      	nop
 800997c:	46bd      	mov	sp, r7
 800997e:	bc80      	pop	{r7}
 8009980:	4770      	bx	lr
 8009982:	bf00      	nop
 8009984:	20000d18 	.word	0x20000d18

08009988 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b082      	sub	sp, #8
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009990:	f000 f852 	bl	8009a38 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009994:	4b06      	ldr	r3, [pc, #24]	; (80099b0 <prvIdleTask+0x28>)
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	2b01      	cmp	r3, #1
 800999a:	d9f9      	bls.n	8009990 <prvIdleTask+0x8>
			{
				taskYIELD();
 800999c:	4b05      	ldr	r3, [pc, #20]	; (80099b4 <prvIdleTask+0x2c>)
 800999e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099a2:	601a      	str	r2, [r3, #0]
 80099a4:	f3bf 8f4f 	dsb	sy
 80099a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80099ac:	e7f0      	b.n	8009990 <prvIdleTask+0x8>
 80099ae:	bf00      	nop
 80099b0:	20000834 	.word	0x20000834
 80099b4:	e000ed04 	.word	0xe000ed04

080099b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b082      	sub	sp, #8
 80099bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80099be:	2300      	movs	r3, #0
 80099c0:	607b      	str	r3, [r7, #4]
 80099c2:	e00c      	b.n	80099de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80099c4:	687a      	ldr	r2, [r7, #4]
 80099c6:	4613      	mov	r3, r2
 80099c8:	009b      	lsls	r3, r3, #2
 80099ca:	4413      	add	r3, r2
 80099cc:	009b      	lsls	r3, r3, #2
 80099ce:	4a12      	ldr	r2, [pc, #72]	; (8009a18 <prvInitialiseTaskLists+0x60>)
 80099d0:	4413      	add	r3, r2
 80099d2:	4618      	mov	r0, r3
 80099d4:	f7fd fe9e 	bl	8007714 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	3301      	adds	r3, #1
 80099dc:	607b      	str	r3, [r7, #4]
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2b37      	cmp	r3, #55	; 0x37
 80099e2:	d9ef      	bls.n	80099c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80099e4:	480d      	ldr	r0, [pc, #52]	; (8009a1c <prvInitialiseTaskLists+0x64>)
 80099e6:	f7fd fe95 	bl	8007714 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80099ea:	480d      	ldr	r0, [pc, #52]	; (8009a20 <prvInitialiseTaskLists+0x68>)
 80099ec:	f7fd fe92 	bl	8007714 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80099f0:	480c      	ldr	r0, [pc, #48]	; (8009a24 <prvInitialiseTaskLists+0x6c>)
 80099f2:	f7fd fe8f 	bl	8007714 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80099f6:	480c      	ldr	r0, [pc, #48]	; (8009a28 <prvInitialiseTaskLists+0x70>)
 80099f8:	f7fd fe8c 	bl	8007714 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80099fc:	480b      	ldr	r0, [pc, #44]	; (8009a2c <prvInitialiseTaskLists+0x74>)
 80099fe:	f7fd fe89 	bl	8007714 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009a02:	4b0b      	ldr	r3, [pc, #44]	; (8009a30 <prvInitialiseTaskLists+0x78>)
 8009a04:	4a05      	ldr	r2, [pc, #20]	; (8009a1c <prvInitialiseTaskLists+0x64>)
 8009a06:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009a08:	4b0a      	ldr	r3, [pc, #40]	; (8009a34 <prvInitialiseTaskLists+0x7c>)
 8009a0a:	4a05      	ldr	r2, [pc, #20]	; (8009a20 <prvInitialiseTaskLists+0x68>)
 8009a0c:	601a      	str	r2, [r3, #0]
}
 8009a0e:	bf00      	nop
 8009a10:	3708      	adds	r7, #8
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}
 8009a16:	bf00      	nop
 8009a18:	20000834 	.word	0x20000834
 8009a1c:	20000c94 	.word	0x20000c94
 8009a20:	20000ca8 	.word	0x20000ca8
 8009a24:	20000cc4 	.word	0x20000cc4
 8009a28:	20000cd8 	.word	0x20000cd8
 8009a2c:	20000cf0 	.word	0x20000cf0
 8009a30:	20000cbc 	.word	0x20000cbc
 8009a34:	20000cc0 	.word	0x20000cc0

08009a38 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b082      	sub	sp, #8
 8009a3c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009a3e:	e019      	b.n	8009a74 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009a40:	f000 feb4 	bl	800a7ac <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8009a44:	4b10      	ldr	r3, [pc, #64]	; (8009a88 <prvCheckTasksWaitingTermination+0x50>)
 8009a46:	68db      	ldr	r3, [r3, #12]
 8009a48:	68db      	ldr	r3, [r3, #12]
 8009a4a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	3304      	adds	r3, #4
 8009a50:	4618      	mov	r0, r3
 8009a52:	f7fd fee5 	bl	8007820 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009a56:	4b0d      	ldr	r3, [pc, #52]	; (8009a8c <prvCheckTasksWaitingTermination+0x54>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	3b01      	subs	r3, #1
 8009a5c:	4a0b      	ldr	r2, [pc, #44]	; (8009a8c <prvCheckTasksWaitingTermination+0x54>)
 8009a5e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009a60:	4b0b      	ldr	r3, [pc, #44]	; (8009a90 <prvCheckTasksWaitingTermination+0x58>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	3b01      	subs	r3, #1
 8009a66:	4a0a      	ldr	r2, [pc, #40]	; (8009a90 <prvCheckTasksWaitingTermination+0x58>)
 8009a68:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009a6a:	f000 fecf 	bl	800a80c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f000 f810 	bl	8009a94 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009a74:	4b06      	ldr	r3, [pc, #24]	; (8009a90 <prvCheckTasksWaitingTermination+0x58>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d1e1      	bne.n	8009a40 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009a7c:	bf00      	nop
 8009a7e:	bf00      	nop
 8009a80:	3708      	adds	r7, #8
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bd80      	pop	{r7, pc}
 8009a86:	bf00      	nop
 8009a88:	20000cd8 	.word	0x20000cd8
 8009a8c:	20000d04 	.word	0x20000d04
 8009a90:	20000cec 	.word	0x20000cec

08009a94 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b084      	sub	sp, #16
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	3350      	adds	r3, #80	; 0x50
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f001 ff51 	bl	800b948 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d108      	bne.n	8009ac2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	f001 f83d 	bl	800ab34 <vPortFree>
				vPortFree( pxTCB );
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f001 f83a 	bl	800ab34 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009ac0:	e018      	b.n	8009af4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8009ac8:	2b01      	cmp	r3, #1
 8009aca:	d103      	bne.n	8009ad4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f001 f831 	bl	800ab34 <vPortFree>
	}
 8009ad2:	e00f      	b.n	8009af4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8009ada:	2b02      	cmp	r3, #2
 8009adc:	d00a      	beq.n	8009af4 <prvDeleteTCB+0x60>
	__asm volatile
 8009ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ae2:	f383 8811 	msr	BASEPRI, r3
 8009ae6:	f3bf 8f6f 	isb	sy
 8009aea:	f3bf 8f4f 	dsb	sy
 8009aee:	60fb      	str	r3, [r7, #12]
}
 8009af0:	bf00      	nop
 8009af2:	e7fe      	b.n	8009af2 <prvDeleteTCB+0x5e>
	}
 8009af4:	bf00      	nop
 8009af6:	3710      	adds	r7, #16
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}

08009afc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009afc:	b480      	push	{r7}
 8009afe:	b083      	sub	sp, #12
 8009b00:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b02:	4b0e      	ldr	r3, [pc, #56]	; (8009b3c <prvResetNextTaskUnblockTime+0x40>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d101      	bne.n	8009b10 <prvResetNextTaskUnblockTime+0x14>
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	e000      	b.n	8009b12 <prvResetNextTaskUnblockTime+0x16>
 8009b10:	2300      	movs	r3, #0
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d004      	beq.n	8009b20 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009b16:	4b0a      	ldr	r3, [pc, #40]	; (8009b40 <prvResetNextTaskUnblockTime+0x44>)
 8009b18:	f04f 32ff 	mov.w	r2, #4294967295
 8009b1c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009b1e:	e008      	b.n	8009b32 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009b20:	4b06      	ldr	r3, [pc, #24]	; (8009b3c <prvResetNextTaskUnblockTime+0x40>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	68db      	ldr	r3, [r3, #12]
 8009b26:	68db      	ldr	r3, [r3, #12]
 8009b28:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	685b      	ldr	r3, [r3, #4]
 8009b2e:	4a04      	ldr	r2, [pc, #16]	; (8009b40 <prvResetNextTaskUnblockTime+0x44>)
 8009b30:	6013      	str	r3, [r2, #0]
}
 8009b32:	bf00      	nop
 8009b34:	370c      	adds	r7, #12
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bc80      	pop	{r7}
 8009b3a:	4770      	bx	lr
 8009b3c:	20000cbc 	.word	0x20000cbc
 8009b40:	20000d24 	.word	0x20000d24

08009b44 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8009b44:	b480      	push	{r7}
 8009b46:	b083      	sub	sp, #12
 8009b48:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8009b4a:	4b04      	ldr	r3, [pc, #16]	; (8009b5c <xTaskGetCurrentTaskHandle+0x18>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8009b50:	687b      	ldr	r3, [r7, #4]
	}
 8009b52:	4618      	mov	r0, r3
 8009b54:	370c      	adds	r7, #12
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bc80      	pop	{r7}
 8009b5a:	4770      	bx	lr
 8009b5c:	20000830 	.word	0x20000830

08009b60 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009b60:	b480      	push	{r7}
 8009b62:	b083      	sub	sp, #12
 8009b64:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009b66:	4b0b      	ldr	r3, [pc, #44]	; (8009b94 <xTaskGetSchedulerState+0x34>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d102      	bne.n	8009b74 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009b6e:	2301      	movs	r3, #1
 8009b70:	607b      	str	r3, [r7, #4]
 8009b72:	e008      	b.n	8009b86 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b74:	4b08      	ldr	r3, [pc, #32]	; (8009b98 <xTaskGetSchedulerState+0x38>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d102      	bne.n	8009b82 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009b7c:	2302      	movs	r3, #2
 8009b7e:	607b      	str	r3, [r7, #4]
 8009b80:	e001      	b.n	8009b86 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009b82:	2300      	movs	r3, #0
 8009b84:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009b86:	687b      	ldr	r3, [r7, #4]
	}
 8009b88:	4618      	mov	r0, r3
 8009b8a:	370c      	adds	r7, #12
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bc80      	pop	{r7}
 8009b90:	4770      	bx	lr
 8009b92:	bf00      	nop
 8009b94:	20000d10 	.word	0x20000d10
 8009b98:	20000d2c 	.word	0x20000d2c

08009b9c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b084      	sub	sp, #16
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d056      	beq.n	8009c60 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bb6:	4b2d      	ldr	r3, [pc, #180]	; (8009c6c <xTaskPriorityInherit+0xd0>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bbc:	429a      	cmp	r2, r3
 8009bbe:	d246      	bcs.n	8009c4e <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	699b      	ldr	r3, [r3, #24]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	db06      	blt.n	8009bd6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009bc8:	4b28      	ldr	r3, [pc, #160]	; (8009c6c <xTaskPriorityInherit+0xd0>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	6959      	ldr	r1, [r3, #20]
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bde:	4613      	mov	r3, r2
 8009be0:	009b      	lsls	r3, r3, #2
 8009be2:	4413      	add	r3, r2
 8009be4:	009b      	lsls	r3, r3, #2
 8009be6:	4a22      	ldr	r2, [pc, #136]	; (8009c70 <xTaskPriorityInherit+0xd4>)
 8009be8:	4413      	add	r3, r2
 8009bea:	4299      	cmp	r1, r3
 8009bec:	d101      	bne.n	8009bf2 <xTaskPriorityInherit+0x56>
 8009bee:	2301      	movs	r3, #1
 8009bf0:	e000      	b.n	8009bf4 <xTaskPriorityInherit+0x58>
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d022      	beq.n	8009c3e <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	3304      	adds	r3, #4
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	f7fd fe0f 	bl	8007820 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009c02:	4b1a      	ldr	r3, [pc, #104]	; (8009c6c <xTaskPriorityInherit+0xd0>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c10:	4b18      	ldr	r3, [pc, #96]	; (8009c74 <xTaskPriorityInherit+0xd8>)
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	429a      	cmp	r2, r3
 8009c16:	d903      	bls.n	8009c20 <xTaskPriorityInherit+0x84>
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c1c:	4a15      	ldr	r2, [pc, #84]	; (8009c74 <xTaskPriorityInherit+0xd8>)
 8009c1e:	6013      	str	r3, [r2, #0]
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c24:	4613      	mov	r3, r2
 8009c26:	009b      	lsls	r3, r3, #2
 8009c28:	4413      	add	r3, r2
 8009c2a:	009b      	lsls	r3, r3, #2
 8009c2c:	4a10      	ldr	r2, [pc, #64]	; (8009c70 <xTaskPriorityInherit+0xd4>)
 8009c2e:	441a      	add	r2, r3
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	3304      	adds	r3, #4
 8009c34:	4619      	mov	r1, r3
 8009c36:	4610      	mov	r0, r2
 8009c38:	f7fd fd97 	bl	800776a <vListInsertEnd>
 8009c3c:	e004      	b.n	8009c48 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009c3e:	4b0b      	ldr	r3, [pc, #44]	; (8009c6c <xTaskPriorityInherit+0xd0>)
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009c48:	2301      	movs	r3, #1
 8009c4a:	60fb      	str	r3, [r7, #12]
 8009c4c:	e008      	b.n	8009c60 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009c52:	4b06      	ldr	r3, [pc, #24]	; (8009c6c <xTaskPriorityInherit+0xd0>)
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	d201      	bcs.n	8009c60 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009c60:	68fb      	ldr	r3, [r7, #12]
	}
 8009c62:	4618      	mov	r0, r3
 8009c64:	3710      	adds	r7, #16
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}
 8009c6a:	bf00      	nop
 8009c6c:	20000830 	.word	0x20000830
 8009c70:	20000834 	.word	0x20000834
 8009c74:	20000d0c 	.word	0x20000d0c

08009c78 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b086      	sub	sp, #24
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009c84:	2300      	movs	r3, #0
 8009c86:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d056      	beq.n	8009d3c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009c8e:	4b2e      	ldr	r3, [pc, #184]	; (8009d48 <xTaskPriorityDisinherit+0xd0>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	693a      	ldr	r2, [r7, #16]
 8009c94:	429a      	cmp	r2, r3
 8009c96:	d00a      	beq.n	8009cae <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c9c:	f383 8811 	msr	BASEPRI, r3
 8009ca0:	f3bf 8f6f 	isb	sy
 8009ca4:	f3bf 8f4f 	dsb	sy
 8009ca8:	60fb      	str	r3, [r7, #12]
}
 8009caa:	bf00      	nop
 8009cac:	e7fe      	b.n	8009cac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009cae:	693b      	ldr	r3, [r7, #16]
 8009cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d10a      	bne.n	8009ccc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cba:	f383 8811 	msr	BASEPRI, r3
 8009cbe:	f3bf 8f6f 	isb	sy
 8009cc2:	f3bf 8f4f 	dsb	sy
 8009cc6:	60bb      	str	r3, [r7, #8]
}
 8009cc8:	bf00      	nop
 8009cca:	e7fe      	b.n	8009cca <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009ccc:	693b      	ldr	r3, [r7, #16]
 8009cce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009cd0:	1e5a      	subs	r2, r3, #1
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009cd6:	693b      	ldr	r3, [r7, #16]
 8009cd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cda:	693b      	ldr	r3, [r7, #16]
 8009cdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009cde:	429a      	cmp	r2, r3
 8009ce0:	d02c      	beq.n	8009d3c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009ce2:	693b      	ldr	r3, [r7, #16]
 8009ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d128      	bne.n	8009d3c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009cea:	693b      	ldr	r3, [r7, #16]
 8009cec:	3304      	adds	r3, #4
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f7fd fd96 	bl	8007820 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009cf4:	693b      	ldr	r3, [r7, #16]
 8009cf6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009cf8:	693b      	ldr	r3, [r7, #16]
 8009cfa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009cfc:	693b      	ldr	r3, [r7, #16]
 8009cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d00:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009d04:	693b      	ldr	r3, [r7, #16]
 8009d06:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009d08:	693b      	ldr	r3, [r7, #16]
 8009d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d0c:	4b0f      	ldr	r3, [pc, #60]	; (8009d4c <xTaskPriorityDisinherit+0xd4>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	429a      	cmp	r2, r3
 8009d12:	d903      	bls.n	8009d1c <xTaskPriorityDisinherit+0xa4>
 8009d14:	693b      	ldr	r3, [r7, #16]
 8009d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d18:	4a0c      	ldr	r2, [pc, #48]	; (8009d4c <xTaskPriorityDisinherit+0xd4>)
 8009d1a:	6013      	str	r3, [r2, #0]
 8009d1c:	693b      	ldr	r3, [r7, #16]
 8009d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d20:	4613      	mov	r3, r2
 8009d22:	009b      	lsls	r3, r3, #2
 8009d24:	4413      	add	r3, r2
 8009d26:	009b      	lsls	r3, r3, #2
 8009d28:	4a09      	ldr	r2, [pc, #36]	; (8009d50 <xTaskPriorityDisinherit+0xd8>)
 8009d2a:	441a      	add	r2, r3
 8009d2c:	693b      	ldr	r3, [r7, #16]
 8009d2e:	3304      	adds	r3, #4
 8009d30:	4619      	mov	r1, r3
 8009d32:	4610      	mov	r0, r2
 8009d34:	f7fd fd19 	bl	800776a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009d38:	2301      	movs	r3, #1
 8009d3a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009d3c:	697b      	ldr	r3, [r7, #20]
	}
 8009d3e:	4618      	mov	r0, r3
 8009d40:	3718      	adds	r7, #24
 8009d42:	46bd      	mov	sp, r7
 8009d44:	bd80      	pop	{r7, pc}
 8009d46:	bf00      	nop
 8009d48:	20000830 	.word	0x20000830
 8009d4c:	20000d0c 	.word	0x20000d0c
 8009d50:	20000834 	.word	0x20000834

08009d54 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b088      	sub	sp, #32
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
 8009d5c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009d62:	2301      	movs	r3, #1
 8009d64:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d06f      	beq.n	8009e4c <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009d6c:	69bb      	ldr	r3, [r7, #24]
 8009d6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d10a      	bne.n	8009d8a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8009d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d78:	f383 8811 	msr	BASEPRI, r3
 8009d7c:	f3bf 8f6f 	isb	sy
 8009d80:	f3bf 8f4f 	dsb	sy
 8009d84:	60fb      	str	r3, [r7, #12]
}
 8009d86:	bf00      	nop
 8009d88:	e7fe      	b.n	8009d88 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009d8a:	69bb      	ldr	r3, [r7, #24]
 8009d8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d8e:	683a      	ldr	r2, [r7, #0]
 8009d90:	429a      	cmp	r2, r3
 8009d92:	d902      	bls.n	8009d9a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	61fb      	str	r3, [r7, #28]
 8009d98:	e002      	b.n	8009da0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009d9a:	69bb      	ldr	r3, [r7, #24]
 8009d9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d9e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009da0:	69bb      	ldr	r3, [r7, #24]
 8009da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009da4:	69fa      	ldr	r2, [r7, #28]
 8009da6:	429a      	cmp	r2, r3
 8009da8:	d050      	beq.n	8009e4c <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009daa:	69bb      	ldr	r3, [r7, #24]
 8009dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009dae:	697a      	ldr	r2, [r7, #20]
 8009db0:	429a      	cmp	r2, r3
 8009db2:	d14b      	bne.n	8009e4c <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009db4:	4b27      	ldr	r3, [pc, #156]	; (8009e54 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	69ba      	ldr	r2, [r7, #24]
 8009dba:	429a      	cmp	r2, r3
 8009dbc:	d10a      	bne.n	8009dd4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8009dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc2:	f383 8811 	msr	BASEPRI, r3
 8009dc6:	f3bf 8f6f 	isb	sy
 8009dca:	f3bf 8f4f 	dsb	sy
 8009dce:	60bb      	str	r3, [r7, #8]
}
 8009dd0:	bf00      	nop
 8009dd2:	e7fe      	b.n	8009dd2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009dd4:	69bb      	ldr	r3, [r7, #24]
 8009dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dd8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009dda:	69bb      	ldr	r3, [r7, #24]
 8009ddc:	69fa      	ldr	r2, [r7, #28]
 8009dde:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009de0:	69bb      	ldr	r3, [r7, #24]
 8009de2:	699b      	ldr	r3, [r3, #24]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	db04      	blt.n	8009df2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009de8:	69fb      	ldr	r3, [r7, #28]
 8009dea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009dee:	69bb      	ldr	r3, [r7, #24]
 8009df0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009df2:	69bb      	ldr	r3, [r7, #24]
 8009df4:	6959      	ldr	r1, [r3, #20]
 8009df6:	693a      	ldr	r2, [r7, #16]
 8009df8:	4613      	mov	r3, r2
 8009dfa:	009b      	lsls	r3, r3, #2
 8009dfc:	4413      	add	r3, r2
 8009dfe:	009b      	lsls	r3, r3, #2
 8009e00:	4a15      	ldr	r2, [pc, #84]	; (8009e58 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009e02:	4413      	add	r3, r2
 8009e04:	4299      	cmp	r1, r3
 8009e06:	d101      	bne.n	8009e0c <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8009e08:	2301      	movs	r3, #1
 8009e0a:	e000      	b.n	8009e0e <vTaskPriorityDisinheritAfterTimeout+0xba>
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d01c      	beq.n	8009e4c <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e12:	69bb      	ldr	r3, [r7, #24]
 8009e14:	3304      	adds	r3, #4
 8009e16:	4618      	mov	r0, r3
 8009e18:	f7fd fd02 	bl	8007820 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009e1c:	69bb      	ldr	r3, [r7, #24]
 8009e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e20:	4b0e      	ldr	r3, [pc, #56]	; (8009e5c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	429a      	cmp	r2, r3
 8009e26:	d903      	bls.n	8009e30 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 8009e28:	69bb      	ldr	r3, [r7, #24]
 8009e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e2c:	4a0b      	ldr	r2, [pc, #44]	; (8009e5c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8009e2e:	6013      	str	r3, [r2, #0]
 8009e30:	69bb      	ldr	r3, [r7, #24]
 8009e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e34:	4613      	mov	r3, r2
 8009e36:	009b      	lsls	r3, r3, #2
 8009e38:	4413      	add	r3, r2
 8009e3a:	009b      	lsls	r3, r3, #2
 8009e3c:	4a06      	ldr	r2, [pc, #24]	; (8009e58 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009e3e:	441a      	add	r2, r3
 8009e40:	69bb      	ldr	r3, [r7, #24]
 8009e42:	3304      	adds	r3, #4
 8009e44:	4619      	mov	r1, r3
 8009e46:	4610      	mov	r0, r2
 8009e48:	f7fd fc8f 	bl	800776a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009e4c:	bf00      	nop
 8009e4e:	3720      	adds	r7, #32
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}
 8009e54:	20000830 	.word	0x20000830
 8009e58:	20000834 	.word	0x20000834
 8009e5c:	20000d0c 	.word	0x20000d0c

08009e60 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8009e60:	b480      	push	{r7}
 8009e62:	b083      	sub	sp, #12
 8009e64:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8009e66:	4b09      	ldr	r3, [pc, #36]	; (8009e8c <uxTaskResetEventItemValue+0x2c>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	699b      	ldr	r3, [r3, #24]
 8009e6c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e6e:	4b07      	ldr	r3, [pc, #28]	; (8009e8c <uxTaskResetEventItemValue+0x2c>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e74:	4b05      	ldr	r3, [pc, #20]	; (8009e8c <uxTaskResetEventItemValue+0x2c>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8009e7c:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8009e7e:	687b      	ldr	r3, [r7, #4]
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	370c      	adds	r7, #12
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bc80      	pop	{r7}
 8009e88:	4770      	bx	lr
 8009e8a:	bf00      	nop
 8009e8c:	20000830 	.word	0x20000830

08009e90 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8009e90:	b480      	push	{r7}
 8009e92:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009e94:	4b07      	ldr	r3, [pc, #28]	; (8009eb4 <pvTaskIncrementMutexHeldCount+0x24>)
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d004      	beq.n	8009ea6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009e9c:	4b05      	ldr	r3, [pc, #20]	; (8009eb4 <pvTaskIncrementMutexHeldCount+0x24>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009ea2:	3201      	adds	r2, #1
 8009ea4:	64da      	str	r2, [r3, #76]	; 0x4c
		}

		return pxCurrentTCB;
 8009ea6:	4b03      	ldr	r3, [pc, #12]	; (8009eb4 <pvTaskIncrementMutexHeldCount+0x24>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
	}
 8009eaa:	4618      	mov	r0, r3
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bc80      	pop	{r7}
 8009eb0:	4770      	bx	lr
 8009eb2:	bf00      	nop
 8009eb4:	20000830 	.word	0x20000830

08009eb8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b084      	sub	sp, #16
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
 8009ec0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009ec2:	4b21      	ldr	r3, [pc, #132]	; (8009f48 <prvAddCurrentTaskToDelayedList+0x90>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ec8:	4b20      	ldr	r3, [pc, #128]	; (8009f4c <prvAddCurrentTaskToDelayedList+0x94>)
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	3304      	adds	r3, #4
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f7fd fca6 	bl	8007820 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eda:	d10a      	bne.n	8009ef2 <prvAddCurrentTaskToDelayedList+0x3a>
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d007      	beq.n	8009ef2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ee2:	4b1a      	ldr	r3, [pc, #104]	; (8009f4c <prvAddCurrentTaskToDelayedList+0x94>)
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	3304      	adds	r3, #4
 8009ee8:	4619      	mov	r1, r3
 8009eea:	4819      	ldr	r0, [pc, #100]	; (8009f50 <prvAddCurrentTaskToDelayedList+0x98>)
 8009eec:	f7fd fc3d 	bl	800776a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009ef0:	e026      	b.n	8009f40 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009ef2:	68fa      	ldr	r2, [r7, #12]
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	4413      	add	r3, r2
 8009ef8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009efa:	4b14      	ldr	r3, [pc, #80]	; (8009f4c <prvAddCurrentTaskToDelayedList+0x94>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	68ba      	ldr	r2, [r7, #8]
 8009f00:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009f02:	68ba      	ldr	r2, [r7, #8]
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	429a      	cmp	r2, r3
 8009f08:	d209      	bcs.n	8009f1e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f0a:	4b12      	ldr	r3, [pc, #72]	; (8009f54 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009f0c:	681a      	ldr	r2, [r3, #0]
 8009f0e:	4b0f      	ldr	r3, [pc, #60]	; (8009f4c <prvAddCurrentTaskToDelayedList+0x94>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	3304      	adds	r3, #4
 8009f14:	4619      	mov	r1, r3
 8009f16:	4610      	mov	r0, r2
 8009f18:	f7fd fc4a 	bl	80077b0 <vListInsert>
}
 8009f1c:	e010      	b.n	8009f40 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f1e:	4b0e      	ldr	r3, [pc, #56]	; (8009f58 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009f20:	681a      	ldr	r2, [r3, #0]
 8009f22:	4b0a      	ldr	r3, [pc, #40]	; (8009f4c <prvAddCurrentTaskToDelayedList+0x94>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	3304      	adds	r3, #4
 8009f28:	4619      	mov	r1, r3
 8009f2a:	4610      	mov	r0, r2
 8009f2c:	f7fd fc40 	bl	80077b0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009f30:	4b0a      	ldr	r3, [pc, #40]	; (8009f5c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	68ba      	ldr	r2, [r7, #8]
 8009f36:	429a      	cmp	r2, r3
 8009f38:	d202      	bcs.n	8009f40 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009f3a:	4a08      	ldr	r2, [pc, #32]	; (8009f5c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	6013      	str	r3, [r2, #0]
}
 8009f40:	bf00      	nop
 8009f42:	3710      	adds	r7, #16
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd80      	pop	{r7, pc}
 8009f48:	20000d08 	.word	0x20000d08
 8009f4c:	20000830 	.word	0x20000830
 8009f50:	20000cf0 	.word	0x20000cf0
 8009f54:	20000cc0 	.word	0x20000cc0
 8009f58:	20000cbc 	.word	0x20000cbc
 8009f5c:	20000d24 	.word	0x20000d24

08009f60 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b08a      	sub	sp, #40	; 0x28
 8009f64:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009f66:	2300      	movs	r3, #0
 8009f68:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009f6a:	f000 facb 	bl	800a504 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009f6e:	4b1c      	ldr	r3, [pc, #112]	; (8009fe0 <xTimerCreateTimerTask+0x80>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d021      	beq.n	8009fba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009f76:	2300      	movs	r3, #0
 8009f78:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009f7e:	1d3a      	adds	r2, r7, #4
 8009f80:	f107 0108 	add.w	r1, r7, #8
 8009f84:	f107 030c 	add.w	r3, r7, #12
 8009f88:	4618      	mov	r0, r3
 8009f8a:	f7fd f941 	bl	8007210 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009f8e:	6879      	ldr	r1, [r7, #4]
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	68fa      	ldr	r2, [r7, #12]
 8009f94:	9202      	str	r2, [sp, #8]
 8009f96:	9301      	str	r3, [sp, #4]
 8009f98:	2302      	movs	r3, #2
 8009f9a:	9300      	str	r3, [sp, #0]
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	460a      	mov	r2, r1
 8009fa0:	4910      	ldr	r1, [pc, #64]	; (8009fe4 <xTimerCreateTimerTask+0x84>)
 8009fa2:	4811      	ldr	r0, [pc, #68]	; (8009fe8 <xTimerCreateTimerTask+0x88>)
 8009fa4:	f7fe fd28 	bl	80089f8 <xTaskCreateStatic>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	4a10      	ldr	r2, [pc, #64]	; (8009fec <xTimerCreateTimerTask+0x8c>)
 8009fac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009fae:	4b0f      	ldr	r3, [pc, #60]	; (8009fec <xTimerCreateTimerTask+0x8c>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d001      	beq.n	8009fba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d10a      	bne.n	8009fd6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fc4:	f383 8811 	msr	BASEPRI, r3
 8009fc8:	f3bf 8f6f 	isb	sy
 8009fcc:	f3bf 8f4f 	dsb	sy
 8009fd0:	613b      	str	r3, [r7, #16]
}
 8009fd2:	bf00      	nop
 8009fd4:	e7fe      	b.n	8009fd4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009fd6:	697b      	ldr	r3, [r7, #20]
}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	3718      	adds	r7, #24
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}
 8009fe0:	20000d60 	.word	0x20000d60
 8009fe4:	0800bb20 	.word	0x0800bb20
 8009fe8:	0800a10d 	.word	0x0800a10d
 8009fec:	20000d64 	.word	0x20000d64

08009ff0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b08a      	sub	sp, #40	; 0x28
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	60f8      	str	r0, [r7, #12]
 8009ff8:	60b9      	str	r1, [r7, #8]
 8009ffa:	607a      	str	r2, [r7, #4]
 8009ffc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009ffe:	2300      	movs	r3, #0
 800a000:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d10a      	bne.n	800a01e <xTimerGenericCommand+0x2e>
	__asm volatile
 800a008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a00c:	f383 8811 	msr	BASEPRI, r3
 800a010:	f3bf 8f6f 	isb	sy
 800a014:	f3bf 8f4f 	dsb	sy
 800a018:	623b      	str	r3, [r7, #32]
}
 800a01a:	bf00      	nop
 800a01c:	e7fe      	b.n	800a01c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a01e:	4b1a      	ldr	r3, [pc, #104]	; (800a088 <xTimerGenericCommand+0x98>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d02a      	beq.n	800a07c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	2b05      	cmp	r3, #5
 800a036:	dc18      	bgt.n	800a06a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a038:	f7ff fd92 	bl	8009b60 <xTaskGetSchedulerState>
 800a03c:	4603      	mov	r3, r0
 800a03e:	2b02      	cmp	r3, #2
 800a040:	d109      	bne.n	800a056 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a042:	4b11      	ldr	r3, [pc, #68]	; (800a088 <xTimerGenericCommand+0x98>)
 800a044:	6818      	ldr	r0, [r3, #0]
 800a046:	f107 0110 	add.w	r1, r7, #16
 800a04a:	2300      	movs	r3, #0
 800a04c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a04e:	f7fd fe73 	bl	8007d38 <xQueueGenericSend>
 800a052:	6278      	str	r0, [r7, #36]	; 0x24
 800a054:	e012      	b.n	800a07c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a056:	4b0c      	ldr	r3, [pc, #48]	; (800a088 <xTimerGenericCommand+0x98>)
 800a058:	6818      	ldr	r0, [r3, #0]
 800a05a:	f107 0110 	add.w	r1, r7, #16
 800a05e:	2300      	movs	r3, #0
 800a060:	2200      	movs	r2, #0
 800a062:	f7fd fe69 	bl	8007d38 <xQueueGenericSend>
 800a066:	6278      	str	r0, [r7, #36]	; 0x24
 800a068:	e008      	b.n	800a07c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a06a:	4b07      	ldr	r3, [pc, #28]	; (800a088 <xTimerGenericCommand+0x98>)
 800a06c:	6818      	ldr	r0, [r3, #0]
 800a06e:	f107 0110 	add.w	r1, r7, #16
 800a072:	2300      	movs	r3, #0
 800a074:	683a      	ldr	r2, [r7, #0]
 800a076:	f7fd ff5d 	bl	8007f34 <xQueueGenericSendFromISR>
 800a07a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a07e:	4618      	mov	r0, r3
 800a080:	3728      	adds	r7, #40	; 0x28
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}
 800a086:	bf00      	nop
 800a088:	20000d60 	.word	0x20000d60

0800a08c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b088      	sub	sp, #32
 800a090:	af02      	add	r7, sp, #8
 800a092:	6078      	str	r0, [r7, #4]
 800a094:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a096:	4b1c      	ldr	r3, [pc, #112]	; (800a108 <prvProcessExpiredTimer+0x7c>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	68db      	ldr	r3, [r3, #12]
 800a09c:	68db      	ldr	r3, [r3, #12]
 800a09e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a0a0:	697b      	ldr	r3, [r7, #20]
 800a0a2:	3304      	adds	r3, #4
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f7fd fbbb 	bl	8007820 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	69db      	ldr	r3, [r3, #28]
 800a0ae:	2b01      	cmp	r3, #1
 800a0b0:	d122      	bne.n	800a0f8 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a0b2:	697b      	ldr	r3, [r7, #20]
 800a0b4:	699a      	ldr	r2, [r3, #24]
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	18d1      	adds	r1, r2, r3
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	683a      	ldr	r2, [r7, #0]
 800a0be:	6978      	ldr	r0, [r7, #20]
 800a0c0:	f000 f8c8 	bl	800a254 <prvInsertTimerInActiveList>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d016      	beq.n	800a0f8 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	9300      	str	r3, [sp, #0]
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	687a      	ldr	r2, [r7, #4]
 800a0d2:	2100      	movs	r1, #0
 800a0d4:	6978      	ldr	r0, [r7, #20]
 800a0d6:	f7ff ff8b 	bl	8009ff0 <xTimerGenericCommand>
 800a0da:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d10a      	bne.n	800a0f8 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800a0e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e6:	f383 8811 	msr	BASEPRI, r3
 800a0ea:	f3bf 8f6f 	isb	sy
 800a0ee:	f3bf 8f4f 	dsb	sy
 800a0f2:	60fb      	str	r3, [r7, #12]
}
 800a0f4:	bf00      	nop
 800a0f6:	e7fe      	b.n	800a0f6 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a0f8:	697b      	ldr	r3, [r7, #20]
 800a0fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0fc:	6978      	ldr	r0, [r7, #20]
 800a0fe:	4798      	blx	r3
}
 800a100:	bf00      	nop
 800a102:	3718      	adds	r7, #24
 800a104:	46bd      	mov	sp, r7
 800a106:	bd80      	pop	{r7, pc}
 800a108:	20000d58 	.word	0x20000d58

0800a10c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b084      	sub	sp, #16
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a114:	f107 0308 	add.w	r3, r7, #8
 800a118:	4618      	mov	r0, r3
 800a11a:	f000 f857 	bl	800a1cc <prvGetNextExpireTime>
 800a11e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a120:	68bb      	ldr	r3, [r7, #8]
 800a122:	4619      	mov	r1, r3
 800a124:	68f8      	ldr	r0, [r7, #12]
 800a126:	f000 f803 	bl	800a130 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a12a:	f000 f8d5 	bl	800a2d8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a12e:	e7f1      	b.n	800a114 <prvTimerTask+0x8>

0800a130 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b084      	sub	sp, #16
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
 800a138:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a13a:	f7ff f861 	bl	8009200 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a13e:	f107 0308 	add.w	r3, r7, #8
 800a142:	4618      	mov	r0, r3
 800a144:	f000 f866 	bl	800a214 <prvSampleTimeNow>
 800a148:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d130      	bne.n	800a1b2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d10a      	bne.n	800a16c <prvProcessTimerOrBlockTask+0x3c>
 800a156:	687a      	ldr	r2, [r7, #4]
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	429a      	cmp	r2, r3
 800a15c:	d806      	bhi.n	800a16c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a15e:	f7ff f85d 	bl	800921c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a162:	68f9      	ldr	r1, [r7, #12]
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	f7ff ff91 	bl	800a08c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a16a:	e024      	b.n	800a1b6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d008      	beq.n	800a184 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a172:	4b13      	ldr	r3, [pc, #76]	; (800a1c0 <prvProcessTimerOrBlockTask+0x90>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	bf0c      	ite	eq
 800a17c:	2301      	moveq	r3, #1
 800a17e:	2300      	movne	r3, #0
 800a180:	b2db      	uxtb	r3, r3
 800a182:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a184:	4b0f      	ldr	r3, [pc, #60]	; (800a1c4 <prvProcessTimerOrBlockTask+0x94>)
 800a186:	6818      	ldr	r0, [r3, #0]
 800a188:	687a      	ldr	r2, [r7, #4]
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	1ad3      	subs	r3, r2, r3
 800a18e:	683a      	ldr	r2, [r7, #0]
 800a190:	4619      	mov	r1, r3
 800a192:	f7fe fbfd 	bl	8008990 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a196:	f7ff f841 	bl	800921c <xTaskResumeAll>
 800a19a:	4603      	mov	r3, r0
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d10a      	bne.n	800a1b6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a1a0:	4b09      	ldr	r3, [pc, #36]	; (800a1c8 <prvProcessTimerOrBlockTask+0x98>)
 800a1a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1a6:	601a      	str	r2, [r3, #0]
 800a1a8:	f3bf 8f4f 	dsb	sy
 800a1ac:	f3bf 8f6f 	isb	sy
}
 800a1b0:	e001      	b.n	800a1b6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a1b2:	f7ff f833 	bl	800921c <xTaskResumeAll>
}
 800a1b6:	bf00      	nop
 800a1b8:	3710      	adds	r7, #16
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}
 800a1be:	bf00      	nop
 800a1c0:	20000d5c 	.word	0x20000d5c
 800a1c4:	20000d60 	.word	0x20000d60
 800a1c8:	e000ed04 	.word	0xe000ed04

0800a1cc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b085      	sub	sp, #20
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a1d4:	4b0e      	ldr	r3, [pc, #56]	; (800a210 <prvGetNextExpireTime+0x44>)
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	bf0c      	ite	eq
 800a1de:	2301      	moveq	r3, #1
 800a1e0:	2300      	movne	r3, #0
 800a1e2:	b2db      	uxtb	r3, r3
 800a1e4:	461a      	mov	r2, r3
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d105      	bne.n	800a1fe <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a1f2:	4b07      	ldr	r3, [pc, #28]	; (800a210 <prvGetNextExpireTime+0x44>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	68db      	ldr	r3, [r3, #12]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	60fb      	str	r3, [r7, #12]
 800a1fc:	e001      	b.n	800a202 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a1fe:	2300      	movs	r3, #0
 800a200:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a202:	68fb      	ldr	r3, [r7, #12]
}
 800a204:	4618      	mov	r0, r3
 800a206:	3714      	adds	r7, #20
 800a208:	46bd      	mov	sp, r7
 800a20a:	bc80      	pop	{r7}
 800a20c:	4770      	bx	lr
 800a20e:	bf00      	nop
 800a210:	20000d58 	.word	0x20000d58

0800a214 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b084      	sub	sp, #16
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a21c:	f7ff f89c 	bl	8009358 <xTaskGetTickCount>
 800a220:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a222:	4b0b      	ldr	r3, [pc, #44]	; (800a250 <prvSampleTimeNow+0x3c>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	68fa      	ldr	r2, [r7, #12]
 800a228:	429a      	cmp	r2, r3
 800a22a:	d205      	bcs.n	800a238 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a22c:	f000 f908 	bl	800a440 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2201      	movs	r2, #1
 800a234:	601a      	str	r2, [r3, #0]
 800a236:	e002      	b.n	800a23e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2200      	movs	r2, #0
 800a23c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a23e:	4a04      	ldr	r2, [pc, #16]	; (800a250 <prvSampleTimeNow+0x3c>)
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a244:	68fb      	ldr	r3, [r7, #12]
}
 800a246:	4618      	mov	r0, r3
 800a248:	3710      	adds	r7, #16
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}
 800a24e:	bf00      	nop
 800a250:	20000d68 	.word	0x20000d68

0800a254 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b086      	sub	sp, #24
 800a258:	af00      	add	r7, sp, #0
 800a25a:	60f8      	str	r0, [r7, #12]
 800a25c:	60b9      	str	r1, [r7, #8]
 800a25e:	607a      	str	r2, [r7, #4]
 800a260:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a262:	2300      	movs	r3, #0
 800a264:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	68ba      	ldr	r2, [r7, #8]
 800a26a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	68fa      	ldr	r2, [r7, #12]
 800a270:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a272:	68ba      	ldr	r2, [r7, #8]
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	429a      	cmp	r2, r3
 800a278:	d812      	bhi.n	800a2a0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a27a:	687a      	ldr	r2, [r7, #4]
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	1ad2      	subs	r2, r2, r3
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	699b      	ldr	r3, [r3, #24]
 800a284:	429a      	cmp	r2, r3
 800a286:	d302      	bcc.n	800a28e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a288:	2301      	movs	r3, #1
 800a28a:	617b      	str	r3, [r7, #20]
 800a28c:	e01b      	b.n	800a2c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a28e:	4b10      	ldr	r3, [pc, #64]	; (800a2d0 <prvInsertTimerInActiveList+0x7c>)
 800a290:	681a      	ldr	r2, [r3, #0]
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	3304      	adds	r3, #4
 800a296:	4619      	mov	r1, r3
 800a298:	4610      	mov	r0, r2
 800a29a:	f7fd fa89 	bl	80077b0 <vListInsert>
 800a29e:	e012      	b.n	800a2c6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a2a0:	687a      	ldr	r2, [r7, #4]
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	429a      	cmp	r2, r3
 800a2a6:	d206      	bcs.n	800a2b6 <prvInsertTimerInActiveList+0x62>
 800a2a8:	68ba      	ldr	r2, [r7, #8]
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	429a      	cmp	r2, r3
 800a2ae:	d302      	bcc.n	800a2b6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	617b      	str	r3, [r7, #20]
 800a2b4:	e007      	b.n	800a2c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a2b6:	4b07      	ldr	r3, [pc, #28]	; (800a2d4 <prvInsertTimerInActiveList+0x80>)
 800a2b8:	681a      	ldr	r2, [r3, #0]
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	3304      	adds	r3, #4
 800a2be:	4619      	mov	r1, r3
 800a2c0:	4610      	mov	r0, r2
 800a2c2:	f7fd fa75 	bl	80077b0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a2c6:	697b      	ldr	r3, [r7, #20]
}
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	3718      	adds	r7, #24
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	bd80      	pop	{r7, pc}
 800a2d0:	20000d5c 	.word	0x20000d5c
 800a2d4:	20000d58 	.word	0x20000d58

0800a2d8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b08e      	sub	sp, #56	; 0x38
 800a2dc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a2de:	e09d      	b.n	800a41c <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	da18      	bge.n	800a318 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a2e6:	1d3b      	adds	r3, r7, #4
 800a2e8:	3304      	adds	r3, #4
 800a2ea:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a2ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d10a      	bne.n	800a308 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a2f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2f6:	f383 8811 	msr	BASEPRI, r3
 800a2fa:	f3bf 8f6f 	isb	sy
 800a2fe:	f3bf 8f4f 	dsb	sy
 800a302:	61fb      	str	r3, [r7, #28]
}
 800a304:	bf00      	nop
 800a306:	e7fe      	b.n	800a306 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a30e:	6850      	ldr	r0, [r2, #4]
 800a310:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a312:	6892      	ldr	r2, [r2, #8]
 800a314:	4611      	mov	r1, r2
 800a316:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	db7e      	blt.n	800a41c <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a324:	695b      	ldr	r3, [r3, #20]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d004      	beq.n	800a334 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a32a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a32c:	3304      	adds	r3, #4
 800a32e:	4618      	mov	r0, r3
 800a330:	f7fd fa76 	bl	8007820 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a334:	463b      	mov	r3, r7
 800a336:	4618      	mov	r0, r3
 800a338:	f7ff ff6c 	bl	800a214 <prvSampleTimeNow>
 800a33c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2b09      	cmp	r3, #9
 800a342:	d86a      	bhi.n	800a41a <prvProcessReceivedCommands+0x142>
 800a344:	a201      	add	r2, pc, #4	; (adr r2, 800a34c <prvProcessReceivedCommands+0x74>)
 800a346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a34a:	bf00      	nop
 800a34c:	0800a375 	.word	0x0800a375
 800a350:	0800a375 	.word	0x0800a375
 800a354:	0800a375 	.word	0x0800a375
 800a358:	0800a41d 	.word	0x0800a41d
 800a35c:	0800a3d1 	.word	0x0800a3d1
 800a360:	0800a409 	.word	0x0800a409
 800a364:	0800a375 	.word	0x0800a375
 800a368:	0800a375 	.word	0x0800a375
 800a36c:	0800a41d 	.word	0x0800a41d
 800a370:	0800a3d1 	.word	0x0800a3d1
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a374:	68ba      	ldr	r2, [r7, #8]
 800a376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a378:	699b      	ldr	r3, [r3, #24]
 800a37a:	18d1      	adds	r1, r2, r3
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a380:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a382:	f7ff ff67 	bl	800a254 <prvInsertTimerInActiveList>
 800a386:	4603      	mov	r3, r0
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d047      	beq.n	800a41c <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a38c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a38e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a390:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a392:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a396:	69db      	ldr	r3, [r3, #28]
 800a398:	2b01      	cmp	r3, #1
 800a39a:	d13f      	bne.n	800a41c <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a39c:	68ba      	ldr	r2, [r7, #8]
 800a39e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3a0:	699b      	ldr	r3, [r3, #24]
 800a3a2:	441a      	add	r2, r3
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	9300      	str	r3, [sp, #0]
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	2100      	movs	r1, #0
 800a3ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a3ae:	f7ff fe1f 	bl	8009ff0 <xTimerGenericCommand>
 800a3b2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a3b4:	6a3b      	ldr	r3, [r7, #32]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d130      	bne.n	800a41c <prvProcessReceivedCommands+0x144>
	__asm volatile
 800a3ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3be:	f383 8811 	msr	BASEPRI, r3
 800a3c2:	f3bf 8f6f 	isb	sy
 800a3c6:	f3bf 8f4f 	dsb	sy
 800a3ca:	61bb      	str	r3, [r7, #24]
}
 800a3cc:	bf00      	nop
 800a3ce:	e7fe      	b.n	800a3ce <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a3d0:	68ba      	ldr	r2, [r7, #8]
 800a3d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3d4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a3d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3d8:	699b      	ldr	r3, [r3, #24]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d10a      	bne.n	800a3f4 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800a3de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3e2:	f383 8811 	msr	BASEPRI, r3
 800a3e6:	f3bf 8f6f 	isb	sy
 800a3ea:	f3bf 8f4f 	dsb	sy
 800a3ee:	617b      	str	r3, [r7, #20]
}
 800a3f0:	bf00      	nop
 800a3f2:	e7fe      	b.n	800a3f2 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a3f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3f6:	699a      	ldr	r2, [r3, #24]
 800a3f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3fa:	18d1      	adds	r1, r2, r3
 800a3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a400:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a402:	f7ff ff27 	bl	800a254 <prvInsertTimerInActiveList>
					break;
 800a406:	e009      	b.n	800a41c <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a40a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d104      	bne.n	800a41c <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800a412:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a414:	f000 fb8e 	bl	800ab34 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a418:	e000      	b.n	800a41c <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 800a41a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a41c:	4b07      	ldr	r3, [pc, #28]	; (800a43c <prvProcessReceivedCommands+0x164>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	1d39      	adds	r1, r7, #4
 800a422:	2200      	movs	r2, #0
 800a424:	4618      	mov	r0, r3
 800a426:	f7fd feab 	bl	8008180 <xQueueReceive>
 800a42a:	4603      	mov	r3, r0
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	f47f af57 	bne.w	800a2e0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a432:	bf00      	nop
 800a434:	bf00      	nop
 800a436:	3730      	adds	r7, #48	; 0x30
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}
 800a43c:	20000d60 	.word	0x20000d60

0800a440 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b088      	sub	sp, #32
 800a444:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a446:	e045      	b.n	800a4d4 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a448:	4b2c      	ldr	r3, [pc, #176]	; (800a4fc <prvSwitchTimerLists+0xbc>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	68db      	ldr	r3, [r3, #12]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a452:	4b2a      	ldr	r3, [pc, #168]	; (800a4fc <prvSwitchTimerLists+0xbc>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	68db      	ldr	r3, [r3, #12]
 800a458:	68db      	ldr	r3, [r3, #12]
 800a45a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	3304      	adds	r3, #4
 800a460:	4618      	mov	r0, r3
 800a462:	f7fd f9dd 	bl	8007820 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a46a:	68f8      	ldr	r0, [r7, #12]
 800a46c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	69db      	ldr	r3, [r3, #28]
 800a472:	2b01      	cmp	r3, #1
 800a474:	d12e      	bne.n	800a4d4 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	699b      	ldr	r3, [r3, #24]
 800a47a:	693a      	ldr	r2, [r7, #16]
 800a47c:	4413      	add	r3, r2
 800a47e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a480:	68ba      	ldr	r2, [r7, #8]
 800a482:	693b      	ldr	r3, [r7, #16]
 800a484:	429a      	cmp	r2, r3
 800a486:	d90e      	bls.n	800a4a6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	68ba      	ldr	r2, [r7, #8]
 800a48c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	68fa      	ldr	r2, [r7, #12]
 800a492:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a494:	4b19      	ldr	r3, [pc, #100]	; (800a4fc <prvSwitchTimerLists+0xbc>)
 800a496:	681a      	ldr	r2, [r3, #0]
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	3304      	adds	r3, #4
 800a49c:	4619      	mov	r1, r3
 800a49e:	4610      	mov	r0, r2
 800a4a0:	f7fd f986 	bl	80077b0 <vListInsert>
 800a4a4:	e016      	b.n	800a4d4 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	9300      	str	r3, [sp, #0]
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	693a      	ldr	r2, [r7, #16]
 800a4ae:	2100      	movs	r1, #0
 800a4b0:	68f8      	ldr	r0, [r7, #12]
 800a4b2:	f7ff fd9d 	bl	8009ff0 <xTimerGenericCommand>
 800a4b6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d10a      	bne.n	800a4d4 <prvSwitchTimerLists+0x94>
	__asm volatile
 800a4be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4c2:	f383 8811 	msr	BASEPRI, r3
 800a4c6:	f3bf 8f6f 	isb	sy
 800a4ca:	f3bf 8f4f 	dsb	sy
 800a4ce:	603b      	str	r3, [r7, #0]
}
 800a4d0:	bf00      	nop
 800a4d2:	e7fe      	b.n	800a4d2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a4d4:	4b09      	ldr	r3, [pc, #36]	; (800a4fc <prvSwitchTimerLists+0xbc>)
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d1b4      	bne.n	800a448 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a4de:	4b07      	ldr	r3, [pc, #28]	; (800a4fc <prvSwitchTimerLists+0xbc>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a4e4:	4b06      	ldr	r3, [pc, #24]	; (800a500 <prvSwitchTimerLists+0xc0>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	4a04      	ldr	r2, [pc, #16]	; (800a4fc <prvSwitchTimerLists+0xbc>)
 800a4ea:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a4ec:	4a04      	ldr	r2, [pc, #16]	; (800a500 <prvSwitchTimerLists+0xc0>)
 800a4ee:	697b      	ldr	r3, [r7, #20]
 800a4f0:	6013      	str	r3, [r2, #0]
}
 800a4f2:	bf00      	nop
 800a4f4:	3718      	adds	r7, #24
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd80      	pop	{r7, pc}
 800a4fa:	bf00      	nop
 800a4fc:	20000d58 	.word	0x20000d58
 800a500:	20000d5c 	.word	0x20000d5c

0800a504 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b082      	sub	sp, #8
 800a508:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a50a:	f000 f94f 	bl	800a7ac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a50e:	4b15      	ldr	r3, [pc, #84]	; (800a564 <prvCheckForValidListAndQueue+0x60>)
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d120      	bne.n	800a558 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a516:	4814      	ldr	r0, [pc, #80]	; (800a568 <prvCheckForValidListAndQueue+0x64>)
 800a518:	f7fd f8fc 	bl	8007714 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a51c:	4813      	ldr	r0, [pc, #76]	; (800a56c <prvCheckForValidListAndQueue+0x68>)
 800a51e:	f7fd f8f9 	bl	8007714 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a522:	4b13      	ldr	r3, [pc, #76]	; (800a570 <prvCheckForValidListAndQueue+0x6c>)
 800a524:	4a10      	ldr	r2, [pc, #64]	; (800a568 <prvCheckForValidListAndQueue+0x64>)
 800a526:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a528:	4b12      	ldr	r3, [pc, #72]	; (800a574 <prvCheckForValidListAndQueue+0x70>)
 800a52a:	4a10      	ldr	r2, [pc, #64]	; (800a56c <prvCheckForValidListAndQueue+0x68>)
 800a52c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a52e:	2300      	movs	r3, #0
 800a530:	9300      	str	r3, [sp, #0]
 800a532:	4b11      	ldr	r3, [pc, #68]	; (800a578 <prvCheckForValidListAndQueue+0x74>)
 800a534:	4a11      	ldr	r2, [pc, #68]	; (800a57c <prvCheckForValidListAndQueue+0x78>)
 800a536:	2110      	movs	r1, #16
 800a538:	200a      	movs	r0, #10
 800a53a:	f7fd fa03 	bl	8007944 <xQueueGenericCreateStatic>
 800a53e:	4603      	mov	r3, r0
 800a540:	4a08      	ldr	r2, [pc, #32]	; (800a564 <prvCheckForValidListAndQueue+0x60>)
 800a542:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a544:	4b07      	ldr	r3, [pc, #28]	; (800a564 <prvCheckForValidListAndQueue+0x60>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d005      	beq.n	800a558 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a54c:	4b05      	ldr	r3, [pc, #20]	; (800a564 <prvCheckForValidListAndQueue+0x60>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	490b      	ldr	r1, [pc, #44]	; (800a580 <prvCheckForValidListAndQueue+0x7c>)
 800a552:	4618      	mov	r0, r3
 800a554:	f7fe f9ca 	bl	80088ec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a558:	f000 f958 	bl	800a80c <vPortExitCritical>
}
 800a55c:	bf00      	nop
 800a55e:	46bd      	mov	sp, r7
 800a560:	bd80      	pop	{r7, pc}
 800a562:	bf00      	nop
 800a564:	20000d60 	.word	0x20000d60
 800a568:	20000d30 	.word	0x20000d30
 800a56c:	20000d44 	.word	0x20000d44
 800a570:	20000d58 	.word	0x20000d58
 800a574:	20000d5c 	.word	0x20000d5c
 800a578:	20000e0c 	.word	0x20000e0c
 800a57c:	20000d6c 	.word	0x20000d6c
 800a580:	0800bb28 	.word	0x0800bb28

0800a584 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800a584:	b580      	push	{r7, lr}
 800a586:	b08a      	sub	sp, #40	; 0x28
 800a588:	af00      	add	r7, sp, #0
 800a58a:	60f8      	str	r0, [r7, #12]
 800a58c:	60b9      	str	r1, [r7, #8]
 800a58e:	607a      	str	r2, [r7, #4]
 800a590:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800a592:	f06f 0301 	mvn.w	r3, #1
 800a596:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a5a4:	4b06      	ldr	r3, [pc, #24]	; (800a5c0 <xTimerPendFunctionCallFromISR+0x3c>)
 800a5a6:	6818      	ldr	r0, [r3, #0]
 800a5a8:	f107 0114 	add.w	r1, r7, #20
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	683a      	ldr	r2, [r7, #0]
 800a5b0:	f7fd fcc0 	bl	8007f34 <xQueueGenericSendFromISR>
 800a5b4:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800a5b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	3728      	adds	r7, #40	; 0x28
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	bd80      	pop	{r7, pc}
 800a5c0:	20000d60 	.word	0x20000d60

0800a5c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a5c4:	b480      	push	{r7}
 800a5c6:	b085      	sub	sp, #20
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	60f8      	str	r0, [r7, #12]
 800a5cc:	60b9      	str	r1, [r7, #8]
 800a5ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	3b04      	subs	r3, #4
 800a5d4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a5dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	3b04      	subs	r3, #4
 800a5e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	f023 0201 	bic.w	r2, r3, #1
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	3b04      	subs	r3, #4
 800a5f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a5f4:	4a08      	ldr	r2, [pc, #32]	; (800a618 <pxPortInitialiseStack+0x54>)
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	3b14      	subs	r3, #20
 800a5fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a600:	687a      	ldr	r2, [r7, #4]
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	3b20      	subs	r3, #32
 800a60a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a60c:	68fb      	ldr	r3, [r7, #12]
}
 800a60e:	4618      	mov	r0, r3
 800a610:	3714      	adds	r7, #20
 800a612:	46bd      	mov	sp, r7
 800a614:	bc80      	pop	{r7}
 800a616:	4770      	bx	lr
 800a618:	0800a61d 	.word	0x0800a61d

0800a61c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a61c:	b480      	push	{r7}
 800a61e:	b085      	sub	sp, #20
 800a620:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800a622:	2300      	movs	r3, #0
 800a624:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a626:	4b12      	ldr	r3, [pc, #72]	; (800a670 <prvTaskExitError+0x54>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a62e:	d00a      	beq.n	800a646 <prvTaskExitError+0x2a>
	__asm volatile
 800a630:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a634:	f383 8811 	msr	BASEPRI, r3
 800a638:	f3bf 8f6f 	isb	sy
 800a63c:	f3bf 8f4f 	dsb	sy
 800a640:	60fb      	str	r3, [r7, #12]
}
 800a642:	bf00      	nop
 800a644:	e7fe      	b.n	800a644 <prvTaskExitError+0x28>
	__asm volatile
 800a646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a64a:	f383 8811 	msr	BASEPRI, r3
 800a64e:	f3bf 8f6f 	isb	sy
 800a652:	f3bf 8f4f 	dsb	sy
 800a656:	60bb      	str	r3, [r7, #8]
}
 800a658:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a65a:	bf00      	nop
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d0fc      	beq.n	800a65c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a662:	bf00      	nop
 800a664:	bf00      	nop
 800a666:	3714      	adds	r7, #20
 800a668:	46bd      	mov	sp, r7
 800a66a:	bc80      	pop	{r7}
 800a66c:	4770      	bx	lr
 800a66e:	bf00      	nop
 800a670:	20000024 	.word	0x20000024
	...

0800a680 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a680:	4b07      	ldr	r3, [pc, #28]	; (800a6a0 <pxCurrentTCBConst2>)
 800a682:	6819      	ldr	r1, [r3, #0]
 800a684:	6808      	ldr	r0, [r1, #0]
 800a686:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a68a:	f380 8809 	msr	PSP, r0
 800a68e:	f3bf 8f6f 	isb	sy
 800a692:	f04f 0000 	mov.w	r0, #0
 800a696:	f380 8811 	msr	BASEPRI, r0
 800a69a:	f04e 0e0d 	orr.w	lr, lr, #13
 800a69e:	4770      	bx	lr

0800a6a0 <pxCurrentTCBConst2>:
 800a6a0:	20000830 	.word	0x20000830
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a6a4:	bf00      	nop
 800a6a6:	bf00      	nop

0800a6a8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800a6a8:	4806      	ldr	r0, [pc, #24]	; (800a6c4 <prvPortStartFirstTask+0x1c>)
 800a6aa:	6800      	ldr	r0, [r0, #0]
 800a6ac:	6800      	ldr	r0, [r0, #0]
 800a6ae:	f380 8808 	msr	MSP, r0
 800a6b2:	b662      	cpsie	i
 800a6b4:	b661      	cpsie	f
 800a6b6:	f3bf 8f4f 	dsb	sy
 800a6ba:	f3bf 8f6f 	isb	sy
 800a6be:	df00      	svc	0
 800a6c0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a6c2:	bf00      	nop
 800a6c4:	e000ed08 	.word	0xe000ed08

0800a6c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b084      	sub	sp, #16
 800a6cc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a6ce:	4b32      	ldr	r3, [pc, #200]	; (800a798 <xPortStartScheduler+0xd0>)
 800a6d0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	781b      	ldrb	r3, [r3, #0]
 800a6d6:	b2db      	uxtb	r3, r3
 800a6d8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	22ff      	movs	r2, #255	; 0xff
 800a6de:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	781b      	ldrb	r3, [r3, #0]
 800a6e4:	b2db      	uxtb	r3, r3
 800a6e6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a6e8:	78fb      	ldrb	r3, [r7, #3]
 800a6ea:	b2db      	uxtb	r3, r3
 800a6ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a6f0:	b2da      	uxtb	r2, r3
 800a6f2:	4b2a      	ldr	r3, [pc, #168]	; (800a79c <xPortStartScheduler+0xd4>)
 800a6f4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a6f6:	4b2a      	ldr	r3, [pc, #168]	; (800a7a0 <xPortStartScheduler+0xd8>)
 800a6f8:	2207      	movs	r2, #7
 800a6fa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a6fc:	e009      	b.n	800a712 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a6fe:	4b28      	ldr	r3, [pc, #160]	; (800a7a0 <xPortStartScheduler+0xd8>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	3b01      	subs	r3, #1
 800a704:	4a26      	ldr	r2, [pc, #152]	; (800a7a0 <xPortStartScheduler+0xd8>)
 800a706:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a708:	78fb      	ldrb	r3, [r7, #3]
 800a70a:	b2db      	uxtb	r3, r3
 800a70c:	005b      	lsls	r3, r3, #1
 800a70e:	b2db      	uxtb	r3, r3
 800a710:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a712:	78fb      	ldrb	r3, [r7, #3]
 800a714:	b2db      	uxtb	r3, r3
 800a716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a71a:	2b80      	cmp	r3, #128	; 0x80
 800a71c:	d0ef      	beq.n	800a6fe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a71e:	4b20      	ldr	r3, [pc, #128]	; (800a7a0 <xPortStartScheduler+0xd8>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	f1c3 0307 	rsb	r3, r3, #7
 800a726:	2b04      	cmp	r3, #4
 800a728:	d00a      	beq.n	800a740 <xPortStartScheduler+0x78>
	__asm volatile
 800a72a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a72e:	f383 8811 	msr	BASEPRI, r3
 800a732:	f3bf 8f6f 	isb	sy
 800a736:	f3bf 8f4f 	dsb	sy
 800a73a:	60bb      	str	r3, [r7, #8]
}
 800a73c:	bf00      	nop
 800a73e:	e7fe      	b.n	800a73e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a740:	4b17      	ldr	r3, [pc, #92]	; (800a7a0 <xPortStartScheduler+0xd8>)
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	021b      	lsls	r3, r3, #8
 800a746:	4a16      	ldr	r2, [pc, #88]	; (800a7a0 <xPortStartScheduler+0xd8>)
 800a748:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a74a:	4b15      	ldr	r3, [pc, #84]	; (800a7a0 <xPortStartScheduler+0xd8>)
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a752:	4a13      	ldr	r2, [pc, #76]	; (800a7a0 <xPortStartScheduler+0xd8>)
 800a754:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	b2da      	uxtb	r2, r3
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a75e:	4b11      	ldr	r3, [pc, #68]	; (800a7a4 <xPortStartScheduler+0xdc>)
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	4a10      	ldr	r2, [pc, #64]	; (800a7a4 <xPortStartScheduler+0xdc>)
 800a764:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a768:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a76a:	4b0e      	ldr	r3, [pc, #56]	; (800a7a4 <xPortStartScheduler+0xdc>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	4a0d      	ldr	r2, [pc, #52]	; (800a7a4 <xPortStartScheduler+0xdc>)
 800a770:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a774:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a776:	f000 f8b9 	bl	800a8ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a77a:	4b0b      	ldr	r3, [pc, #44]	; (800a7a8 <xPortStartScheduler+0xe0>)
 800a77c:	2200      	movs	r2, #0
 800a77e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a780:	f7ff ff92 	bl	800a6a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a784:	f7fe fec6 	bl	8009514 <vTaskSwitchContext>
	prvTaskExitError();
 800a788:	f7ff ff48 	bl	800a61c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a78c:	2300      	movs	r3, #0
}
 800a78e:	4618      	mov	r0, r3
 800a790:	3710      	adds	r7, #16
 800a792:	46bd      	mov	sp, r7
 800a794:	bd80      	pop	{r7, pc}
 800a796:	bf00      	nop
 800a798:	e000e400 	.word	0xe000e400
 800a79c:	20000e5c 	.word	0x20000e5c
 800a7a0:	20000e60 	.word	0x20000e60
 800a7a4:	e000ed20 	.word	0xe000ed20
 800a7a8:	20000024 	.word	0x20000024

0800a7ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	b083      	sub	sp, #12
 800a7b0:	af00      	add	r7, sp, #0
	__asm volatile
 800a7b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7b6:	f383 8811 	msr	BASEPRI, r3
 800a7ba:	f3bf 8f6f 	isb	sy
 800a7be:	f3bf 8f4f 	dsb	sy
 800a7c2:	607b      	str	r3, [r7, #4]
}
 800a7c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a7c6:	4b0f      	ldr	r3, [pc, #60]	; (800a804 <vPortEnterCritical+0x58>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	3301      	adds	r3, #1
 800a7cc:	4a0d      	ldr	r2, [pc, #52]	; (800a804 <vPortEnterCritical+0x58>)
 800a7ce:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a7d0:	4b0c      	ldr	r3, [pc, #48]	; (800a804 <vPortEnterCritical+0x58>)
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	2b01      	cmp	r3, #1
 800a7d6:	d10f      	bne.n	800a7f8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a7d8:	4b0b      	ldr	r3, [pc, #44]	; (800a808 <vPortEnterCritical+0x5c>)
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	b2db      	uxtb	r3, r3
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d00a      	beq.n	800a7f8 <vPortEnterCritical+0x4c>
	__asm volatile
 800a7e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e6:	f383 8811 	msr	BASEPRI, r3
 800a7ea:	f3bf 8f6f 	isb	sy
 800a7ee:	f3bf 8f4f 	dsb	sy
 800a7f2:	603b      	str	r3, [r7, #0]
}
 800a7f4:	bf00      	nop
 800a7f6:	e7fe      	b.n	800a7f6 <vPortEnterCritical+0x4a>
	}
}
 800a7f8:	bf00      	nop
 800a7fa:	370c      	adds	r7, #12
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bc80      	pop	{r7}
 800a800:	4770      	bx	lr
 800a802:	bf00      	nop
 800a804:	20000024 	.word	0x20000024
 800a808:	e000ed04 	.word	0xe000ed04

0800a80c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a80c:	b480      	push	{r7}
 800a80e:	b083      	sub	sp, #12
 800a810:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a812:	4b11      	ldr	r3, [pc, #68]	; (800a858 <vPortExitCritical+0x4c>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d10a      	bne.n	800a830 <vPortExitCritical+0x24>
	__asm volatile
 800a81a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a81e:	f383 8811 	msr	BASEPRI, r3
 800a822:	f3bf 8f6f 	isb	sy
 800a826:	f3bf 8f4f 	dsb	sy
 800a82a:	607b      	str	r3, [r7, #4]
}
 800a82c:	bf00      	nop
 800a82e:	e7fe      	b.n	800a82e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a830:	4b09      	ldr	r3, [pc, #36]	; (800a858 <vPortExitCritical+0x4c>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	3b01      	subs	r3, #1
 800a836:	4a08      	ldr	r2, [pc, #32]	; (800a858 <vPortExitCritical+0x4c>)
 800a838:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a83a:	4b07      	ldr	r3, [pc, #28]	; (800a858 <vPortExitCritical+0x4c>)
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d105      	bne.n	800a84e <vPortExitCritical+0x42>
 800a842:	2300      	movs	r3, #0
 800a844:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	f383 8811 	msr	BASEPRI, r3
}
 800a84c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a84e:	bf00      	nop
 800a850:	370c      	adds	r7, #12
 800a852:	46bd      	mov	sp, r7
 800a854:	bc80      	pop	{r7}
 800a856:	4770      	bx	lr
 800a858:	20000024 	.word	0x20000024
 800a85c:	00000000 	.word	0x00000000

0800a860 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a860:	f3ef 8009 	mrs	r0, PSP
 800a864:	f3bf 8f6f 	isb	sy
 800a868:	4b0d      	ldr	r3, [pc, #52]	; (800a8a0 <pxCurrentTCBConst>)
 800a86a:	681a      	ldr	r2, [r3, #0]
 800a86c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a870:	6010      	str	r0, [r2, #0]
 800a872:	e92d 4008 	stmdb	sp!, {r3, lr}
 800a876:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a87a:	f380 8811 	msr	BASEPRI, r0
 800a87e:	f7fe fe49 	bl	8009514 <vTaskSwitchContext>
 800a882:	f04f 0000 	mov.w	r0, #0
 800a886:	f380 8811 	msr	BASEPRI, r0
 800a88a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a88e:	6819      	ldr	r1, [r3, #0]
 800a890:	6808      	ldr	r0, [r1, #0]
 800a892:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a896:	f380 8809 	msr	PSP, r0
 800a89a:	f3bf 8f6f 	isb	sy
 800a89e:	4770      	bx	lr

0800a8a0 <pxCurrentTCBConst>:
 800a8a0:	20000830 	.word	0x20000830
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a8a4:	bf00      	nop
 800a8a6:	bf00      	nop

0800a8a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b082      	sub	sp, #8
 800a8ac:	af00      	add	r7, sp, #0
	__asm volatile
 800a8ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8b2:	f383 8811 	msr	BASEPRI, r3
 800a8b6:	f3bf 8f6f 	isb	sy
 800a8ba:	f3bf 8f4f 	dsb	sy
 800a8be:	607b      	str	r3, [r7, #4]
}
 800a8c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a8c2:	f7fe fd69 	bl	8009398 <xTaskIncrementTick>
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d003      	beq.n	800a8d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a8cc:	4b06      	ldr	r3, [pc, #24]	; (800a8e8 <SysTick_Handler+0x40>)
 800a8ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8d2:	601a      	str	r2, [r3, #0]
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	f383 8811 	msr	BASEPRI, r3
}
 800a8de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a8e0:	bf00      	nop
 800a8e2:	3708      	adds	r7, #8
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	bd80      	pop	{r7, pc}
 800a8e8:	e000ed04 	.word	0xe000ed04

0800a8ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a8ec:	b480      	push	{r7}
 800a8ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a8f0:	4b0a      	ldr	r3, [pc, #40]	; (800a91c <vPortSetupTimerInterrupt+0x30>)
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a8f6:	4b0a      	ldr	r3, [pc, #40]	; (800a920 <vPortSetupTimerInterrupt+0x34>)
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a8fc:	4b09      	ldr	r3, [pc, #36]	; (800a924 <vPortSetupTimerInterrupt+0x38>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	4a09      	ldr	r2, [pc, #36]	; (800a928 <vPortSetupTimerInterrupt+0x3c>)
 800a902:	fba2 2303 	umull	r2, r3, r2, r3
 800a906:	099b      	lsrs	r3, r3, #6
 800a908:	4a08      	ldr	r2, [pc, #32]	; (800a92c <vPortSetupTimerInterrupt+0x40>)
 800a90a:	3b01      	subs	r3, #1
 800a90c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a90e:	4b03      	ldr	r3, [pc, #12]	; (800a91c <vPortSetupTimerInterrupt+0x30>)
 800a910:	2207      	movs	r2, #7
 800a912:	601a      	str	r2, [r3, #0]
}
 800a914:	bf00      	nop
 800a916:	46bd      	mov	sp, r7
 800a918:	bc80      	pop	{r7}
 800a91a:	4770      	bx	lr
 800a91c:	e000e010 	.word	0xe000e010
 800a920:	e000e018 	.word	0xe000e018
 800a924:	20000018 	.word	0x20000018
 800a928:	10624dd3 	.word	0x10624dd3
 800a92c:	e000e014 	.word	0xe000e014

0800a930 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a930:	b480      	push	{r7}
 800a932:	b085      	sub	sp, #20
 800a934:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a936:	f3ef 8305 	mrs	r3, IPSR
 800a93a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	2b0f      	cmp	r3, #15
 800a940:	d914      	bls.n	800a96c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a942:	4a16      	ldr	r2, [pc, #88]	; (800a99c <vPortValidateInterruptPriority+0x6c>)
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	4413      	add	r3, r2
 800a948:	781b      	ldrb	r3, [r3, #0]
 800a94a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a94c:	4b14      	ldr	r3, [pc, #80]	; (800a9a0 <vPortValidateInterruptPriority+0x70>)
 800a94e:	781b      	ldrb	r3, [r3, #0]
 800a950:	7afa      	ldrb	r2, [r7, #11]
 800a952:	429a      	cmp	r2, r3
 800a954:	d20a      	bcs.n	800a96c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a95a:	f383 8811 	msr	BASEPRI, r3
 800a95e:	f3bf 8f6f 	isb	sy
 800a962:	f3bf 8f4f 	dsb	sy
 800a966:	607b      	str	r3, [r7, #4]
}
 800a968:	bf00      	nop
 800a96a:	e7fe      	b.n	800a96a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a96c:	4b0d      	ldr	r3, [pc, #52]	; (800a9a4 <vPortValidateInterruptPriority+0x74>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a974:	4b0c      	ldr	r3, [pc, #48]	; (800a9a8 <vPortValidateInterruptPriority+0x78>)
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	429a      	cmp	r2, r3
 800a97a:	d90a      	bls.n	800a992 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a97c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a980:	f383 8811 	msr	BASEPRI, r3
 800a984:	f3bf 8f6f 	isb	sy
 800a988:	f3bf 8f4f 	dsb	sy
 800a98c:	603b      	str	r3, [r7, #0]
}
 800a98e:	bf00      	nop
 800a990:	e7fe      	b.n	800a990 <vPortValidateInterruptPriority+0x60>
	}
 800a992:	bf00      	nop
 800a994:	3714      	adds	r7, #20
 800a996:	46bd      	mov	sp, r7
 800a998:	bc80      	pop	{r7}
 800a99a:	4770      	bx	lr
 800a99c:	e000e3f0 	.word	0xe000e3f0
 800a9a0:	20000e5c 	.word	0x20000e5c
 800a9a4:	e000ed0c 	.word	0xe000ed0c
 800a9a8:	20000e60 	.word	0x20000e60

0800a9ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b08a      	sub	sp, #40	; 0x28
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a9b8:	f7fe fc22 	bl	8009200 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a9bc:	4b58      	ldr	r3, [pc, #352]	; (800ab20 <pvPortMalloc+0x174>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d101      	bne.n	800a9c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a9c4:	f000 f910 	bl	800abe8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a9c8:	4b56      	ldr	r3, [pc, #344]	; (800ab24 <pvPortMalloc+0x178>)
 800a9ca:	681a      	ldr	r2, [r3, #0]
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	4013      	ands	r3, r2
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	f040 808e 	bne.w	800aaf2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d01d      	beq.n	800aa18 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a9dc:	2208      	movs	r2, #8
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	4413      	add	r3, r2
 800a9e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f003 0307 	and.w	r3, r3, #7
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d014      	beq.n	800aa18 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	f023 0307 	bic.w	r3, r3, #7
 800a9f4:	3308      	adds	r3, #8
 800a9f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f003 0307 	and.w	r3, r3, #7
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d00a      	beq.n	800aa18 <pvPortMalloc+0x6c>
	__asm volatile
 800aa02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa06:	f383 8811 	msr	BASEPRI, r3
 800aa0a:	f3bf 8f6f 	isb	sy
 800aa0e:	f3bf 8f4f 	dsb	sy
 800aa12:	617b      	str	r3, [r7, #20]
}
 800aa14:	bf00      	nop
 800aa16:	e7fe      	b.n	800aa16 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d069      	beq.n	800aaf2 <pvPortMalloc+0x146>
 800aa1e:	4b42      	ldr	r3, [pc, #264]	; (800ab28 <pvPortMalloc+0x17c>)
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	687a      	ldr	r2, [r7, #4]
 800aa24:	429a      	cmp	r2, r3
 800aa26:	d864      	bhi.n	800aaf2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800aa28:	4b40      	ldr	r3, [pc, #256]	; (800ab2c <pvPortMalloc+0x180>)
 800aa2a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800aa2c:	4b3f      	ldr	r3, [pc, #252]	; (800ab2c <pvPortMalloc+0x180>)
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aa32:	e004      	b.n	800aa3e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800aa34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa36:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800aa38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aa3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa40:	685b      	ldr	r3, [r3, #4]
 800aa42:	687a      	ldr	r2, [r7, #4]
 800aa44:	429a      	cmp	r2, r3
 800aa46:	d903      	bls.n	800aa50 <pvPortMalloc+0xa4>
 800aa48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d1f1      	bne.n	800aa34 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800aa50:	4b33      	ldr	r3, [pc, #204]	; (800ab20 <pvPortMalloc+0x174>)
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa56:	429a      	cmp	r2, r3
 800aa58:	d04b      	beq.n	800aaf2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800aa5a:	6a3b      	ldr	r3, [r7, #32]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	2208      	movs	r2, #8
 800aa60:	4413      	add	r3, r2
 800aa62:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800aa64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa66:	681a      	ldr	r2, [r3, #0]
 800aa68:	6a3b      	ldr	r3, [r7, #32]
 800aa6a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800aa6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa6e:	685a      	ldr	r2, [r3, #4]
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	1ad2      	subs	r2, r2, r3
 800aa74:	2308      	movs	r3, #8
 800aa76:	005b      	lsls	r3, r3, #1
 800aa78:	429a      	cmp	r2, r3
 800aa7a:	d91f      	bls.n	800aabc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800aa7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	4413      	add	r3, r2
 800aa82:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa84:	69bb      	ldr	r3, [r7, #24]
 800aa86:	f003 0307 	and.w	r3, r3, #7
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d00a      	beq.n	800aaa4 <pvPortMalloc+0xf8>
	__asm volatile
 800aa8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa92:	f383 8811 	msr	BASEPRI, r3
 800aa96:	f3bf 8f6f 	isb	sy
 800aa9a:	f3bf 8f4f 	dsb	sy
 800aa9e:	613b      	str	r3, [r7, #16]
}
 800aaa0:	bf00      	nop
 800aaa2:	e7fe      	b.n	800aaa2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800aaa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaa6:	685a      	ldr	r2, [r3, #4]
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	1ad2      	subs	r2, r2, r3
 800aaac:	69bb      	ldr	r3, [r7, #24]
 800aaae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800aab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aab2:	687a      	ldr	r2, [r7, #4]
 800aab4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800aab6:	69b8      	ldr	r0, [r7, #24]
 800aab8:	f000 f8f8 	bl	800acac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800aabc:	4b1a      	ldr	r3, [pc, #104]	; (800ab28 <pvPortMalloc+0x17c>)
 800aabe:	681a      	ldr	r2, [r3, #0]
 800aac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aac2:	685b      	ldr	r3, [r3, #4]
 800aac4:	1ad3      	subs	r3, r2, r3
 800aac6:	4a18      	ldr	r2, [pc, #96]	; (800ab28 <pvPortMalloc+0x17c>)
 800aac8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800aaca:	4b17      	ldr	r3, [pc, #92]	; (800ab28 <pvPortMalloc+0x17c>)
 800aacc:	681a      	ldr	r2, [r3, #0]
 800aace:	4b18      	ldr	r3, [pc, #96]	; (800ab30 <pvPortMalloc+0x184>)
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	429a      	cmp	r2, r3
 800aad4:	d203      	bcs.n	800aade <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800aad6:	4b14      	ldr	r3, [pc, #80]	; (800ab28 <pvPortMalloc+0x17c>)
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	4a15      	ldr	r2, [pc, #84]	; (800ab30 <pvPortMalloc+0x184>)
 800aadc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800aade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aae0:	685a      	ldr	r2, [r3, #4]
 800aae2:	4b10      	ldr	r3, [pc, #64]	; (800ab24 <pvPortMalloc+0x178>)
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	431a      	orrs	r2, r3
 800aae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800aaec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaee:	2200      	movs	r2, #0
 800aaf0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800aaf2:	f7fe fb93 	bl	800921c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800aaf6:	69fb      	ldr	r3, [r7, #28]
 800aaf8:	f003 0307 	and.w	r3, r3, #7
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d00a      	beq.n	800ab16 <pvPortMalloc+0x16a>
	__asm volatile
 800ab00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab04:	f383 8811 	msr	BASEPRI, r3
 800ab08:	f3bf 8f6f 	isb	sy
 800ab0c:	f3bf 8f4f 	dsb	sy
 800ab10:	60fb      	str	r3, [r7, #12]
}
 800ab12:	bf00      	nop
 800ab14:	e7fe      	b.n	800ab14 <pvPortMalloc+0x168>
	return pvReturn;
 800ab16:	69fb      	ldr	r3, [r7, #28]
}
 800ab18:	4618      	mov	r0, r3
 800ab1a:	3728      	adds	r7, #40	; 0x28
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	bd80      	pop	{r7, pc}
 800ab20:	20002e6c 	.word	0x20002e6c
 800ab24:	20002e78 	.word	0x20002e78
 800ab28:	20002e70 	.word	0x20002e70
 800ab2c:	20002e64 	.word	0x20002e64
 800ab30:	20002e74 	.word	0x20002e74

0800ab34 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b086      	sub	sp, #24
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d048      	beq.n	800abd8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ab46:	2308      	movs	r3, #8
 800ab48:	425b      	negs	r3, r3
 800ab4a:	697a      	ldr	r2, [r7, #20]
 800ab4c:	4413      	add	r3, r2
 800ab4e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ab50:	697b      	ldr	r3, [r7, #20]
 800ab52:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	685a      	ldr	r2, [r3, #4]
 800ab58:	4b21      	ldr	r3, [pc, #132]	; (800abe0 <vPortFree+0xac>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	4013      	ands	r3, r2
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d10a      	bne.n	800ab78 <vPortFree+0x44>
	__asm volatile
 800ab62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab66:	f383 8811 	msr	BASEPRI, r3
 800ab6a:	f3bf 8f6f 	isb	sy
 800ab6e:	f3bf 8f4f 	dsb	sy
 800ab72:	60fb      	str	r3, [r7, #12]
}
 800ab74:	bf00      	nop
 800ab76:	e7fe      	b.n	800ab76 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ab78:	693b      	ldr	r3, [r7, #16]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d00a      	beq.n	800ab96 <vPortFree+0x62>
	__asm volatile
 800ab80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab84:	f383 8811 	msr	BASEPRI, r3
 800ab88:	f3bf 8f6f 	isb	sy
 800ab8c:	f3bf 8f4f 	dsb	sy
 800ab90:	60bb      	str	r3, [r7, #8]
}
 800ab92:	bf00      	nop
 800ab94:	e7fe      	b.n	800ab94 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ab96:	693b      	ldr	r3, [r7, #16]
 800ab98:	685a      	ldr	r2, [r3, #4]
 800ab9a:	4b11      	ldr	r3, [pc, #68]	; (800abe0 <vPortFree+0xac>)
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	4013      	ands	r3, r2
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d019      	beq.n	800abd8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800aba4:	693b      	ldr	r3, [r7, #16]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d115      	bne.n	800abd8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800abac:	693b      	ldr	r3, [r7, #16]
 800abae:	685a      	ldr	r2, [r3, #4]
 800abb0:	4b0b      	ldr	r3, [pc, #44]	; (800abe0 <vPortFree+0xac>)
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	43db      	mvns	r3, r3
 800abb6:	401a      	ands	r2, r3
 800abb8:	693b      	ldr	r3, [r7, #16]
 800abba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800abbc:	f7fe fb20 	bl	8009200 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800abc0:	693b      	ldr	r3, [r7, #16]
 800abc2:	685a      	ldr	r2, [r3, #4]
 800abc4:	4b07      	ldr	r3, [pc, #28]	; (800abe4 <vPortFree+0xb0>)
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	4413      	add	r3, r2
 800abca:	4a06      	ldr	r2, [pc, #24]	; (800abe4 <vPortFree+0xb0>)
 800abcc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800abce:	6938      	ldr	r0, [r7, #16]
 800abd0:	f000 f86c 	bl	800acac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800abd4:	f7fe fb22 	bl	800921c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800abd8:	bf00      	nop
 800abda:	3718      	adds	r7, #24
 800abdc:	46bd      	mov	sp, r7
 800abde:	bd80      	pop	{r7, pc}
 800abe0:	20002e78 	.word	0x20002e78
 800abe4:	20002e70 	.word	0x20002e70

0800abe8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800abe8:	b480      	push	{r7}
 800abea:	b085      	sub	sp, #20
 800abec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800abee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800abf2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800abf4:	4b27      	ldr	r3, [pc, #156]	; (800ac94 <prvHeapInit+0xac>)
 800abf6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	f003 0307 	and.w	r3, r3, #7
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d00c      	beq.n	800ac1c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	3307      	adds	r3, #7
 800ac06:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	f023 0307 	bic.w	r3, r3, #7
 800ac0e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ac10:	68ba      	ldr	r2, [r7, #8]
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	1ad3      	subs	r3, r2, r3
 800ac16:	4a1f      	ldr	r2, [pc, #124]	; (800ac94 <prvHeapInit+0xac>)
 800ac18:	4413      	add	r3, r2
 800ac1a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ac20:	4a1d      	ldr	r2, [pc, #116]	; (800ac98 <prvHeapInit+0xb0>)
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ac26:	4b1c      	ldr	r3, [pc, #112]	; (800ac98 <prvHeapInit+0xb0>)
 800ac28:	2200      	movs	r2, #0
 800ac2a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	68ba      	ldr	r2, [r7, #8]
 800ac30:	4413      	add	r3, r2
 800ac32:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ac34:	2208      	movs	r2, #8
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	1a9b      	subs	r3, r3, r2
 800ac3a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	f023 0307 	bic.w	r3, r3, #7
 800ac42:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	4a15      	ldr	r2, [pc, #84]	; (800ac9c <prvHeapInit+0xb4>)
 800ac48:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ac4a:	4b14      	ldr	r3, [pc, #80]	; (800ac9c <prvHeapInit+0xb4>)
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	2200      	movs	r2, #0
 800ac50:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ac52:	4b12      	ldr	r3, [pc, #72]	; (800ac9c <prvHeapInit+0xb4>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	2200      	movs	r2, #0
 800ac58:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	68fa      	ldr	r2, [r7, #12]
 800ac62:	1ad2      	subs	r2, r2, r3
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ac68:	4b0c      	ldr	r3, [pc, #48]	; (800ac9c <prvHeapInit+0xb4>)
 800ac6a:	681a      	ldr	r2, [r3, #0]
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	685b      	ldr	r3, [r3, #4]
 800ac74:	4a0a      	ldr	r2, [pc, #40]	; (800aca0 <prvHeapInit+0xb8>)
 800ac76:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	685b      	ldr	r3, [r3, #4]
 800ac7c:	4a09      	ldr	r2, [pc, #36]	; (800aca4 <prvHeapInit+0xbc>)
 800ac7e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ac80:	4b09      	ldr	r3, [pc, #36]	; (800aca8 <prvHeapInit+0xc0>)
 800ac82:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ac86:	601a      	str	r2, [r3, #0]
}
 800ac88:	bf00      	nop
 800ac8a:	3714      	adds	r7, #20
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bc80      	pop	{r7}
 800ac90:	4770      	bx	lr
 800ac92:	bf00      	nop
 800ac94:	20000e64 	.word	0x20000e64
 800ac98:	20002e64 	.word	0x20002e64
 800ac9c:	20002e6c 	.word	0x20002e6c
 800aca0:	20002e74 	.word	0x20002e74
 800aca4:	20002e70 	.word	0x20002e70
 800aca8:	20002e78 	.word	0x20002e78

0800acac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800acac:	b480      	push	{r7}
 800acae:	b085      	sub	sp, #20
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800acb4:	4b27      	ldr	r3, [pc, #156]	; (800ad54 <prvInsertBlockIntoFreeList+0xa8>)
 800acb6:	60fb      	str	r3, [r7, #12]
 800acb8:	e002      	b.n	800acc0 <prvInsertBlockIntoFreeList+0x14>
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	60fb      	str	r3, [r7, #12]
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	687a      	ldr	r2, [r7, #4]
 800acc6:	429a      	cmp	r2, r3
 800acc8:	d8f7      	bhi.n	800acba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	685b      	ldr	r3, [r3, #4]
 800acd2:	68ba      	ldr	r2, [r7, #8]
 800acd4:	4413      	add	r3, r2
 800acd6:	687a      	ldr	r2, [r7, #4]
 800acd8:	429a      	cmp	r2, r3
 800acda:	d108      	bne.n	800acee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	685a      	ldr	r2, [r3, #4]
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	685b      	ldr	r3, [r3, #4]
 800ace4:	441a      	add	r2, r3
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	685b      	ldr	r3, [r3, #4]
 800acf6:	68ba      	ldr	r2, [r7, #8]
 800acf8:	441a      	add	r2, r3
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	429a      	cmp	r2, r3
 800ad00:	d118      	bne.n	800ad34 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	681a      	ldr	r2, [r3, #0]
 800ad06:	4b14      	ldr	r3, [pc, #80]	; (800ad58 <prvInsertBlockIntoFreeList+0xac>)
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	429a      	cmp	r2, r3
 800ad0c:	d00d      	beq.n	800ad2a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	685a      	ldr	r2, [r3, #4]
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	685b      	ldr	r3, [r3, #4]
 800ad18:	441a      	add	r2, r3
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	681a      	ldr	r2, [r3, #0]
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	601a      	str	r2, [r3, #0]
 800ad28:	e008      	b.n	800ad3c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ad2a:	4b0b      	ldr	r3, [pc, #44]	; (800ad58 <prvInsertBlockIntoFreeList+0xac>)
 800ad2c:	681a      	ldr	r2, [r3, #0]
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	601a      	str	r2, [r3, #0]
 800ad32:	e003      	b.n	800ad3c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	681a      	ldr	r2, [r3, #0]
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ad3c:	68fa      	ldr	r2, [r7, #12]
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	429a      	cmp	r2, r3
 800ad42:	d002      	beq.n	800ad4a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	687a      	ldr	r2, [r7, #4]
 800ad48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ad4a:	bf00      	nop
 800ad4c:	3714      	adds	r7, #20
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bc80      	pop	{r7}
 800ad52:	4770      	bx	lr
 800ad54:	20002e64 	.word	0x20002e64
 800ad58:	20002e6c 	.word	0x20002e6c

0800ad5c <Encoder_Thread>:
  .stack_size = 64 * 4,
  .priority = (osPriority_t) osPriorityHigh4,
};

void Encoder_Thread(void* arg)
{
 800ad5c:	b590      	push	{r4, r7, lr}
 800ad5e:	b087      	sub	sp, #28
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
	Encoder_HandlerStruct* Encoder = (Encoder_HandlerStruct*) arg;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	617b      	str	r3, [r7, #20]
	uint32_t startTime;
	int delayTime;
	while(1)
	{
		if(!Encoder->isEnable)
 800ad68:	697b      	ldr	r3, [r7, #20]
 800ad6a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d10a      	bne.n	800ad88 <Encoder_Thread+0x2c>
		{
			HAL_TIM_Encoder_Stop(Encoder->EncoderTIM, TIM_CHANNEL_ALL);
 800ad72:	697b      	ldr	r3, [r7, #20]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	213c      	movs	r1, #60	; 0x3c
 800ad78:	4618      	mov	r0, r3
 800ad7a:	f7fa fe3f 	bl	80059fc <HAL_TIM_Encoder_Stop>
			osThreadSuspend(Encoder->readTh);
 800ad7e:	697b      	ldr	r3, [r7, #20]
 800ad80:	6a1b      	ldr	r3, [r3, #32]
 800ad82:	4618      	mov	r0, r3
 800ad84:	f7fb fd90 	bl	80068a8 <osThreadSuspend>
		}
		startTime = osKernelGetTickCount();
 800ad88:	f7fb fc80 	bl	800668c <osKernelGetTickCount>
 800ad8c:	6138      	str	r0, [r7, #16]
		Encoder_Run(Encoder);
 800ad8e:	6978      	ldr	r0, [r7, #20]
 800ad90:	f000 f86d 	bl	800ae6e <Encoder_Run>
		delayTime = Encoder->interval - (osKernelGetTickCount() - startTime);
 800ad94:	697b      	ldr	r3, [r7, #20]
 800ad96:	685c      	ldr	r4, [r3, #4]
 800ad98:	f7fb fc78 	bl	800668c <osKernelGetTickCount>
 800ad9c:	4602      	mov	r2, r0
 800ad9e:	693b      	ldr	r3, [r7, #16]
 800ada0:	1a9b      	subs	r3, r3, r2
 800ada2:	4423      	add	r3, r4
 800ada4:	60fb      	str	r3, [r7, #12]
		osDelay(delayTime);
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	4618      	mov	r0, r3
 800adaa:	f7fb fde5 	bl	8006978 <osDelay>
		if(!Encoder->isEnable)
 800adae:	e7db      	b.n	800ad68 <Encoder_Thread+0xc>

0800adb0 <Encoder_Init>:
	}
}
void Encoder_Init(Encoder_HandlerStruct* Encoder, TIM_HandleTypeDef* EncTIM, float LPF_Beta, uint32_t interval)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b084      	sub	sp, #16
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	60f8      	str	r0, [r7, #12]
 800adb8:	60b9      	str	r1, [r7, #8]
 800adba:	607a      	str	r2, [r7, #4]
 800adbc:	603b      	str	r3, [r7, #0]
	memset(Encoder,0, sizeof(Encoder_HandlerStruct));
 800adbe:	222c      	movs	r2, #44	; 0x2c
 800adc0:	2100      	movs	r1, #0
 800adc2:	68f8      	ldr	r0, [r7, #12]
 800adc4:	f000 fdb8 	bl	800b938 <memset>
	Encoder->readTh = osThreadNew(Encoder_Thread, Encoder, &EncoderTask_attributes);
 800adc8:	4a0d      	ldr	r2, [pc, #52]	; (800ae00 <Encoder_Init+0x50>)
 800adca:	68f9      	ldr	r1, [r7, #12]
 800adcc:	480d      	ldr	r0, [pc, #52]	; (800ae04 <Encoder_Init+0x54>)
 800adce:	f7fb fc85 	bl	80066dc <osThreadNew>
 800add2:	4602      	mov	r2, r0
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	621a      	str	r2, [r3, #32]
	Encoder->EncLock = osMutexNew(NULL);
 800add8:	2000      	movs	r0, #0
 800adda:	f7fb ff5f 	bl	8006c9c <osMutexNew>
 800adde:	4602      	mov	r2, r0
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	629a      	str	r2, [r3, #40]	; 0x28
	Encoder->LPF_Beta = LPF_Beta;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	687a      	ldr	r2, [r7, #4]
 800ade8:	61da      	str	r2, [r3, #28]
	Encoder->interval = interval;
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	683a      	ldr	r2, [r7, #0]
 800adee:	605a      	str	r2, [r3, #4]
	Encoder->EncoderTIM = EncTIM;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	68ba      	ldr	r2, [r7, #8]
 800adf4:	601a      	str	r2, [r3, #0]
}
 800adf6:	bf00      	nop
 800adf8:	3710      	adds	r7, #16
 800adfa:	46bd      	mov	sp, r7
 800adfc:	bd80      	pop	{r7, pc}
 800adfe:	bf00      	nop
 800ae00:	0800bba0 	.word	0x0800bba0
 800ae04:	0800ad5d 	.word	0x0800ad5d

0800ae08 <Encoder_Start>:



void Encoder_Start(Encoder_HandlerStruct* Encoder, uint8_t State)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b082      	sub	sp, #8
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
 800ae10:	460b      	mov	r3, r1
 800ae12:	70fb      	strb	r3, [r7, #3]
	Encoder->isEnable = State;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	78fa      	ldrb	r2, [r7, #3]
 800ae18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	if(State)
 800ae1c:	78fb      	ldrb	r3, [r7, #3]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d00a      	beq.n	800ae38 <Encoder_Start+0x30>
	{
		HAL_TIM_Encoder_Start(Encoder->EncoderTIM, TIM_CHANNEL_ALL);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	213c      	movs	r1, #60	; 0x3c
 800ae28:	4618      	mov	r0, r3
 800ae2a:	f7fa fd59 	bl	80058e0 <HAL_TIM_Encoder_Start>
		osThreadResume(Encoder->readTh);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6a1b      	ldr	r3, [r3, #32]
 800ae32:	4618      	mov	r0, r3
 800ae34:	f7fb fd6c 	bl	8006910 <osThreadResume>
	}
}
 800ae38:	bf00      	nop
 800ae3a:	3708      	adds	r7, #8
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}

0800ae40 <Encoder_GetCount>:


float Encoder_GetCount(Encoder_HandlerStruct* Encoder)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b084      	sub	sp, #16
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
	osMutexAcquire(Encoder->EncLock, 2);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae4c:	2102      	movs	r1, #2
 800ae4e:	4618      	mov	r0, r3
 800ae50:	f7fb ffbe 	bl	8006dd0 <osMutexAcquire>
	float cnt = Encoder->CurrentCnt;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	689b      	ldr	r3, [r3, #8]
 800ae58:	60fb      	str	r3, [r7, #12]
	osMutexRelease(Encoder->EncLock);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae5e:	4618      	mov	r0, r3
 800ae60:	f7fc f814 	bl	8006e8c <osMutexRelease>

	return cnt;
 800ae64:	68fb      	ldr	r3, [r7, #12]
}
 800ae66:	4618      	mov	r0, r3
 800ae68:	3710      	adds	r7, #16
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bd80      	pop	{r7, pc}

0800ae6e <Encoder_Run>:



void Encoder_Run(Encoder_HandlerStruct* Encoder)
{
 800ae6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae70:	b085      	sub	sp, #20
 800ae72:	af00      	add	r7, sp, #0
 800ae74:	6078      	str	r0, [r7, #4]
	int16_t Cnt = Encoder->EncoderTIM->Instance->CNT;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae7e:	81fb      	strh	r3, [r7, #14]
	osMutexAcquire(Encoder->EncLock, 0);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae84:	2100      	movs	r1, #0
 800ae86:	4618      	mov	r0, r3
 800ae88:	f7fb ffa2 	bl	8006dd0 <osMutexAcquire>
	Encoder->CurrentCnt = Cnt;
 800ae8c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ae90:	4618      	mov	r0, r3
 800ae92:	f7f5 fa17 	bl	80002c4 <__aeabi_i2f>
 800ae96:	4602      	mov	r2, r0
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	609a      	str	r2, [r3, #8]
	Encoder->CurrentSpd -= Encoder->LPF_Beta*(Encoder->CurrentSpd - Cnt);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	68dc      	ldr	r4, [r3, #12]
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	69dd      	ldr	r5, [r3, #28]
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	68de      	ldr	r6, [r3, #12]
 800aea8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800aeac:	4618      	mov	r0, r3
 800aeae:	f7f5 fa09 	bl	80002c4 <__aeabi_i2f>
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	4619      	mov	r1, r3
 800aeb6:	4630      	mov	r0, r6
 800aeb8:	f7f5 f94e 	bl	8000158 <__aeabi_fsub>
 800aebc:	4603      	mov	r3, r0
 800aebe:	4619      	mov	r1, r3
 800aec0:	4628      	mov	r0, r5
 800aec2:	f7f5 fa53 	bl	800036c <__aeabi_fmul>
 800aec6:	4603      	mov	r3, r0
 800aec8:	4619      	mov	r1, r3
 800aeca:	4620      	mov	r0, r4
 800aecc:	f7f5 f944 	bl	8000158 <__aeabi_fsub>
 800aed0:	4603      	mov	r3, r0
 800aed2:	461a      	mov	r2, r3
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	60da      	str	r2, [r3, #12]
	Encoder->EncoderTIM->Instance->CNT = 0;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	2200      	movs	r2, #0
 800aee0:	625a      	str	r2, [r3, #36]	; 0x24
	if(Encoder->EnCntTraveled)
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	7d1b      	ldrb	r3, [r3, #20]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d012      	beq.n	800af10 <Encoder_Run+0xa2>
	{
		Encoder->Travelled += Encoder->CurrentCnt;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	699b      	ldr	r3, [r3, #24]
 800aeee:	4618      	mov	r0, r3
 800aef0:	f7f5 f9e8 	bl	80002c4 <__aeabi_i2f>
 800aef4:	4602      	mov	r2, r0
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	689b      	ldr	r3, [r3, #8]
 800aefa:	4619      	mov	r1, r3
 800aefc:	4610      	mov	r0, r2
 800aefe:	f7f5 f92d 	bl	800015c <__addsf3>
 800af02:	4603      	mov	r3, r0
 800af04:	4618      	mov	r0, r3
 800af06:	f7f5 fbf7 	bl	80006f8 <__aeabi_f2iz>
 800af0a:	4602      	mov	r2, r0
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	619a      	str	r2, [r3, #24]
	}
	osMutexRelease(Encoder->EncLock);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af14:	4618      	mov	r0, r3
 800af16:	f7fb ffb9 	bl	8006e8c <osMutexRelease>
}
 800af1a:	bf00      	nop
 800af1c:	3714      	adds	r7, #20
 800af1e:	46bd      	mov	sp, r7
 800af20:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800af24 <Encoder_GetSpeed_PPS>:


float Encoder_GetSpeed_PPS(Encoder_HandlerStruct* Encoder)
{
 800af24:	b590      	push	{r4, r7, lr}
 800af26:	b083      	sub	sp, #12
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
	return (Encoder_GetCount(Encoder)/Encoder->interval) * 1000; // Pulse Per Sec
 800af2c:	6878      	ldr	r0, [r7, #4]
 800af2e:	f7ff ff87 	bl	800ae40 <Encoder_GetCount>
 800af32:	4604      	mov	r4, r0
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	685b      	ldr	r3, [r3, #4]
 800af38:	4618      	mov	r0, r3
 800af3a:	f7f5 f9bf 	bl	80002bc <__aeabi_ui2f>
 800af3e:	4603      	mov	r3, r0
 800af40:	4619      	mov	r1, r3
 800af42:	4620      	mov	r0, r4
 800af44:	f7f5 fac6 	bl	80004d4 <__aeabi_fdiv>
 800af48:	4603      	mov	r3, r0
 800af4a:	4904      	ldr	r1, [pc, #16]	; (800af5c <Encoder_GetSpeed_PPS+0x38>)
 800af4c:	4618      	mov	r0, r3
 800af4e:	f7f5 fa0d 	bl	800036c <__aeabi_fmul>
 800af52:	4603      	mov	r3, r0
}
 800af54:	4618      	mov	r0, r3
 800af56:	370c      	adds	r7, #12
 800af58:	46bd      	mov	sp, r7
 800af5a:	bd90      	pop	{r4, r7, pc}
 800af5c:	447a0000 	.word	0x447a0000

0800af60 <Engine_ConfigTimer>:

//uint16_t	Engine_SpeedMax = Speed_Max_Default;
//uint8_t		Engine_MoveStatus = 0;

int Engine_ConfigTimer(Engine_HandlerStruct* Engine, TIM_HandleTypeDef* htim, uint32_t TIM_Channel)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b084      	sub	sp, #16
 800af64:	af00      	add	r7, sp, #0
 800af66:	60f8      	str	r0, [r7, #12]
 800af68:	60b9      	str	r1, [r7, #8]
 800af6a:	607a      	str	r2, [r7, #4]
	Engine->PWM_TIM_Channel = TIM_Channel;
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	687a      	ldr	r2, [r7, #4]
 800af70:	605a      	str	r2, [r3, #4]
	Engine->PWM_TIM = htim;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	68ba      	ldr	r2, [r7, #8]
 800af76:	601a      	str	r2, [r3, #0]
	Engine->PWM_TIM->Instance->PSC = 0;
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	2200      	movs	r2, #0
 800af80:	629a      	str	r2, [r3, #40]	; 0x28
	Engine->PWM_TIM->Instance->ARR = HAL_RCC_GetHCLKFreq()/Engine_TIM_MaxPulse - 1;
 800af82:	f7fa f9ef 	bl	8005364 <HAL_RCC_GetHCLKFreq>
 800af86:	4603      	mov	r3, r0
 800af88:	4a0a      	ldr	r2, [pc, #40]	; (800afb4 <Engine_ConfigTimer+0x54>)
 800af8a:	fba2 2303 	umull	r2, r3, r2, r3
 800af8e:	0b5a      	lsrs	r2, r3, #13
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	3a01      	subs	r2, #1
 800af98:	62da      	str	r2, [r3, #44]	; 0x2c

	return HAL_TIM_PWM_Start(Engine->PWM_TIM, Engine->PWM_TIM_Channel);
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	681a      	ldr	r2, [r3, #0]
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	685b      	ldr	r3, [r3, #4]
 800afa2:	4619      	mov	r1, r3
 800afa4:	4610      	mov	r0, r2
 800afa6:	f7fa fb57 	bl	8005658 <HAL_TIM_PWM_Start>
 800afaa:	4603      	mov	r3, r0
}
 800afac:	4618      	mov	r0, r3
 800afae:	3710      	adds	r7, #16
 800afb0:	46bd      	mov	sp, r7
 800afb2:	bd80      	pop	{r7, pc}
 800afb4:	d1b71759 	.word	0xd1b71759

0800afb8 <Engine_ConfigControlPin>:

int Engine_ConfigControlPin(Engine_HandlerStruct* Engine, GPIO_HandlerStruct BrakePin, GPIO_HandlerStruct DirectionPin, GPIO_HandlerStruct GasEnPin)
{
 800afb8:	b082      	sub	sp, #8
 800afba:	b480      	push	{r7}
 800afbc:	b085      	sub	sp, #20
 800afbe:	af00      	add	r7, sp, #0
 800afc0:	60f8      	str	r0, [r7, #12]
 800afc2:	1d38      	adds	r0, r7, #4
 800afc4:	e880 0006 	stmia.w	r0, {r1, r2}
 800afc8:	61fb      	str	r3, [r7, #28]
	Engine->BrakePin = BrakePin;
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	3310      	adds	r3, #16
 800afce:	1d3a      	adds	r2, r7, #4
 800afd0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800afd4:	e883 0003 	stmia.w	r3, {r0, r1}
	Engine->DirectionPin = DirectionPin;
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	3308      	adds	r3, #8
 800afdc:	f107 021c 	add.w	r2, r7, #28
 800afe0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800afe4:	e883 0003 	stmia.w	r3, {r0, r1}
	Engine->GasEnablePin = GasEnPin;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	3318      	adds	r3, #24
 800afec:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800aff0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800aff4:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
 800aff8:	2300      	movs	r3, #0
}
 800affa:	4618      	mov	r0, r3
 800affc:	3714      	adds	r7, #20
 800affe:	46bd      	mov	sp, r7
 800b000:	bc80      	pop	{r7}
 800b002:	b002      	add	sp, #8
 800b004:	4770      	bx	lr

0800b006 <Engine_Init>:

int Engine_Init(Engine_HandlerStruct* Engine, int16_t NegLimit, int16_t PosLimit)
{
 800b006:	b580      	push	{r7, lr}
 800b008:	b082      	sub	sp, #8
 800b00a:	af00      	add	r7, sp, #0
 800b00c:	6078      	str	r0, [r7, #4]
 800b00e:	460b      	mov	r3, r1
 800b010:	807b      	strh	r3, [r7, #2]
 800b012:	4613      	mov	r3, r2
 800b014:	803b      	strh	r3, [r7, #0]
	memset(Engine,0,sizeof(Engine_HandlerStruct));
 800b016:	2228      	movs	r2, #40	; 0x28
 800b018:	2100      	movs	r1, #0
 800b01a:	6878      	ldr	r0, [r7, #4]
 800b01c:	f000 fc8c 	bl	800b938 <memset>
	Engine->NegLimit = NegLimit;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	887a      	ldrh	r2, [r7, #2]
 800b024:	841a      	strh	r2, [r3, #32]
	Engine->PosLimit = PosLimit;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	883a      	ldrh	r2, [r7, #0]
 800b02a:	845a      	strh	r2, [r3, #34]	; 0x22

	return 0;
 800b02c:	2300      	movs	r3, #0
}
 800b02e:	4618      	mov	r0, r3
 800b030:	3708      	adds	r7, #8
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}

0800b036 <Engine_SetSpeed>:

int Engine_SetSpeed(Engine_HandlerStruct* Engine, int16_t PulseVal)
{
 800b036:	b580      	push	{r7, lr}
 800b038:	b082      	sub	sp, #8
 800b03a:	af00      	add	r7, sp, #0
 800b03c:	6078      	str	r0, [r7, #4]
 800b03e:	460b      	mov	r3, r1
 800b040:	807b      	strh	r3, [r7, #2]
	if(PulseVal > Engine->PosLimit)
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800b048:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800b04c:	429a      	cmp	r2, r3
 800b04e:	dd03      	ble.n	800b058 <Engine_SetSpeed+0x22>
	{
		PulseVal = Engine->PosLimit;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800b054:	807b      	strh	r3, [r7, #2]
 800b056:	e009      	b.n	800b06c <Engine_SetSpeed+0x36>
	}else if(PulseVal < Engine->NegLimit)
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800b05e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800b062:	429a      	cmp	r2, r3
 800b064:	da02      	bge.n	800b06c <Engine_SetSpeed+0x36>
	{
		PulseVal = Engine->NegLimit;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	8c1b      	ldrh	r3, [r3, #32]
 800b06a:	807b      	strh	r3, [r7, #2]
	}
	if (PulseVal == 0)
 800b06c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d104      	bne.n	800b07e <Engine_SetSpeed+0x48>
	{
		Engine_Brake(Engine, ENGINE_BRAKE_SET);
 800b074:	2100      	movs	r1, #0
 800b076:	6878      	ldr	r0, [r7, #4]
 800b078:	f000 f89a 	bl	800b1b0 <Engine_Brake>
 800b07c:	e093      	b.n	800b1a6 <Engine_SetSpeed+0x170>

	}

	else if (PulseVal > 0)
 800b07e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b082:	2b00      	cmp	r3, #0
 800b084:	dd42      	ble.n	800b10c <Engine_SetSpeed+0xd6>
	{
		if((Engine->ForbidStatus & Engine_Forbid_Forward) == 0)
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b08c:	f003 0301 	and.w	r3, r3, #1
 800b090:	2b00      	cmp	r3, #0
 800b092:	d136      	bne.n	800b102 <Engine_SetSpeed+0xcc>
		{
			GPIO_WritePin(Engine->DirectionPin, Engine_Forward_GPIOLevel);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2200      	movs	r2, #0
 800b098:	3308      	adds	r3, #8
 800b09a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b09e:	f000 fb56 	bl	800b74e <GPIO_WritePin>
			Engine_Brake(Engine, ENGINE_BRAKE_CLEAR);
 800b0a2:	2101      	movs	r1, #1
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f000 f883 	bl	800b1b0 <Engine_Brake>
			__HAL_TIM_SetCompare(Engine->PWM_TIM, Engine->PWM_TIM_Channel, PulseVal);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	685b      	ldr	r3, [r3, #4]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d106      	bne.n	800b0c0 <Engine_SetSpeed+0x8a>
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800b0bc:	635a      	str	r2, [r3, #52]	; 0x34
 800b0be:	e01b      	b.n	800b0f8 <Engine_SetSpeed+0xc2>
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	685b      	ldr	r3, [r3, #4]
 800b0c4:	2b04      	cmp	r3, #4
 800b0c6:	d106      	bne.n	800b0d6 <Engine_SetSpeed+0xa0>
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	681a      	ldr	r2, [r3, #0]
 800b0ce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b0d2:	6393      	str	r3, [r2, #56]	; 0x38
 800b0d4:	e010      	b.n	800b0f8 <Engine_SetSpeed+0xc2>
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	685b      	ldr	r3, [r3, #4]
 800b0da:	2b08      	cmp	r3, #8
 800b0dc:	d106      	bne.n	800b0ec <Engine_SetSpeed+0xb6>
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	681a      	ldr	r2, [r3, #0]
 800b0e4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b0e8:	63d3      	str	r3, [r2, #60]	; 0x3c
 800b0ea:	e005      	b.n	800b0f8 <Engine_SetSpeed+0xc2>
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	681a      	ldr	r2, [r3, #0]
 800b0f2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b0f6:	6413      	str	r3, [r2, #64]	; 0x40
			Engine->MoveState = Engine_MoveState_Forward;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2201      	movs	r2, #1
 800b0fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 800b100:	e051      	b.n	800b1a6 <Engine_SetSpeed+0x170>
		}
		else
		{
			Engine_Brake(Engine, ENGINE_BRAKE_SET);
 800b102:	2100      	movs	r1, #0
 800b104:	6878      	ldr	r0, [r7, #4]
 800b106:	f000 f853 	bl	800b1b0 <Engine_Brake>
 800b10a:	e04c      	b.n	800b1a6 <Engine_SetSpeed+0x170>
		}

	}
	else if(PulseVal < 0)
 800b10c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b110:	2b00      	cmp	r3, #0
 800b112:	da48      	bge.n	800b1a6 <Engine_SetSpeed+0x170>
	{
		if((Engine->ForbidStatus & Engine_Forbid_Backward) == 0)
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b11a:	f003 0302 	and.w	r3, r3, #2
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d13d      	bne.n	800b19e <Engine_SetSpeed+0x168>
		{
			GPIO_WritePin(Engine->DirectionPin, !Engine_Forward_GPIOLevel);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	2201      	movs	r2, #1
 800b126:	3308      	adds	r3, #8
 800b128:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b12c:	f000 fb0f 	bl	800b74e <GPIO_WritePin>
			Engine_Brake(Engine, ENGINE_BRAKE_CLEAR);
 800b130:	2101      	movs	r1, #1
 800b132:	6878      	ldr	r0, [r7, #4]
 800b134:	f000 f83c 	bl	800b1b0 <Engine_Brake>
			__HAL_TIM_SetCompare(Engine->PWM_TIM, Engine->PWM_TIM_Channel, -PulseVal);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	685b      	ldr	r3, [r3, #4]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d107      	bne.n	800b150 <Engine_SetSpeed+0x11a>
 800b140:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b144:	425a      	negs	r2, r3
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	635a      	str	r2, [r3, #52]	; 0x34
 800b14e:	e021      	b.n	800b194 <Engine_SetSpeed+0x15e>
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	685b      	ldr	r3, [r3, #4]
 800b154:	2b04      	cmp	r3, #4
 800b156:	d108      	bne.n	800b16a <Engine_SetSpeed+0x134>
 800b158:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b15c:	4259      	negs	r1, r3
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	681a      	ldr	r2, [r3, #0]
 800b164:	460b      	mov	r3, r1
 800b166:	6393      	str	r3, [r2, #56]	; 0x38
 800b168:	e014      	b.n	800b194 <Engine_SetSpeed+0x15e>
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	685b      	ldr	r3, [r3, #4]
 800b16e:	2b08      	cmp	r3, #8
 800b170:	d108      	bne.n	800b184 <Engine_SetSpeed+0x14e>
 800b172:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b176:	4259      	negs	r1, r3
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	681a      	ldr	r2, [r3, #0]
 800b17e:	460b      	mov	r3, r1
 800b180:	63d3      	str	r3, [r2, #60]	; 0x3c
 800b182:	e007      	b.n	800b194 <Engine_SetSpeed+0x15e>
 800b184:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b188:	4259      	negs	r1, r3
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	681a      	ldr	r2, [r3, #0]
 800b190:	460b      	mov	r3, r1
 800b192:	6413      	str	r3, [r2, #64]	; 0x40
			Engine->MoveState = Engine_MoveState_Backward;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2203      	movs	r2, #3
 800b198:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 800b19c:	e003      	b.n	800b1a6 <Engine_SetSpeed+0x170>
		}
		else
		{
			Engine_Brake(Engine, ENGINE_BRAKE_SET);
 800b19e:	2100      	movs	r1, #0
 800b1a0:	6878      	ldr	r0, [r7, #4]
 800b1a2:	f000 f805 	bl	800b1b0 <Engine_Brake>
		}

	}
	return 0;
 800b1a6:	2300      	movs	r3, #0
}
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	3708      	adds	r7, #8
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	bd80      	pop	{r7, pc}

0800b1b0 <Engine_Brake>:

int Engine_Brake(Engine_HandlerStruct* Engine, Engine_Brake_State State)
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b082      	sub	sp, #8
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
 800b1b8:	460b      	mov	r3, r1
 800b1ba:	70fb      	strb	r3, [r7, #3]
	if (State == ENGINE_BRAKE_SET)
 800b1bc:	78fb      	ldrb	r3, [r7, #3]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d135      	bne.n	800b22e <Engine_Brake+0x7e>
	{
		__HAL_TIM_SetCompare(Engine->PWM_TIM, Engine->PWM_TIM_Channel, 0);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	685b      	ldr	r3, [r3, #4]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d105      	bne.n	800b1d6 <Engine_Brake+0x26>
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	635a      	str	r2, [r3, #52]	; 0x34
 800b1d4:	e018      	b.n	800b208 <Engine_Brake+0x58>
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	685b      	ldr	r3, [r3, #4]
 800b1da:	2b04      	cmp	r3, #4
 800b1dc:	d105      	bne.n	800b1ea <Engine_Brake+0x3a>
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	681a      	ldr	r2, [r3, #0]
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	6393      	str	r3, [r2, #56]	; 0x38
 800b1e8:	e00e      	b.n	800b208 <Engine_Brake+0x58>
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	685b      	ldr	r3, [r3, #4]
 800b1ee:	2b08      	cmp	r3, #8
 800b1f0:	d105      	bne.n	800b1fe <Engine_Brake+0x4e>
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	681a      	ldr	r2, [r3, #0]
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	63d3      	str	r3, [r2, #60]	; 0x3c
 800b1fc:	e004      	b.n	800b208 <Engine_Brake+0x58>
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	681a      	ldr	r2, [r3, #0]
 800b204:	2300      	movs	r3, #0
 800b206:	6413      	str	r3, [r2, #64]	; 0x40
		GPIO_WritePin(Engine->BrakePin, Engine_Brake_GPIOLevel);
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2200      	movs	r2, #0
 800b20c:	3310      	adds	r3, #16
 800b20e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b212:	f000 fa9c 	bl	800b74e <GPIO_WritePin>
		GPIO_WritePin(Engine->GasEnablePin, !Engine_GasEn_GPIOLevel);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	2200      	movs	r2, #0
 800b21a:	3318      	adds	r3, #24
 800b21c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b220:	f000 fa95 	bl	800b74e <GPIO_WritePin>
		Engine->MoveState = Engine_MoveState_Stop;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2200      	movs	r2, #0
 800b228:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 800b22c:	e00d      	b.n	800b24a <Engine_Brake+0x9a>
	}
	else
	{
		GPIO_WritePin(Engine->BrakePin, !Engine_Brake_GPIOLevel);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	2201      	movs	r2, #1
 800b232:	3310      	adds	r3, #16
 800b234:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b238:	f000 fa89 	bl	800b74e <GPIO_WritePin>
		GPIO_WritePin(Engine->GasEnablePin, Engine_GasEn_GPIOLevel);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	2201      	movs	r2, #1
 800b240:	3318      	adds	r3, #24
 800b242:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b246:	f000 fa82 	bl	800b74e <GPIO_WritePin>
	}

	return 0;
 800b24a:	2300      	movs	r3, #0
}
 800b24c:	4618      	mov	r0, r3
 800b24e:	3708      	adds	r7, #8
 800b250:	46bd      	mov	sp, r7
 800b252:	bd80      	pop	{r7, pc}

0800b254 <Engine_inRange>:
//	printf("ForbidRun \r\n");
	return 0;
}

int Engine_inRange(Engine_HandlerStruct* Engine, int Val)
{
 800b254:	b480      	push	{r7}
 800b256:	b083      	sub	sp, #12
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
 800b25c:	6039      	str	r1, [r7, #0]
	return (Val > Engine->NegLimit) && (Val < Engine->PosLimit);
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800b264:	461a      	mov	r2, r3
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	4293      	cmp	r3, r2
 800b26a:	dd08      	ble.n	800b27e <Engine_inRange+0x2a>
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800b272:	461a      	mov	r2, r3
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	4293      	cmp	r3, r2
 800b278:	da01      	bge.n	800b27e <Engine_inRange+0x2a>
 800b27a:	2301      	movs	r3, #1
 800b27c:	e000      	b.n	800b280 <Engine_inRange+0x2c>
 800b27e:	2300      	movs	r3, #0
}
 800b280:	4618      	mov	r0, r3
 800b282:	370c      	adds	r7, #12
 800b284:	46bd      	mov	sp, r7
 800b286:	bc80      	pop	{r7}
 800b288:	4770      	bx	lr

0800b28a <Write16>:
	return ((Value[0] << 8) | Value[1]);
}


void Write16(INA219_t *ina219, uint8_t Register, uint16_t Value)
{
 800b28a:	b580      	push	{r7, lr}
 800b28c:	b088      	sub	sp, #32
 800b28e:	af04      	add	r7, sp, #16
 800b290:	6078      	str	r0, [r7, #4]
 800b292:	460b      	mov	r3, r1
 800b294:	70fb      	strb	r3, [r7, #3]
 800b296:	4613      	mov	r3, r2
 800b298:	803b      	strh	r3, [r7, #0]
	uint8_t addr[2];
	addr[0] = (Value >> 8) & 0xff;  // upper byte
 800b29a:	883b      	ldrh	r3, [r7, #0]
 800b29c:	0a1b      	lsrs	r3, r3, #8
 800b29e:	b29b      	uxth	r3, r3
 800b2a0:	b2db      	uxtb	r3, r3
 800b2a2:	733b      	strb	r3, [r7, #12]
	addr[1] = (Value >> 0) & 0xff; // lower byte
 800b2a4:	883b      	ldrh	r3, [r7, #0]
 800b2a6:	b2db      	uxtb	r3, r3
 800b2a8:	737b      	strb	r3, [r7, #13]
	INA219_Mem_Write(ina219->ina219_i2c, (ina219->Address<<1), Register, 1, (uint8_t*)addr, 2, 100);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	6818      	ldr	r0, [r3, #0]
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	791b      	ldrb	r3, [r3, #4]
 800b2b2:	b29b      	uxth	r3, r3
 800b2b4:	005b      	lsls	r3, r3, #1
 800b2b6:	b299      	uxth	r1, r3
 800b2b8:	78fb      	ldrb	r3, [r7, #3]
 800b2ba:	b29a      	uxth	r2, r3
 800b2bc:	2364      	movs	r3, #100	; 0x64
 800b2be:	9302      	str	r3, [sp, #8]
 800b2c0:	2302      	movs	r3, #2
 800b2c2:	9301      	str	r3, [sp, #4]
 800b2c4:	f107 030c 	add.w	r3, r7, #12
 800b2c8:	9300      	str	r3, [sp, #0]
 800b2ca:	2301      	movs	r3, #1
 800b2cc:	f000 fa6d 	bl	800b7aa <I2C_OS_MEM_Write_IT>
}
 800b2d0:	bf00      	nop
 800b2d2:	3710      	adds	r7, #16
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	bd80      	pop	{r7, pc}

0800b2d8 <INA219_Reset>:
	int16_t result = Read16(ina219, INA219_REG_POWER);

	return (result * ina219->powerMultiplier_mW );
}
void INA219_Reset(INA219_t *ina219)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b082      	sub	sp, #8
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
	Write16(ina219, INA219_REG_CONFIG, INA219_CONFIG_RESET);
 800b2e0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b2e4:	2100      	movs	r1, #0
 800b2e6:	6878      	ldr	r0, [r7, #4]
 800b2e8:	f7ff ffcf 	bl	800b28a <Write16>
	osDelay(1);
 800b2ec:	2001      	movs	r0, #1
 800b2ee:	f7fb fb43 	bl	8006978 <osDelay>
}
 800b2f2:	bf00      	nop
 800b2f4:	3708      	adds	r7, #8
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	bd80      	pop	{r7, pc}

0800b2fa <INA219_setCalibration>:

void INA219_setCalibration(INA219_t *ina219, uint16_t CalibrationData)
{
 800b2fa:	b580      	push	{r7, lr}
 800b2fc:	b082      	sub	sp, #8
 800b2fe:	af00      	add	r7, sp, #0
 800b300:	6078      	str	r0, [r7, #4]
 800b302:	460b      	mov	r3, r1
 800b304:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CALIBRATION, CalibrationData);
 800b306:	887b      	ldrh	r3, [r7, #2]
 800b308:	461a      	mov	r2, r3
 800b30a:	2105      	movs	r1, #5
 800b30c:	6878      	ldr	r0, [r7, #4]
 800b30e:	f7ff ffbc 	bl	800b28a <Write16>
}
 800b312:	bf00      	nop
 800b314:	3708      	adds	r7, #8
 800b316:	46bd      	mov	sp, r7
 800b318:	bd80      	pop	{r7, pc}

0800b31a <INA219_setConfig>:
	uint16_t result = Read16(ina219, INA219_REG_CONFIG);
	return result;
}

void INA219_setConfig(INA219_t *ina219, uint16_t Config)
{
 800b31a:	b580      	push	{r7, lr}
 800b31c:	b082      	sub	sp, #8
 800b31e:	af00      	add	r7, sp, #0
 800b320:	6078      	str	r0, [r7, #4]
 800b322:	460b      	mov	r3, r1
 800b324:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CONFIG, Config);
 800b326:	887b      	ldrh	r3, [r7, #2]
 800b328:	461a      	mov	r2, r3
 800b32a:	2100      	movs	r1, #0
 800b32c:	6878      	ldr	r0, [r7, #4]
 800b32e:	f7ff ffac 	bl	800b28a <Write16>
}
 800b332:	bf00      	nop
 800b334:	3708      	adds	r7, #8
 800b336:	46bd      	mov	sp, r7
 800b338:	bd80      	pop	{r7, pc}
	...

0800b33c <INA219_setCalibration_32V_2A>:
/**
 *	Calib for 0.1 Ohm Shunt Resistor
 */
void INA219_setCalibration_32V_2A(INA219_t *ina219)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b084      	sub	sp, #16
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
	uint16_t config = INA219_CONFIG_BVOLTAGERANGE_32V |
 800b344:	f643 139f 	movw	r3, #14751	; 0x399f
 800b348:	81fb      	strh	r3, [r7, #14]
	             INA219_CONFIG_GAIN_8_320MV | INA219_CONFIG_BADCRES_12BIT |
	             INA219_CONFIG_SADCRES_12BIT_1S_532US |
	             INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;

	ina219->calibrationValue = 4096;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b350:	80da      	strh	r2, [r3, #6]
//	ina219->calibrationValue = 6710<<1;

	ina219->currentDivider_mA = 10; // Current LSB = 100uA per bit (1000/100 = 10)
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	4a0a      	ldr	r2, [pc, #40]	; (800b380 <INA219_setCalibration_32V_2A+0x44>)
 800b356:	609a      	str	r2, [r3, #8]
	ina219->powerMultiplier_mW = 2; // Power LSB = 1mW per bit (2/1)
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b35e:	60da      	str	r2, [r3, #12]


	INA219_setCalibration(ina219, ina219->calibrationValue);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	88db      	ldrh	r3, [r3, #6]
 800b364:	4619      	mov	r1, r3
 800b366:	6878      	ldr	r0, [r7, #4]
 800b368:	f7ff ffc7 	bl	800b2fa <INA219_setCalibration>
	INA219_setConfig(ina219, config);
 800b36c:	89fb      	ldrh	r3, [r7, #14]
 800b36e:	4619      	mov	r1, r3
 800b370:	6878      	ldr	r0, [r7, #4]
 800b372:	f7ff ffd2 	bl	800b31a <INA219_setConfig>
}
 800b376:	bf00      	nop
 800b378:	3710      	adds	r7, #16
 800b37a:	46bd      	mov	sp, r7
 800b37c:	bd80      	pop	{r7, pc}
 800b37e:	bf00      	nop
 800b380:	41200000 	.word	0x41200000

0800b384 <INA219_Init>:
			break;
	}
}

uint8_t INA219_Init(INA219_t *ina219, INA219_I2C_Handle *i2c, uint8_t Address)
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b086      	sub	sp, #24
 800b388:	af00      	add	r7, sp, #0
 800b38a:	60f8      	str	r0, [r7, #12]
 800b38c:	60b9      	str	r1, [r7, #8]
 800b38e:	4613      	mov	r3, r2
 800b390:	71fb      	strb	r3, [r7, #7]
	ina219->ina219_i2c = i2c;
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	68ba      	ldr	r2, [r7, #8]
 800b396:	601a      	str	r2, [r3, #0]
	ina219->Address = Address;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	79fa      	ldrb	r2, [r7, #7]
 800b39c:	711a      	strb	r2, [r3, #4]

	ina219->currentDivider_mA = 0;
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	f04f 0200 	mov.w	r2, #0
 800b3a4:	609a      	str	r2, [r3, #8]
	ina219->powerMultiplier_mW = 0;
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	f04f 0200 	mov.w	r2, #0
 800b3ac:	60da      	str	r2, [r3, #12]

	uint8_t ina219_isReady = INA219_DeviceReady(i2c, (Address << 1), 3, 2);
 800b3ae:	79fb      	ldrb	r3, [r7, #7]
 800b3b0:	b29b      	uxth	r3, r3
 800b3b2:	005b      	lsls	r3, r3, #1
 800b3b4:	b299      	uxth	r1, r3
 800b3b6:	2302      	movs	r3, #2
 800b3b8:	2203      	movs	r2, #3
 800b3ba:	68b8      	ldr	r0, [r7, #8]
 800b3bc:	f000 fa46 	bl	800b84c <I2C_OS_IsDeviceReady>
 800b3c0:	4603      	mov	r3, r0
 800b3c2:	75fb      	strb	r3, [r7, #23]

	if(ina219_isReady == HAL_OK)
 800b3c4:	7dfb      	ldrb	r3, [r7, #23]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d107      	bne.n	800b3da <INA219_Init+0x56>
	{

		INA219_Reset(ina219);
 800b3ca:	68f8      	ldr	r0, [r7, #12]
 800b3cc:	f7ff ff84 	bl	800b2d8 <INA219_Reset>
		INA219_setCalibration_32V_2A(ina219);
 800b3d0:	68f8      	ldr	r0, [r7, #12]
 800b3d2:	f7ff ffb3 	bl	800b33c <INA219_setCalibration_32V_2A>

		return HAL_OK;
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	e000      	b.n	800b3dc <INA219_Init+0x58>
	}

	else
	{
		return HAL_ERROR;
 800b3da:	2301      	movs	r3, #1
	}
}
 800b3dc:	4618      	mov	r0, r3
 800b3de:	3718      	adds	r7, #24
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	bd80      	pop	{r7, pc}

0800b3e4 <SpeedController_RunTh>:
#include "SpeedController.h"

const osThreadAttr_t SpeedControlTask_attributes = { .name = "SpdCtrl",
		.stack_size = 128 * 4, .priority = (osPriority_t) osPriorityHigh3, };

void SpeedController_RunTh(void *arg) {
 800b3e4:	b590      	push	{r4, r7, lr}
 800b3e6:	b087      	sub	sp, #28
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
	SpeedControler_HandlerStruct *Controller =
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	617b      	str	r3, [r7, #20]
			(SpeedControler_HandlerStruct*) arg;
	uint32_t startTime;
	int delayTime;
	while (1) {
		if (!Controller->isEnable) {
 800b3f0:	697b      	ldr	r3, [r7, #20]
 800b3f2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d104      	bne.n	800b404 <SpeedController_RunTh+0x20>
			osThreadSuspend(Controller->RunTh);
 800b3fa:	697b      	ldr	r3, [r7, #20]
 800b3fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3fe:	4618      	mov	r0, r3
 800b400:	f7fb fa52 	bl	80068a8 <osThreadSuspend>
		}
		startTime = osKernelGetTickCount();
 800b404:	f7fb f942 	bl	800668c <osKernelGetTickCount>
 800b408:	6138      	str	r0, [r7, #16]
		SpeedController_Run(Controller);
 800b40a:	6978      	ldr	r0, [r7, #20]
 800b40c:	f000 f887 	bl	800b51e <SpeedController_Run>
		delayTime = Controller->dt - (osKernelGetTickCount() - startTime);
 800b410:	697b      	ldr	r3, [r7, #20]
 800b412:	695c      	ldr	r4, [r3, #20]
 800b414:	f7fb f93a 	bl	800668c <osKernelGetTickCount>
 800b418:	4602      	mov	r2, r0
 800b41a:	693b      	ldr	r3, [r7, #16]
 800b41c:	1a9b      	subs	r3, r3, r2
 800b41e:	4423      	add	r3, r4
 800b420:	60fb      	str	r3, [r7, #12]
		osDelay((delayTime > 0) ? delayTime : 0);
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b428:	4618      	mov	r0, r3
 800b42a:	f7fb faa5 	bl	8006978 <osDelay>
		if (!Controller->isEnable) {
 800b42e:	e7df      	b.n	800b3f0 <SpeedController_RunTh+0xc>

0800b430 <SpeedController_Init>:
	}
}

void SpeedController_Init(SpeedControler_HandlerStruct *Controller,
		Encoder_HandlerStruct *Encoder, Engine_HandlerStruct *Engine,
		uint32_t interval) {
 800b430:	b580      	push	{r7, lr}
 800b432:	b084      	sub	sp, #16
 800b434:	af00      	add	r7, sp, #0
 800b436:	60f8      	str	r0, [r7, #12]
 800b438:	60b9      	str	r1, [r7, #8]
 800b43a:	607a      	str	r2, [r7, #4]
 800b43c:	603b      	str	r3, [r7, #0]
	memset(Controller, 0, sizeof(SpeedControler_HandlerStruct));
 800b43e:	2230      	movs	r2, #48	; 0x30
 800b440:	2100      	movs	r1, #0
 800b442:	68f8      	ldr	r0, [r7, #12]
 800b444:	f000 fa78 	bl	800b938 <memset>
	Controller->Engine = Engine;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	687a      	ldr	r2, [r7, #4]
 800b44c:	605a      	str	r2, [r3, #4]
	Controller->Encoder = Encoder;
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	68ba      	ldr	r2, [r7, #8]
 800b452:	601a      	str	r2, [r3, #0]

	Controller->RunTh = osThreadNew(SpeedController_RunTh, Controller,
 800b454:	4a08      	ldr	r2, [pc, #32]	; (800b478 <SpeedController_Init+0x48>)
 800b456:	68f9      	ldr	r1, [r7, #12]
 800b458:	4808      	ldr	r0, [pc, #32]	; (800b47c <SpeedController_Init+0x4c>)
 800b45a:	f7fb f93f 	bl	80066dc <osThreadNew>
 800b45e:	4602      	mov	r2, r0
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	629a      	str	r2, [r3, #40]	; 0x28
			&SpeedControlTask_attributes);
	Controller->dt = interval;
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	683a      	ldr	r2, [r7, #0]
 800b468:	615a      	str	r2, [r3, #20]
	Controller->PulsePerMeter = 2927;
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	4a04      	ldr	r2, [pc, #16]	; (800b480 <SpeedController_Init+0x50>)
 800b46e:	625a      	str	r2, [r3, #36]	; 0x24

}
 800b470:	bf00      	nop
 800b472:	3710      	adds	r7, #16
 800b474:	46bd      	mov	sp, r7
 800b476:	bd80      	pop	{r7, pc}
 800b478:	0800bbc4 	.word	0x0800bbc4
 800b47c:	0800b3e5 	.word	0x0800b3e5
 800b480:	4536f000 	.word	0x4536f000

0800b484 <SpeedController_Start>:

void SpeedController_Start(SpeedControler_HandlerStruct *Controller,
		uint8_t State) {
 800b484:	b580      	push	{r7, lr}
 800b486:	b082      	sub	sp, #8
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
 800b48c:	460b      	mov	r3, r1
 800b48e:	70fb      	strb	r3, [r7, #3]
	if (State != Controller->isEnable) {
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b496:	78fa      	ldrb	r2, [r7, #3]
 800b498:	429a      	cmp	r2, r3
 800b49a:	d006      	beq.n	800b4aa <SpeedController_Start+0x26>
		SpeedController_ClearErr(Controller);
 800b49c:	6878      	ldr	r0, [r7, #4]
 800b49e:	f000 f900 	bl	800b6a2 <SpeedController_ClearErr>
		Controller->isEnable = State;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	78fa      	ldrb	r2, [r7, #3]
 800b4a6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	}
	if (Controller->isEnable) {
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d004      	beq.n	800b4be <SpeedController_Start+0x3a>
		osThreadResume(Controller->RunTh);
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	f7fb fa29 	bl	8006910 <osThreadResume>
	}
}
 800b4be:	bf00      	nop
 800b4c0:	3708      	adds	r7, #8
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bd80      	pop	{r7, pc}

0800b4c6 <setSpeedAndClearBrake>:
void setSpeedAndClearBrake(SpeedControler_HandlerStruct *SpeedController,Engine_HandlerStruct *Engine , float Speed){
 800b4c6:	b580      	push	{r7, lr}
 800b4c8:	b084      	sub	sp, #16
 800b4ca:	af00      	add	r7, sp, #0
 800b4cc:	60f8      	str	r0, [r7, #12]
 800b4ce:	60b9      	str	r1, [r7, #8]
 800b4d0:	607a      	str	r2, [r7, #4]
	SpeedController_SetSpeed(SpeedController, Speed);
 800b4d2:	6879      	ldr	r1, [r7, #4]
 800b4d4:	68f8      	ldr	r0, [r7, #12]
 800b4d6:	f000 f8f5 	bl	800b6c4 <SpeedController_SetSpeed>
	SpeedController_Start(SpeedController, 0);
 800b4da:	2100      	movs	r1, #0
 800b4dc:	68f8      	ldr	r0, [r7, #12]
 800b4de:	f7ff ffd1 	bl	800b484 <SpeedController_Start>
	Engine_Brake(Engine, ENGINE_BRAKE_CLEAR);
 800b4e2:	2101      	movs	r1, #1
 800b4e4:	68b8      	ldr	r0, [r7, #8]
 800b4e6:	f7ff fe63 	bl	800b1b0 <Engine_Brake>
}
 800b4ea:	bf00      	nop
 800b4ec:	3710      	adds	r7, #16
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	bd80      	pop	{r7, pc}

0800b4f2 <stopEngineAndBrake>:
void  stopEngineAndBrake(SpeedControler_HandlerStruct *SpeedController,Engine_HandlerStruct *Engine){
 800b4f2:	b580      	push	{r7, lr}
 800b4f4:	b082      	sub	sp, #8
 800b4f6:	af00      	add	r7, sp, #0
 800b4f8:	6078      	str	r0, [r7, #4]
 800b4fa:	6039      	str	r1, [r7, #0]
	SpeedController_SetSpeed(SpeedController, 0);
 800b4fc:	f04f 0100 	mov.w	r1, #0
 800b500:	6878      	ldr	r0, [r7, #4]
 800b502:	f000 f8df 	bl	800b6c4 <SpeedController_SetSpeed>
	SpeedController_Start(SpeedController, 0);
 800b506:	2100      	movs	r1, #0
 800b508:	6878      	ldr	r0, [r7, #4]
 800b50a:	f7ff ffbb 	bl	800b484 <SpeedController_Start>
	Engine_Brake(Engine, ENGINE_BRAKE_SET);
 800b50e:	2100      	movs	r1, #0
 800b510:	6838      	ldr	r0, [r7, #0]
 800b512:	f7ff fe4d 	bl	800b1b0 <Engine_Brake>
}
 800b516:	bf00      	nop
 800b518:	3708      	adds	r7, #8
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bd80      	pop	{r7, pc}

0800b51e <SpeedController_Run>:
__weak void SpeedController_Run(SpeedControler_HandlerStruct *Controller) {
 800b51e:	b5b0      	push	{r4, r5, r7, lr}
 800b520:	b084      	sub	sp, #16
 800b522:	af00      	add	r7, sp, #0
 800b524:	6078      	str	r0, [r7, #4]
//	if (Controller->SetPoint == 0) {
//		Engine_SetSpeed(Controller->Engine, 0);
//	}
	float Cur_Error = (Controller->SetPoint
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	699c      	ldr	r4, [r3, #24]
			- SpeedController_GetSpeed(Controller)) * Controller->dt;
 800b52a:	6878      	ldr	r0, [r7, #4]
 800b52c:	f000 f8e3 	bl	800b6f6 <SpeedController_GetSpeed>
 800b530:	4603      	mov	r3, r0
 800b532:	4619      	mov	r1, r3
 800b534:	4620      	mov	r0, r4
 800b536:	f7f4 fe0f 	bl	8000158 <__aeabi_fsub>
 800b53a:	4603      	mov	r3, r0
 800b53c:	461c      	mov	r4, r3
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	695b      	ldr	r3, [r3, #20]
 800b542:	4618      	mov	r0, r3
 800b544:	f7f4 feba 	bl	80002bc <__aeabi_ui2f>
 800b548:	4603      	mov	r3, r0
	float Cur_Error = (Controller->SetPoint
 800b54a:	4619      	mov	r1, r3
 800b54c:	4620      	mov	r0, r4
 800b54e:	f7f4 ff0d 	bl	800036c <__aeabi_fmul>
 800b552:	4603      	mov	r3, r0
 800b554:	60bb      	str	r3, [r7, #8]
	Controller->Integration_Error += Cur_Error;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	6a1b      	ldr	r3, [r3, #32]
 800b55a:	68b9      	ldr	r1, [r7, #8]
 800b55c:	4618      	mov	r0, r3
 800b55e:	f7f4 fdfd 	bl	800015c <__addsf3>
 800b562:	4603      	mov	r3, r0
 800b564:	461a      	mov	r2, r3
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	621a      	str	r2, [r3, #32]
	float duty = Controller->Kp * Cur_Error
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	689b      	ldr	r3, [r3, #8]
 800b56e:	68b9      	ldr	r1, [r7, #8]
 800b570:	4618      	mov	r0, r3
 800b572:	f7f4 fefb 	bl	800036c <__aeabi_fmul>
 800b576:	4603      	mov	r3, r0
 800b578:	461c      	mov	r4, r3
			+ Controller->Ki * Controller->Integration_Error
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	68da      	ldr	r2, [r3, #12]
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	6a1b      	ldr	r3, [r3, #32]
 800b582:	4619      	mov	r1, r3
 800b584:	4610      	mov	r0, r2
 800b586:	f7f4 fef1 	bl	800036c <__aeabi_fmul>
 800b58a:	4603      	mov	r3, r0
 800b58c:	4619      	mov	r1, r3
 800b58e:	4620      	mov	r0, r4
 800b590:	f7f4 fde4 	bl	800015c <__addsf3>
 800b594:	4603      	mov	r3, r0
 800b596:	461d      	mov	r5, r3
			+ Controller->Kd * (Cur_Error - Controller->Prev_Error)
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	691c      	ldr	r4, [r3, #16]
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	69db      	ldr	r3, [r3, #28]
 800b5a0:	4619      	mov	r1, r3
 800b5a2:	68b8      	ldr	r0, [r7, #8]
 800b5a4:	f7f4 fdd8 	bl	8000158 <__aeabi_fsub>
 800b5a8:	4603      	mov	r3, r0
 800b5aa:	4619      	mov	r1, r3
 800b5ac:	4620      	mov	r0, r4
 800b5ae:	f7f4 fedd 	bl	800036c <__aeabi_fmul>
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	461c      	mov	r4, r3
					/ Controller->dt;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	695b      	ldr	r3, [r3, #20]
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	f7f4 fe7e 	bl	80002bc <__aeabi_ui2f>
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	4619      	mov	r1, r3
 800b5c4:	4620      	mov	r0, r4
 800b5c6:	f7f4 ff85 	bl	80004d4 <__aeabi_fdiv>
 800b5ca:	4603      	mov	r3, r0
	float duty = Controller->Kp * Cur_Error
 800b5cc:	4619      	mov	r1, r3
 800b5ce:	4628      	mov	r0, r5
 800b5d0:	f7f4 fdc4 	bl	800015c <__addsf3>
 800b5d4:	4603      	mov	r3, r0
 800b5d6:	60fb      	str	r3, [r7, #12]

	Controller->Prev_Error = Cur_Error;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	68ba      	ldr	r2, [r7, #8]
 800b5dc:	61da      	str	r2, [r3, #28]
	if (duty < 0)
 800b5de:	f04f 0100 	mov.w	r1, #0
 800b5e2:	68f8      	ldr	r0, [r7, #12]
 800b5e4:	f7f5 f860 	bl	80006a8 <__aeabi_fcmplt>
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d002      	beq.n	800b5f4 <SpeedController_Run+0xd6>
		duty = 0;
 800b5ee:	f04f 0300 	mov.w	r3, #0
 800b5f2:	60fb      	str	r3, [r7, #12]
//		Encoder_Start(Controller->Encoder, 0);
//		osDelay(2000);
//		Encoder_Start(Controller->Encoder, 1);
////		Engine_Brake(Controller->Engine, ENGINE_BRAKE_CLEAR);
//	}
	if (!Engine_inRange(Controller->Engine, duty)) {
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	685c      	ldr	r4, [r3, #4]
 800b5f8:	68f8      	ldr	r0, [r7, #12]
 800b5fa:	f7f5 f87d 	bl	80006f8 <__aeabi_f2iz>
 800b5fe:	4603      	mov	r3, r0
 800b600:	4619      	mov	r1, r3
 800b602:	4620      	mov	r0, r4
 800b604:	f7ff fe26 	bl	800b254 <Engine_inRange>
 800b608:	4603      	mov	r3, r0
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d109      	bne.n	800b622 <SpeedController_Run+0x104>
		Controller->Integration_Error -= Cur_Error;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	6a1b      	ldr	r3, [r3, #32]
 800b612:	68b9      	ldr	r1, [r7, #8]
 800b614:	4618      	mov	r0, r3
 800b616:	f7f4 fd9f 	bl	8000158 <__aeabi_fsub>
 800b61a:	4603      	mov	r3, r0
 800b61c:	461a      	mov	r2, r3
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	621a      	str	r2, [r3, #32]
	}
	if (duty > Controller->Engine->PosLimit) {
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	685b      	ldr	r3, [r3, #4]
 800b626:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800b62a:	4618      	mov	r0, r3
 800b62c:	f7f4 fe4a 	bl	80002c4 <__aeabi_i2f>
 800b630:	4603      	mov	r3, r0
 800b632:	4619      	mov	r1, r3
 800b634:	68f8      	ldr	r0, [r7, #12]
 800b636:	f7f5 f855 	bl	80006e4 <__aeabi_fcmpgt>
 800b63a:	4603      	mov	r3, r0
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d009      	beq.n	800b654 <SpeedController_Run+0x136>
		duty = Controller->Engine->PosLimit;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	685b      	ldr	r3, [r3, #4]
 800b644:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800b648:	4618      	mov	r0, r3
 800b64a:	f7f4 fe3b 	bl	80002c4 <__aeabi_i2f>
 800b64e:	4603      	mov	r3, r0
 800b650:	60fb      	str	r3, [r7, #12]
 800b652:	e017      	b.n	800b684 <SpeedController_Run+0x166>
	} else if (duty < Controller->Engine->NegLimit) {
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	685b      	ldr	r3, [r3, #4]
 800b658:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800b65c:	4618      	mov	r0, r3
 800b65e:	f7f4 fe31 	bl	80002c4 <__aeabi_i2f>
 800b662:	4603      	mov	r3, r0
 800b664:	4619      	mov	r1, r3
 800b666:	68f8      	ldr	r0, [r7, #12]
 800b668:	f7f5 f81e 	bl	80006a8 <__aeabi_fcmplt>
 800b66c:	4603      	mov	r3, r0
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d008      	beq.n	800b684 <SpeedController_Run+0x166>
		duty = Controller->Engine->NegLimit;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	685b      	ldr	r3, [r3, #4]
 800b676:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800b67a:	4618      	mov	r0, r3
 800b67c:	f7f4 fe22 	bl	80002c4 <__aeabi_i2f>
 800b680:	4603      	mov	r3, r0
 800b682:	60fb      	str	r3, [r7, #12]
	}
	Engine_SetSpeed(Controller->Engine, (int16_t) duty);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	685c      	ldr	r4, [r3, #4]
 800b688:	68f8      	ldr	r0, [r7, #12]
 800b68a:	f7f5 f835 	bl	80006f8 <__aeabi_f2iz>
 800b68e:	4603      	mov	r3, r0
 800b690:	b21b      	sxth	r3, r3
 800b692:	4619      	mov	r1, r3
 800b694:	4620      	mov	r0, r4
 800b696:	f7ff fcce 	bl	800b036 <Engine_SetSpeed>
} 
 800b69a:	bf00      	nop
 800b69c:	3710      	adds	r7, #16
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bdb0      	pop	{r4, r5, r7, pc}

0800b6a2 <SpeedController_ClearErr>:

void SpeedController_ClearErr(SpeedControler_HandlerStruct *Controller) {
 800b6a2:	b480      	push	{r7}
 800b6a4:	b083      	sub	sp, #12
 800b6a6:	af00      	add	r7, sp, #0
 800b6a8:	6078      	str	r0, [r7, #4]
	Controller->Integration_Error = 0;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	f04f 0200 	mov.w	r2, #0
 800b6b0:	621a      	str	r2, [r3, #32]
	Controller->Prev_Error = 0;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	f04f 0200 	mov.w	r2, #0
 800b6b8:	61da      	str	r2, [r3, #28]
}
 800b6ba:	bf00      	nop
 800b6bc:	370c      	adds	r7, #12
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	bc80      	pop	{r7}
 800b6c2:	4770      	bx	lr

0800b6c4 <SpeedController_SetSpeed>:

void SpeedController_SetSpeed(SpeedControler_HandlerStruct *Controller,
		float newSpeed) {
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b082      	sub	sp, #8
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
 800b6cc:	6039      	str	r1, [r7, #0]
	if (newSpeed == Controller->SetPoint)
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	699b      	ldr	r3, [r3, #24]
 800b6d2:	4619      	mov	r1, r3
 800b6d4:	6838      	ldr	r0, [r7, #0]
 800b6d6:	f7f4 ffdd 	bl	8000694 <__aeabi_fcmpeq>
 800b6da:	4603      	mov	r3, r0
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d106      	bne.n	800b6ee <SpeedController_SetSpeed+0x2a>
		return;
	Controller->SetPoint = newSpeed;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	683a      	ldr	r2, [r7, #0]
 800b6e4:	619a      	str	r2, [r3, #24]
//	SyncPrintf("Setpoint %f \r\n", newSpeed);
	SpeedController_ClearErr(Controller);
 800b6e6:	6878      	ldr	r0, [r7, #4]
 800b6e8:	f7ff ffdb 	bl	800b6a2 <SpeedController_ClearErr>
 800b6ec:	e000      	b.n	800b6f0 <SpeedController_SetSpeed+0x2c>
		return;
 800b6ee:	bf00      	nop
}
 800b6f0:	3708      	adds	r7, #8
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}

0800b6f6 <SpeedController_GetSpeed>:

float SpeedController_GetSpeed(SpeedControler_HandlerStruct *Controller) {
 800b6f6:	b580      	push	{r7, lr}
 800b6f8:	b082      	sub	sp, #8
 800b6fa:	af00      	add	r7, sp, #0
 800b6fc:	6078      	str	r0, [r7, #4]
	return Encoder_GetSpeed_PPS(Controller->Encoder) / Controller->PulsePerMeter;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	4618      	mov	r0, r3
 800b704:	f7ff fc0e 	bl	800af24 <Encoder_GetSpeed_PPS>
 800b708:	4602      	mov	r2, r0
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b70e:	4619      	mov	r1, r3
 800b710:	4610      	mov	r0, r2
 800b712:	f7f4 fedf 	bl	80004d4 <__aeabi_fdiv>
 800b716:	4603      	mov	r3, r0
}
 800b718:	4618      	mov	r0, r3
 800b71a:	3708      	adds	r7, #8
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}

0800b720 <SpeedController_SetTunings>:

void SpeedController_SetTunings(SpeedControler_HandlerStruct *Controller,
		float Kp, float Ki, float Kd) {
 800b720:	b580      	push	{r7, lr}
 800b722:	b084      	sub	sp, #16
 800b724:	af00      	add	r7, sp, #0
 800b726:	60f8      	str	r0, [r7, #12]
 800b728:	60b9      	str	r1, [r7, #8]
 800b72a:	607a      	str	r2, [r7, #4]
 800b72c:	603b      	str	r3, [r7, #0]
	Controller->Kp = Kp;
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	68ba      	ldr	r2, [r7, #8]
 800b732:	609a      	str	r2, [r3, #8]
	Controller->Ki = Ki;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	687a      	ldr	r2, [r7, #4]
 800b738:	60da      	str	r2, [r3, #12]
	Controller->Kd = Kd;
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	683a      	ldr	r2, [r7, #0]
 800b73e:	611a      	str	r2, [r3, #16]
	SpeedController_ClearErr(Controller);
 800b740:	68f8      	ldr	r0, [r7, #12]
 800b742:	f7ff ffae 	bl	800b6a2 <SpeedController_ClearErr>

}
 800b746:	bf00      	nop
 800b748:	3710      	adds	r7, #16
 800b74a:	46bd      	mov	sp, r7
 800b74c:	bd80      	pop	{r7, pc}

0800b74e <GPIO_WritePin>:

void GPIO_TogglePin(GPIO_HandlerStruct GPIO) {
	return HAL_GPIO_TogglePin(GPIO.Port, GPIO.Pin);
}

void GPIO_WritePin(GPIO_HandlerStruct GPIO, uint32_t PinState) {
 800b74e:	b580      	push	{r7, lr}
 800b750:	b084      	sub	sp, #16
 800b752:	af00      	add	r7, sp, #0
 800b754:	f107 0308 	add.w	r3, r7, #8
 800b758:	e883 0003 	stmia.w	r3, {r0, r1}
 800b75c:	607a      	str	r2, [r7, #4]
//	if (GPIO.Pin == Engine_Brake_Pin) {
//		HAL_GPIO_TogglePin(LED_B_GPIO_Port, LED_B_Pin);
//	} else if (GPIO.Pin == Engine_Dir_Pin) {
//		HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
//	}
	return HAL_GPIO_WritePin(GPIO.Port, GPIO.Pin, PinState);
 800b75e:	68bb      	ldr	r3, [r7, #8]
 800b760:	68fa      	ldr	r2, [r7, #12]
 800b762:	b291      	uxth	r1, r2
 800b764:	687a      	ldr	r2, [r7, #4]
 800b766:	b2d2      	uxtb	r2, r2
 800b768:	4618      	mov	r0, r3
 800b76a:	f7f7 fae5 	bl	8002d38 <HAL_GPIO_WritePin>
}
 800b76e:	3710      	adds	r7, #16
 800b770:	46bd      	mov	sp, r7
 800b772:	bd80      	pop	{r7, pc}

0800b774 <I2C_OS_Init>:
 */


#include "I2C_Handler.h"
int I2C_OS_Init(I2C_OS_HandlerStruct* i2c, I2C_HandleTypeDef* hi2c)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b082      	sub	sp, #8
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
 800b77c:	6039      	str	r1, [r7, #0]
	i2c->hi2c = hi2c;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	683a      	ldr	r2, [r7, #0]
 800b782:	601a      	str	r2, [r3, #0]
//	osSemaphoreNew(1, 0, NULL);
	i2c->Semaphore = osSemaphoreNew(1, 1, NULL);
 800b784:	2200      	movs	r2, #0
 800b786:	2101      	movs	r1, #1
 800b788:	2001      	movs	r0, #1
 800b78a:	f7fb fbcf 	bl	8006f2c <osSemaphoreNew>
 800b78e:	4602      	mov	r2, r0
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	605a      	str	r2, [r3, #4]
	i2c->EventFlag = osEventFlagsNew(NULL);
 800b794:	2000      	movs	r0, #0
 800b796:	f7fb f91d 	bl	80069d4 <osEventFlagsNew>
 800b79a:	4602      	mov	r2, r0
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	609a      	str	r2, [r3, #8]
	return 0;
 800b7a0:	2300      	movs	r3, #0
}
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	3708      	adds	r7, #8
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}

0800b7aa <I2C_OS_MEM_Write_IT>:
	return Status;
}

int I2C_OS_MEM_Write_IT(I2C_OS_HandlerStruct* i2c, uint16_t DevAddress,uint16_t MemAddress,
		uint16_t MemAddSize, uint8_t * pData, uint16_t Size, uint32_t timeout)
{
 800b7aa:	b590      	push	{r4, r7, lr}
 800b7ac:	b089      	sub	sp, #36	; 0x24
 800b7ae:	af02      	add	r7, sp, #8
 800b7b0:	60f8      	str	r0, [r7, #12]
 800b7b2:	4608      	mov	r0, r1
 800b7b4:	4611      	mov	r1, r2
 800b7b6:	461a      	mov	r2, r3
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	817b      	strh	r3, [r7, #10]
 800b7bc:	460b      	mov	r3, r1
 800b7be:	813b      	strh	r3, [r7, #8]
 800b7c0:	4613      	mov	r3, r2
 800b7c2:	80fb      	strh	r3, [r7, #6]
	int Status = osOK;
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	617b      	str	r3, [r7, #20]
	Status = osSemaphoreAcquire(i2c->Semaphore, timeout);
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	685b      	ldr	r3, [r3, #4]
 800b7cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	f7fb fc48 	bl	8007064 <osSemaphoreAcquire>
 800b7d4:	6178      	str	r0, [r7, #20]
	if (Status != osOK) return Status;
 800b7d6:	697b      	ldr	r3, [r7, #20]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d001      	beq.n	800b7e0 <I2C_OS_MEM_Write_IT+0x36>
 800b7dc:	697b      	ldr	r3, [r7, #20]
 800b7de:	e031      	b.n	800b844 <I2C_OS_MEM_Write_IT+0x9a>
	osEventFlagsClear(i2c->EventFlag, I2C_OS_MEM_TX_CPLT_FLAG);
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	689b      	ldr	r3, [r3, #8]
 800b7e4:	2101      	movs	r1, #1
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	f7fb f99e 	bl	8006b28 <osEventFlagsClear>
	Status = HAL_I2C_Mem_Write_IT(i2c->hi2c, DevAddress, MemAddress, MemAddSize, pData, Size);
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	6818      	ldr	r0, [r3, #0]
 800b7f0:	88fc      	ldrh	r4, [r7, #6]
 800b7f2:	893a      	ldrh	r2, [r7, #8]
 800b7f4:	8979      	ldrh	r1, [r7, #10]
 800b7f6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b7f8:	9301      	str	r3, [sp, #4]
 800b7fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7fc:	9300      	str	r3, [sp, #0]
 800b7fe:	4623      	mov	r3, r4
 800b800:	f7f7 fc0a 	bl	8003018 <HAL_I2C_Mem_Write_IT>
 800b804:	4603      	mov	r3, r0
 800b806:	617b      	str	r3, [r7, #20]
	if (Status != 0)
 800b808:	697b      	ldr	r3, [r7, #20]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d009      	beq.n	800b822 <I2C_OS_MEM_Write_IT+0x78>
	{
		Status = osError;
 800b80e:	f04f 33ff 	mov.w	r3, #4294967295
 800b812:	617b      	str	r3, [r7, #20]
		osSemaphoreRelease(i2c->Semaphore);
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	685b      	ldr	r3, [r3, #4]
 800b818:	4618      	mov	r0, r3
 800b81a:	f7fb fc89 	bl	8007130 <osSemaphoreRelease>
		return Status;
 800b81e:	697b      	ldr	r3, [r7, #20]
 800b820:	e010      	b.n	800b844 <I2C_OS_MEM_Write_IT+0x9a>
	}
	Status = osEventFlagsWait(i2c->EventFlag, I2C_OS_MEM_TX_CPLT_FLAG, osFlagsWaitAll, timeout);
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	6898      	ldr	r0, [r3, #8]
 800b826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b828:	2201      	movs	r2, #1
 800b82a:	2101      	movs	r1, #1
 800b82c:	f7fb f9c0 	bl	8006bb0 <osEventFlagsWait>
 800b830:	4603      	mov	r3, r0
 800b832:	617b      	str	r3, [r7, #20]
	osSemaphoreRelease(i2c->Semaphore);
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	685b      	ldr	r3, [r3, #4]
 800b838:	4618      	mov	r0, r3
 800b83a:	f7fb fc79 	bl	8007130 <osSemaphoreRelease>
	return Status > 0 ? osOK: Status ;
 800b83e:	697b      	ldr	r3, [r7, #20]
 800b840:	ea03 73e3 	and.w	r3, r3, r3, asr #31
}
 800b844:	4618      	mov	r0, r3
 800b846:	371c      	adds	r7, #28
 800b848:	46bd      	mov	sp, r7
 800b84a:	bd90      	pop	{r4, r7, pc}

0800b84c <I2C_OS_IsDeviceReady>:
	return Status > 0 ? osOK: Status;
}

int I2C_OS_IsDeviceReady(I2C_OS_HandlerStruct* i2c, uint16_t DevAddress, uint32_t
		Trials, uint32_t Timeout)
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b086      	sub	sp, #24
 800b850:	af00      	add	r7, sp, #0
 800b852:	60f8      	str	r0, [r7, #12]
 800b854:	607a      	str	r2, [r7, #4]
 800b856:	603b      	str	r3, [r7, #0]
 800b858:	460b      	mov	r3, r1
 800b85a:	817b      	strh	r3, [r7, #10]
	int Status = osOK;
 800b85c:	2300      	movs	r3, #0
 800b85e:	617b      	str	r3, [r7, #20]
	Status = osSemaphoreAcquire(i2c->Semaphore, Timeout);
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	685b      	ldr	r3, [r3, #4]
 800b864:	6839      	ldr	r1, [r7, #0]
 800b866:	4618      	mov	r0, r3
 800b868:	f7fb fbfc 	bl	8007064 <osSemaphoreAcquire>
 800b86c:	6178      	str	r0, [r7, #20]
	if (Status != osOK) return Status;
 800b86e:	697b      	ldr	r3, [r7, #20]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d001      	beq.n	800b878 <I2C_OS_IsDeviceReady+0x2c>
 800b874:	697b      	ldr	r3, [r7, #20]
 800b876:	e017      	b.n	800b8a8 <I2C_OS_IsDeviceReady+0x5c>
	Status = HAL_I2C_IsDeviceReady(i2c->hi2c, DevAddress, Trials, Timeout);
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	6818      	ldr	r0, [r3, #0]
 800b87c:	8979      	ldrh	r1, [r7, #10]
 800b87e:	683b      	ldr	r3, [r7, #0]
 800b880:	687a      	ldr	r2, [r7, #4]
 800b882:	f7f7 fc75 	bl	8003170 <HAL_I2C_IsDeviceReady>
 800b886:	4603      	mov	r3, r0
 800b888:	617b      	str	r3, [r7, #20]

	if (Status != 0)
 800b88a:	697b      	ldr	r3, [r7, #20]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d003      	beq.n	800b898 <I2C_OS_IsDeviceReady+0x4c>
	{
		Status = osError;
 800b890:	f04f 33ff 	mov.w	r3, #4294967295
 800b894:	617b      	str	r3, [r7, #20]
 800b896:	e001      	b.n	800b89c <I2C_OS_IsDeviceReady+0x50>
	} else
	{
		Status = osOK;
 800b898:	2300      	movs	r3, #0
 800b89a:	617b      	str	r3, [r7, #20]
	}
	osSemaphoreRelease(i2c->Semaphore);
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	685b      	ldr	r3, [r3, #4]
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	f7fb fc45 	bl	8007130 <osSemaphoreRelease>
	return Status;
 800b8a6:	697b      	ldr	r3, [r7, #20]

}
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	3718      	adds	r7, #24
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	bd80      	pop	{r7, pc}

0800b8b0 <I2C_OS_MEM_RxCpltCB>:
	osSemaphoreRelease(i2c->Semaphore);
	return Status > 0 ? osOK: Status;
}

void I2C_OS_MEM_RxCpltCB(I2C_OS_HandlerStruct* i2c)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b082      	sub	sp, #8
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
	osEventFlagsSet(i2c->EventFlag, I2C_OS_MEM_RX_CPLT_FLAG);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	689b      	ldr	r3, [r3, #8]
 800b8bc:	2102      	movs	r1, #2
 800b8be:	4618      	mov	r0, r3
 800b8c0:	f7fb f8da 	bl	8006a78 <osEventFlagsSet>
}
 800b8c4:	bf00      	nop
 800b8c6:	3708      	adds	r7, #8
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	bd80      	pop	{r7, pc}

0800b8cc <I2C_OS_MEM_TxCpltCB>:
void I2C_OS_MEM_TxCpltCB(I2C_OS_HandlerStruct* i2c)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b082      	sub	sp, #8
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
	osEventFlagsSet(i2c->EventFlag, I2C_OS_MEM_TX_CPLT_FLAG);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	689b      	ldr	r3, [r3, #8]
 800b8d8:	2101      	movs	r1, #1
 800b8da:	4618      	mov	r0, r3
 800b8dc:	f7fb f8cc 	bl	8006a78 <osEventFlagsSet>
}
 800b8e0:	bf00      	nop
 800b8e2:	3708      	adds	r7, #8
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	bd80      	pop	{r7, pc}

0800b8e8 <SyncPrintf_Init>:
  NULL,                // memory for control block
  0U                   // size for control block
};

void 	SyncPrintf_Init()
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	af00      	add	r7, sp, #0
	PrintfMutex = osMutexNew(&PrintfMutex_attr);
 800b8ec:	4803      	ldr	r0, [pc, #12]	; (800b8fc <SyncPrintf_Init+0x14>)
 800b8ee:	f7fb f9d5 	bl	8006c9c <osMutexNew>
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	4a02      	ldr	r2, [pc, #8]	; (800b900 <SyncPrintf_Init+0x18>)
 800b8f6:	6013      	str	r3, [r2, #0]
}
 800b8f8:	bf00      	nop
 800b8fa:	bd80      	pop	{r7, pc}
 800b8fc:	0800bbe8 	.word	0x0800bbe8
 800b900:	20002e7c 	.word	0x20002e7c

0800b904 <bytes2Float>:
      }

    return isNegNumber ? - result: result;
}
float bytes2Float(uint8_t bytes[4])
{
 800b904:	b480      	push	{r7}
 800b906:	b085      	sub	sp, #20
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
  union
  {
    uint8_t bytes[4];
    float a;
  } thing;
  memcpy(thing.bytes, bytes, 4);
 800b910:	60fb      	str	r3, [r7, #12]
  return thing.a;
 800b912:	68fb      	ldr	r3, [r7, #12]
}
 800b914:	4618      	mov	r0, r3
 800b916:	3714      	adds	r7, #20
 800b918:	46bd      	mov	sp, r7
 800b91a:	bc80      	pop	{r7}
 800b91c:	4770      	bx	lr
	...

0800b920 <__malloc_lock>:
 800b920:	4801      	ldr	r0, [pc, #4]	; (800b928 <__malloc_lock+0x8>)
 800b922:	f7f5 bf80 	b.w	8001826 <__retarget_lock_acquire_recursive>
 800b926:	bf00      	nop
 800b928:	20000494 	.word	0x20000494

0800b92c <__malloc_unlock>:
 800b92c:	4801      	ldr	r0, [pc, #4]	; (800b934 <__malloc_unlock+0x8>)
 800b92e:	f7f5 bf8e 	b.w	800184e <__retarget_lock_release_recursive>
 800b932:	bf00      	nop
 800b934:	20000494 	.word	0x20000494

0800b938 <memset>:
 800b938:	4603      	mov	r3, r0
 800b93a:	4402      	add	r2, r0
 800b93c:	4293      	cmp	r3, r2
 800b93e:	d100      	bne.n	800b942 <memset+0xa>
 800b940:	4770      	bx	lr
 800b942:	f803 1b01 	strb.w	r1, [r3], #1
 800b946:	e7f9      	b.n	800b93c <memset+0x4>

0800b948 <_reclaim_reent>:
 800b948:	4b29      	ldr	r3, [pc, #164]	; (800b9f0 <_reclaim_reent+0xa8>)
 800b94a:	b570      	push	{r4, r5, r6, lr}
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	4604      	mov	r4, r0
 800b950:	4283      	cmp	r3, r0
 800b952:	d04b      	beq.n	800b9ec <_reclaim_reent+0xa4>
 800b954:	69c3      	ldr	r3, [r0, #28]
 800b956:	b143      	cbz	r3, 800b96a <_reclaim_reent+0x22>
 800b958:	68db      	ldr	r3, [r3, #12]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d144      	bne.n	800b9e8 <_reclaim_reent+0xa0>
 800b95e:	69e3      	ldr	r3, [r4, #28]
 800b960:	6819      	ldr	r1, [r3, #0]
 800b962:	b111      	cbz	r1, 800b96a <_reclaim_reent+0x22>
 800b964:	4620      	mov	r0, r4
 800b966:	f000 f877 	bl	800ba58 <_free_r>
 800b96a:	6961      	ldr	r1, [r4, #20]
 800b96c:	b111      	cbz	r1, 800b974 <_reclaim_reent+0x2c>
 800b96e:	4620      	mov	r0, r4
 800b970:	f000 f872 	bl	800ba58 <_free_r>
 800b974:	69e1      	ldr	r1, [r4, #28]
 800b976:	b111      	cbz	r1, 800b97e <_reclaim_reent+0x36>
 800b978:	4620      	mov	r0, r4
 800b97a:	f000 f86d 	bl	800ba58 <_free_r>
 800b97e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b980:	b111      	cbz	r1, 800b988 <_reclaim_reent+0x40>
 800b982:	4620      	mov	r0, r4
 800b984:	f000 f868 	bl	800ba58 <_free_r>
 800b988:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b98a:	b111      	cbz	r1, 800b992 <_reclaim_reent+0x4a>
 800b98c:	4620      	mov	r0, r4
 800b98e:	f000 f863 	bl	800ba58 <_free_r>
 800b992:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b994:	b111      	cbz	r1, 800b99c <_reclaim_reent+0x54>
 800b996:	4620      	mov	r0, r4
 800b998:	f000 f85e 	bl	800ba58 <_free_r>
 800b99c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b99e:	b111      	cbz	r1, 800b9a6 <_reclaim_reent+0x5e>
 800b9a0:	4620      	mov	r0, r4
 800b9a2:	f000 f859 	bl	800ba58 <_free_r>
 800b9a6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b9a8:	b111      	cbz	r1, 800b9b0 <_reclaim_reent+0x68>
 800b9aa:	4620      	mov	r0, r4
 800b9ac:	f000 f854 	bl	800ba58 <_free_r>
 800b9b0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b9b2:	b111      	cbz	r1, 800b9ba <_reclaim_reent+0x72>
 800b9b4:	4620      	mov	r0, r4
 800b9b6:	f000 f84f 	bl	800ba58 <_free_r>
 800b9ba:	6a23      	ldr	r3, [r4, #32]
 800b9bc:	b1b3      	cbz	r3, 800b9ec <_reclaim_reent+0xa4>
 800b9be:	4620      	mov	r0, r4
 800b9c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b9c4:	4718      	bx	r3
 800b9c6:	5949      	ldr	r1, [r1, r5]
 800b9c8:	b941      	cbnz	r1, 800b9dc <_reclaim_reent+0x94>
 800b9ca:	3504      	adds	r5, #4
 800b9cc:	69e3      	ldr	r3, [r4, #28]
 800b9ce:	2d80      	cmp	r5, #128	; 0x80
 800b9d0:	68d9      	ldr	r1, [r3, #12]
 800b9d2:	d1f8      	bne.n	800b9c6 <_reclaim_reent+0x7e>
 800b9d4:	4620      	mov	r0, r4
 800b9d6:	f000 f83f 	bl	800ba58 <_free_r>
 800b9da:	e7c0      	b.n	800b95e <_reclaim_reent+0x16>
 800b9dc:	680e      	ldr	r6, [r1, #0]
 800b9de:	4620      	mov	r0, r4
 800b9e0:	f000 f83a 	bl	800ba58 <_free_r>
 800b9e4:	4631      	mov	r1, r6
 800b9e6:	e7ef      	b.n	800b9c8 <_reclaim_reent+0x80>
 800b9e8:	2500      	movs	r5, #0
 800b9ea:	e7ef      	b.n	800b9cc <_reclaim_reent+0x84>
 800b9ec:	bd70      	pop	{r4, r5, r6, pc}
 800b9ee:	bf00      	nop
 800b9f0:	20000074 	.word	0x20000074

0800b9f4 <__libc_init_array>:
 800b9f4:	b570      	push	{r4, r5, r6, lr}
 800b9f6:	2600      	movs	r6, #0
 800b9f8:	4d0c      	ldr	r5, [pc, #48]	; (800ba2c <__libc_init_array+0x38>)
 800b9fa:	4c0d      	ldr	r4, [pc, #52]	; (800ba30 <__libc_init_array+0x3c>)
 800b9fc:	1b64      	subs	r4, r4, r5
 800b9fe:	10a4      	asrs	r4, r4, #2
 800ba00:	42a6      	cmp	r6, r4
 800ba02:	d109      	bne.n	800ba18 <__libc_init_array+0x24>
 800ba04:	f000 f870 	bl	800bae8 <_init>
 800ba08:	2600      	movs	r6, #0
 800ba0a:	4d0a      	ldr	r5, [pc, #40]	; (800ba34 <__libc_init_array+0x40>)
 800ba0c:	4c0a      	ldr	r4, [pc, #40]	; (800ba38 <__libc_init_array+0x44>)
 800ba0e:	1b64      	subs	r4, r4, r5
 800ba10:	10a4      	asrs	r4, r4, #2
 800ba12:	42a6      	cmp	r6, r4
 800ba14:	d105      	bne.n	800ba22 <__libc_init_array+0x2e>
 800ba16:	bd70      	pop	{r4, r5, r6, pc}
 800ba18:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba1c:	4798      	blx	r3
 800ba1e:	3601      	adds	r6, #1
 800ba20:	e7ee      	b.n	800ba00 <__libc_init_array+0xc>
 800ba22:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba26:	4798      	blx	r3
 800ba28:	3601      	adds	r6, #1
 800ba2a:	e7f2      	b.n	800ba12 <__libc_init_array+0x1e>
 800ba2c:	0800bbf8 	.word	0x0800bbf8
 800ba30:	0800bbf8 	.word	0x0800bbf8
 800ba34:	0800bbf8 	.word	0x0800bbf8
 800ba38:	0800bbfc 	.word	0x0800bbfc

0800ba3c <memcpy>:
 800ba3c:	440a      	add	r2, r1
 800ba3e:	4291      	cmp	r1, r2
 800ba40:	f100 33ff 	add.w	r3, r0, #4294967295
 800ba44:	d100      	bne.n	800ba48 <memcpy+0xc>
 800ba46:	4770      	bx	lr
 800ba48:	b510      	push	{r4, lr}
 800ba4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba4e:	4291      	cmp	r1, r2
 800ba50:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba54:	d1f9      	bne.n	800ba4a <memcpy+0xe>
 800ba56:	bd10      	pop	{r4, pc}

0800ba58 <_free_r>:
 800ba58:	b538      	push	{r3, r4, r5, lr}
 800ba5a:	4605      	mov	r5, r0
 800ba5c:	2900      	cmp	r1, #0
 800ba5e:	d040      	beq.n	800bae2 <_free_r+0x8a>
 800ba60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba64:	1f0c      	subs	r4, r1, #4
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	bfb8      	it	lt
 800ba6a:	18e4      	addlt	r4, r4, r3
 800ba6c:	f7ff ff58 	bl	800b920 <__malloc_lock>
 800ba70:	4a1c      	ldr	r2, [pc, #112]	; (800bae4 <_free_r+0x8c>)
 800ba72:	6813      	ldr	r3, [r2, #0]
 800ba74:	b933      	cbnz	r3, 800ba84 <_free_r+0x2c>
 800ba76:	6063      	str	r3, [r4, #4]
 800ba78:	6014      	str	r4, [r2, #0]
 800ba7a:	4628      	mov	r0, r5
 800ba7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba80:	f7ff bf54 	b.w	800b92c <__malloc_unlock>
 800ba84:	42a3      	cmp	r3, r4
 800ba86:	d908      	bls.n	800ba9a <_free_r+0x42>
 800ba88:	6820      	ldr	r0, [r4, #0]
 800ba8a:	1821      	adds	r1, r4, r0
 800ba8c:	428b      	cmp	r3, r1
 800ba8e:	bf01      	itttt	eq
 800ba90:	6819      	ldreq	r1, [r3, #0]
 800ba92:	685b      	ldreq	r3, [r3, #4]
 800ba94:	1809      	addeq	r1, r1, r0
 800ba96:	6021      	streq	r1, [r4, #0]
 800ba98:	e7ed      	b.n	800ba76 <_free_r+0x1e>
 800ba9a:	461a      	mov	r2, r3
 800ba9c:	685b      	ldr	r3, [r3, #4]
 800ba9e:	b10b      	cbz	r3, 800baa4 <_free_r+0x4c>
 800baa0:	42a3      	cmp	r3, r4
 800baa2:	d9fa      	bls.n	800ba9a <_free_r+0x42>
 800baa4:	6811      	ldr	r1, [r2, #0]
 800baa6:	1850      	adds	r0, r2, r1
 800baa8:	42a0      	cmp	r0, r4
 800baaa:	d10b      	bne.n	800bac4 <_free_r+0x6c>
 800baac:	6820      	ldr	r0, [r4, #0]
 800baae:	4401      	add	r1, r0
 800bab0:	1850      	adds	r0, r2, r1
 800bab2:	4283      	cmp	r3, r0
 800bab4:	6011      	str	r1, [r2, #0]
 800bab6:	d1e0      	bne.n	800ba7a <_free_r+0x22>
 800bab8:	6818      	ldr	r0, [r3, #0]
 800baba:	685b      	ldr	r3, [r3, #4]
 800babc:	4408      	add	r0, r1
 800babe:	6010      	str	r0, [r2, #0]
 800bac0:	6053      	str	r3, [r2, #4]
 800bac2:	e7da      	b.n	800ba7a <_free_r+0x22>
 800bac4:	d902      	bls.n	800bacc <_free_r+0x74>
 800bac6:	230c      	movs	r3, #12
 800bac8:	602b      	str	r3, [r5, #0]
 800baca:	e7d6      	b.n	800ba7a <_free_r+0x22>
 800bacc:	6820      	ldr	r0, [r4, #0]
 800bace:	1821      	adds	r1, r4, r0
 800bad0:	428b      	cmp	r3, r1
 800bad2:	bf01      	itttt	eq
 800bad4:	6819      	ldreq	r1, [r3, #0]
 800bad6:	685b      	ldreq	r3, [r3, #4]
 800bad8:	1809      	addeq	r1, r1, r0
 800bada:	6021      	streq	r1, [r4, #0]
 800badc:	6063      	str	r3, [r4, #4]
 800bade:	6054      	str	r4, [r2, #4]
 800bae0:	e7cb      	b.n	800ba7a <_free_r+0x22>
 800bae2:	bd38      	pop	{r3, r4, r5, pc}
 800bae4:	20002e80 	.word	0x20002e80

0800bae8 <_init>:
 800bae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baea:	bf00      	nop
 800baec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800baee:	bc08      	pop	{r3}
 800baf0:	469e      	mov	lr, r3
 800baf2:	4770      	bx	lr

0800baf4 <_fini>:
 800baf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baf6:	bf00      	nop
 800baf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bafa:	bc08      	pop	{r3}
 800bafc:	469e      	mov	lr, r3
 800bafe:	4770      	bx	lr
