
GPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a64c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d0  0800a760  0800a760  0001a760  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac30  0800ac30  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  0800ac30  0800ac30  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ac30  0800ac30  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac30  0800ac30  0001ac30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ac34  0800ac34  0001ac34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800ac38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000558  200001d4  0800ae0c  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000072c  0800ae0c  0002072c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010cf8  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e9a  00000000  00000000  00030f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f70  00000000  00000000  00033dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000be0  00000000  00000000  00034d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a2c2  00000000  00000000  00035928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013cc2  00000000  00000000  0004fbea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f713  00000000  00000000  000638ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005540  00000000  00000000  000f2fc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000f8500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a744 	.word	0x0800a744

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	0800a744 	.word	0x0800a744

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpun>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001118:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800111c:	d102      	bne.n	8001124 <__aeabi_fcmpun+0x14>
 800111e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001122:	d108      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001124:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001128:	d102      	bne.n	8001130 <__aeabi_fcmpun+0x20>
 800112a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800112e:	d102      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001130:	f04f 0000 	mov.w	r0, #0
 8001134:	4770      	bx	lr
 8001136:	f04f 0001 	mov.w	r0, #1
 800113a:	4770      	bx	lr

0800113c <__aeabi_d2lz>:
 800113c:	b538      	push	{r3, r4, r5, lr}
 800113e:	4605      	mov	r5, r0
 8001140:	460c      	mov	r4, r1
 8001142:	2200      	movs	r2, #0
 8001144:	2300      	movs	r3, #0
 8001146:	4628      	mov	r0, r5
 8001148:	4621      	mov	r1, r4
 800114a:	f7ff fc37 	bl	80009bc <__aeabi_dcmplt>
 800114e:	b928      	cbnz	r0, 800115c <__aeabi_d2lz+0x20>
 8001150:	4628      	mov	r0, r5
 8001152:	4621      	mov	r1, r4
 8001154:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001158:	f000 b80a 	b.w	8001170 <__aeabi_d2ulz>
 800115c:	4628      	mov	r0, r5
 800115e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001162:	f000 f805 	bl	8001170 <__aeabi_d2ulz>
 8001166:	4240      	negs	r0, r0
 8001168:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800116c:	bd38      	pop	{r3, r4, r5, pc}
 800116e:	bf00      	nop

08001170 <__aeabi_d2ulz>:
 8001170:	b5d0      	push	{r4, r6, r7, lr}
 8001172:	2200      	movs	r2, #0
 8001174:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <__aeabi_d2ulz+0x34>)
 8001176:	4606      	mov	r6, r0
 8001178:	460f      	mov	r7, r1
 800117a:	f7ff f9ad 	bl	80004d8 <__aeabi_dmul>
 800117e:	f7ff fc83 	bl	8000a88 <__aeabi_d2uiz>
 8001182:	4604      	mov	r4, r0
 8001184:	f7ff f92e 	bl	80003e4 <__aeabi_ui2d>
 8001188:	2200      	movs	r2, #0
 800118a:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <__aeabi_d2ulz+0x38>)
 800118c:	f7ff f9a4 	bl	80004d8 <__aeabi_dmul>
 8001190:	4602      	mov	r2, r0
 8001192:	460b      	mov	r3, r1
 8001194:	4630      	mov	r0, r6
 8001196:	4639      	mov	r1, r7
 8001198:	f7fe ffe6 	bl	8000168 <__aeabi_dsub>
 800119c:	f7ff fc74 	bl	8000a88 <__aeabi_d2uiz>
 80011a0:	4621      	mov	r1, r4
 80011a2:	bdd0      	pop	{r4, r6, r7, pc}
 80011a4:	3df00000 	.word	0x3df00000
 80011a8:	41f00000 	.word	0x41f00000

080011ac <float2Bytes>:

CAN_RxHeaderTypeDef Rxheader;
uint8_t rcdata[8];
uint8_t Can_RecFlag=0;

void float2Bytes( uint8_t bytes_temp[4],float float_variable){
 80011ac:	b480      	push	{r7}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
  union {
    float a;
    unsigned char bytes[4];
  } thing;
  thing.a = float_variable;
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	68fa      	ldr	r2, [r7, #12]
  memcpy(bytes_temp, thing.bytes, 4);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	601a      	str	r2, [r3, #0]
}
 80011c0:	bf00      	nop
 80011c2:	3714      	adds	r7, #20
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bc80      	pop	{r7}
 80011c8:	4770      	bx	lr
	...

080011cc <CAN_HandleSendData>:

HAL_StatusTypeDef CAN_HandleSendData(const uint32_t arbitration_id,
                           const uint8_t* data, const uint8_t size) {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b08c      	sub	sp, #48	; 0x30
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	4613      	mov	r3, r2
 80011d8:	71fb      	strb	r3, [r7, #7]
	CAN_TxHeaderTypeDef Txheader;
	uint32_t TxMailbox;
	Txheader.DLC=size;
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	62bb      	str	r3, [r7, #40]	; 0x28
	Txheader.IDE= CAN_ID_STD;
 80011de:	2300      	movs	r3, #0
 80011e0:	623b      	str	r3, [r7, #32]
	Txheader.RTR= CAN_RTR_DATA;
 80011e2:	2300      	movs	r3, #0
 80011e4:	627b      	str	r3, [r7, #36]	; 0x24
	Txheader.StdId= arbitration_id;
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	61bb      	str	r3, [r7, #24]
	if(HAL_CAN_AddTxMessage(&hcan, &Txheader, data, &TxMailbox)!=HAL_OK){
 80011ea:	f107 0314 	add.w	r3, r7, #20
 80011ee:	f107 0118 	add.w	r1, r7, #24
 80011f2:	68ba      	ldr	r2, [r7, #8]
 80011f4:	4806      	ldr	r0, [pc, #24]	; (8001210 <CAN_HandleSendData+0x44>)
 80011f6:	f000 ffe3 	bl	80021c0 <HAL_CAN_AddTxMessage>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <CAN_HandleSendData+0x38>
		return HAL_ERROR;
 8001200:	2301      	movs	r3, #1
 8001202:	e000      	b.n	8001206 <CAN_HandleSendData+0x3a>
	}
	else{
		 return HAL_OK;
 8001204:	2300      	movs	r3, #0
	}
}
 8001206:	4618      	mov	r0, r3
 8001208:	3730      	adds	r7, #48	; 0x30
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	20000218 	.word	0x20000218

08001214 <CAN_Config_filtering>:
void CAN_Config_filtering(uint8_t FilterBank, uint16_t NodeID)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b08c      	sub	sp, #48	; 0x30
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	460a      	mov	r2, r1
 800121e:	71fb      	strb	r3, [r7, #7]
 8001220:	4613      	mov	r3, r2
 8001222:	80bb      	strh	r3, [r7, #4]
	CAN_FilterTypeDef Can_filter_init;
	Can_filter_init.FilterActivation=ENABLE;
 8001224:	2301      	movs	r3, #1
 8001226:	62bb      	str	r3, [r7, #40]	; 0x28
	Can_filter_init.FilterBank=FilterBank;
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	61fb      	str	r3, [r7, #28]
	Can_filter_init.FilterFIFOAssignment=CAN_RX_FIFO0;
 800122c:	2300      	movs	r3, #0
 800122e:	61bb      	str	r3, [r7, #24]
	Can_filter_init.FilterIdHigh=(NodeID << 5) & 0xFFFF;;
 8001230:	88bb      	ldrh	r3, [r7, #4]
 8001232:	015b      	lsls	r3, r3, #5
 8001234:	b29b      	uxth	r3, r3
 8001236:	60bb      	str	r3, [r7, #8]
	Can_filter_init.FilterIdLow= 0x0000;
 8001238:	2300      	movs	r3, #0
 800123a:	60fb      	str	r3, [r7, #12]
	Can_filter_init.FilterMaskIdHigh= 0xFFF8;
 800123c:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001240:	613b      	str	r3, [r7, #16]
	Can_filter_init.FilterMaskIdLow= 0x0000;
 8001242:	2300      	movs	r3, #0
 8001244:	617b      	str	r3, [r7, #20]
	Can_filter_init.FilterMode=CAN_FILTERMODE_IDMASK;
 8001246:	2300      	movs	r3, #0
 8001248:	623b      	str	r3, [r7, #32]
	Can_filter_init.FilterScale=CAN_FILTERSCALE_32BIT;
 800124a:	2301      	movs	r3, #1
 800124c:	627b      	str	r3, [r7, #36]	; 0x24
	if(HAL_CAN_ConfigFilter(&hcan,&Can_filter_init)!=HAL_OK)
 800124e:	f107 0308 	add.w	r3, r7, #8
 8001252:	4619      	mov	r1, r3
 8001254:	4805      	ldr	r0, [pc, #20]	; (800126c <CAN_Config_filtering+0x58>)
 8001256:	f000 fea6 	bl	8001fa6 <HAL_CAN_ConfigFilter>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <CAN_Config_filtering+0x50>
	{
		Error_Handler();
 8001260:	f000 faae 	bl	80017c0 <Error_Handler>
	}
}
 8001264:	bf00      	nop
 8001266:	3730      	adds	r7, #48	; 0x30
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20000218 	.word	0x20000218

08001270 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback (CAN_HandleTypeDef *hcan){
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &Rxheader, rcdata)==HAL_OK){
 8001278:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 800127a:	4a0a      	ldr	r2, [pc, #40]	; (80012a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 800127c:	2100      	movs	r1, #0
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f001 f86d 	bl	800235e <HAL_CAN_GetRxMessage>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d103      	bne.n	8001292 <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
		Can_RecFlag=1;
 800128a:	4b07      	ldr	r3, [pc, #28]	; (80012a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 800128c:	2201      	movs	r2, #1
 800128e:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		Can_RecFlag=0;
	}
}
 8001290:	e002      	b.n	8001298 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
		Can_RecFlag=0;
 8001292:	4b05      	ldr	r3, [pc, #20]	; (80012a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8001294:	2200      	movs	r2, #0
 8001296:	701a      	strb	r2, [r3, #0]
}
 8001298:	bf00      	nop
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	2000020c 	.word	0x2000020c
 80012a4:	200001f0 	.word	0x200001f0
 80012a8:	20000214 	.word	0x20000214

080012ac <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80012b0:	4b17      	ldr	r3, [pc, #92]	; (8001310 <MX_CAN_Init+0x64>)
 80012b2:	4a18      	ldr	r2, [pc, #96]	; (8001314 <MX_CAN_Init+0x68>)
 80012b4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 80012b6:	4b16      	ldr	r3, [pc, #88]	; (8001310 <MX_CAN_Init+0x64>)
 80012b8:	2204      	movs	r2, #4
 80012ba:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80012bc:	4b14      	ldr	r3, [pc, #80]	; (8001310 <MX_CAN_Init+0x64>)
 80012be:	2200      	movs	r2, #0
 80012c0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80012c2:	4b13      	ldr	r3, [pc, #76]	; (8001310 <MX_CAN_Init+0x64>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 80012c8:	4b11      	ldr	r3, [pc, #68]	; (8001310 <MX_CAN_Init+0x64>)
 80012ca:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80012ce:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80012d0:	4b0f      	ldr	r3, [pc, #60]	; (8001310 <MX_CAN_Init+0x64>)
 80012d2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80012d6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80012d8:	4b0d      	ldr	r3, [pc, #52]	; (8001310 <MX_CAN_Init+0x64>)
 80012da:	2200      	movs	r2, #0
 80012dc:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80012de:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <MX_CAN_Init+0x64>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80012e4:	4b0a      	ldr	r3, [pc, #40]	; (8001310 <MX_CAN_Init+0x64>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80012ea:	4b09      	ldr	r3, [pc, #36]	; (8001310 <MX_CAN_Init+0x64>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80012f0:	4b07      	ldr	r3, [pc, #28]	; (8001310 <MX_CAN_Init+0x64>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80012f6:	4b06      	ldr	r3, [pc, #24]	; (8001310 <MX_CAN_Init+0x64>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80012fc:	4804      	ldr	r0, [pc, #16]	; (8001310 <MX_CAN_Init+0x64>)
 80012fe:	f000 fd57 	bl	8001db0 <HAL_CAN_Init>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8001308:	f000 fa5a 	bl	80017c0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800130c:	bf00      	nop
 800130e:	bd80      	pop	{r7, pc}
 8001310:	20000218 	.word	0x20000218
 8001314:	40006400 	.word	0x40006400

08001318 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b088      	sub	sp, #32
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001320:	f107 0310 	add.w	r3, r7, #16
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a24      	ldr	r2, [pc, #144]	; (80013c4 <HAL_CAN_MspInit+0xac>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d141      	bne.n	80013bc <HAL_CAN_MspInit+0xa4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001338:	4b23      	ldr	r3, [pc, #140]	; (80013c8 <HAL_CAN_MspInit+0xb0>)
 800133a:	69db      	ldr	r3, [r3, #28]
 800133c:	4a22      	ldr	r2, [pc, #136]	; (80013c8 <HAL_CAN_MspInit+0xb0>)
 800133e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001342:	61d3      	str	r3, [r2, #28]
 8001344:	4b20      	ldr	r3, [pc, #128]	; (80013c8 <HAL_CAN_MspInit+0xb0>)
 8001346:	69db      	ldr	r3, [r3, #28]
 8001348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800134c:	60fb      	str	r3, [r7, #12]
 800134e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001350:	4b1d      	ldr	r3, [pc, #116]	; (80013c8 <HAL_CAN_MspInit+0xb0>)
 8001352:	699b      	ldr	r3, [r3, #24]
 8001354:	4a1c      	ldr	r2, [pc, #112]	; (80013c8 <HAL_CAN_MspInit+0xb0>)
 8001356:	f043 0304 	orr.w	r3, r3, #4
 800135a:	6193      	str	r3, [r2, #24]
 800135c:	4b1a      	ldr	r3, [pc, #104]	; (80013c8 <HAL_CAN_MspInit+0xb0>)
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	f003 0304 	and.w	r3, r3, #4
 8001364:	60bb      	str	r3, [r7, #8]
 8001366:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001368:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800136c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800136e:	2300      	movs	r3, #0
 8001370:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001376:	f107 0310 	add.w	r3, r7, #16
 800137a:	4619      	mov	r1, r3
 800137c:	4813      	ldr	r0, [pc, #76]	; (80013cc <HAL_CAN_MspInit+0xb4>)
 800137e:	f001 fefb 	bl	8003178 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001382:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001386:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001388:	2302      	movs	r3, #2
 800138a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800138c:	2303      	movs	r3, #3
 800138e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001390:	f107 0310 	add.w	r3, r7, #16
 8001394:	4619      	mov	r1, r3
 8001396:	480d      	ldr	r0, [pc, #52]	; (80013cc <HAL_CAN_MspInit+0xb4>)
 8001398:	f001 feee 	bl	8003178 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 4, 0);
 800139c:	2200      	movs	r2, #0
 800139e:	2104      	movs	r1, #4
 80013a0:	2013      	movs	r0, #19
 80013a2:	f001 fc1c 	bl	8002bde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 80013a6:	2013      	movs	r0, #19
 80013a8:	f001 fc35 	bl	8002c16 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 4, 0);
 80013ac:	2200      	movs	r2, #0
 80013ae:	2104      	movs	r1, #4
 80013b0:	2014      	movs	r0, #20
 80013b2:	f001 fc14 	bl	8002bde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80013b6:	2014      	movs	r0, #20
 80013b8:	f001 fc2d 	bl	8002c16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80013bc:	bf00      	nop
 80013be:	3720      	adds	r7, #32
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40006400 	.word	0x40006400
 80013c8:	40021000 	.word	0x40021000
 80013cc:	40010800 	.word	0x40010800

080013d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013d6:	4b0c      	ldr	r3, [pc, #48]	; (8001408 <MX_DMA_Init+0x38>)
 80013d8:	695b      	ldr	r3, [r3, #20]
 80013da:	4a0b      	ldr	r2, [pc, #44]	; (8001408 <MX_DMA_Init+0x38>)
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	6153      	str	r3, [r2, #20]
 80013e2:	4b09      	ldr	r3, [pc, #36]	; (8001408 <MX_DMA_Init+0x38>)
 80013e4:	695b      	ldr	r3, [r3, #20]
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	607b      	str	r3, [r7, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 2, 0);
 80013ee:	2200      	movs	r2, #0
 80013f0:	2102      	movs	r1, #2
 80013f2:	2010      	movs	r0, #16
 80013f4:	f001 fbf3 	bl	8002bde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80013f8:	2010      	movs	r0, #16
 80013fa:	f001 fc0c 	bl	8002c16 <HAL_NVIC_EnableIRQ>

}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40021000 	.word	0x40021000

0800140c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b088      	sub	sp, #32
 8001410:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001412:	f107 0310 	add.w	r3, r7, #16
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	605a      	str	r2, [r3, #4]
 800141c:	609a      	str	r2, [r3, #8]
 800141e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001420:	4b1e      	ldr	r3, [pc, #120]	; (800149c <MX_GPIO_Init+0x90>)
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	4a1d      	ldr	r2, [pc, #116]	; (800149c <MX_GPIO_Init+0x90>)
 8001426:	f043 0320 	orr.w	r3, r3, #32
 800142a:	6193      	str	r3, [r2, #24]
 800142c:	4b1b      	ldr	r3, [pc, #108]	; (800149c <MX_GPIO_Init+0x90>)
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	f003 0320 	and.w	r3, r3, #32
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001438:	4b18      	ldr	r3, [pc, #96]	; (800149c <MX_GPIO_Init+0x90>)
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	4a17      	ldr	r2, [pc, #92]	; (800149c <MX_GPIO_Init+0x90>)
 800143e:	f043 0304 	orr.w	r3, r3, #4
 8001442:	6193      	str	r3, [r2, #24]
 8001444:	4b15      	ldr	r3, [pc, #84]	; (800149c <MX_GPIO_Init+0x90>)
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	f003 0304 	and.w	r3, r3, #4
 800144c:	60bb      	str	r3, [r7, #8]
 800144e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001450:	4b12      	ldr	r3, [pc, #72]	; (800149c <MX_GPIO_Init+0x90>)
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	4a11      	ldr	r2, [pc, #68]	; (800149c <MX_GPIO_Init+0x90>)
 8001456:	f043 0308 	orr.w	r3, r3, #8
 800145a:	6193      	str	r3, [r2, #24]
 800145c:	4b0f      	ldr	r3, [pc, #60]	; (800149c <MX_GPIO_Init+0x90>)
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	f003 0308 	and.w	r3, r3, #8
 8001464:	607b      	str	r3, [r7, #4]
 8001466:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_10, GPIO_PIN_SET);
 8001468:	2201      	movs	r2, #1
 800146a:	f240 4102 	movw	r1, #1026	; 0x402
 800146e:	480c      	ldr	r0, [pc, #48]	; (80014a0 <MX_GPIO_Init+0x94>)
 8001470:	f002 f806 	bl	8003480 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB1 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_10;
 8001474:	f240 4302 	movw	r3, #1026	; 0x402
 8001478:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800147a:	2301      	movs	r3, #1
 800147c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001482:	2302      	movs	r3, #2
 8001484:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001486:	f107 0310 	add.w	r3, r7, #16
 800148a:	4619      	mov	r1, r3
 800148c:	4804      	ldr	r0, [pc, #16]	; (80014a0 <MX_GPIO_Init+0x94>)
 800148e:	f001 fe73 	bl	8003178 <HAL_GPIO_Init>

}
 8001492:	bf00      	nop
 8001494:	3720      	adds	r7, #32
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40021000 	.word	0x40021000
 80014a0:	40010c00 	.word	0x40010c00

080014a4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80014a8:	f3bf 8f4f 	dsb	sy
}
 80014ac:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80014ae:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <__NVIC_SystemReset+0x24>)
 80014b0:	68db      	ldr	r3, [r3, #12]
 80014b2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80014b6:	4904      	ldr	r1, [pc, #16]	; (80014c8 <__NVIC_SystemReset+0x24>)
 80014b8:	4b04      	ldr	r3, [pc, #16]	; (80014cc <__NVIC_SystemReset+0x28>)
 80014ba:	4313      	orrs	r3, r2
 80014bc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80014be:	f3bf 8f4f 	dsb	sy
}
 80014c2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80014c4:	bf00      	nop
 80014c6:	e7fd      	b.n	80014c4 <__NVIC_SystemReset+0x20>
 80014c8:	e000ed00 	.word	0xe000ed00
 80014cc:	05fa0004 	.word	0x05fa0004

080014d0 <HAL_UARTEx_RxEventCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	460b      	mov	r3, r1
 80014da:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART2){
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a2b      	ldr	r2, [pc, #172]	; (8001590 <HAL_UARTEx_RxEventCallback+0xc0>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d14f      	bne.n	8001586 <HAL_UARTEx_RxEventCallback+0xb6>
    oldPos = newPos; //keep track of the last position in the buffer
 80014e6:	4b2b      	ldr	r3, [pc, #172]	; (8001594 <HAL_UARTEx_RxEventCallback+0xc4>)
 80014e8:	881a      	ldrh	r2, [r3, #0]
 80014ea:	4b2b      	ldr	r3, [pc, #172]	; (8001598 <HAL_UARTEx_RxEventCallback+0xc8>)
 80014ec:	801a      	strh	r2, [r3, #0]
    if(oldPos + Size > DataBuffer_SIZE){ //if the buffer is full, parse it, then reset the buffer
 80014ee:	4b2a      	ldr	r3, [pc, #168]	; (8001598 <HAL_UARTEx_RxEventCallback+0xc8>)
 80014f0:	881b      	ldrh	r3, [r3, #0]
 80014f2:	461a      	mov	r2, r3
 80014f4:	887b      	ldrh	r3, [r7, #2]
 80014f6:	4413      	add	r3, r2
 80014f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014fc:	dd22      	ble.n	8001544 <HAL_UARTEx_RxEventCallback+0x74>

        uint16_t datatocopy = DataBuffer_SIZE-oldPos;  // find out how much space is left in the main buffer
 80014fe:	4b26      	ldr	r3, [pc, #152]	; (8001598 <HAL_UARTEx_RxEventCallback+0xc8>)
 8001500:	881b      	ldrh	r3, [r3, #0]
 8001502:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001506:	81fb      	strh	r3, [r7, #14]
        memcpy ((uint8_t *)DataBuffer+oldPos, RxBuffer, datatocopy);  // copy data in that remaining space
 8001508:	4b23      	ldr	r3, [pc, #140]	; (8001598 <HAL_UARTEx_RxEventCallback+0xc8>)
 800150a:	881b      	ldrh	r3, [r3, #0]
 800150c:	461a      	mov	r2, r3
 800150e:	4b23      	ldr	r3, [pc, #140]	; (800159c <HAL_UARTEx_RxEventCallback+0xcc>)
 8001510:	4413      	add	r3, r2
 8001512:	89fa      	ldrh	r2, [r7, #14]
 8001514:	4922      	ldr	r1, [pc, #136]	; (80015a0 <HAL_UARTEx_RxEventCallback+0xd0>)
 8001516:	4618      	mov	r0, r3
 8001518:	f006 fcf1 	bl	8007efe <memcpy>

        oldPos = 0;  // point to the start of the buffer
 800151c:	4b1e      	ldr	r3, [pc, #120]	; (8001598 <HAL_UARTEx_RxEventCallback+0xc8>)
 800151e:	2200      	movs	r2, #0
 8001520:	801a      	strh	r2, [r3, #0]
        memcpy ((uint8_t *)DataBuffer, (uint8_t *)RxBuffer+datatocopy, (Size-datatocopy));  // copy the remaining data
 8001522:	89fb      	ldrh	r3, [r7, #14]
 8001524:	4a1e      	ldr	r2, [pc, #120]	; (80015a0 <HAL_UARTEx_RxEventCallback+0xd0>)
 8001526:	1899      	adds	r1, r3, r2
 8001528:	887a      	ldrh	r2, [r7, #2]
 800152a:	89fb      	ldrh	r3, [r7, #14]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	461a      	mov	r2, r3
 8001530:	481a      	ldr	r0, [pc, #104]	; (800159c <HAL_UARTEx_RxEventCallback+0xcc>)
 8001532:	f006 fce4 	bl	8007efe <memcpy>
        newPos = (Size-datatocopy);  // update the position
 8001536:	887a      	ldrh	r2, [r7, #2]
 8001538:	89fb      	ldrh	r3, [r7, #14]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	b29a      	uxth	r2, r3
 800153e:	4b15      	ldr	r3, [pc, #84]	; (8001594 <HAL_UARTEx_RxEventCallback+0xc4>)
 8001540:	801a      	strh	r2, [r3, #0]
 8001542:	e010      	b.n	8001566 <HAL_UARTEx_RxEventCallback+0x96>
    }
    else{
        memcpy((uint8_t *)DataBuffer+oldPos, RxBuffer, Size); //copy received data to the buffer
 8001544:	4b14      	ldr	r3, [pc, #80]	; (8001598 <HAL_UARTEx_RxEventCallback+0xc8>)
 8001546:	881b      	ldrh	r3, [r3, #0]
 8001548:	461a      	mov	r2, r3
 800154a:	4b14      	ldr	r3, [pc, #80]	; (800159c <HAL_UARTEx_RxEventCallback+0xcc>)
 800154c:	4413      	add	r3, r2
 800154e:	887a      	ldrh	r2, [r7, #2]
 8001550:	4913      	ldr	r1, [pc, #76]	; (80015a0 <HAL_UARTEx_RxEventCallback+0xd0>)
 8001552:	4618      	mov	r0, r3
 8001554:	f006 fcd3 	bl	8007efe <memcpy>
        newPos = Size+oldPos; //update buffer position
 8001558:	4b0f      	ldr	r3, [pc, #60]	; (8001598 <HAL_UARTEx_RxEventCallback+0xc8>)
 800155a:	881a      	ldrh	r2, [r3, #0]
 800155c:	887b      	ldrh	r3, [r7, #2]
 800155e:	4413      	add	r3, r2
 8001560:	b29a      	uxth	r2, r3
 8001562:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <HAL_UARTEx_RxEventCallback+0xc4>)
 8001564:	801a      	strh	r2, [r3, #0]

    }
    HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *)RxBuffer, RxBuffer_SIZE); //re-enable the DMA interrupt
 8001566:	2240      	movs	r2, #64	; 0x40
 8001568:	490d      	ldr	r1, [pc, #52]	; (80015a0 <HAL_UARTEx_RxEventCallback+0xd0>)
 800156a:	480e      	ldr	r0, [pc, #56]	; (80015a4 <HAL_UARTEx_RxEventCallback+0xd4>)
 800156c:	f002 fe7a 	bl	8004264 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT); //disable the half transfer interrupt
 8001570:	4b0d      	ldr	r3, [pc, #52]	; (80015a8 <HAL_UARTEx_RxEventCallback+0xd8>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <HAL_UARTEx_RxEventCallback+0xd8>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f022 0204 	bic.w	r2, r2, #4
 800157e:	601a      	str	r2, [r3, #0]
    Signalready=1;
 8001580:	4b0a      	ldr	r3, [pc, #40]	; (80015ac <HAL_UARTEx_RxEventCallback+0xdc>)
 8001582:	2201      	movs	r2, #1
 8001584:	701a      	strb	r2, [r3, #0]
	}
}
 8001586:	bf00      	nop
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40004400 	.word	0x40004400
 8001594:	20000242 	.word	0x20000242
 8001598:	20000240 	.word	0x20000240
 800159c:	20000284 	.word	0x20000284
 80015a0:	20000244 	.word	0x20000244
 80015a4:	2000050c 	.word	0x2000050c
 80015a8:	20000554 	.word	0x20000554
 80015ac:	200004b0 	.word	0x200004b0

080015b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015b4:	f000 fba6 	bl	8001d04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015b8:	f000 f8aa 	bl	8001710 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015bc:	f7ff ff26 	bl	800140c <MX_GPIO_Init>
  MX_DMA_Init();
 80015c0:	f7ff ff06 	bl	80013d0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80015c4:	f000 fad2 	bl	8001b6c <MX_USART2_UART_Init>
  MX_CAN_Init();
 80015c8:	f7ff fe70 	bl	80012ac <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *)RxBuffer, RxBuffer_SIZE);
 80015cc:	2240      	movs	r2, #64	; 0x40
 80015ce:	4947      	ldr	r1, [pc, #284]	; (80016ec <main+0x13c>)
 80015d0:	4847      	ldr	r0, [pc, #284]	; (80016f0 <main+0x140>)
 80015d2:	f002 fe47 	bl	8004264 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80015d6:	4b47      	ldr	r3, [pc, #284]	; (80016f4 <main+0x144>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	4b45      	ldr	r3, [pc, #276]	; (80016f4 <main+0x144>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f022 0204 	bic.w	r2, r2, #4
 80015e4:	601a      	str	r2, [r3, #0]
  CAN_Config_filtering(0,0x502);
 80015e6:	f240 5102 	movw	r1, #1282	; 0x502
 80015ea:	2000      	movs	r0, #0
 80015ec:	f7ff fe12 	bl	8001214 <CAN_Config_filtering>
  // int Serialcnt = 0;
   gpsstate=GPS_INIT;
 80015f0:	4b41      	ldr	r3, [pc, #260]	; (80016f8 <main+0x148>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	701a      	strb	r2, [r3, #0]
   if(HAL_CAN_ActivateNotification(&hcan, CAN_IT_TX_MAILBOX_EMPTY|CAN_IT_RX_FIFO0_MSG_PENDING)!=HAL_OK){
 80015f6:	2103      	movs	r1, #3
 80015f8:	4840      	ldr	r0, [pc, #256]	; (80016fc <main+0x14c>)
 80015fa:	f000 ffd1 	bl	80025a0 <HAL_CAN_ActivateNotification>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d013      	beq.n	800162c <main+0x7c>

	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,GPIO_PIN_RESET);
 8001604:	2200      	movs	r2, #0
 8001606:	2108      	movs	r1, #8
 8001608:	483d      	ldr	r0, [pc, #244]	; (8001700 <main+0x150>)
 800160a:	f001 ff39 	bl	8003480 <HAL_GPIO_WritePin>
	   					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,GPIO_PIN_SET);
 800160e:	2201      	movs	r2, #1
 8001610:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001614:	483a      	ldr	r0, [pc, #232]	; (8001700 <main+0x150>)
 8001616:	f001 ff33 	bl	8003480 <HAL_GPIO_WritePin>
	   					HAL_Delay(2000);
 800161a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800161e:	f000 fba3 	bl	8001d68 <HAL_Delay>
  	 HAL_CAN_ResetError(&hcan);
 8001622:	4836      	ldr	r0, [pc, #216]	; (80016fc <main+0x14c>)
 8001624:	f001 fa04 	bl	8002a30 <HAL_CAN_ResetError>
  	NVIC_SystemReset();
 8001628:	f7ff ff3c 	bl	80014a4 <__NVIC_SystemReset>
   }
    if(HAL_CAN_Start(&hcan)!=HAL_OK){
 800162c:	4833      	ldr	r0, [pc, #204]	; (80016fc <main+0x14c>)
 800162e:	f000 fd83 	bl	8002138 <HAL_CAN_Start>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d013      	beq.n	8001660 <main+0xb0>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,GPIO_PIN_RESET);
 8001638:	2200      	movs	r2, #0
 800163a:	2108      	movs	r1, #8
 800163c:	4830      	ldr	r0, [pc, #192]	; (8001700 <main+0x150>)
 800163e:	f001 ff1f 	bl	8003480 <HAL_GPIO_WritePin>
    		   					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,GPIO_PIN_SET);
 8001642:	2201      	movs	r2, #1
 8001644:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001648:	482d      	ldr	r0, [pc, #180]	; (8001700 <main+0x150>)
 800164a:	f001 ff19 	bl	8003480 <HAL_GPIO_WritePin>
    		   					HAL_Delay(2000);
 800164e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001652:	f000 fb89 	bl	8001d68 <HAL_Delay>
  	  HAL_CAN_ResetError(&hcan);
 8001656:	4829      	ldr	r0, [pc, #164]	; (80016fc <main+0x14c>)
 8001658:	f001 f9ea 	bl	8002a30 <HAL_CAN_ResetError>
  	  NVIC_SystemReset();
 800165c:	f7ff ff22 	bl	80014a4 <__NVIC_SystemReset>
   } else {
	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1,GPIO_PIN_RESET);
 8001660:	2200      	movs	r2, #0
 8001662:	2102      	movs	r1, #2
 8001664:	4826      	ldr	r0, [pc, #152]	; (8001700 <main+0x150>)
 8001666:	f001 ff0b 	bl	8003480 <HAL_GPIO_WritePin>
	   gpsstate=GPS_WAIT_SIGNAL;
 800166a:	4b23      	ldr	r3, [pc, #140]	; (80016f8 <main+0x148>)
 800166c:	2201      	movs	r2, #1
 800166e:	701a      	strb	r2, [r3, #0]
   }
    memset(Data,0x55,8);
 8001670:	2208      	movs	r2, #8
 8001672:	2155      	movs	r1, #85	; 0x55
 8001674:	4823      	ldr	r0, [pc, #140]	; (8001704 <main+0x154>)
 8001676:	f006 fb18 	bl	8007caa <memset>
    memset(Lat,0,4);
 800167a:	2204      	movs	r2, #4
 800167c:	2100      	movs	r1, #0
 800167e:	4822      	ldr	r0, [pc, #136]	; (8001708 <main+0x158>)
 8001680:	f006 fb13 	bl	8007caa <memset>
    memset(Long,0,4);
 8001684:	2204      	movs	r2, #4
 8001686:	2100      	movs	r1, #0
 8001688:	4820      	ldr	r0, [pc, #128]	; (800170c <main+0x15c>)
 800168a:	f006 fb0e 	bl	8007caa <memset>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	     switch(gpsstate){
 800168e:	4b1a      	ldr	r3, [pc, #104]	; (80016f8 <main+0x148>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	3b01      	subs	r3, #1
 8001694:	2b06      	cmp	r3, #6
 8001696:	d8fa      	bhi.n	800168e <main+0xde>
 8001698:	a201      	add	r2, pc, #4	; (adr r2, 80016a0 <main+0xf0>)
 800169a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800169e:	bf00      	nop
 80016a0:	080016bd 	.word	0x080016bd
 80016a4:	080016c3 	.word	0x080016c3
 80016a8:	080016c9 	.word	0x080016c9
 80016ac:	080016db 	.word	0x080016db
 80016b0:	080016e1 	.word	0x080016e1
 80016b4:	080016cf 	.word	0x080016cf
 80016b8:	080016d5 	.word	0x080016d5
	     case GPS_WAIT_SIGNAL:
	    	 gps_wait_signal();
 80016bc:	f003 fce4 	bl	8005088 <gps_wait_signal>
	    	 break;
 80016c0:	e012      	b.n	80016e8 <main+0x138>
	     case GPS_GETDATA:
	    	 gps_getdata();
 80016c2:	f003 fcf3 	bl	80050ac <gps_getdata>
	     	    	 break;
 80016c6:	e00f      	b.n	80016e8 <main+0x138>
	     case GPS_CHECK_SIGNAL:
	    	 gps_check_signal();
 80016c8:	f003 fd02 	bl	80050d0 <gps_check_signal>
	     	    	 break;
 80016cc:	e00c      	b.n	80016e8 <main+0x138>
	     case GPS_SENDDATA:
	    	 gps_send_data();
 80016ce:	f003 fe7b 	bl	80053c8 <gps_send_data>
	     	    	 break;
 80016d2:	e009      	b.n	80016e8 <main+0x138>
	     case GPS_SENDERRORDATA:
	    	 send_error_signal();
 80016d4:	f003 fe28 	bl	8005328 <send_error_signal>
	    	     	 break;
 80016d8:	e006      	b.n	80016e8 <main+0x138>
	     case GPS_RECOVERY:
	    	 gps_recovery();
 80016da:	f003 fd73 	bl	80051c4 <gps_recovery>
	     	    	 break;
 80016de:	e003      	b.n	80016e8 <main+0x138>
	     case GPS_PROCESS:
	    	 gps_process();
 80016e0:	f003 fde4 	bl	80052ac <gps_process>
	     	    	 break;
 80016e4:	bf00      	nop
 80016e6:	e7d2      	b.n	800168e <main+0xde>
	     switch(gpsstate){
 80016e8:	e7d1      	b.n	800168e <main+0xde>
 80016ea:	bf00      	nop
 80016ec:	20000244 	.word	0x20000244
 80016f0:	2000050c 	.word	0x2000050c
 80016f4:	20000554 	.word	0x20000554
 80016f8:	200004b1 	.word	0x200004b1
 80016fc:	20000218 	.word	0x20000218
 8001700:	40010c00 	.word	0x40010c00
 8001704:	200004b8 	.word	0x200004b8
 8001708:	2000059c 	.word	0x2000059c
 800170c:	200005a0 	.word	0x200005a0

08001710 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b090      	sub	sp, #64	; 0x40
 8001714:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001716:	f107 0318 	add.w	r3, r7, #24
 800171a:	2228      	movs	r2, #40	; 0x28
 800171c:	2100      	movs	r1, #0
 800171e:	4618      	mov	r0, r3
 8001720:	f006 fac3 	bl	8007caa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001724:	1d3b      	adds	r3, r7, #4
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	605a      	str	r2, [r3, #4]
 800172c:	609a      	str	r2, [r3, #8]
 800172e:	60da      	str	r2, [r3, #12]
 8001730:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001732:	2301      	movs	r3, #1
 8001734:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001736:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800173a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800173c:	2300      	movs	r3, #0
 800173e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001740:	2301      	movs	r3, #1
 8001742:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001744:	2302      	movs	r3, #2
 8001746:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001748:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800174c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800174e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001752:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001754:	f107 0318 	add.w	r3, r7, #24
 8001758:	4618      	mov	r0, r3
 800175a:	f001 fea9 	bl	80034b0 <HAL_RCC_OscConfig>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001764:	f000 f82c 	bl	80017c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001768:	230f      	movs	r3, #15
 800176a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800176c:	2302      	movs	r3, #2
 800176e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001770:	2300      	movs	r3, #0
 8001772:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001774:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001778:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800177a:	2300      	movs	r3, #0
 800177c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800177e:	1d3b      	adds	r3, r7, #4
 8001780:	2102      	movs	r1, #2
 8001782:	4618      	mov	r0, r3
 8001784:	f002 f916 	bl	80039b4 <HAL_RCC_ClockConfig>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800178e:	f000 f817 	bl	80017c0 <Error_Handler>
  }
}
 8001792:	bf00      	nop
 8001794:	3740      	adds	r7, #64	; 0x40
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
	...

0800179c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a04      	ldr	r2, [pc, #16]	; (80017bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d101      	bne.n	80017b2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80017ae:	f000 fabf 	bl	8001d30 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80017b2:	bf00      	nop
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40000800 	.word	0x40000800

080017c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80017c4:	b672      	cpsid	i
}
 80017c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017c8:	e7fe      	b.n	80017c8 <Error_Handler+0x8>
	...

080017cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017d2:	4b15      	ldr	r3, [pc, #84]	; (8001828 <HAL_MspInit+0x5c>)
 80017d4:	699b      	ldr	r3, [r3, #24]
 80017d6:	4a14      	ldr	r2, [pc, #80]	; (8001828 <HAL_MspInit+0x5c>)
 80017d8:	f043 0301 	orr.w	r3, r3, #1
 80017dc:	6193      	str	r3, [r2, #24]
 80017de:	4b12      	ldr	r3, [pc, #72]	; (8001828 <HAL_MspInit+0x5c>)
 80017e0:	699b      	ldr	r3, [r3, #24]
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	60bb      	str	r3, [r7, #8]
 80017e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ea:	4b0f      	ldr	r3, [pc, #60]	; (8001828 <HAL_MspInit+0x5c>)
 80017ec:	69db      	ldr	r3, [r3, #28]
 80017ee:	4a0e      	ldr	r2, [pc, #56]	; (8001828 <HAL_MspInit+0x5c>)
 80017f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017f4:	61d3      	str	r3, [r2, #28]
 80017f6:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <HAL_MspInit+0x5c>)
 80017f8:	69db      	ldr	r3, [r3, #28]
 80017fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017fe:	607b      	str	r3, [r7, #4]
 8001800:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001802:	4b0a      	ldr	r3, [pc, #40]	; (800182c <HAL_MspInit+0x60>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	4a04      	ldr	r2, [pc, #16]	; (800182c <HAL_MspInit+0x60>)
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800181e:	bf00      	nop
 8001820:	3714      	adds	r7, #20
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr
 8001828:	40021000 	.word	0x40021000
 800182c:	40010000 	.word	0x40010000

08001830 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08e      	sub	sp, #56	; 0x38
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001838:	2300      	movs	r3, #0
 800183a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800183c:	2300      	movs	r3, #0
 800183e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001840:	2300      	movs	r3, #0
 8001842:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001846:	4b34      	ldr	r3, [pc, #208]	; (8001918 <HAL_InitTick+0xe8>)
 8001848:	69db      	ldr	r3, [r3, #28]
 800184a:	4a33      	ldr	r2, [pc, #204]	; (8001918 <HAL_InitTick+0xe8>)
 800184c:	f043 0304 	orr.w	r3, r3, #4
 8001850:	61d3      	str	r3, [r2, #28]
 8001852:	4b31      	ldr	r3, [pc, #196]	; (8001918 <HAL_InitTick+0xe8>)
 8001854:	69db      	ldr	r3, [r3, #28]
 8001856:	f003 0304 	and.w	r3, r3, #4
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800185e:	f107 0210 	add.w	r2, r7, #16
 8001862:	f107 0314 	add.w	r3, r7, #20
 8001866:	4611      	mov	r1, r2
 8001868:	4618      	mov	r0, r3
 800186a:	f002 fa13 	bl	8003c94 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800186e:	6a3b      	ldr	r3, [r7, #32]
 8001870:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001874:	2b00      	cmp	r3, #0
 8001876:	d103      	bne.n	8001880 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001878:	f002 f9e4 	bl	8003c44 <HAL_RCC_GetPCLK1Freq>
 800187c:	6378      	str	r0, [r7, #52]	; 0x34
 800187e:	e004      	b.n	800188a <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001880:	f002 f9e0 	bl	8003c44 <HAL_RCC_GetPCLK1Freq>
 8001884:	4603      	mov	r3, r0
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800188a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800188c:	4a23      	ldr	r2, [pc, #140]	; (800191c <HAL_InitTick+0xec>)
 800188e:	fba2 2303 	umull	r2, r3, r2, r3
 8001892:	0c9b      	lsrs	r3, r3, #18
 8001894:	3b01      	subs	r3, #1
 8001896:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001898:	4b21      	ldr	r3, [pc, #132]	; (8001920 <HAL_InitTick+0xf0>)
 800189a:	4a22      	ldr	r2, [pc, #136]	; (8001924 <HAL_InitTick+0xf4>)
 800189c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800189e:	4b20      	ldr	r3, [pc, #128]	; (8001920 <HAL_InitTick+0xf0>)
 80018a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018a4:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80018a6:	4a1e      	ldr	r2, [pc, #120]	; (8001920 <HAL_InitTick+0xf0>)
 80018a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018aa:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80018ac:	4b1c      	ldr	r3, [pc, #112]	; (8001920 <HAL_InitTick+0xf0>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018b2:	4b1b      	ldr	r3, [pc, #108]	; (8001920 <HAL_InitTick+0xf0>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018b8:	4b19      	ldr	r3, [pc, #100]	; (8001920 <HAL_InitTick+0xf0>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80018be:	4818      	ldr	r0, [pc, #96]	; (8001920 <HAL_InitTick+0xf0>)
 80018c0:	f002 fa36 	bl	8003d30 <HAL_TIM_Base_Init>
 80018c4:	4603      	mov	r3, r0
 80018c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80018ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d11b      	bne.n	800190a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80018d2:	4813      	ldr	r0, [pc, #76]	; (8001920 <HAL_InitTick+0xf0>)
 80018d4:	f002 fa84 	bl	8003de0 <HAL_TIM_Base_Start_IT>
 80018d8:	4603      	mov	r3, r0
 80018da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80018de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d111      	bne.n	800190a <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80018e6:	201e      	movs	r0, #30
 80018e8:	f001 f995 	bl	8002c16 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2b0f      	cmp	r3, #15
 80018f0:	d808      	bhi.n	8001904 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80018f2:	2200      	movs	r2, #0
 80018f4:	6879      	ldr	r1, [r7, #4]
 80018f6:	201e      	movs	r0, #30
 80018f8:	f001 f971 	bl	8002bde <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018fc:	4a0a      	ldr	r2, [pc, #40]	; (8001928 <HAL_InitTick+0xf8>)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6013      	str	r3, [r2, #0]
 8001902:	e002      	b.n	800190a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800190a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800190e:	4618      	mov	r0, r3
 8001910:	3738      	adds	r7, #56	; 0x38
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40021000 	.word	0x40021000
 800191c:	431bde83 	.word	0x431bde83
 8001920:	200004c0 	.word	0x200004c0
 8001924:	40000800 	.word	0x40000800
 8001928:	20000004 	.word	0x20000004

0800192c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001930:	e7fe      	b.n	8001930 <NMI_Handler+0x4>

08001932 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001932:	b480      	push	{r7}
 8001934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001936:	e7fe      	b.n	8001936 <HardFault_Handler+0x4>

08001938 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800193c:	e7fe      	b.n	800193c <MemManage_Handler+0x4>

0800193e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800193e:	b480      	push	{r7}
 8001940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001942:	e7fe      	b.n	8001942 <BusFault_Handler+0x4>

08001944 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001948:	e7fe      	b.n	8001948 <UsageFault_Handler+0x4>

0800194a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800194a:	b480      	push	{r7}
 800194c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	46bd      	mov	sp, r7
 8001952:	bc80      	pop	{r7}
 8001954:	4770      	bx	lr

08001956 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001956:	b480      	push	{r7}
 8001958:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800195a:	bf00      	nop
 800195c:	46bd      	mov	sp, r7
 800195e:	bc80      	pop	{r7}
 8001960:	4770      	bx	lr

08001962 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001962:	b480      	push	{r7}
 8001964:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	46bd      	mov	sp, r7
 800196a:	bc80      	pop	{r7}
 800196c:	4770      	bx	lr

0800196e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800196e:	b480      	push	{r7}
 8001970:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	46bd      	mov	sp, r7
 8001976:	bc80      	pop	{r7}
 8001978:	4770      	bx	lr
	...

0800197c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001980:	4802      	ldr	r0, [pc, #8]	; (800198c <DMA1_Channel6_IRQHandler+0x10>)
 8001982:	f001 fac5 	bl	8002f10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	20000554 	.word	0x20000554

08001990 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001994:	4802      	ldr	r0, [pc, #8]	; (80019a0 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8001996:	f000 fe28 	bl	80025ea <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	20000218 	.word	0x20000218

080019a4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80019a8:	4802      	ldr	r0, [pc, #8]	; (80019b4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80019aa:	f000 fe1e 	bl	80025ea <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20000218 	.word	0x20000218

080019b8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80019bc:	4802      	ldr	r0, [pc, #8]	; (80019c8 <TIM4_IRQHandler+0x10>)
 80019be:	f002 fa61 	bl	8003e84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	200004c0 	.word	0x200004c0

080019cc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80019d0:	4802      	ldr	r0, [pc, #8]	; (80019dc <USART2_IRQHandler+0x10>)
 80019d2:	f002 fca5 	bl	8004320 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	2000050c 	.word	0x2000050c

080019e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  return 1;
 80019e4:	2301      	movs	r3, #1
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bc80      	pop	{r7}
 80019ec:	4770      	bx	lr

080019ee <_kill>:

int _kill(int pid, int sig)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b082      	sub	sp, #8
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
 80019f6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019f8:	f006 fa3e 	bl	8007e78 <__errno>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2216      	movs	r2, #22
 8001a00:	601a      	str	r2, [r3, #0]
  return -1;
 8001a02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <_exit>:

void _exit (int status)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b082      	sub	sp, #8
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a16:	f04f 31ff 	mov.w	r1, #4294967295
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f7ff ffe7 	bl	80019ee <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a20:	e7fe      	b.n	8001a20 <_exit+0x12>

08001a22 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b086      	sub	sp, #24
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	60f8      	str	r0, [r7, #12]
 8001a2a:	60b9      	str	r1, [r7, #8]
 8001a2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a2e:	2300      	movs	r3, #0
 8001a30:	617b      	str	r3, [r7, #20]
 8001a32:	e00a      	b.n	8001a4a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a34:	f3af 8000 	nop.w
 8001a38:	4601      	mov	r1, r0
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	1c5a      	adds	r2, r3, #1
 8001a3e:	60ba      	str	r2, [r7, #8]
 8001a40:	b2ca      	uxtb	r2, r1
 8001a42:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	3301      	adds	r3, #1
 8001a48:	617b      	str	r3, [r7, #20]
 8001a4a:	697a      	ldr	r2, [r7, #20]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	dbf0      	blt.n	8001a34 <_read+0x12>
  }

  return len;
 8001a52:	687b      	ldr	r3, [r7, #4]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3718      	adds	r7, #24
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]
 8001a6c:	e009      	b.n	8001a82 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	1c5a      	adds	r2, r3, #1
 8001a72:	60ba      	str	r2, [r7, #8]
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	617b      	str	r3, [r7, #20]
 8001a82:	697a      	ldr	r2, [r7, #20]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	dbf1      	blt.n	8001a6e <_write+0x12>
  }
  return len;
 8001a8a:	687b      	ldr	r3, [r7, #4]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3718      	adds	r7, #24
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <_close>:

int _close(int file)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bc80      	pop	{r7}
 8001aa8:	4770      	bx	lr

08001aaa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b083      	sub	sp, #12
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
 8001ab2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001aba:	605a      	str	r2, [r3, #4]
  return 0;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bc80      	pop	{r7}
 8001ac6:	4770      	bx	lr

08001ac8 <_isatty>:

int _isatty(int file)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ad0:	2301      	movs	r3, #1
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bc80      	pop	{r7}
 8001ada:	4770      	bx	lr

08001adc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3714      	adds	r7, #20
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bc80      	pop	{r7}
 8001af2:	4770      	bx	lr

08001af4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001afc:	4a14      	ldr	r2, [pc, #80]	; (8001b50 <_sbrk+0x5c>)
 8001afe:	4b15      	ldr	r3, [pc, #84]	; (8001b54 <_sbrk+0x60>)
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b08:	4b13      	ldr	r3, [pc, #76]	; (8001b58 <_sbrk+0x64>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d102      	bne.n	8001b16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b10:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <_sbrk+0x64>)
 8001b12:	4a12      	ldr	r2, [pc, #72]	; (8001b5c <_sbrk+0x68>)
 8001b14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b16:	4b10      	ldr	r3, [pc, #64]	; (8001b58 <_sbrk+0x64>)
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d207      	bcs.n	8001b34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b24:	f006 f9a8 	bl	8007e78 <__errno>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	220c      	movs	r2, #12
 8001b2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b32:	e009      	b.n	8001b48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b34:	4b08      	ldr	r3, [pc, #32]	; (8001b58 <_sbrk+0x64>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b3a:	4b07      	ldr	r3, [pc, #28]	; (8001b58 <_sbrk+0x64>)
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4413      	add	r3, r2
 8001b42:	4a05      	ldr	r2, [pc, #20]	; (8001b58 <_sbrk+0x64>)
 8001b44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b46:	68fb      	ldr	r3, [r7, #12]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3718      	adds	r7, #24
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	20005000 	.word	0x20005000
 8001b54:	00000400 	.word	0x00000400
 8001b58:	20000508 	.word	0x20000508
 8001b5c:	20000730 	.word	0x20000730

08001b60 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b64:	bf00      	nop
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bc80      	pop	{r7}
 8001b6a:	4770      	bx	lr

08001b6c <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b70:	4b11      	ldr	r3, [pc, #68]	; (8001bb8 <MX_USART2_UART_Init+0x4c>)
 8001b72:	4a12      	ldr	r2, [pc, #72]	; (8001bbc <MX_USART2_UART_Init+0x50>)
 8001b74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b76:	4b10      	ldr	r3, [pc, #64]	; (8001bb8 <MX_USART2_UART_Init+0x4c>)
 8001b78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b7e:	4b0e      	ldr	r3, [pc, #56]	; (8001bb8 <MX_USART2_UART_Init+0x4c>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b84:	4b0c      	ldr	r3, [pc, #48]	; (8001bb8 <MX_USART2_UART_Init+0x4c>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b8a:	4b0b      	ldr	r3, [pc, #44]	; (8001bb8 <MX_USART2_UART_Init+0x4c>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b90:	4b09      	ldr	r3, [pc, #36]	; (8001bb8 <MX_USART2_UART_Init+0x4c>)
 8001b92:	220c      	movs	r2, #12
 8001b94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b96:	4b08      	ldr	r3, [pc, #32]	; (8001bb8 <MX_USART2_UART_Init+0x4c>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b9c:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <MX_USART2_UART_Init+0x4c>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ba2:	4805      	ldr	r0, [pc, #20]	; (8001bb8 <MX_USART2_UART_Init+0x4c>)
 8001ba4:	f002 fb0e 	bl	80041c4 <HAL_UART_Init>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001bae:	f7ff fe07 	bl	80017c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	2000050c 	.word	0x2000050c
 8001bbc:	40004400 	.word	0x40004400

08001bc0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b088      	sub	sp, #32
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc8:	f107 0310 	add.w	r3, r7, #16
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	605a      	str	r2, [r3, #4]
 8001bd2:	609a      	str	r2, [r3, #8]
 8001bd4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a32      	ldr	r2, [pc, #200]	; (8001ca4 <HAL_UART_MspInit+0xe4>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d15d      	bne.n	8001c9c <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001be0:	4b31      	ldr	r3, [pc, #196]	; (8001ca8 <HAL_UART_MspInit+0xe8>)
 8001be2:	69db      	ldr	r3, [r3, #28]
 8001be4:	4a30      	ldr	r2, [pc, #192]	; (8001ca8 <HAL_UART_MspInit+0xe8>)
 8001be6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bea:	61d3      	str	r3, [r2, #28]
 8001bec:	4b2e      	ldr	r3, [pc, #184]	; (8001ca8 <HAL_UART_MspInit+0xe8>)
 8001bee:	69db      	ldr	r3, [r3, #28]
 8001bf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf8:	4b2b      	ldr	r3, [pc, #172]	; (8001ca8 <HAL_UART_MspInit+0xe8>)
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	4a2a      	ldr	r2, [pc, #168]	; (8001ca8 <HAL_UART_MspInit+0xe8>)
 8001bfe:	f043 0304 	orr.w	r3, r3, #4
 8001c02:	6193      	str	r3, [r2, #24]
 8001c04:	4b28      	ldr	r3, [pc, #160]	; (8001ca8 <HAL_UART_MspInit+0xe8>)
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	f003 0304 	and.w	r3, r3, #4
 8001c0c:	60bb      	str	r3, [r7, #8]
 8001c0e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c10:	2304      	movs	r3, #4
 8001c12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c14:	2302      	movs	r3, #2
 8001c16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1c:	f107 0310 	add.w	r3, r7, #16
 8001c20:	4619      	mov	r1, r3
 8001c22:	4822      	ldr	r0, [pc, #136]	; (8001cac <HAL_UART_MspInit+0xec>)
 8001c24:	f001 faa8 	bl	8003178 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c28:	2308      	movs	r3, #8
 8001c2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c30:	2300      	movs	r3, #0
 8001c32:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c34:	f107 0310 	add.w	r3, r7, #16
 8001c38:	4619      	mov	r1, r3
 8001c3a:	481c      	ldr	r0, [pc, #112]	; (8001cac <HAL_UART_MspInit+0xec>)
 8001c3c:	f001 fa9c 	bl	8003178 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001c40:	4b1b      	ldr	r3, [pc, #108]	; (8001cb0 <HAL_UART_MspInit+0xf0>)
 8001c42:	4a1c      	ldr	r2, [pc, #112]	; (8001cb4 <HAL_UART_MspInit+0xf4>)
 8001c44:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c46:	4b1a      	ldr	r3, [pc, #104]	; (8001cb0 <HAL_UART_MspInit+0xf0>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c4c:	4b18      	ldr	r3, [pc, #96]	; (8001cb0 <HAL_UART_MspInit+0xf0>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c52:	4b17      	ldr	r3, [pc, #92]	; (8001cb0 <HAL_UART_MspInit+0xf0>)
 8001c54:	2280      	movs	r2, #128	; 0x80
 8001c56:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c58:	4b15      	ldr	r3, [pc, #84]	; (8001cb0 <HAL_UART_MspInit+0xf0>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c5e:	4b14      	ldr	r3, [pc, #80]	; (8001cb0 <HAL_UART_MspInit+0xf0>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001c64:	4b12      	ldr	r3, [pc, #72]	; (8001cb0 <HAL_UART_MspInit+0xf0>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c6a:	4b11      	ldr	r3, [pc, #68]	; (8001cb0 <HAL_UART_MspInit+0xf0>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001c70:	480f      	ldr	r0, [pc, #60]	; (8001cb0 <HAL_UART_MspInit+0xf0>)
 8001c72:	f000 ffdf 	bl	8002c34 <HAL_DMA_Init>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8001c7c:	f7ff fda0 	bl	80017c0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	4a0b      	ldr	r2, [pc, #44]	; (8001cb0 <HAL_UART_MspInit+0xf0>)
 8001c84:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c86:	4a0a      	ldr	r2, [pc, #40]	; (8001cb0 <HAL_UART_MspInit+0xf0>)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	2106      	movs	r1, #6
 8001c90:	2026      	movs	r0, #38	; 0x26
 8001c92:	f000 ffa4 	bl	8002bde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c96:	2026      	movs	r0, #38	; 0x26
 8001c98:	f000 ffbd 	bl	8002c16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001c9c:	bf00      	nop
 8001c9e:	3720      	adds	r7, #32
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	40004400 	.word	0x40004400
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	40010800 	.word	0x40010800
 8001cb0:	20000554 	.word	0x20000554
 8001cb4:	4002006c 	.word	0x4002006c

08001cb8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001cb8:	f7ff ff52 	bl	8001b60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cbc:	480b      	ldr	r0, [pc, #44]	; (8001cec <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001cbe:	490c      	ldr	r1, [pc, #48]	; (8001cf0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001cc0:	4a0c      	ldr	r2, [pc, #48]	; (8001cf4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001cc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cc4:	e002      	b.n	8001ccc <LoopCopyDataInit>

08001cc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cca:	3304      	adds	r3, #4

08001ccc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ccc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cd0:	d3f9      	bcc.n	8001cc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cd2:	4a09      	ldr	r2, [pc, #36]	; (8001cf8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001cd4:	4c09      	ldr	r4, [pc, #36]	; (8001cfc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cd8:	e001      	b.n	8001cde <LoopFillZerobss>

08001cda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cdc:	3204      	adds	r2, #4

08001cde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ce0:	d3fb      	bcc.n	8001cda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ce2:	f006 f8cf 	bl	8007e84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ce6:	f7ff fc63 	bl	80015b0 <main>
  bx lr
 8001cea:	4770      	bx	lr
  ldr r0, =_sdata
 8001cec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cf0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001cf4:	0800ac38 	.word	0x0800ac38
  ldr r2, =_sbss
 8001cf8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001cfc:	2000072c 	.word	0x2000072c

08001d00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d00:	e7fe      	b.n	8001d00 <ADC1_2_IRQHandler>
	...

08001d04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d08:	4b08      	ldr	r3, [pc, #32]	; (8001d2c <HAL_Init+0x28>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a07      	ldr	r2, [pc, #28]	; (8001d2c <HAL_Init+0x28>)
 8001d0e:	f043 0310 	orr.w	r3, r3, #16
 8001d12:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d14:	2003      	movs	r0, #3
 8001d16:	f000 ff57 	bl	8002bc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d1a:	200f      	movs	r0, #15
 8001d1c:	f7ff fd88 	bl	8001830 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d20:	f7ff fd54 	bl	80017cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40022000 	.word	0x40022000

08001d30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d34:	4b05      	ldr	r3, [pc, #20]	; (8001d4c <HAL_IncTick+0x1c>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	461a      	mov	r2, r3
 8001d3a:	4b05      	ldr	r3, [pc, #20]	; (8001d50 <HAL_IncTick+0x20>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4413      	add	r3, r2
 8001d40:	4a03      	ldr	r2, [pc, #12]	; (8001d50 <HAL_IncTick+0x20>)
 8001d42:	6013      	str	r3, [r2, #0]
}
 8001d44:	bf00      	nop
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bc80      	pop	{r7}
 8001d4a:	4770      	bx	lr
 8001d4c:	20000008 	.word	0x20000008
 8001d50:	20000598 	.word	0x20000598

08001d54 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  return uwTick;
 8001d58:	4b02      	ldr	r3, [pc, #8]	; (8001d64 <HAL_GetTick+0x10>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bc80      	pop	{r7}
 8001d62:	4770      	bx	lr
 8001d64:	20000598 	.word	0x20000598

08001d68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d70:	f7ff fff0 	bl	8001d54 <HAL_GetTick>
 8001d74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d80:	d005      	beq.n	8001d8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d82:	4b0a      	ldr	r3, [pc, #40]	; (8001dac <HAL_Delay+0x44>)
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	461a      	mov	r2, r3
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d8e:	bf00      	nop
 8001d90:	f7ff ffe0 	bl	8001d54 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	68fa      	ldr	r2, [r7, #12]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d8f7      	bhi.n	8001d90 <HAL_Delay+0x28>
  {
  }
}
 8001da0:	bf00      	nop
 8001da2:	bf00      	nop
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	20000008 	.word	0x20000008

08001db0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d101      	bne.n	8001dc2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e0ed      	b.n	8001f9e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d102      	bne.n	8001dd4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f7ff faa2 	bl	8001318 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f042 0201 	orr.w	r2, r2, #1
 8001de2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001de4:	f7ff ffb6 	bl	8001d54 <HAL_GetTick>
 8001de8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001dea:	e012      	b.n	8001e12 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001dec:	f7ff ffb2 	bl	8001d54 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b0a      	cmp	r3, #10
 8001df8:	d90b      	bls.n	8001e12 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2205      	movs	r2, #5
 8001e0a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e0c5      	b.n	8001f9e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d0e5      	beq.n	8001dec <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f022 0202 	bic.w	r2, r2, #2
 8001e2e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e30:	f7ff ff90 	bl	8001d54 <HAL_GetTick>
 8001e34:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001e36:	e012      	b.n	8001e5e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e38:	f7ff ff8c 	bl	8001d54 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b0a      	cmp	r3, #10
 8001e44:	d90b      	bls.n	8001e5e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2205      	movs	r2, #5
 8001e56:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e09f      	b.n	8001f9e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f003 0302 	and.w	r3, r3, #2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d1e5      	bne.n	8001e38 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	7e1b      	ldrb	r3, [r3, #24]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d108      	bne.n	8001e86 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	e007      	b.n	8001e96 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e94:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	7e5b      	ldrb	r3, [r3, #25]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d108      	bne.n	8001eb0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001eac:	601a      	str	r2, [r3, #0]
 8001eae:	e007      	b.n	8001ec0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ebe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	7e9b      	ldrb	r3, [r3, #26]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d108      	bne.n	8001eda <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f042 0220 	orr.w	r2, r2, #32
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	e007      	b.n	8001eea <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 0220 	bic.w	r2, r2, #32
 8001ee8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	7edb      	ldrb	r3, [r3, #27]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d108      	bne.n	8001f04 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f022 0210 	bic.w	r2, r2, #16
 8001f00:	601a      	str	r2, [r3, #0]
 8001f02:	e007      	b.n	8001f14 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f042 0210 	orr.w	r2, r2, #16
 8001f12:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	7f1b      	ldrb	r3, [r3, #28]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d108      	bne.n	8001f2e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f042 0208 	orr.w	r2, r2, #8
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	e007      	b.n	8001f3e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f022 0208 	bic.w	r2, r2, #8
 8001f3c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	7f5b      	ldrb	r3, [r3, #29]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d108      	bne.n	8001f58 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f042 0204 	orr.w	r2, r2, #4
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	e007      	b.n	8001f68 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f022 0204 	bic.w	r2, r2, #4
 8001f66:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689a      	ldr	r2, [r3, #8]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	431a      	orrs	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	431a      	orrs	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	695b      	ldr	r3, [r3, #20]
 8001f7c:	ea42 0103 	orr.w	r1, r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	1e5a      	subs	r2, r3, #1
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	430a      	orrs	r2, r1
 8001f8c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3710      	adds	r7, #16
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	b087      	sub	sp, #28
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
 8001fae:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fbc:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001fbe:	7cfb      	ldrb	r3, [r7, #19]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d003      	beq.n	8001fcc <HAL_CAN_ConfigFilter+0x26>
 8001fc4:	7cfb      	ldrb	r3, [r7, #19]
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	f040 80aa 	bne.w	8002120 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001fd2:	f043 0201 	orr.w	r2, r3, #1
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	695b      	ldr	r3, [r3, #20]
 8001fe0:	f003 031f 	and.w	r3, r3, #31
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	401a      	ands	r2, r3
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d123      	bne.n	800204e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	43db      	mvns	r3, r3
 8002010:	401a      	ands	r2, r3
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002024:	683a      	ldr	r2, [r7, #0]
 8002026:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002028:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	3248      	adds	r2, #72	; 0x48
 800202e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002042:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002044:	6979      	ldr	r1, [r7, #20]
 8002046:	3348      	adds	r3, #72	; 0x48
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	440b      	add	r3, r1
 800204c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	69db      	ldr	r3, [r3, #28]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d122      	bne.n	800209c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	431a      	orrs	r2, r3
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002072:	683a      	ldr	r2, [r7, #0]
 8002074:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002076:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	3248      	adds	r2, #72	; 0x48
 800207c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002090:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002092:	6979      	ldr	r1, [r7, #20]
 8002094:	3348      	adds	r3, #72	; 0x48
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	440b      	add	r3, r1
 800209a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d109      	bne.n	80020b8 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	43db      	mvns	r3, r3
 80020ae:	401a      	ands	r2, r3
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80020b6:	e007      	b.n	80020c8 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	431a      	orrs	r2, r3
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d109      	bne.n	80020e4 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	43db      	mvns	r3, r3
 80020da:	401a      	ands	r2, r3
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80020e2:	e007      	b.n	80020f4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	431a      	orrs	r2, r3
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	6a1b      	ldr	r3, [r3, #32]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d107      	bne.n	800210c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	431a      	orrs	r2, r3
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002112:	f023 0201 	bic.w	r2, r3, #1
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800211c:	2300      	movs	r3, #0
 800211e:	e006      	b.n	800212e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002124:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
  }
}
 800212e:	4618      	mov	r0, r3
 8002130:	371c      	adds	r7, #28
 8002132:	46bd      	mov	sp, r7
 8002134:	bc80      	pop	{r7}
 8002136:	4770      	bx	lr

08002138 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002146:	b2db      	uxtb	r3, r3
 8002148:	2b01      	cmp	r3, #1
 800214a:	d12e      	bne.n	80021aa <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2202      	movs	r2, #2
 8002150:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f022 0201 	bic.w	r2, r2, #1
 8002162:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002164:	f7ff fdf6 	bl	8001d54 <HAL_GetTick>
 8002168:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800216a:	e012      	b.n	8002192 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800216c:	f7ff fdf2 	bl	8001d54 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b0a      	cmp	r3, #10
 8002178:	d90b      	bls.n	8002192 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2205      	movs	r2, #5
 800218a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e012      	b.n	80021b8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f003 0301 	and.w	r3, r3, #1
 800219c:	2b00      	cmp	r3, #0
 800219e:	d1e5      	bne.n	800216c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80021a6:	2300      	movs	r3, #0
 80021a8:	e006      	b.n	80021b8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ae:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
  }
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3710      	adds	r7, #16
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b089      	sub	sp, #36	; 0x24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	607a      	str	r2, [r7, #4]
 80021cc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021d4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80021de:	7ffb      	ldrb	r3, [r7, #31]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d003      	beq.n	80021ec <HAL_CAN_AddTxMessage+0x2c>
 80021e4:	7ffb      	ldrb	r3, [r7, #31]
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	f040 80ad 	bne.w	8002346 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d10a      	bne.n	800220c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d105      	bne.n	800220c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002206:	2b00      	cmp	r3, #0
 8002208:	f000 8095 	beq.w	8002336 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	0e1b      	lsrs	r3, r3, #24
 8002210:	f003 0303 	and.w	r3, r3, #3
 8002214:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002216:	2201      	movs	r2, #1
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	409a      	lsls	r2, r3
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d10d      	bne.n	8002244 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002232:	68f9      	ldr	r1, [r7, #12]
 8002234:	6809      	ldr	r1, [r1, #0]
 8002236:	431a      	orrs	r2, r3
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	3318      	adds	r3, #24
 800223c:	011b      	lsls	r3, r3, #4
 800223e:	440b      	add	r3, r1
 8002240:	601a      	str	r2, [r3, #0]
 8002242:	e00f      	b.n	8002264 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800224e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002254:	68f9      	ldr	r1, [r7, #12]
 8002256:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002258:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	3318      	adds	r3, #24
 800225e:	011b      	lsls	r3, r3, #4
 8002260:	440b      	add	r3, r1
 8002262:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6819      	ldr	r1, [r3, #0]
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	691a      	ldr	r2, [r3, #16]
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	3318      	adds	r3, #24
 8002270:	011b      	lsls	r3, r3, #4
 8002272:	440b      	add	r3, r1
 8002274:	3304      	adds	r3, #4
 8002276:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	7d1b      	ldrb	r3, [r3, #20]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d111      	bne.n	80022a4 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	3318      	adds	r3, #24
 8002288:	011b      	lsls	r3, r3, #4
 800228a:	4413      	add	r3, r2
 800228c:	3304      	adds	r3, #4
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	68fa      	ldr	r2, [r7, #12]
 8002292:	6811      	ldr	r1, [r2, #0]
 8002294:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	3318      	adds	r3, #24
 800229c:	011b      	lsls	r3, r3, #4
 800229e:	440b      	add	r3, r1
 80022a0:	3304      	adds	r3, #4
 80022a2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	3307      	adds	r3, #7
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	061a      	lsls	r2, r3, #24
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	3306      	adds	r3, #6
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	041b      	lsls	r3, r3, #16
 80022b4:	431a      	orrs	r2, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	3305      	adds	r3, #5
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	021b      	lsls	r3, r3, #8
 80022be:	4313      	orrs	r3, r2
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	3204      	adds	r2, #4
 80022c4:	7812      	ldrb	r2, [r2, #0]
 80022c6:	4610      	mov	r0, r2
 80022c8:	68fa      	ldr	r2, [r7, #12]
 80022ca:	6811      	ldr	r1, [r2, #0]
 80022cc:	ea43 0200 	orr.w	r2, r3, r0
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	011b      	lsls	r3, r3, #4
 80022d4:	440b      	add	r3, r1
 80022d6:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80022da:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	3303      	adds	r3, #3
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	061a      	lsls	r2, r3, #24
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	3302      	adds	r3, #2
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	041b      	lsls	r3, r3, #16
 80022ec:	431a      	orrs	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	3301      	adds	r3, #1
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	021b      	lsls	r3, r3, #8
 80022f6:	4313      	orrs	r3, r2
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	7812      	ldrb	r2, [r2, #0]
 80022fc:	4610      	mov	r0, r2
 80022fe:	68fa      	ldr	r2, [r7, #12]
 8002300:	6811      	ldr	r1, [r2, #0]
 8002302:	ea43 0200 	orr.w	r2, r3, r0
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	011b      	lsls	r3, r3, #4
 800230a:	440b      	add	r3, r1
 800230c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002310:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	3318      	adds	r3, #24
 800231a:	011b      	lsls	r3, r3, #4
 800231c:	4413      	add	r3, r2
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	68fa      	ldr	r2, [r7, #12]
 8002322:	6811      	ldr	r1, [r2, #0]
 8002324:	f043 0201 	orr.w	r2, r3, #1
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	3318      	adds	r3, #24
 800232c:	011b      	lsls	r3, r3, #4
 800232e:	440b      	add	r3, r1
 8002330:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002332:	2300      	movs	r3, #0
 8002334:	e00e      	b.n	8002354 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e006      	b.n	8002354 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
  }
}
 8002354:	4618      	mov	r0, r3
 8002356:	3724      	adds	r7, #36	; 0x24
 8002358:	46bd      	mov	sp, r7
 800235a:	bc80      	pop	{r7}
 800235c:	4770      	bx	lr

0800235e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800235e:	b480      	push	{r7}
 8002360:	b087      	sub	sp, #28
 8002362:	af00      	add	r7, sp, #0
 8002364:	60f8      	str	r0, [r7, #12]
 8002366:	60b9      	str	r1, [r7, #8]
 8002368:	607a      	str	r2, [r7, #4]
 800236a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002372:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002374:	7dfb      	ldrb	r3, [r7, #23]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d003      	beq.n	8002382 <HAL_CAN_GetRxMessage+0x24>
 800237a:	7dfb      	ldrb	r3, [r7, #23]
 800237c:	2b02      	cmp	r3, #2
 800237e:	f040 8103 	bne.w	8002588 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d10e      	bne.n	80023a6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	f003 0303 	and.w	r3, r3, #3
 8002392:	2b00      	cmp	r3, #0
 8002394:	d116      	bne.n	80023c4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e0f7      	b.n	8002596 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	f003 0303 	and.w	r3, r3, #3
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d107      	bne.n	80023c4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e0e8      	b.n	8002596 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	331b      	adds	r3, #27
 80023cc:	011b      	lsls	r3, r3, #4
 80023ce:	4413      	add	r3, r2
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0204 	and.w	r2, r3, #4
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10c      	bne.n	80023fc <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	331b      	adds	r3, #27
 80023ea:	011b      	lsls	r3, r3, #4
 80023ec:	4413      	add	r3, r2
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	0d5b      	lsrs	r3, r3, #21
 80023f2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	601a      	str	r2, [r3, #0]
 80023fa:	e00b      	b.n	8002414 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	331b      	adds	r3, #27
 8002404:	011b      	lsls	r3, r3, #4
 8002406:	4413      	add	r3, r2
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	08db      	lsrs	r3, r3, #3
 800240c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	331b      	adds	r3, #27
 800241c:	011b      	lsls	r3, r3, #4
 800241e:	4413      	add	r3, r2
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0202 	and.w	r2, r3, #2
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	331b      	adds	r3, #27
 8002432:	011b      	lsls	r3, r3, #4
 8002434:	4413      	add	r3, r2
 8002436:	3304      	adds	r3, #4
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0308 	and.w	r3, r3, #8
 800243e:	2b00      	cmp	r3, #0
 8002440:	d003      	beq.n	800244a <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2208      	movs	r2, #8
 8002446:	611a      	str	r2, [r3, #16]
 8002448:	e00b      	b.n	8002462 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	331b      	adds	r3, #27
 8002452:	011b      	lsls	r3, r3, #4
 8002454:	4413      	add	r3, r2
 8002456:	3304      	adds	r3, #4
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 020f 	and.w	r2, r3, #15
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	331b      	adds	r3, #27
 800246a:	011b      	lsls	r3, r3, #4
 800246c:	4413      	add	r3, r2
 800246e:	3304      	adds	r3, #4
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	0a1b      	lsrs	r3, r3, #8
 8002474:	b2da      	uxtb	r2, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	331b      	adds	r3, #27
 8002482:	011b      	lsls	r3, r3, #4
 8002484:	4413      	add	r3, r2
 8002486:	3304      	adds	r3, #4
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	0c1b      	lsrs	r3, r3, #16
 800248c:	b29a      	uxth	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	011b      	lsls	r3, r3, #4
 800249a:	4413      	add	r3, r2
 800249c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	b2da      	uxtb	r2, r3
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	011b      	lsls	r3, r3, #4
 80024b0:	4413      	add	r3, r2
 80024b2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	0a1a      	lsrs	r2, r3, #8
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	3301      	adds	r3, #1
 80024be:	b2d2      	uxtb	r2, r2
 80024c0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	011b      	lsls	r3, r3, #4
 80024ca:	4413      	add	r3, r2
 80024cc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	0c1a      	lsrs	r2, r3, #16
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	3302      	adds	r3, #2
 80024d8:	b2d2      	uxtb	r2, r2
 80024da:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	011b      	lsls	r3, r3, #4
 80024e4:	4413      	add	r3, r2
 80024e6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	0e1a      	lsrs	r2, r3, #24
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	3303      	adds	r3, #3
 80024f2:	b2d2      	uxtb	r2, r2
 80024f4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	011b      	lsls	r3, r3, #4
 80024fe:	4413      	add	r3, r2
 8002500:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	3304      	adds	r3, #4
 800250a:	b2d2      	uxtb	r2, r2
 800250c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	011b      	lsls	r3, r3, #4
 8002516:	4413      	add	r3, r2
 8002518:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	0a1a      	lsrs	r2, r3, #8
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	3305      	adds	r3, #5
 8002524:	b2d2      	uxtb	r2, r2
 8002526:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	011b      	lsls	r3, r3, #4
 8002530:	4413      	add	r3, r2
 8002532:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	0c1a      	lsrs	r2, r3, #16
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	3306      	adds	r3, #6
 800253e:	b2d2      	uxtb	r2, r2
 8002540:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	011b      	lsls	r3, r3, #4
 800254a:	4413      	add	r3, r2
 800254c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	0e1a      	lsrs	r2, r3, #24
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	3307      	adds	r3, #7
 8002558:	b2d2      	uxtb	r2, r2
 800255a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d108      	bne.n	8002574 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	68da      	ldr	r2, [r3, #12]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f042 0220 	orr.w	r2, r2, #32
 8002570:	60da      	str	r2, [r3, #12]
 8002572:	e007      	b.n	8002584 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	691a      	ldr	r2, [r3, #16]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f042 0220 	orr.w	r2, r2, #32
 8002582:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002584:	2300      	movs	r3, #0
 8002586:	e006      	b.n	8002596 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
  }
}
 8002596:	4618      	mov	r0, r3
 8002598:	371c      	adds	r7, #28
 800259a:	46bd      	mov	sp, r7
 800259c:	bc80      	pop	{r7}
 800259e:	4770      	bx	lr

080025a0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025b0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80025b2:	7bfb      	ldrb	r3, [r7, #15]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d002      	beq.n	80025be <HAL_CAN_ActivateNotification+0x1e>
 80025b8:	7bfb      	ldrb	r3, [r7, #15]
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d109      	bne.n	80025d2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	6959      	ldr	r1, [r3, #20]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	683a      	ldr	r2, [r7, #0]
 80025ca:	430a      	orrs	r2, r1
 80025cc:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80025ce:	2300      	movs	r3, #0
 80025d0:	e006      	b.n	80025e0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
  }
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3714      	adds	r7, #20
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bc80      	pop	{r7}
 80025e8:	4770      	bx	lr

080025ea <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b08a      	sub	sp, #40	; 0x28
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80025f2:	2300      	movs	r3, #0
 80025f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	695b      	ldr	r3, [r3, #20]
 80025fc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002626:	6a3b      	ldr	r3, [r7, #32]
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	2b00      	cmp	r3, #0
 800262e:	d07c      	beq.n	800272a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	2b00      	cmp	r3, #0
 8002638:	d023      	beq.n	8002682 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2201      	movs	r2, #1
 8002640:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d003      	beq.n	8002654 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f000 f983 	bl	8002958 <HAL_CAN_TxMailbox0CompleteCallback>
 8002652:	e016      	b.n	8002682 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	f003 0304 	and.w	r3, r3, #4
 800265a:	2b00      	cmp	r3, #0
 800265c:	d004      	beq.n	8002668 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800265e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002660:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002664:	627b      	str	r3, [r7, #36]	; 0x24
 8002666:	e00c      	b.n	8002682 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	f003 0308 	and.w	r3, r3, #8
 800266e:	2b00      	cmp	r3, #0
 8002670:	d004      	beq.n	800267c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002674:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002678:	627b      	str	r3, [r7, #36]	; 0x24
 800267a:	e002      	b.n	8002682 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f000 f986 	bl	800298e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002688:	2b00      	cmp	r3, #0
 800268a:	d024      	beq.n	80026d6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002694:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800269c:	2b00      	cmp	r3, #0
 800269e:	d003      	beq.n	80026a8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f000 f962 	bl	800296a <HAL_CAN_TxMailbox1CompleteCallback>
 80026a6:	e016      	b.n	80026d6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d004      	beq.n	80026bc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80026b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80026b8:	627b      	str	r3, [r7, #36]	; 0x24
 80026ba:	e00c      	b.n	80026d6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d004      	beq.n	80026d0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80026c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026cc:	627b      	str	r3, [r7, #36]	; 0x24
 80026ce:	e002      	b.n	80026d6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f000 f965 	bl	80029a0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d024      	beq.n	800272a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80026e8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d003      	beq.n	80026fc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f000 f941 	bl	800297c <HAL_CAN_TxMailbox2CompleteCallback>
 80026fa:	e016      	b.n	800272a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d004      	beq.n	8002710 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002708:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800270c:	627b      	str	r3, [r7, #36]	; 0x24
 800270e:	e00c      	b.n	800272a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d004      	beq.n	8002724 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800271a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002720:	627b      	str	r3, [r7, #36]	; 0x24
 8002722:	e002      	b.n	800272a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f000 f944 	bl	80029b2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800272a:	6a3b      	ldr	r3, [r7, #32]
 800272c:	f003 0308 	and.w	r3, r3, #8
 8002730:	2b00      	cmp	r3, #0
 8002732:	d00c      	beq.n	800274e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	f003 0310 	and.w	r3, r3, #16
 800273a:	2b00      	cmp	r3, #0
 800273c:	d007      	beq.n	800274e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002740:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002744:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2210      	movs	r2, #16
 800274c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800274e:	6a3b      	ldr	r3, [r7, #32]
 8002750:	f003 0304 	and.w	r3, r3, #4
 8002754:	2b00      	cmp	r3, #0
 8002756:	d00b      	beq.n	8002770 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	f003 0308 	and.w	r3, r3, #8
 800275e:	2b00      	cmp	r3, #0
 8002760:	d006      	beq.n	8002770 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2208      	movs	r2, #8
 8002768:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f000 f92a 	bl	80029c4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002770:	6a3b      	ldr	r3, [r7, #32]
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d009      	beq.n	800278e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	f003 0303 	and.w	r3, r3, #3
 8002784:	2b00      	cmp	r3, #0
 8002786:	d002      	beq.n	800278e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f7fe fd71 	bl	8001270 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800278e:	6a3b      	ldr	r3, [r7, #32]
 8002790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002794:	2b00      	cmp	r3, #0
 8002796:	d00c      	beq.n	80027b2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	f003 0310 	and.w	r3, r3, #16
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d007      	beq.n	80027b2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80027a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027a8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2210      	movs	r2, #16
 80027b0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80027b2:	6a3b      	ldr	r3, [r7, #32]
 80027b4:	f003 0320 	and.w	r3, r3, #32
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d00b      	beq.n	80027d4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	f003 0308 	and.w	r3, r3, #8
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d006      	beq.n	80027d4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2208      	movs	r2, #8
 80027cc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f000 f90a 	bl	80029e8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80027d4:	6a3b      	ldr	r3, [r7, #32]
 80027d6:	f003 0310 	and.w	r3, r3, #16
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d009      	beq.n	80027f2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	691b      	ldr	r3, [r3, #16]
 80027e4:	f003 0303 	and.w	r3, r3, #3
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d002      	beq.n	80027f2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f000 f8f2 	bl	80029d6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80027f2:	6a3b      	ldr	r3, [r7, #32]
 80027f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d00b      	beq.n	8002814 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	f003 0310 	and.w	r3, r3, #16
 8002802:	2b00      	cmp	r3, #0
 8002804:	d006      	beq.n	8002814 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2210      	movs	r2, #16
 800280c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 f8f3 	bl	80029fa <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002814:	6a3b      	ldr	r3, [r7, #32]
 8002816:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d00b      	beq.n	8002836 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	f003 0308 	and.w	r3, r3, #8
 8002824:	2b00      	cmp	r3, #0
 8002826:	d006      	beq.n	8002836 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2208      	movs	r2, #8
 800282e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f000 f8eb 	bl	8002a0c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002836:	6a3b      	ldr	r3, [r7, #32]
 8002838:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d07b      	beq.n	8002938 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	f003 0304 	and.w	r3, r3, #4
 8002846:	2b00      	cmp	r3, #0
 8002848:	d072      	beq.n	8002930 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800284a:	6a3b      	ldr	r3, [r7, #32]
 800284c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002850:	2b00      	cmp	r3, #0
 8002852:	d008      	beq.n	8002866 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800285a:	2b00      	cmp	r3, #0
 800285c:	d003      	beq.n	8002866 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800285e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002860:	f043 0301 	orr.w	r3, r3, #1
 8002864:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002866:	6a3b      	ldr	r3, [r7, #32]
 8002868:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800286c:	2b00      	cmp	r3, #0
 800286e:	d008      	beq.n	8002882 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002876:	2b00      	cmp	r3, #0
 8002878:	d003      	beq.n	8002882 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800287a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287c:	f043 0302 	orr.w	r3, r3, #2
 8002880:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002882:	6a3b      	ldr	r3, [r7, #32]
 8002884:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002888:	2b00      	cmp	r3, #0
 800288a:	d008      	beq.n	800289e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002892:	2b00      	cmp	r3, #0
 8002894:	d003      	beq.n	800289e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002898:	f043 0304 	orr.w	r3, r3, #4
 800289c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800289e:	6a3b      	ldr	r3, [r7, #32]
 80028a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d043      	beq.n	8002930 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d03e      	beq.n	8002930 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80028b8:	2b60      	cmp	r3, #96	; 0x60
 80028ba:	d02b      	beq.n	8002914 <HAL_CAN_IRQHandler+0x32a>
 80028bc:	2b60      	cmp	r3, #96	; 0x60
 80028be:	d82e      	bhi.n	800291e <HAL_CAN_IRQHandler+0x334>
 80028c0:	2b50      	cmp	r3, #80	; 0x50
 80028c2:	d022      	beq.n	800290a <HAL_CAN_IRQHandler+0x320>
 80028c4:	2b50      	cmp	r3, #80	; 0x50
 80028c6:	d82a      	bhi.n	800291e <HAL_CAN_IRQHandler+0x334>
 80028c8:	2b40      	cmp	r3, #64	; 0x40
 80028ca:	d019      	beq.n	8002900 <HAL_CAN_IRQHandler+0x316>
 80028cc:	2b40      	cmp	r3, #64	; 0x40
 80028ce:	d826      	bhi.n	800291e <HAL_CAN_IRQHandler+0x334>
 80028d0:	2b30      	cmp	r3, #48	; 0x30
 80028d2:	d010      	beq.n	80028f6 <HAL_CAN_IRQHandler+0x30c>
 80028d4:	2b30      	cmp	r3, #48	; 0x30
 80028d6:	d822      	bhi.n	800291e <HAL_CAN_IRQHandler+0x334>
 80028d8:	2b10      	cmp	r3, #16
 80028da:	d002      	beq.n	80028e2 <HAL_CAN_IRQHandler+0x2f8>
 80028dc:	2b20      	cmp	r3, #32
 80028de:	d005      	beq.n	80028ec <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80028e0:	e01d      	b.n	800291e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80028e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e4:	f043 0308 	orr.w	r3, r3, #8
 80028e8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80028ea:	e019      	b.n	8002920 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80028ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ee:	f043 0310 	orr.w	r3, r3, #16
 80028f2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80028f4:	e014      	b.n	8002920 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80028f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f8:	f043 0320 	orr.w	r3, r3, #32
 80028fc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80028fe:	e00f      	b.n	8002920 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002902:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002906:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002908:	e00a      	b.n	8002920 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800290a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002910:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002912:	e005      	b.n	8002920 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002916:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800291a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800291c:	e000      	b.n	8002920 <HAL_CAN_IRQHandler+0x336>
            break;
 800291e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	699a      	ldr	r2, [r3, #24]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800292e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2204      	movs	r2, #4
 8002936:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293a:	2b00      	cmp	r3, #0
 800293c:	d008      	beq.n	8002950 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002944:	431a      	orrs	r2, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 f867 	bl	8002a1e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002950:	bf00      	nop
 8002952:	3728      	adds	r7, #40	; 0x28
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002960:	bf00      	nop
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	bc80      	pop	{r7}
 8002968:	4770      	bx	lr

0800296a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800296a:	b480      	push	{r7}
 800296c:	b083      	sub	sp, #12
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002972:	bf00      	nop
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	bc80      	pop	{r7}
 800297a:	4770      	bx	lr

0800297c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002984:	bf00      	nop
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	bc80      	pop	{r7}
 800298c:	4770      	bx	lr

0800298e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800298e:	b480      	push	{r7}
 8002990:	b083      	sub	sp, #12
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002996:	bf00      	nop
 8002998:	370c      	adds	r7, #12
 800299a:	46bd      	mov	sp, r7
 800299c:	bc80      	pop	{r7}
 800299e:	4770      	bx	lr

080029a0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80029a8:	bf00      	nop
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bc80      	pop	{r7}
 80029b0:	4770      	bx	lr

080029b2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80029b2:	b480      	push	{r7}
 80029b4:	b083      	sub	sp, #12
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80029ba:	bf00      	nop
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	bc80      	pop	{r7}
 80029c2:	4770      	bx	lr

080029c4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80029cc:	bf00      	nop
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bc80      	pop	{r7}
 80029d4:	4770      	bx	lr

080029d6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80029d6:	b480      	push	{r7}
 80029d8:	b083      	sub	sp, #12
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80029de:	bf00      	nop
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bc80      	pop	{r7}
 80029e6:	4770      	bx	lr

080029e8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80029f0:	bf00      	nop
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bc80      	pop	{r7}
 80029f8:	4770      	bx	lr

080029fa <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80029fa:	b480      	push	{r7}
 80029fc:	b083      	sub	sp, #12
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002a02:	bf00      	nop
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bc80      	pop	{r7}
 8002a0a:	4770      	bx	lr

08002a0c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002a14:	bf00      	nop
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bc80      	pop	{r7}
 8002a1c:	4770      	bx	lr

08002a1e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	b083      	sub	sp, #12
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002a26:	bf00      	nop
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bc80      	pop	{r7}
 8002a2e:	4770      	bx	lr

08002a30 <HAL_CAN_ResetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	73fb      	strb	r3, [r7, #15]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a42:	73bb      	strb	r3, [r7, #14]

  if ((state == HAL_CAN_STATE_READY) ||
 8002a44:	7bbb      	ldrb	r3, [r7, #14]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d002      	beq.n	8002a50 <HAL_CAN_ResetError+0x20>
 8002a4a:	7bbb      	ldrb	r3, [r7, #14]
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d103      	bne.n	8002a58 <HAL_CAN_ResetError+0x28>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Reset CAN error code */
    hcan->ErrorCode = 0U;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	625a      	str	r2, [r3, #36]	; 0x24
 8002a56:	e007      	b.n	8002a68 <HAL_CAN_ResetError+0x38>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	625a      	str	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the status */
  return status;
 8002a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3714      	adds	r7, #20
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bc80      	pop	{r7}
 8002a72:	4770      	bx	lr

08002a74 <__NVIC_SetPriorityGrouping>:
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f003 0307 	and.w	r3, r3, #7
 8002a82:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a84:	4b0c      	ldr	r3, [pc, #48]	; (8002ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a8a:	68ba      	ldr	r2, [r7, #8]
 8002a8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a90:	4013      	ands	r3, r2
 8002a92:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002aa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aa6:	4a04      	ldr	r2, [pc, #16]	; (8002ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	60d3      	str	r3, [r2, #12]
}
 8002aac:	bf00      	nop
 8002aae:	3714      	adds	r7, #20
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bc80      	pop	{r7}
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	e000ed00 	.word	0xe000ed00

08002abc <__NVIC_GetPriorityGrouping>:
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ac0:	4b04      	ldr	r3, [pc, #16]	; (8002ad4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	0a1b      	lsrs	r3, r3, #8
 8002ac6:	f003 0307 	and.w	r3, r3, #7
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bc80      	pop	{r7}
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	e000ed00 	.word	0xe000ed00

08002ad8 <__NVIC_EnableIRQ>:
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	4603      	mov	r3, r0
 8002ae0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	db0b      	blt.n	8002b02 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aea:	79fb      	ldrb	r3, [r7, #7]
 8002aec:	f003 021f 	and.w	r2, r3, #31
 8002af0:	4906      	ldr	r1, [pc, #24]	; (8002b0c <__NVIC_EnableIRQ+0x34>)
 8002af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af6:	095b      	lsrs	r3, r3, #5
 8002af8:	2001      	movs	r0, #1
 8002afa:	fa00 f202 	lsl.w	r2, r0, r2
 8002afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002b02:	bf00      	nop
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bc80      	pop	{r7}
 8002b0a:	4770      	bx	lr
 8002b0c:	e000e100 	.word	0xe000e100

08002b10 <__NVIC_SetPriority>:
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	4603      	mov	r3, r0
 8002b18:	6039      	str	r1, [r7, #0]
 8002b1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	db0a      	blt.n	8002b3a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	b2da      	uxtb	r2, r3
 8002b28:	490c      	ldr	r1, [pc, #48]	; (8002b5c <__NVIC_SetPriority+0x4c>)
 8002b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2e:	0112      	lsls	r2, r2, #4
 8002b30:	b2d2      	uxtb	r2, r2
 8002b32:	440b      	add	r3, r1
 8002b34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002b38:	e00a      	b.n	8002b50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	b2da      	uxtb	r2, r3
 8002b3e:	4908      	ldr	r1, [pc, #32]	; (8002b60 <__NVIC_SetPriority+0x50>)
 8002b40:	79fb      	ldrb	r3, [r7, #7]
 8002b42:	f003 030f 	and.w	r3, r3, #15
 8002b46:	3b04      	subs	r3, #4
 8002b48:	0112      	lsls	r2, r2, #4
 8002b4a:	b2d2      	uxtb	r2, r2
 8002b4c:	440b      	add	r3, r1
 8002b4e:	761a      	strb	r2, [r3, #24]
}
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bc80      	pop	{r7}
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	e000e100 	.word	0xe000e100
 8002b60:	e000ed00 	.word	0xe000ed00

08002b64 <NVIC_EncodePriority>:
{
 8002b64:	b480      	push	{r7}
 8002b66:	b089      	sub	sp, #36	; 0x24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f003 0307 	and.w	r3, r3, #7
 8002b76:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	f1c3 0307 	rsb	r3, r3, #7
 8002b7e:	2b04      	cmp	r3, #4
 8002b80:	bf28      	it	cs
 8002b82:	2304      	movcs	r3, #4
 8002b84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	3304      	adds	r3, #4
 8002b8a:	2b06      	cmp	r3, #6
 8002b8c:	d902      	bls.n	8002b94 <NVIC_EncodePriority+0x30>
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	3b03      	subs	r3, #3
 8002b92:	e000      	b.n	8002b96 <NVIC_EncodePriority+0x32>
 8002b94:	2300      	movs	r3, #0
 8002b96:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b98:	f04f 32ff 	mov.w	r2, #4294967295
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba2:	43da      	mvns	r2, r3
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	401a      	ands	r2, r3
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bac:	f04f 31ff 	mov.w	r1, #4294967295
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb6:	43d9      	mvns	r1, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bbc:	4313      	orrs	r3, r2
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3724      	adds	r7, #36	; 0x24
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bc80      	pop	{r7}
 8002bc6:	4770      	bx	lr

08002bc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f7ff ff4f 	bl	8002a74 <__NVIC_SetPriorityGrouping>
}
 8002bd6:	bf00      	nop
 8002bd8:	3708      	adds	r7, #8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b086      	sub	sp, #24
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	4603      	mov	r3, r0
 8002be6:	60b9      	str	r1, [r7, #8]
 8002be8:	607a      	str	r2, [r7, #4]
 8002bea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bec:	2300      	movs	r3, #0
 8002bee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bf0:	f7ff ff64 	bl	8002abc <__NVIC_GetPriorityGrouping>
 8002bf4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	68b9      	ldr	r1, [r7, #8]
 8002bfa:	6978      	ldr	r0, [r7, #20]
 8002bfc:	f7ff ffb2 	bl	8002b64 <NVIC_EncodePriority>
 8002c00:	4602      	mov	r2, r0
 8002c02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c06:	4611      	mov	r1, r2
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7ff ff81 	bl	8002b10 <__NVIC_SetPriority>
}
 8002c0e:	bf00      	nop
 8002c10:	3718      	adds	r7, #24
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b082      	sub	sp, #8
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7ff ff57 	bl	8002ad8 <__NVIC_EnableIRQ>
}
 8002c2a:	bf00      	nop
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
	...

08002c34 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b085      	sub	sp, #20
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e043      	b.n	8002cd2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	461a      	mov	r2, r3
 8002c50:	4b22      	ldr	r3, [pc, #136]	; (8002cdc <HAL_DMA_Init+0xa8>)
 8002c52:	4413      	add	r3, r2
 8002c54:	4a22      	ldr	r2, [pc, #136]	; (8002ce0 <HAL_DMA_Init+0xac>)
 8002c56:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5a:	091b      	lsrs	r3, r3, #4
 8002c5c:	009a      	lsls	r2, r3, #2
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a1f      	ldr	r2, [pc, #124]	; (8002ce4 <HAL_DMA_Init+0xb0>)
 8002c66:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2202      	movs	r2, #2
 8002c6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002c7e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002c82:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002c8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ca4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3714      	adds	r7, #20
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bc80      	pop	{r7}
 8002cda:	4770      	bx	lr
 8002cdc:	bffdfff8 	.word	0xbffdfff8
 8002ce0:	cccccccd 	.word	0xcccccccd
 8002ce4:	40020000 	.word	0x40020000

08002ce8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b086      	sub	sp, #24
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
 8002cf4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d101      	bne.n	8002d08 <HAL_DMA_Start_IT+0x20>
 8002d04:	2302      	movs	r3, #2
 8002d06:	e04b      	b.n	8002da0 <HAL_DMA_Start_IT+0xb8>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d13a      	bne.n	8002d92 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2202      	movs	r2, #2
 8002d20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2200      	movs	r2, #0
 8002d28:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f022 0201 	bic.w	r2, r2, #1
 8002d38:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	68b9      	ldr	r1, [r7, #8]
 8002d40:	68f8      	ldr	r0, [r7, #12]
 8002d42:	f000 f9eb 	bl	800311c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d008      	beq.n	8002d60 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f042 020e 	orr.w	r2, r2, #14
 8002d5c:	601a      	str	r2, [r3, #0]
 8002d5e:	e00f      	b.n	8002d80 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f022 0204 	bic.w	r2, r2, #4
 8002d6e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f042 020a 	orr.w	r2, r2, #10
 8002d7e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f042 0201 	orr.w	r2, r2, #1
 8002d8e:	601a      	str	r2, [r3, #0]
 8002d90:	e005      	b.n	8002d9e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002d9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3718      	adds	r7, #24
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002db0:	2300      	movs	r3, #0
 8002db2:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d008      	beq.n	8002dd2 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2204      	movs	r2, #4
 8002dc4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e020      	b.n	8002e14 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f022 020e 	bic.w	r2, r2, #14
 8002de0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f022 0201 	bic.w	r2, r2, #1
 8002df0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dfa:	2101      	movs	r1, #1
 8002dfc:	fa01 f202 	lsl.w	r2, r1, r2
 8002e00:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2201      	movs	r2, #1
 8002e06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3714      	adds	r7, #20
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bc80      	pop	{r7}
 8002e1c:	4770      	bx	lr
	...

08002e20 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d005      	beq.n	8002e44 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2204      	movs	r2, #4
 8002e3c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	73fb      	strb	r3, [r7, #15]
 8002e42:	e051      	b.n	8002ee8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f022 020e 	bic.w	r2, r2, #14
 8002e52:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f022 0201 	bic.w	r2, r2, #1
 8002e62:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a22      	ldr	r2, [pc, #136]	; (8002ef4 <HAL_DMA_Abort_IT+0xd4>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d029      	beq.n	8002ec2 <HAL_DMA_Abort_IT+0xa2>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a21      	ldr	r2, [pc, #132]	; (8002ef8 <HAL_DMA_Abort_IT+0xd8>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d022      	beq.n	8002ebe <HAL_DMA_Abort_IT+0x9e>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a1f      	ldr	r2, [pc, #124]	; (8002efc <HAL_DMA_Abort_IT+0xdc>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d01a      	beq.n	8002eb8 <HAL_DMA_Abort_IT+0x98>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a1e      	ldr	r2, [pc, #120]	; (8002f00 <HAL_DMA_Abort_IT+0xe0>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d012      	beq.n	8002eb2 <HAL_DMA_Abort_IT+0x92>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a1c      	ldr	r2, [pc, #112]	; (8002f04 <HAL_DMA_Abort_IT+0xe4>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d00a      	beq.n	8002eac <HAL_DMA_Abort_IT+0x8c>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a1b      	ldr	r2, [pc, #108]	; (8002f08 <HAL_DMA_Abort_IT+0xe8>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d102      	bne.n	8002ea6 <HAL_DMA_Abort_IT+0x86>
 8002ea0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002ea4:	e00e      	b.n	8002ec4 <HAL_DMA_Abort_IT+0xa4>
 8002ea6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002eaa:	e00b      	b.n	8002ec4 <HAL_DMA_Abort_IT+0xa4>
 8002eac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002eb0:	e008      	b.n	8002ec4 <HAL_DMA_Abort_IT+0xa4>
 8002eb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002eb6:	e005      	b.n	8002ec4 <HAL_DMA_Abort_IT+0xa4>
 8002eb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ebc:	e002      	b.n	8002ec4 <HAL_DMA_Abort_IT+0xa4>
 8002ebe:	2310      	movs	r3, #16
 8002ec0:	e000      	b.n	8002ec4 <HAL_DMA_Abort_IT+0xa4>
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	4a11      	ldr	r2, [pc, #68]	; (8002f0c <HAL_DMA_Abort_IT+0xec>)
 8002ec6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d003      	beq.n	8002ee8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	4798      	blx	r3
    } 
  }
  return status;
 8002ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3710      	adds	r7, #16
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	40020008 	.word	0x40020008
 8002ef8:	4002001c 	.word	0x4002001c
 8002efc:	40020030 	.word	0x40020030
 8002f00:	40020044 	.word	0x40020044
 8002f04:	40020058 	.word	0x40020058
 8002f08:	4002006c 	.word	0x4002006c
 8002f0c:	40020000 	.word	0x40020000

08002f10 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2c:	2204      	movs	r2, #4
 8002f2e:	409a      	lsls	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	4013      	ands	r3, r2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d04f      	beq.n	8002fd8 <HAL_DMA_IRQHandler+0xc8>
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	f003 0304 	and.w	r3, r3, #4
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d04a      	beq.n	8002fd8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0320 	and.w	r3, r3, #32
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d107      	bne.n	8002f60 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f022 0204 	bic.w	r2, r2, #4
 8002f5e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a66      	ldr	r2, [pc, #408]	; (8003100 <HAL_DMA_IRQHandler+0x1f0>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d029      	beq.n	8002fbe <HAL_DMA_IRQHandler+0xae>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a65      	ldr	r2, [pc, #404]	; (8003104 <HAL_DMA_IRQHandler+0x1f4>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d022      	beq.n	8002fba <HAL_DMA_IRQHandler+0xaa>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a63      	ldr	r2, [pc, #396]	; (8003108 <HAL_DMA_IRQHandler+0x1f8>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d01a      	beq.n	8002fb4 <HAL_DMA_IRQHandler+0xa4>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a62      	ldr	r2, [pc, #392]	; (800310c <HAL_DMA_IRQHandler+0x1fc>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d012      	beq.n	8002fae <HAL_DMA_IRQHandler+0x9e>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a60      	ldr	r2, [pc, #384]	; (8003110 <HAL_DMA_IRQHandler+0x200>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d00a      	beq.n	8002fa8 <HAL_DMA_IRQHandler+0x98>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a5f      	ldr	r2, [pc, #380]	; (8003114 <HAL_DMA_IRQHandler+0x204>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d102      	bne.n	8002fa2 <HAL_DMA_IRQHandler+0x92>
 8002f9c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002fa0:	e00e      	b.n	8002fc0 <HAL_DMA_IRQHandler+0xb0>
 8002fa2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002fa6:	e00b      	b.n	8002fc0 <HAL_DMA_IRQHandler+0xb0>
 8002fa8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002fac:	e008      	b.n	8002fc0 <HAL_DMA_IRQHandler+0xb0>
 8002fae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002fb2:	e005      	b.n	8002fc0 <HAL_DMA_IRQHandler+0xb0>
 8002fb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fb8:	e002      	b.n	8002fc0 <HAL_DMA_IRQHandler+0xb0>
 8002fba:	2340      	movs	r3, #64	; 0x40
 8002fbc:	e000      	b.n	8002fc0 <HAL_DMA_IRQHandler+0xb0>
 8002fbe:	2304      	movs	r3, #4
 8002fc0:	4a55      	ldr	r2, [pc, #340]	; (8003118 <HAL_DMA_IRQHandler+0x208>)
 8002fc2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	f000 8094 	beq.w	80030f6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002fd6:	e08e      	b.n	80030f6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fdc:	2202      	movs	r2, #2
 8002fde:	409a      	lsls	r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d056      	beq.n	8003096 <HAL_DMA_IRQHandler+0x186>
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d051      	beq.n	8003096 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0320 	and.w	r3, r3, #32
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d10b      	bne.n	8003018 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f022 020a 	bic.w	r2, r2, #10
 800300e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a38      	ldr	r2, [pc, #224]	; (8003100 <HAL_DMA_IRQHandler+0x1f0>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d029      	beq.n	8003076 <HAL_DMA_IRQHandler+0x166>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a37      	ldr	r2, [pc, #220]	; (8003104 <HAL_DMA_IRQHandler+0x1f4>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d022      	beq.n	8003072 <HAL_DMA_IRQHandler+0x162>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a35      	ldr	r2, [pc, #212]	; (8003108 <HAL_DMA_IRQHandler+0x1f8>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d01a      	beq.n	800306c <HAL_DMA_IRQHandler+0x15c>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a34      	ldr	r2, [pc, #208]	; (800310c <HAL_DMA_IRQHandler+0x1fc>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d012      	beq.n	8003066 <HAL_DMA_IRQHandler+0x156>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a32      	ldr	r2, [pc, #200]	; (8003110 <HAL_DMA_IRQHandler+0x200>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d00a      	beq.n	8003060 <HAL_DMA_IRQHandler+0x150>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a31      	ldr	r2, [pc, #196]	; (8003114 <HAL_DMA_IRQHandler+0x204>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d102      	bne.n	800305a <HAL_DMA_IRQHandler+0x14a>
 8003054:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003058:	e00e      	b.n	8003078 <HAL_DMA_IRQHandler+0x168>
 800305a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800305e:	e00b      	b.n	8003078 <HAL_DMA_IRQHandler+0x168>
 8003060:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003064:	e008      	b.n	8003078 <HAL_DMA_IRQHandler+0x168>
 8003066:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800306a:	e005      	b.n	8003078 <HAL_DMA_IRQHandler+0x168>
 800306c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003070:	e002      	b.n	8003078 <HAL_DMA_IRQHandler+0x168>
 8003072:	2320      	movs	r3, #32
 8003074:	e000      	b.n	8003078 <HAL_DMA_IRQHandler+0x168>
 8003076:	2302      	movs	r3, #2
 8003078:	4a27      	ldr	r2, [pc, #156]	; (8003118 <HAL_DMA_IRQHandler+0x208>)
 800307a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003088:	2b00      	cmp	r3, #0
 800308a:	d034      	beq.n	80030f6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003094:	e02f      	b.n	80030f6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309a:	2208      	movs	r2, #8
 800309c:	409a      	lsls	r2, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	4013      	ands	r3, r2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d028      	beq.n	80030f8 <HAL_DMA_IRQHandler+0x1e8>
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	f003 0308 	and.w	r3, r3, #8
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d023      	beq.n	80030f8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f022 020e 	bic.w	r2, r2, #14
 80030be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030c8:	2101      	movs	r1, #1
 80030ca:	fa01 f202 	lsl.w	r2, r1, r2
 80030ce:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2201      	movs	r2, #1
 80030da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d004      	beq.n	80030f8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	4798      	blx	r3
    }
  }
  return;
 80030f6:	bf00      	nop
 80030f8:	bf00      	nop
}
 80030fa:	3710      	adds	r7, #16
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	40020008 	.word	0x40020008
 8003104:	4002001c 	.word	0x4002001c
 8003108:	40020030 	.word	0x40020030
 800310c:	40020044 	.word	0x40020044
 8003110:	40020058 	.word	0x40020058
 8003114:	4002006c 	.word	0x4002006c
 8003118:	40020000 	.word	0x40020000

0800311c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800311c:	b480      	push	{r7}
 800311e:	b085      	sub	sp, #20
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	607a      	str	r2, [r7, #4]
 8003128:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003132:	2101      	movs	r1, #1
 8003134:	fa01 f202 	lsl.w	r2, r1, r2
 8003138:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	683a      	ldr	r2, [r7, #0]
 8003140:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	2b10      	cmp	r3, #16
 8003148:	d108      	bne.n	800315c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68ba      	ldr	r2, [r7, #8]
 8003158:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800315a:	e007      	b.n	800316c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68ba      	ldr	r2, [r7, #8]
 8003162:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	60da      	str	r2, [r3, #12]
}
 800316c:	bf00      	nop
 800316e:	3714      	adds	r7, #20
 8003170:	46bd      	mov	sp, r7
 8003172:	bc80      	pop	{r7}
 8003174:	4770      	bx	lr
	...

08003178 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003178:	b480      	push	{r7}
 800317a:	b08b      	sub	sp, #44	; 0x2c
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003182:	2300      	movs	r3, #0
 8003184:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003186:	2300      	movs	r3, #0
 8003188:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800318a:	e169      	b.n	8003460 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800318c:	2201      	movs	r2, #1
 800318e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003190:	fa02 f303 	lsl.w	r3, r2, r3
 8003194:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	69fa      	ldr	r2, [r7, #28]
 800319c:	4013      	ands	r3, r2
 800319e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	f040 8158 	bne.w	800345a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	4a9a      	ldr	r2, [pc, #616]	; (8003418 <HAL_GPIO_Init+0x2a0>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d05e      	beq.n	8003272 <HAL_GPIO_Init+0xfa>
 80031b4:	4a98      	ldr	r2, [pc, #608]	; (8003418 <HAL_GPIO_Init+0x2a0>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d875      	bhi.n	80032a6 <HAL_GPIO_Init+0x12e>
 80031ba:	4a98      	ldr	r2, [pc, #608]	; (800341c <HAL_GPIO_Init+0x2a4>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d058      	beq.n	8003272 <HAL_GPIO_Init+0xfa>
 80031c0:	4a96      	ldr	r2, [pc, #600]	; (800341c <HAL_GPIO_Init+0x2a4>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d86f      	bhi.n	80032a6 <HAL_GPIO_Init+0x12e>
 80031c6:	4a96      	ldr	r2, [pc, #600]	; (8003420 <HAL_GPIO_Init+0x2a8>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d052      	beq.n	8003272 <HAL_GPIO_Init+0xfa>
 80031cc:	4a94      	ldr	r2, [pc, #592]	; (8003420 <HAL_GPIO_Init+0x2a8>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d869      	bhi.n	80032a6 <HAL_GPIO_Init+0x12e>
 80031d2:	4a94      	ldr	r2, [pc, #592]	; (8003424 <HAL_GPIO_Init+0x2ac>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d04c      	beq.n	8003272 <HAL_GPIO_Init+0xfa>
 80031d8:	4a92      	ldr	r2, [pc, #584]	; (8003424 <HAL_GPIO_Init+0x2ac>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d863      	bhi.n	80032a6 <HAL_GPIO_Init+0x12e>
 80031de:	4a92      	ldr	r2, [pc, #584]	; (8003428 <HAL_GPIO_Init+0x2b0>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d046      	beq.n	8003272 <HAL_GPIO_Init+0xfa>
 80031e4:	4a90      	ldr	r2, [pc, #576]	; (8003428 <HAL_GPIO_Init+0x2b0>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d85d      	bhi.n	80032a6 <HAL_GPIO_Init+0x12e>
 80031ea:	2b12      	cmp	r3, #18
 80031ec:	d82a      	bhi.n	8003244 <HAL_GPIO_Init+0xcc>
 80031ee:	2b12      	cmp	r3, #18
 80031f0:	d859      	bhi.n	80032a6 <HAL_GPIO_Init+0x12e>
 80031f2:	a201      	add	r2, pc, #4	; (adr r2, 80031f8 <HAL_GPIO_Init+0x80>)
 80031f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031f8:	08003273 	.word	0x08003273
 80031fc:	0800324d 	.word	0x0800324d
 8003200:	0800325f 	.word	0x0800325f
 8003204:	080032a1 	.word	0x080032a1
 8003208:	080032a7 	.word	0x080032a7
 800320c:	080032a7 	.word	0x080032a7
 8003210:	080032a7 	.word	0x080032a7
 8003214:	080032a7 	.word	0x080032a7
 8003218:	080032a7 	.word	0x080032a7
 800321c:	080032a7 	.word	0x080032a7
 8003220:	080032a7 	.word	0x080032a7
 8003224:	080032a7 	.word	0x080032a7
 8003228:	080032a7 	.word	0x080032a7
 800322c:	080032a7 	.word	0x080032a7
 8003230:	080032a7 	.word	0x080032a7
 8003234:	080032a7 	.word	0x080032a7
 8003238:	080032a7 	.word	0x080032a7
 800323c:	08003255 	.word	0x08003255
 8003240:	08003269 	.word	0x08003269
 8003244:	4a79      	ldr	r2, [pc, #484]	; (800342c <HAL_GPIO_Init+0x2b4>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d013      	beq.n	8003272 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800324a:	e02c      	b.n	80032a6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	623b      	str	r3, [r7, #32]
          break;
 8003252:	e029      	b.n	80032a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	3304      	adds	r3, #4
 800325a:	623b      	str	r3, [r7, #32]
          break;
 800325c:	e024      	b.n	80032a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	3308      	adds	r3, #8
 8003264:	623b      	str	r3, [r7, #32]
          break;
 8003266:	e01f      	b.n	80032a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	330c      	adds	r3, #12
 800326e:	623b      	str	r3, [r7, #32]
          break;
 8003270:	e01a      	b.n	80032a8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d102      	bne.n	8003280 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800327a:	2304      	movs	r3, #4
 800327c:	623b      	str	r3, [r7, #32]
          break;
 800327e:	e013      	b.n	80032a8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d105      	bne.n	8003294 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003288:	2308      	movs	r3, #8
 800328a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	69fa      	ldr	r2, [r7, #28]
 8003290:	611a      	str	r2, [r3, #16]
          break;
 8003292:	e009      	b.n	80032a8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003294:	2308      	movs	r3, #8
 8003296:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	69fa      	ldr	r2, [r7, #28]
 800329c:	615a      	str	r2, [r3, #20]
          break;
 800329e:	e003      	b.n	80032a8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80032a0:	2300      	movs	r3, #0
 80032a2:	623b      	str	r3, [r7, #32]
          break;
 80032a4:	e000      	b.n	80032a8 <HAL_GPIO_Init+0x130>
          break;
 80032a6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	2bff      	cmp	r3, #255	; 0xff
 80032ac:	d801      	bhi.n	80032b2 <HAL_GPIO_Init+0x13a>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	e001      	b.n	80032b6 <HAL_GPIO_Init+0x13e>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	3304      	adds	r3, #4
 80032b6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	2bff      	cmp	r3, #255	; 0xff
 80032bc:	d802      	bhi.n	80032c4 <HAL_GPIO_Init+0x14c>
 80032be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	e002      	b.n	80032ca <HAL_GPIO_Init+0x152>
 80032c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c6:	3b08      	subs	r3, #8
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	210f      	movs	r1, #15
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	fa01 f303 	lsl.w	r3, r1, r3
 80032d8:	43db      	mvns	r3, r3
 80032da:	401a      	ands	r2, r3
 80032dc:	6a39      	ldr	r1, [r7, #32]
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	fa01 f303 	lsl.w	r3, r1, r3
 80032e4:	431a      	orrs	r2, r3
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f000 80b1 	beq.w	800345a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80032f8:	4b4d      	ldr	r3, [pc, #308]	; (8003430 <HAL_GPIO_Init+0x2b8>)
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	4a4c      	ldr	r2, [pc, #304]	; (8003430 <HAL_GPIO_Init+0x2b8>)
 80032fe:	f043 0301 	orr.w	r3, r3, #1
 8003302:	6193      	str	r3, [r2, #24]
 8003304:	4b4a      	ldr	r3, [pc, #296]	; (8003430 <HAL_GPIO_Init+0x2b8>)
 8003306:	699b      	ldr	r3, [r3, #24]
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	60bb      	str	r3, [r7, #8]
 800330e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003310:	4a48      	ldr	r2, [pc, #288]	; (8003434 <HAL_GPIO_Init+0x2bc>)
 8003312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003314:	089b      	lsrs	r3, r3, #2
 8003316:	3302      	adds	r3, #2
 8003318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800331c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800331e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003320:	f003 0303 	and.w	r3, r3, #3
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	220f      	movs	r2, #15
 8003328:	fa02 f303 	lsl.w	r3, r2, r3
 800332c:	43db      	mvns	r3, r3
 800332e:	68fa      	ldr	r2, [r7, #12]
 8003330:	4013      	ands	r3, r2
 8003332:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4a40      	ldr	r2, [pc, #256]	; (8003438 <HAL_GPIO_Init+0x2c0>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d013      	beq.n	8003364 <HAL_GPIO_Init+0x1ec>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	4a3f      	ldr	r2, [pc, #252]	; (800343c <HAL_GPIO_Init+0x2c4>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d00d      	beq.n	8003360 <HAL_GPIO_Init+0x1e8>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	4a3e      	ldr	r2, [pc, #248]	; (8003440 <HAL_GPIO_Init+0x2c8>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d007      	beq.n	800335c <HAL_GPIO_Init+0x1e4>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a3d      	ldr	r2, [pc, #244]	; (8003444 <HAL_GPIO_Init+0x2cc>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d101      	bne.n	8003358 <HAL_GPIO_Init+0x1e0>
 8003354:	2303      	movs	r3, #3
 8003356:	e006      	b.n	8003366 <HAL_GPIO_Init+0x1ee>
 8003358:	2304      	movs	r3, #4
 800335a:	e004      	b.n	8003366 <HAL_GPIO_Init+0x1ee>
 800335c:	2302      	movs	r3, #2
 800335e:	e002      	b.n	8003366 <HAL_GPIO_Init+0x1ee>
 8003360:	2301      	movs	r3, #1
 8003362:	e000      	b.n	8003366 <HAL_GPIO_Init+0x1ee>
 8003364:	2300      	movs	r3, #0
 8003366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003368:	f002 0203 	and.w	r2, r2, #3
 800336c:	0092      	lsls	r2, r2, #2
 800336e:	4093      	lsls	r3, r2
 8003370:	68fa      	ldr	r2, [r7, #12]
 8003372:	4313      	orrs	r3, r2
 8003374:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003376:	492f      	ldr	r1, [pc, #188]	; (8003434 <HAL_GPIO_Init+0x2bc>)
 8003378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337a:	089b      	lsrs	r3, r3, #2
 800337c:	3302      	adds	r3, #2
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d006      	beq.n	800339e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003390:	4b2d      	ldr	r3, [pc, #180]	; (8003448 <HAL_GPIO_Init+0x2d0>)
 8003392:	689a      	ldr	r2, [r3, #8]
 8003394:	492c      	ldr	r1, [pc, #176]	; (8003448 <HAL_GPIO_Init+0x2d0>)
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	4313      	orrs	r3, r2
 800339a:	608b      	str	r3, [r1, #8]
 800339c:	e006      	b.n	80033ac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800339e:	4b2a      	ldr	r3, [pc, #168]	; (8003448 <HAL_GPIO_Init+0x2d0>)
 80033a0:	689a      	ldr	r2, [r3, #8]
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	43db      	mvns	r3, r3
 80033a6:	4928      	ldr	r1, [pc, #160]	; (8003448 <HAL_GPIO_Init+0x2d0>)
 80033a8:	4013      	ands	r3, r2
 80033aa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d006      	beq.n	80033c6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80033b8:	4b23      	ldr	r3, [pc, #140]	; (8003448 <HAL_GPIO_Init+0x2d0>)
 80033ba:	68da      	ldr	r2, [r3, #12]
 80033bc:	4922      	ldr	r1, [pc, #136]	; (8003448 <HAL_GPIO_Init+0x2d0>)
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	60cb      	str	r3, [r1, #12]
 80033c4:	e006      	b.n	80033d4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80033c6:	4b20      	ldr	r3, [pc, #128]	; (8003448 <HAL_GPIO_Init+0x2d0>)
 80033c8:	68da      	ldr	r2, [r3, #12]
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	43db      	mvns	r3, r3
 80033ce:	491e      	ldr	r1, [pc, #120]	; (8003448 <HAL_GPIO_Init+0x2d0>)
 80033d0:	4013      	ands	r3, r2
 80033d2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d006      	beq.n	80033ee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80033e0:	4b19      	ldr	r3, [pc, #100]	; (8003448 <HAL_GPIO_Init+0x2d0>)
 80033e2:	685a      	ldr	r2, [r3, #4]
 80033e4:	4918      	ldr	r1, [pc, #96]	; (8003448 <HAL_GPIO_Init+0x2d0>)
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	604b      	str	r3, [r1, #4]
 80033ec:	e006      	b.n	80033fc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80033ee:	4b16      	ldr	r3, [pc, #88]	; (8003448 <HAL_GPIO_Init+0x2d0>)
 80033f0:	685a      	ldr	r2, [r3, #4]
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	43db      	mvns	r3, r3
 80033f6:	4914      	ldr	r1, [pc, #80]	; (8003448 <HAL_GPIO_Init+0x2d0>)
 80033f8:	4013      	ands	r3, r2
 80033fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d021      	beq.n	800344c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003408:	4b0f      	ldr	r3, [pc, #60]	; (8003448 <HAL_GPIO_Init+0x2d0>)
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	490e      	ldr	r1, [pc, #56]	; (8003448 <HAL_GPIO_Init+0x2d0>)
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	4313      	orrs	r3, r2
 8003412:	600b      	str	r3, [r1, #0]
 8003414:	e021      	b.n	800345a <HAL_GPIO_Init+0x2e2>
 8003416:	bf00      	nop
 8003418:	10320000 	.word	0x10320000
 800341c:	10310000 	.word	0x10310000
 8003420:	10220000 	.word	0x10220000
 8003424:	10210000 	.word	0x10210000
 8003428:	10120000 	.word	0x10120000
 800342c:	10110000 	.word	0x10110000
 8003430:	40021000 	.word	0x40021000
 8003434:	40010000 	.word	0x40010000
 8003438:	40010800 	.word	0x40010800
 800343c:	40010c00 	.word	0x40010c00
 8003440:	40011000 	.word	0x40011000
 8003444:	40011400 	.word	0x40011400
 8003448:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800344c:	4b0b      	ldr	r3, [pc, #44]	; (800347c <HAL_GPIO_Init+0x304>)
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	43db      	mvns	r3, r3
 8003454:	4909      	ldr	r1, [pc, #36]	; (800347c <HAL_GPIO_Init+0x304>)
 8003456:	4013      	ands	r3, r2
 8003458:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800345a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345c:	3301      	adds	r3, #1
 800345e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003466:	fa22 f303 	lsr.w	r3, r2, r3
 800346a:	2b00      	cmp	r3, #0
 800346c:	f47f ae8e 	bne.w	800318c <HAL_GPIO_Init+0x14>
  }
}
 8003470:	bf00      	nop
 8003472:	bf00      	nop
 8003474:	372c      	adds	r7, #44	; 0x2c
 8003476:	46bd      	mov	sp, r7
 8003478:	bc80      	pop	{r7}
 800347a:	4770      	bx	lr
 800347c:	40010400 	.word	0x40010400

08003480 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	460b      	mov	r3, r1
 800348a:	807b      	strh	r3, [r7, #2]
 800348c:	4613      	mov	r3, r2
 800348e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003490:	787b      	ldrb	r3, [r7, #1]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d003      	beq.n	800349e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003496:	887a      	ldrh	r2, [r7, #2]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800349c:	e003      	b.n	80034a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800349e:	887b      	ldrh	r3, [r7, #2]
 80034a0:	041a      	lsls	r2, r3, #16
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	611a      	str	r2, [r3, #16]
}
 80034a6:	bf00      	nop
 80034a8:	370c      	adds	r7, #12
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bc80      	pop	{r7}
 80034ae:	4770      	bx	lr

080034b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e272      	b.n	80039a8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	f000 8087 	beq.w	80035de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80034d0:	4b92      	ldr	r3, [pc, #584]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f003 030c 	and.w	r3, r3, #12
 80034d8:	2b04      	cmp	r3, #4
 80034da:	d00c      	beq.n	80034f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80034dc:	4b8f      	ldr	r3, [pc, #572]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f003 030c 	and.w	r3, r3, #12
 80034e4:	2b08      	cmp	r3, #8
 80034e6:	d112      	bne.n	800350e <HAL_RCC_OscConfig+0x5e>
 80034e8:	4b8c      	ldr	r3, [pc, #560]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034f4:	d10b      	bne.n	800350e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034f6:	4b89      	ldr	r3, [pc, #548]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d06c      	beq.n	80035dc <HAL_RCC_OscConfig+0x12c>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d168      	bne.n	80035dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e24c      	b.n	80039a8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003516:	d106      	bne.n	8003526 <HAL_RCC_OscConfig+0x76>
 8003518:	4b80      	ldr	r3, [pc, #512]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a7f      	ldr	r2, [pc, #508]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 800351e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003522:	6013      	str	r3, [r2, #0]
 8003524:	e02e      	b.n	8003584 <HAL_RCC_OscConfig+0xd4>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d10c      	bne.n	8003548 <HAL_RCC_OscConfig+0x98>
 800352e:	4b7b      	ldr	r3, [pc, #492]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a7a      	ldr	r2, [pc, #488]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 8003534:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003538:	6013      	str	r3, [r2, #0]
 800353a:	4b78      	ldr	r3, [pc, #480]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a77      	ldr	r2, [pc, #476]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 8003540:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003544:	6013      	str	r3, [r2, #0]
 8003546:	e01d      	b.n	8003584 <HAL_RCC_OscConfig+0xd4>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003550:	d10c      	bne.n	800356c <HAL_RCC_OscConfig+0xbc>
 8003552:	4b72      	ldr	r3, [pc, #456]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a71      	ldr	r2, [pc, #452]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 8003558:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800355c:	6013      	str	r3, [r2, #0]
 800355e:	4b6f      	ldr	r3, [pc, #444]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a6e      	ldr	r2, [pc, #440]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 8003564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003568:	6013      	str	r3, [r2, #0]
 800356a:	e00b      	b.n	8003584 <HAL_RCC_OscConfig+0xd4>
 800356c:	4b6b      	ldr	r3, [pc, #428]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a6a      	ldr	r2, [pc, #424]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 8003572:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003576:	6013      	str	r3, [r2, #0]
 8003578:	4b68      	ldr	r3, [pc, #416]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a67      	ldr	r2, [pc, #412]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 800357e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003582:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d013      	beq.n	80035b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800358c:	f7fe fbe2 	bl	8001d54 <HAL_GetTick>
 8003590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003592:	e008      	b.n	80035a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003594:	f7fe fbde 	bl	8001d54 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b64      	cmp	r3, #100	; 0x64
 80035a0:	d901      	bls.n	80035a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e200      	b.n	80039a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035a6:	4b5d      	ldr	r3, [pc, #372]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d0f0      	beq.n	8003594 <HAL_RCC_OscConfig+0xe4>
 80035b2:	e014      	b.n	80035de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b4:	f7fe fbce 	bl	8001d54 <HAL_GetTick>
 80035b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ba:	e008      	b.n	80035ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035bc:	f7fe fbca 	bl	8001d54 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b64      	cmp	r3, #100	; 0x64
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e1ec      	b.n	80039a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ce:	4b53      	ldr	r3, [pc, #332]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1f0      	bne.n	80035bc <HAL_RCC_OscConfig+0x10c>
 80035da:	e000      	b.n	80035de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d063      	beq.n	80036b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035ea:	4b4c      	ldr	r3, [pc, #304]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f003 030c 	and.w	r3, r3, #12
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00b      	beq.n	800360e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80035f6:	4b49      	ldr	r3, [pc, #292]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f003 030c 	and.w	r3, r3, #12
 80035fe:	2b08      	cmp	r3, #8
 8003600:	d11c      	bne.n	800363c <HAL_RCC_OscConfig+0x18c>
 8003602:	4b46      	ldr	r3, [pc, #280]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d116      	bne.n	800363c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800360e:	4b43      	ldr	r3, [pc, #268]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d005      	beq.n	8003626 <HAL_RCC_OscConfig+0x176>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d001      	beq.n	8003626 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e1c0      	b.n	80039a8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003626:	4b3d      	ldr	r3, [pc, #244]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	00db      	lsls	r3, r3, #3
 8003634:	4939      	ldr	r1, [pc, #228]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 8003636:	4313      	orrs	r3, r2
 8003638:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800363a:	e03a      	b.n	80036b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	691b      	ldr	r3, [r3, #16]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d020      	beq.n	8003686 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003644:	4b36      	ldr	r3, [pc, #216]	; (8003720 <HAL_RCC_OscConfig+0x270>)
 8003646:	2201      	movs	r2, #1
 8003648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800364a:	f7fe fb83 	bl	8001d54 <HAL_GetTick>
 800364e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003650:	e008      	b.n	8003664 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003652:	f7fe fb7f 	bl	8001d54 <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	2b02      	cmp	r3, #2
 800365e:	d901      	bls.n	8003664 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	e1a1      	b.n	80039a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003664:	4b2d      	ldr	r3, [pc, #180]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0302 	and.w	r3, r3, #2
 800366c:	2b00      	cmp	r3, #0
 800366e:	d0f0      	beq.n	8003652 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003670:	4b2a      	ldr	r3, [pc, #168]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	695b      	ldr	r3, [r3, #20]
 800367c:	00db      	lsls	r3, r3, #3
 800367e:	4927      	ldr	r1, [pc, #156]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 8003680:	4313      	orrs	r3, r2
 8003682:	600b      	str	r3, [r1, #0]
 8003684:	e015      	b.n	80036b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003686:	4b26      	ldr	r3, [pc, #152]	; (8003720 <HAL_RCC_OscConfig+0x270>)
 8003688:	2200      	movs	r2, #0
 800368a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800368c:	f7fe fb62 	bl	8001d54 <HAL_GetTick>
 8003690:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003692:	e008      	b.n	80036a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003694:	f7fe fb5e 	bl	8001d54 <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d901      	bls.n	80036a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e180      	b.n	80039a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036a6:	4b1d      	ldr	r3, [pc, #116]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d1f0      	bne.n	8003694 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0308 	and.w	r3, r3, #8
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d03a      	beq.n	8003734 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d019      	beq.n	80036fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036c6:	4b17      	ldr	r3, [pc, #92]	; (8003724 <HAL_RCC_OscConfig+0x274>)
 80036c8:	2201      	movs	r2, #1
 80036ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036cc:	f7fe fb42 	bl	8001d54 <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036d2:	e008      	b.n	80036e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036d4:	f7fe fb3e 	bl	8001d54 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e160      	b.n	80039a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036e6:	4b0d      	ldr	r3, [pc, #52]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 80036e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d0f0      	beq.n	80036d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80036f2:	2001      	movs	r0, #1
 80036f4:	f000 fafe 	bl	8003cf4 <RCC_Delay>
 80036f8:	e01c      	b.n	8003734 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036fa:	4b0a      	ldr	r3, [pc, #40]	; (8003724 <HAL_RCC_OscConfig+0x274>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003700:	f7fe fb28 	bl	8001d54 <HAL_GetTick>
 8003704:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003706:	e00f      	b.n	8003728 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003708:	f7fe fb24 	bl	8001d54 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b02      	cmp	r3, #2
 8003714:	d908      	bls.n	8003728 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e146      	b.n	80039a8 <HAL_RCC_OscConfig+0x4f8>
 800371a:	bf00      	nop
 800371c:	40021000 	.word	0x40021000
 8003720:	42420000 	.word	0x42420000
 8003724:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003728:	4b92      	ldr	r3, [pc, #584]	; (8003974 <HAL_RCC_OscConfig+0x4c4>)
 800372a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372c:	f003 0302 	and.w	r3, r3, #2
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1e9      	bne.n	8003708 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0304 	and.w	r3, r3, #4
 800373c:	2b00      	cmp	r3, #0
 800373e:	f000 80a6 	beq.w	800388e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003742:	2300      	movs	r3, #0
 8003744:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003746:	4b8b      	ldr	r3, [pc, #556]	; (8003974 <HAL_RCC_OscConfig+0x4c4>)
 8003748:	69db      	ldr	r3, [r3, #28]
 800374a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d10d      	bne.n	800376e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003752:	4b88      	ldr	r3, [pc, #544]	; (8003974 <HAL_RCC_OscConfig+0x4c4>)
 8003754:	69db      	ldr	r3, [r3, #28]
 8003756:	4a87      	ldr	r2, [pc, #540]	; (8003974 <HAL_RCC_OscConfig+0x4c4>)
 8003758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800375c:	61d3      	str	r3, [r2, #28]
 800375e:	4b85      	ldr	r3, [pc, #532]	; (8003974 <HAL_RCC_OscConfig+0x4c4>)
 8003760:	69db      	ldr	r3, [r3, #28]
 8003762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003766:	60bb      	str	r3, [r7, #8]
 8003768:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800376a:	2301      	movs	r3, #1
 800376c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800376e:	4b82      	ldr	r3, [pc, #520]	; (8003978 <HAL_RCC_OscConfig+0x4c8>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003776:	2b00      	cmp	r3, #0
 8003778:	d118      	bne.n	80037ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800377a:	4b7f      	ldr	r3, [pc, #508]	; (8003978 <HAL_RCC_OscConfig+0x4c8>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a7e      	ldr	r2, [pc, #504]	; (8003978 <HAL_RCC_OscConfig+0x4c8>)
 8003780:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003784:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003786:	f7fe fae5 	bl	8001d54 <HAL_GetTick>
 800378a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800378c:	e008      	b.n	80037a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800378e:	f7fe fae1 	bl	8001d54 <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	2b64      	cmp	r3, #100	; 0x64
 800379a:	d901      	bls.n	80037a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e103      	b.n	80039a8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a0:	4b75      	ldr	r3, [pc, #468]	; (8003978 <HAL_RCC_OscConfig+0x4c8>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d0f0      	beq.n	800378e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d106      	bne.n	80037c2 <HAL_RCC_OscConfig+0x312>
 80037b4:	4b6f      	ldr	r3, [pc, #444]	; (8003974 <HAL_RCC_OscConfig+0x4c4>)
 80037b6:	6a1b      	ldr	r3, [r3, #32]
 80037b8:	4a6e      	ldr	r2, [pc, #440]	; (8003974 <HAL_RCC_OscConfig+0x4c4>)
 80037ba:	f043 0301 	orr.w	r3, r3, #1
 80037be:	6213      	str	r3, [r2, #32]
 80037c0:	e02d      	b.n	800381e <HAL_RCC_OscConfig+0x36e>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d10c      	bne.n	80037e4 <HAL_RCC_OscConfig+0x334>
 80037ca:	4b6a      	ldr	r3, [pc, #424]	; (8003974 <HAL_RCC_OscConfig+0x4c4>)
 80037cc:	6a1b      	ldr	r3, [r3, #32]
 80037ce:	4a69      	ldr	r2, [pc, #420]	; (8003974 <HAL_RCC_OscConfig+0x4c4>)
 80037d0:	f023 0301 	bic.w	r3, r3, #1
 80037d4:	6213      	str	r3, [r2, #32]
 80037d6:	4b67      	ldr	r3, [pc, #412]	; (8003974 <HAL_RCC_OscConfig+0x4c4>)
 80037d8:	6a1b      	ldr	r3, [r3, #32]
 80037da:	4a66      	ldr	r2, [pc, #408]	; (8003974 <HAL_RCC_OscConfig+0x4c4>)
 80037dc:	f023 0304 	bic.w	r3, r3, #4
 80037e0:	6213      	str	r3, [r2, #32]
 80037e2:	e01c      	b.n	800381e <HAL_RCC_OscConfig+0x36e>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	2b05      	cmp	r3, #5
 80037ea:	d10c      	bne.n	8003806 <HAL_RCC_OscConfig+0x356>
 80037ec:	4b61      	ldr	r3, [pc, #388]	; (8003974 <HAL_RCC_OscConfig+0x4c4>)
 80037ee:	6a1b      	ldr	r3, [r3, #32]
 80037f0:	4a60      	ldr	r2, [pc, #384]	; (8003974 <HAL_RCC_OscConfig+0x4c4>)
 80037f2:	f043 0304 	orr.w	r3, r3, #4
 80037f6:	6213      	str	r3, [r2, #32]
 80037f8:	4b5e      	ldr	r3, [pc, #376]	; (8003974 <HAL_RCC_OscConfig+0x4c4>)
 80037fa:	6a1b      	ldr	r3, [r3, #32]
 80037fc:	4a5d      	ldr	r2, [pc, #372]	; (8003974 <HAL_RCC_OscConfig+0x4c4>)
 80037fe:	f043 0301 	orr.w	r3, r3, #1
 8003802:	6213      	str	r3, [r2, #32]
 8003804:	e00b      	b.n	800381e <HAL_RCC_OscConfig+0x36e>
 8003806:	4b5b      	ldr	r3, [pc, #364]	; (8003974 <HAL_RCC_OscConfig+0x4c4>)
 8003808:	6a1b      	ldr	r3, [r3, #32]
 800380a:	4a5a      	ldr	r2, [pc, #360]	; (8003974 <HAL_RCC_OscConfig+0x4c4>)
 800380c:	f023 0301 	bic.w	r3, r3, #1
 8003810:	6213      	str	r3, [r2, #32]
 8003812:	4b58      	ldr	r3, [pc, #352]	; (8003974 <HAL_RCC_OscConfig+0x4c4>)
 8003814:	6a1b      	ldr	r3, [r3, #32]
 8003816:	4a57      	ldr	r2, [pc, #348]	; (8003974 <HAL_RCC_OscConfig+0x4c4>)
 8003818:	f023 0304 	bic.w	r3, r3, #4
 800381c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d015      	beq.n	8003852 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003826:	f7fe fa95 	bl	8001d54 <HAL_GetTick>
 800382a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800382c:	e00a      	b.n	8003844 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800382e:	f7fe fa91 	bl	8001d54 <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	f241 3288 	movw	r2, #5000	; 0x1388
 800383c:	4293      	cmp	r3, r2
 800383e:	d901      	bls.n	8003844 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e0b1      	b.n	80039a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003844:	4b4b      	ldr	r3, [pc, #300]	; (8003974 <HAL_RCC_OscConfig+0x4c4>)
 8003846:	6a1b      	ldr	r3, [r3, #32]
 8003848:	f003 0302 	and.w	r3, r3, #2
 800384c:	2b00      	cmp	r3, #0
 800384e:	d0ee      	beq.n	800382e <HAL_RCC_OscConfig+0x37e>
 8003850:	e014      	b.n	800387c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003852:	f7fe fa7f 	bl	8001d54 <HAL_GetTick>
 8003856:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003858:	e00a      	b.n	8003870 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800385a:	f7fe fa7b 	bl	8001d54 <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	f241 3288 	movw	r2, #5000	; 0x1388
 8003868:	4293      	cmp	r3, r2
 800386a:	d901      	bls.n	8003870 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800386c:	2303      	movs	r3, #3
 800386e:	e09b      	b.n	80039a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003870:	4b40      	ldr	r3, [pc, #256]	; (8003974 <HAL_RCC_OscConfig+0x4c4>)
 8003872:	6a1b      	ldr	r3, [r3, #32]
 8003874:	f003 0302 	and.w	r3, r3, #2
 8003878:	2b00      	cmp	r3, #0
 800387a:	d1ee      	bne.n	800385a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800387c:	7dfb      	ldrb	r3, [r7, #23]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d105      	bne.n	800388e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003882:	4b3c      	ldr	r3, [pc, #240]	; (8003974 <HAL_RCC_OscConfig+0x4c4>)
 8003884:	69db      	ldr	r3, [r3, #28]
 8003886:	4a3b      	ldr	r2, [pc, #236]	; (8003974 <HAL_RCC_OscConfig+0x4c4>)
 8003888:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800388c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	69db      	ldr	r3, [r3, #28]
 8003892:	2b00      	cmp	r3, #0
 8003894:	f000 8087 	beq.w	80039a6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003898:	4b36      	ldr	r3, [pc, #216]	; (8003974 <HAL_RCC_OscConfig+0x4c4>)
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f003 030c 	and.w	r3, r3, #12
 80038a0:	2b08      	cmp	r3, #8
 80038a2:	d061      	beq.n	8003968 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	69db      	ldr	r3, [r3, #28]
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d146      	bne.n	800393a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ac:	4b33      	ldr	r3, [pc, #204]	; (800397c <HAL_RCC_OscConfig+0x4cc>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b2:	f7fe fa4f 	bl	8001d54 <HAL_GetTick>
 80038b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038b8:	e008      	b.n	80038cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038ba:	f7fe fa4b 	bl	8001d54 <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d901      	bls.n	80038cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e06d      	b.n	80039a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038cc:	4b29      	ldr	r3, [pc, #164]	; (8003974 <HAL_RCC_OscConfig+0x4c4>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d1f0      	bne.n	80038ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a1b      	ldr	r3, [r3, #32]
 80038dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038e0:	d108      	bne.n	80038f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80038e2:	4b24      	ldr	r3, [pc, #144]	; (8003974 <HAL_RCC_OscConfig+0x4c4>)
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	4921      	ldr	r1, [pc, #132]	; (8003974 <HAL_RCC_OscConfig+0x4c4>)
 80038f0:	4313      	orrs	r3, r2
 80038f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038f4:	4b1f      	ldr	r3, [pc, #124]	; (8003974 <HAL_RCC_OscConfig+0x4c4>)
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a19      	ldr	r1, [r3, #32]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003904:	430b      	orrs	r3, r1
 8003906:	491b      	ldr	r1, [pc, #108]	; (8003974 <HAL_RCC_OscConfig+0x4c4>)
 8003908:	4313      	orrs	r3, r2
 800390a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800390c:	4b1b      	ldr	r3, [pc, #108]	; (800397c <HAL_RCC_OscConfig+0x4cc>)
 800390e:	2201      	movs	r2, #1
 8003910:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003912:	f7fe fa1f 	bl	8001d54 <HAL_GetTick>
 8003916:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003918:	e008      	b.n	800392c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800391a:	f7fe fa1b 	bl	8001d54 <HAL_GetTick>
 800391e:	4602      	mov	r2, r0
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	2b02      	cmp	r3, #2
 8003926:	d901      	bls.n	800392c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	e03d      	b.n	80039a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800392c:	4b11      	ldr	r3, [pc, #68]	; (8003974 <HAL_RCC_OscConfig+0x4c4>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d0f0      	beq.n	800391a <HAL_RCC_OscConfig+0x46a>
 8003938:	e035      	b.n	80039a6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800393a:	4b10      	ldr	r3, [pc, #64]	; (800397c <HAL_RCC_OscConfig+0x4cc>)
 800393c:	2200      	movs	r2, #0
 800393e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003940:	f7fe fa08 	bl	8001d54 <HAL_GetTick>
 8003944:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003946:	e008      	b.n	800395a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003948:	f7fe fa04 	bl	8001d54 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b02      	cmp	r3, #2
 8003954:	d901      	bls.n	800395a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e026      	b.n	80039a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800395a:	4b06      	ldr	r3, [pc, #24]	; (8003974 <HAL_RCC_OscConfig+0x4c4>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1f0      	bne.n	8003948 <HAL_RCC_OscConfig+0x498>
 8003966:	e01e      	b.n	80039a6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	69db      	ldr	r3, [r3, #28]
 800396c:	2b01      	cmp	r3, #1
 800396e:	d107      	bne.n	8003980 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e019      	b.n	80039a8 <HAL_RCC_OscConfig+0x4f8>
 8003974:	40021000 	.word	0x40021000
 8003978:	40007000 	.word	0x40007000
 800397c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003980:	4b0b      	ldr	r3, [pc, #44]	; (80039b0 <HAL_RCC_OscConfig+0x500>)
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a1b      	ldr	r3, [r3, #32]
 8003990:	429a      	cmp	r2, r3
 8003992:	d106      	bne.n	80039a2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800399e:	429a      	cmp	r2, r3
 80039a0:	d001      	beq.n	80039a6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e000      	b.n	80039a8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80039a6:	2300      	movs	r3, #0
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3718      	adds	r7, #24
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	40021000 	.word	0x40021000

080039b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d101      	bne.n	80039c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e0d0      	b.n	8003b6a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039c8:	4b6a      	ldr	r3, [pc, #424]	; (8003b74 <HAL_RCC_ClockConfig+0x1c0>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0307 	and.w	r3, r3, #7
 80039d0:	683a      	ldr	r2, [r7, #0]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d910      	bls.n	80039f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039d6:	4b67      	ldr	r3, [pc, #412]	; (8003b74 <HAL_RCC_ClockConfig+0x1c0>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f023 0207 	bic.w	r2, r3, #7
 80039de:	4965      	ldr	r1, [pc, #404]	; (8003b74 <HAL_RCC_ClockConfig+0x1c0>)
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039e6:	4b63      	ldr	r3, [pc, #396]	; (8003b74 <HAL_RCC_ClockConfig+0x1c0>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0307 	and.w	r3, r3, #7
 80039ee:	683a      	ldr	r2, [r7, #0]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d001      	beq.n	80039f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e0b8      	b.n	8003b6a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0302 	and.w	r3, r3, #2
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d020      	beq.n	8003a46 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0304 	and.w	r3, r3, #4
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d005      	beq.n	8003a1c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a10:	4b59      	ldr	r3, [pc, #356]	; (8003b78 <HAL_RCC_ClockConfig+0x1c4>)
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	4a58      	ldr	r2, [pc, #352]	; (8003b78 <HAL_RCC_ClockConfig+0x1c4>)
 8003a16:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a1a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0308 	and.w	r3, r3, #8
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d005      	beq.n	8003a34 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a28:	4b53      	ldr	r3, [pc, #332]	; (8003b78 <HAL_RCC_ClockConfig+0x1c4>)
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	4a52      	ldr	r2, [pc, #328]	; (8003b78 <HAL_RCC_ClockConfig+0x1c4>)
 8003a2e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003a32:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a34:	4b50      	ldr	r3, [pc, #320]	; (8003b78 <HAL_RCC_ClockConfig+0x1c4>)
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	494d      	ldr	r1, [pc, #308]	; (8003b78 <HAL_RCC_ClockConfig+0x1c4>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d040      	beq.n	8003ad4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d107      	bne.n	8003a6a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a5a:	4b47      	ldr	r3, [pc, #284]	; (8003b78 <HAL_RCC_ClockConfig+0x1c4>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d115      	bne.n	8003a92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e07f      	b.n	8003b6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d107      	bne.n	8003a82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a72:	4b41      	ldr	r3, [pc, #260]	; (8003b78 <HAL_RCC_ClockConfig+0x1c4>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d109      	bne.n	8003a92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e073      	b.n	8003b6a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a82:	4b3d      	ldr	r3, [pc, #244]	; (8003b78 <HAL_RCC_ClockConfig+0x1c4>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d101      	bne.n	8003a92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e06b      	b.n	8003b6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a92:	4b39      	ldr	r3, [pc, #228]	; (8003b78 <HAL_RCC_ClockConfig+0x1c4>)
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f023 0203 	bic.w	r2, r3, #3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	4936      	ldr	r1, [pc, #216]	; (8003b78 <HAL_RCC_ClockConfig+0x1c4>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003aa4:	f7fe f956 	bl	8001d54 <HAL_GetTick>
 8003aa8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aaa:	e00a      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003aac:	f7fe f952 	bl	8001d54 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d901      	bls.n	8003ac2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e053      	b.n	8003b6a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ac2:	4b2d      	ldr	r3, [pc, #180]	; (8003b78 <HAL_RCC_ClockConfig+0x1c4>)
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f003 020c 	and.w	r2, r3, #12
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d1eb      	bne.n	8003aac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ad4:	4b27      	ldr	r3, [pc, #156]	; (8003b74 <HAL_RCC_ClockConfig+0x1c0>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0307 	and.w	r3, r3, #7
 8003adc:	683a      	ldr	r2, [r7, #0]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d210      	bcs.n	8003b04 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ae2:	4b24      	ldr	r3, [pc, #144]	; (8003b74 <HAL_RCC_ClockConfig+0x1c0>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f023 0207 	bic.w	r2, r3, #7
 8003aea:	4922      	ldr	r1, [pc, #136]	; (8003b74 <HAL_RCC_ClockConfig+0x1c0>)
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003af2:	4b20      	ldr	r3, [pc, #128]	; (8003b74 <HAL_RCC_ClockConfig+0x1c0>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0307 	and.w	r3, r3, #7
 8003afa:	683a      	ldr	r2, [r7, #0]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d001      	beq.n	8003b04 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e032      	b.n	8003b6a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0304 	and.w	r3, r3, #4
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d008      	beq.n	8003b22 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b10:	4b19      	ldr	r3, [pc, #100]	; (8003b78 <HAL_RCC_ClockConfig+0x1c4>)
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	4916      	ldr	r1, [pc, #88]	; (8003b78 <HAL_RCC_ClockConfig+0x1c4>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0308 	and.w	r3, r3, #8
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d009      	beq.n	8003b42 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b2e:	4b12      	ldr	r3, [pc, #72]	; (8003b78 <HAL_RCC_ClockConfig+0x1c4>)
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	00db      	lsls	r3, r3, #3
 8003b3c:	490e      	ldr	r1, [pc, #56]	; (8003b78 <HAL_RCC_ClockConfig+0x1c4>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b42:	f000 f821 	bl	8003b88 <HAL_RCC_GetSysClockFreq>
 8003b46:	4602      	mov	r2, r0
 8003b48:	4b0b      	ldr	r3, [pc, #44]	; (8003b78 <HAL_RCC_ClockConfig+0x1c4>)
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	091b      	lsrs	r3, r3, #4
 8003b4e:	f003 030f 	and.w	r3, r3, #15
 8003b52:	490a      	ldr	r1, [pc, #40]	; (8003b7c <HAL_RCC_ClockConfig+0x1c8>)
 8003b54:	5ccb      	ldrb	r3, [r1, r3]
 8003b56:	fa22 f303 	lsr.w	r3, r2, r3
 8003b5a:	4a09      	ldr	r2, [pc, #36]	; (8003b80 <HAL_RCC_ClockConfig+0x1cc>)
 8003b5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b5e:	4b09      	ldr	r3, [pc, #36]	; (8003b84 <HAL_RCC_ClockConfig+0x1d0>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7fd fe64 	bl	8001830 <HAL_InitTick>

  return HAL_OK;
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3710      	adds	r7, #16
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	40022000 	.word	0x40022000
 8003b78:	40021000 	.word	0x40021000
 8003b7c:	0800a784 	.word	0x0800a784
 8003b80:	20000000 	.word	0x20000000
 8003b84:	20000004 	.word	0x20000004

08003b88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b087      	sub	sp, #28
 8003b8c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	60fb      	str	r3, [r7, #12]
 8003b92:	2300      	movs	r3, #0
 8003b94:	60bb      	str	r3, [r7, #8]
 8003b96:	2300      	movs	r3, #0
 8003b98:	617b      	str	r3, [r7, #20]
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003ba2:	4b1e      	ldr	r3, [pc, #120]	; (8003c1c <HAL_RCC_GetSysClockFreq+0x94>)
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f003 030c 	and.w	r3, r3, #12
 8003bae:	2b04      	cmp	r3, #4
 8003bb0:	d002      	beq.n	8003bb8 <HAL_RCC_GetSysClockFreq+0x30>
 8003bb2:	2b08      	cmp	r3, #8
 8003bb4:	d003      	beq.n	8003bbe <HAL_RCC_GetSysClockFreq+0x36>
 8003bb6:	e027      	b.n	8003c08 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003bb8:	4b19      	ldr	r3, [pc, #100]	; (8003c20 <HAL_RCC_GetSysClockFreq+0x98>)
 8003bba:	613b      	str	r3, [r7, #16]
      break;
 8003bbc:	e027      	b.n	8003c0e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	0c9b      	lsrs	r3, r3, #18
 8003bc2:	f003 030f 	and.w	r3, r3, #15
 8003bc6:	4a17      	ldr	r2, [pc, #92]	; (8003c24 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003bc8:	5cd3      	ldrb	r3, [r2, r3]
 8003bca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d010      	beq.n	8003bf8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003bd6:	4b11      	ldr	r3, [pc, #68]	; (8003c1c <HAL_RCC_GetSysClockFreq+0x94>)
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	0c5b      	lsrs	r3, r3, #17
 8003bdc:	f003 0301 	and.w	r3, r3, #1
 8003be0:	4a11      	ldr	r2, [pc, #68]	; (8003c28 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003be2:	5cd3      	ldrb	r3, [r2, r3]
 8003be4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a0d      	ldr	r2, [pc, #52]	; (8003c20 <HAL_RCC_GetSysClockFreq+0x98>)
 8003bea:	fb03 f202 	mul.w	r2, r3, r2
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf4:	617b      	str	r3, [r7, #20]
 8003bf6:	e004      	b.n	8003c02 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a0c      	ldr	r2, [pc, #48]	; (8003c2c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003bfc:	fb02 f303 	mul.w	r3, r2, r3
 8003c00:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	613b      	str	r3, [r7, #16]
      break;
 8003c06:	e002      	b.n	8003c0e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c08:	4b05      	ldr	r3, [pc, #20]	; (8003c20 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c0a:	613b      	str	r3, [r7, #16]
      break;
 8003c0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c0e:	693b      	ldr	r3, [r7, #16]
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	371c      	adds	r7, #28
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bc80      	pop	{r7}
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	40021000 	.word	0x40021000
 8003c20:	007a1200 	.word	0x007a1200
 8003c24:	0800a79c 	.word	0x0800a79c
 8003c28:	0800a7ac 	.word	0x0800a7ac
 8003c2c:	003d0900 	.word	0x003d0900

08003c30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c30:	b480      	push	{r7}
 8003c32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c34:	4b02      	ldr	r3, [pc, #8]	; (8003c40 <HAL_RCC_GetHCLKFreq+0x10>)
 8003c36:	681b      	ldr	r3, [r3, #0]
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bc80      	pop	{r7}
 8003c3e:	4770      	bx	lr
 8003c40:	20000000 	.word	0x20000000

08003c44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c48:	f7ff fff2 	bl	8003c30 <HAL_RCC_GetHCLKFreq>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	4b05      	ldr	r3, [pc, #20]	; (8003c64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	0a1b      	lsrs	r3, r3, #8
 8003c54:	f003 0307 	and.w	r3, r3, #7
 8003c58:	4903      	ldr	r1, [pc, #12]	; (8003c68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c5a:	5ccb      	ldrb	r3, [r1, r3]
 8003c5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	40021000 	.word	0x40021000
 8003c68:	0800a794 	.word	0x0800a794

08003c6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c70:	f7ff ffde 	bl	8003c30 <HAL_RCC_GetHCLKFreq>
 8003c74:	4602      	mov	r2, r0
 8003c76:	4b05      	ldr	r3, [pc, #20]	; (8003c8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	0adb      	lsrs	r3, r3, #11
 8003c7c:	f003 0307 	and.w	r3, r3, #7
 8003c80:	4903      	ldr	r1, [pc, #12]	; (8003c90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c82:	5ccb      	ldrb	r3, [r1, r3]
 8003c84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	40021000 	.word	0x40021000
 8003c90:	0800a794 	.word	0x0800a794

08003c94 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	220f      	movs	r2, #15
 8003ca2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003ca4:	4b11      	ldr	r3, [pc, #68]	; (8003cec <HAL_RCC_GetClockConfig+0x58>)
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f003 0203 	and.w	r2, r3, #3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003cb0:	4b0e      	ldr	r3, [pc, #56]	; (8003cec <HAL_RCC_GetClockConfig+0x58>)
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003cbc:	4b0b      	ldr	r3, [pc, #44]	; (8003cec <HAL_RCC_GetClockConfig+0x58>)
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003cc8:	4b08      	ldr	r3, [pc, #32]	; (8003cec <HAL_RCC_GetClockConfig+0x58>)
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	08db      	lsrs	r3, r3, #3
 8003cce:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003cd6:	4b06      	ldr	r3, [pc, #24]	; (8003cf0 <HAL_RCC_GetClockConfig+0x5c>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0207 	and.w	r2, r3, #7
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003ce2:	bf00      	nop
 8003ce4:	370c      	adds	r7, #12
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bc80      	pop	{r7}
 8003cea:	4770      	bx	lr
 8003cec:	40021000 	.word	0x40021000
 8003cf0:	40022000 	.word	0x40022000

08003cf4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003cfc:	4b0a      	ldr	r3, [pc, #40]	; (8003d28 <RCC_Delay+0x34>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a0a      	ldr	r2, [pc, #40]	; (8003d2c <RCC_Delay+0x38>)
 8003d02:	fba2 2303 	umull	r2, r3, r2, r3
 8003d06:	0a5b      	lsrs	r3, r3, #9
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	fb02 f303 	mul.w	r3, r2, r3
 8003d0e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003d10:	bf00      	nop
  }
  while (Delay --);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	1e5a      	subs	r2, r3, #1
 8003d16:	60fa      	str	r2, [r7, #12]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d1f9      	bne.n	8003d10 <RCC_Delay+0x1c>
}
 8003d1c:	bf00      	nop
 8003d1e:	bf00      	nop
 8003d20:	3714      	adds	r7, #20
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bc80      	pop	{r7}
 8003d26:	4770      	bx	lr
 8003d28:	20000000 	.word	0x20000000
 8003d2c:	10624dd3 	.word	0x10624dd3

08003d30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e041      	b.n	8003dc6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d106      	bne.n	8003d5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 f839 	bl	8003dce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2202      	movs	r2, #2
 8003d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	3304      	adds	r3, #4
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	4610      	mov	r0, r2
 8003d70:	f000 f9b4 	bl	80040dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3708      	adds	r7, #8
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}

08003dce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003dce:	b480      	push	{r7}
 8003dd0:	b083      	sub	sp, #12
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003dd6:	bf00      	nop
 8003dd8:	370c      	adds	r7, #12
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bc80      	pop	{r7}
 8003dde:	4770      	bx	lr

08003de0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b085      	sub	sp, #20
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d001      	beq.n	8003df8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e03a      	b.n	8003e6e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2202      	movs	r2, #2
 8003dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68da      	ldr	r2, [r3, #12]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f042 0201 	orr.w	r2, r2, #1
 8003e0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a18      	ldr	r2, [pc, #96]	; (8003e78 <HAL_TIM_Base_Start_IT+0x98>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d00e      	beq.n	8003e38 <HAL_TIM_Base_Start_IT+0x58>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e22:	d009      	beq.n	8003e38 <HAL_TIM_Base_Start_IT+0x58>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a14      	ldr	r2, [pc, #80]	; (8003e7c <HAL_TIM_Base_Start_IT+0x9c>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d004      	beq.n	8003e38 <HAL_TIM_Base_Start_IT+0x58>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a13      	ldr	r2, [pc, #76]	; (8003e80 <HAL_TIM_Base_Start_IT+0xa0>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d111      	bne.n	8003e5c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f003 0307 	and.w	r3, r3, #7
 8003e42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2b06      	cmp	r3, #6
 8003e48:	d010      	beq.n	8003e6c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f042 0201 	orr.w	r2, r2, #1
 8003e58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e5a:	e007      	b.n	8003e6c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f042 0201 	orr.w	r2, r2, #1
 8003e6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3714      	adds	r7, #20
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bc80      	pop	{r7}
 8003e76:	4770      	bx	lr
 8003e78:	40012c00 	.word	0x40012c00
 8003e7c:	40000400 	.word	0x40000400
 8003e80:	40000800 	.word	0x40000800

08003e84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d122      	bne.n	8003ee0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	f003 0302 	and.w	r3, r3, #2
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d11b      	bne.n	8003ee0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f06f 0202 	mvn.w	r2, #2
 8003eb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	699b      	ldr	r3, [r3, #24]
 8003ebe:	f003 0303 	and.w	r3, r3, #3
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d003      	beq.n	8003ece <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 f8ed 	bl	80040a6 <HAL_TIM_IC_CaptureCallback>
 8003ecc:	e005      	b.n	8003eda <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 f8e0 	bl	8004094 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f000 f8ef 	bl	80040b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	f003 0304 	and.w	r3, r3, #4
 8003eea:	2b04      	cmp	r3, #4
 8003eec:	d122      	bne.n	8003f34 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	f003 0304 	and.w	r3, r3, #4
 8003ef8:	2b04      	cmp	r3, #4
 8003efa:	d11b      	bne.n	8003f34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f06f 0204 	mvn.w	r2, #4
 8003f04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2202      	movs	r2, #2
 8003f0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	699b      	ldr	r3, [r3, #24]
 8003f12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d003      	beq.n	8003f22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 f8c3 	bl	80040a6 <HAL_TIM_IC_CaptureCallback>
 8003f20:	e005      	b.n	8003f2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 f8b6 	bl	8004094 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f000 f8c5 	bl	80040b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	f003 0308 	and.w	r3, r3, #8
 8003f3e:	2b08      	cmp	r3, #8
 8003f40:	d122      	bne.n	8003f88 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	f003 0308 	and.w	r3, r3, #8
 8003f4c:	2b08      	cmp	r3, #8
 8003f4e:	d11b      	bne.n	8003f88 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f06f 0208 	mvn.w	r2, #8
 8003f58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2204      	movs	r2, #4
 8003f5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	69db      	ldr	r3, [r3, #28]
 8003f66:	f003 0303 	and.w	r3, r3, #3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d003      	beq.n	8003f76 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 f899 	bl	80040a6 <HAL_TIM_IC_CaptureCallback>
 8003f74:	e005      	b.n	8003f82 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 f88c 	bl	8004094 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f000 f89b 	bl	80040b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	691b      	ldr	r3, [r3, #16]
 8003f8e:	f003 0310 	and.w	r3, r3, #16
 8003f92:	2b10      	cmp	r3, #16
 8003f94:	d122      	bne.n	8003fdc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	f003 0310 	and.w	r3, r3, #16
 8003fa0:	2b10      	cmp	r3, #16
 8003fa2:	d11b      	bne.n	8003fdc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f06f 0210 	mvn.w	r2, #16
 8003fac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2208      	movs	r2, #8
 8003fb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	69db      	ldr	r3, [r3, #28]
 8003fba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d003      	beq.n	8003fca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 f86f 	bl	80040a6 <HAL_TIM_IC_CaptureCallback>
 8003fc8:	e005      	b.n	8003fd6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 f862 	bl	8004094 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f000 f871 	bl	80040b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	f003 0301 	and.w	r3, r3, #1
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d10e      	bne.n	8004008 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d107      	bne.n	8004008 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f06f 0201 	mvn.w	r2, #1
 8004000:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f7fd fbca 	bl	800179c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004012:	2b80      	cmp	r3, #128	; 0x80
 8004014:	d10e      	bne.n	8004034 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004020:	2b80      	cmp	r3, #128	; 0x80
 8004022:	d107      	bne.n	8004034 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800402c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 f8bf 	bl	80041b2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800403e:	2b40      	cmp	r3, #64	; 0x40
 8004040:	d10e      	bne.n	8004060 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800404c:	2b40      	cmp	r3, #64	; 0x40
 800404e:	d107      	bne.n	8004060 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 f835 	bl	80040ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	f003 0320 	and.w	r3, r3, #32
 800406a:	2b20      	cmp	r3, #32
 800406c:	d10e      	bne.n	800408c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	f003 0320 	and.w	r3, r3, #32
 8004078:	2b20      	cmp	r3, #32
 800407a:	d107      	bne.n	800408c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f06f 0220 	mvn.w	r2, #32
 8004084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 f88a 	bl	80041a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800408c:	bf00      	nop
 800408e:	3708      	adds	r7, #8
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}

08004094 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800409c:	bf00      	nop
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bc80      	pop	{r7}
 80040a4:	4770      	bx	lr

080040a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040a6:	b480      	push	{r7}
 80040a8:	b083      	sub	sp, #12
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040ae:	bf00      	nop
 80040b0:	370c      	adds	r7, #12
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bc80      	pop	{r7}
 80040b6:	4770      	bx	lr

080040b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040c0:	bf00      	nop
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bc80      	pop	{r7}
 80040c8:	4770      	bx	lr

080040ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040ca:	b480      	push	{r7}
 80040cc:	b083      	sub	sp, #12
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040d2:	bf00      	nop
 80040d4:	370c      	adds	r7, #12
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bc80      	pop	{r7}
 80040da:	4770      	bx	lr

080040dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80040dc:	b480      	push	{r7}
 80040de:	b085      	sub	sp, #20
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a29      	ldr	r2, [pc, #164]	; (8004194 <TIM_Base_SetConfig+0xb8>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d00b      	beq.n	800410c <TIM_Base_SetConfig+0x30>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040fa:	d007      	beq.n	800410c <TIM_Base_SetConfig+0x30>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a26      	ldr	r2, [pc, #152]	; (8004198 <TIM_Base_SetConfig+0xbc>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d003      	beq.n	800410c <TIM_Base_SetConfig+0x30>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a25      	ldr	r2, [pc, #148]	; (800419c <TIM_Base_SetConfig+0xc0>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d108      	bne.n	800411e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004112:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	4313      	orrs	r3, r2
 800411c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a1c      	ldr	r2, [pc, #112]	; (8004194 <TIM_Base_SetConfig+0xb8>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d00b      	beq.n	800413e <TIM_Base_SetConfig+0x62>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800412c:	d007      	beq.n	800413e <TIM_Base_SetConfig+0x62>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a19      	ldr	r2, [pc, #100]	; (8004198 <TIM_Base_SetConfig+0xbc>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d003      	beq.n	800413e <TIM_Base_SetConfig+0x62>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a18      	ldr	r2, [pc, #96]	; (800419c <TIM_Base_SetConfig+0xc0>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d108      	bne.n	8004150 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004144:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	68fa      	ldr	r2, [r7, #12]
 800414c:	4313      	orrs	r3, r2
 800414e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	695b      	ldr	r3, [r3, #20]
 800415a:	4313      	orrs	r3, r2
 800415c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	689a      	ldr	r2, [r3, #8]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a07      	ldr	r2, [pc, #28]	; (8004194 <TIM_Base_SetConfig+0xb8>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d103      	bne.n	8004184 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	691a      	ldr	r2, [r3, #16]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	615a      	str	r2, [r3, #20]
}
 800418a:	bf00      	nop
 800418c:	3714      	adds	r7, #20
 800418e:	46bd      	mov	sp, r7
 8004190:	bc80      	pop	{r7}
 8004192:	4770      	bx	lr
 8004194:	40012c00 	.word	0x40012c00
 8004198:	40000400 	.word	0x40000400
 800419c:	40000800 	.word	0x40000800

080041a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bc80      	pop	{r7}
 80041b0:	4770      	bx	lr

080041b2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041b2:	b480      	push	{r7}
 80041b4:	b083      	sub	sp, #12
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041ba:	bf00      	nop
 80041bc:	370c      	adds	r7, #12
 80041be:	46bd      	mov	sp, r7
 80041c0:	bc80      	pop	{r7}
 80041c2:	4770      	bx	lr

080041c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d101      	bne.n	80041d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e042      	b.n	800425c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d106      	bne.n	80041f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f7fd fce8 	bl	8001bc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2224      	movs	r2, #36	; 0x24
 80041f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68da      	ldr	r2, [r3, #12]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004206:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f000 fe99 	bl	8004f40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	691a      	ldr	r2, [r3, #16]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800421c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	695a      	ldr	r2, [r3, #20]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800422c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68da      	ldr	r2, [r3, #12]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800423c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2220      	movs	r2, #32
 8004248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2220      	movs	r2, #32
 8004250:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800425a:	2300      	movs	r3, #0
}
 800425c:	4618      	mov	r0, r3
 800425e:	3708      	adds	r7, #8
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b08c      	sub	sp, #48	; 0x30
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	4613      	mov	r3, r2
 8004270:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004278:	b2db      	uxtb	r3, r3
 800427a:	2b20      	cmp	r3, #32
 800427c:	d14a      	bne.n	8004314 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d002      	beq.n	800428a <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004284:	88fb      	ldrh	r3, [r7, #6]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d101      	bne.n	800428e <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e043      	b.n	8004316 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2201      	movs	r2, #1
 8004292:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2200      	movs	r2, #0
 8004298:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800429a:	88fb      	ldrh	r3, [r7, #6]
 800429c:	461a      	mov	r2, r3
 800429e:	68b9      	ldr	r1, [r7, #8]
 80042a0:	68f8      	ldr	r0, [r7, #12]
 80042a2:	f000 fbf1 	bl	8004a88 <UART_Start_Receive_DMA>
 80042a6:	4603      	mov	r3, r0
 80042a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80042ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d12c      	bne.n	800430e <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d125      	bne.n	8004308 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80042bc:	2300      	movs	r3, #0
 80042be:	613b      	str	r3, [r7, #16]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	613b      	str	r3, [r7, #16]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	613b      	str	r3, [r7, #16]
 80042d0:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	330c      	adds	r3, #12
 80042d8:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	e853 3f00 	ldrex	r3, [r3]
 80042e0:	617b      	str	r3, [r7, #20]
   return(result);
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	f043 0310 	orr.w	r3, r3, #16
 80042e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	330c      	adds	r3, #12
 80042f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042f2:	627a      	str	r2, [r7, #36]	; 0x24
 80042f4:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f6:	6a39      	ldr	r1, [r7, #32]
 80042f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042fa:	e841 2300 	strex	r3, r2, [r1]
 80042fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d1e5      	bne.n	80042d2 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8004306:	e002      	b.n	800430e <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800430e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004312:	e000      	b.n	8004316 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8004314:	2302      	movs	r3, #2
  }
}
 8004316:	4618      	mov	r0, r3
 8004318:	3730      	adds	r7, #48	; 0x30
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
	...

08004320 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b0ba      	sub	sp, #232	; 0xe8
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	695b      	ldr	r3, [r3, #20]
 8004342:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004346:	2300      	movs	r3, #0
 8004348:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800434c:	2300      	movs	r3, #0
 800434e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004356:	f003 030f 	and.w	r3, r3, #15
 800435a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800435e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004362:	2b00      	cmp	r3, #0
 8004364:	d10f      	bne.n	8004386 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800436a:	f003 0320 	and.w	r3, r3, #32
 800436e:	2b00      	cmp	r3, #0
 8004370:	d009      	beq.n	8004386 <HAL_UART_IRQHandler+0x66>
 8004372:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004376:	f003 0320 	and.w	r3, r3, #32
 800437a:	2b00      	cmp	r3, #0
 800437c:	d003      	beq.n	8004386 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 fd20 	bl	8004dc4 <UART_Receive_IT>
      return;
 8004384:	e25b      	b.n	800483e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004386:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800438a:	2b00      	cmp	r3, #0
 800438c:	f000 80de 	beq.w	800454c <HAL_UART_IRQHandler+0x22c>
 8004390:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004394:	f003 0301 	and.w	r3, r3, #1
 8004398:	2b00      	cmp	r3, #0
 800439a:	d106      	bne.n	80043aa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800439c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043a0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	f000 80d1 	beq.w	800454c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80043aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043ae:	f003 0301 	and.w	r3, r3, #1
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d00b      	beq.n	80043ce <HAL_UART_IRQHandler+0xae>
 80043b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d005      	beq.n	80043ce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c6:	f043 0201 	orr.w	r2, r3, #1
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80043ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043d2:	f003 0304 	and.w	r3, r3, #4
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d00b      	beq.n	80043f2 <HAL_UART_IRQHandler+0xd2>
 80043da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043de:	f003 0301 	and.w	r3, r3, #1
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d005      	beq.n	80043f2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ea:	f043 0202 	orr.w	r2, r3, #2
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80043f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043f6:	f003 0302 	and.w	r3, r3, #2
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00b      	beq.n	8004416 <HAL_UART_IRQHandler+0xf6>
 80043fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004402:	f003 0301 	and.w	r3, r3, #1
 8004406:	2b00      	cmp	r3, #0
 8004408:	d005      	beq.n	8004416 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800440e:	f043 0204 	orr.w	r2, r3, #4
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800441a:	f003 0308 	and.w	r3, r3, #8
 800441e:	2b00      	cmp	r3, #0
 8004420:	d011      	beq.n	8004446 <HAL_UART_IRQHandler+0x126>
 8004422:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004426:	f003 0320 	and.w	r3, r3, #32
 800442a:	2b00      	cmp	r3, #0
 800442c:	d105      	bne.n	800443a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800442e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004432:	f003 0301 	and.w	r3, r3, #1
 8004436:	2b00      	cmp	r3, #0
 8004438:	d005      	beq.n	8004446 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800443e:	f043 0208 	orr.w	r2, r3, #8
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800444a:	2b00      	cmp	r3, #0
 800444c:	f000 81f2 	beq.w	8004834 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004450:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004454:	f003 0320 	and.w	r3, r3, #32
 8004458:	2b00      	cmp	r3, #0
 800445a:	d008      	beq.n	800446e <HAL_UART_IRQHandler+0x14e>
 800445c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004460:	f003 0320 	and.w	r3, r3, #32
 8004464:	2b00      	cmp	r3, #0
 8004466:	d002      	beq.n	800446e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f000 fcab 	bl	8004dc4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	695b      	ldr	r3, [r3, #20]
 8004474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004478:	2b00      	cmp	r3, #0
 800447a:	bf14      	ite	ne
 800447c:	2301      	movne	r3, #1
 800447e:	2300      	moveq	r3, #0
 8004480:	b2db      	uxtb	r3, r3
 8004482:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800448a:	f003 0308 	and.w	r3, r3, #8
 800448e:	2b00      	cmp	r3, #0
 8004490:	d103      	bne.n	800449a <HAL_UART_IRQHandler+0x17a>
 8004492:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004496:	2b00      	cmp	r3, #0
 8004498:	d04f      	beq.n	800453a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 fbb5 	bl	8004c0a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d041      	beq.n	8004532 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	3314      	adds	r3, #20
 80044b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80044bc:	e853 3f00 	ldrex	r3, [r3]
 80044c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80044c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80044c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	3314      	adds	r3, #20
 80044d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80044da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80044de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80044e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80044ea:	e841 2300 	strex	r3, r2, [r1]
 80044ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80044f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d1d9      	bne.n	80044ae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d013      	beq.n	800452a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004506:	4a7e      	ldr	r2, [pc, #504]	; (8004700 <HAL_UART_IRQHandler+0x3e0>)
 8004508:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800450e:	4618      	mov	r0, r3
 8004510:	f7fe fc86 	bl	8002e20 <HAL_DMA_Abort_IT>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d016      	beq.n	8004548 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800451e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004524:	4610      	mov	r0, r2
 8004526:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004528:	e00e      	b.n	8004548 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 f9a5 	bl	800487a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004530:	e00a      	b.n	8004548 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 f9a1 	bl	800487a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004538:	e006      	b.n	8004548 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 f99d 	bl	800487a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004546:	e175      	b.n	8004834 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004548:	bf00      	nop
    return;
 800454a:	e173      	b.n	8004834 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004550:	2b01      	cmp	r3, #1
 8004552:	f040 814f 	bne.w	80047f4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800455a:	f003 0310 	and.w	r3, r3, #16
 800455e:	2b00      	cmp	r3, #0
 8004560:	f000 8148 	beq.w	80047f4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004564:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004568:	f003 0310 	and.w	r3, r3, #16
 800456c:	2b00      	cmp	r3, #0
 800456e:	f000 8141 	beq.w	80047f4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004572:	2300      	movs	r3, #0
 8004574:	60bb      	str	r3, [r7, #8]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	60bb      	str	r3, [r7, #8]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	60bb      	str	r3, [r7, #8]
 8004586:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	695b      	ldr	r3, [r3, #20]
 800458e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004592:	2b00      	cmp	r3, #0
 8004594:	f000 80b6 	beq.w	8004704 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80045a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	f000 8145 	beq.w	8004838 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80045b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80045b6:	429a      	cmp	r2, r3
 80045b8:	f080 813e 	bcs.w	8004838 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80045c2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	2b20      	cmp	r3, #32
 80045cc:	f000 8088 	beq.w	80046e0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	330c      	adds	r3, #12
 80045d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80045de:	e853 3f00 	ldrex	r3, [r3]
 80045e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80045e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80045ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045ee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	330c      	adds	r3, #12
 80045f8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80045fc:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004600:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004604:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004608:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800460c:	e841 2300 	strex	r3, r2, [r1]
 8004610:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004614:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004618:	2b00      	cmp	r3, #0
 800461a:	d1d9      	bne.n	80045d0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	3314      	adds	r3, #20
 8004622:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004624:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004626:	e853 3f00 	ldrex	r3, [r3]
 800462a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800462c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800462e:	f023 0301 	bic.w	r3, r3, #1
 8004632:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	3314      	adds	r3, #20
 800463c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004640:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004644:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004646:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004648:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800464c:	e841 2300 	strex	r3, r2, [r1]
 8004650:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004652:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004654:	2b00      	cmp	r3, #0
 8004656:	d1e1      	bne.n	800461c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	3314      	adds	r3, #20
 800465e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004660:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004662:	e853 3f00 	ldrex	r3, [r3]
 8004666:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004668:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800466a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800466e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	3314      	adds	r3, #20
 8004678:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800467c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800467e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004680:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004682:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004684:	e841 2300 	strex	r3, r2, [r1]
 8004688:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800468a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800468c:	2b00      	cmp	r3, #0
 800468e:	d1e3      	bne.n	8004658 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2220      	movs	r2, #32
 8004694:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	330c      	adds	r3, #12
 80046a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046a8:	e853 3f00 	ldrex	r3, [r3]
 80046ac:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80046ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046b0:	f023 0310 	bic.w	r3, r3, #16
 80046b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	330c      	adds	r3, #12
 80046be:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80046c2:	65ba      	str	r2, [r7, #88]	; 0x58
 80046c4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80046c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80046ca:	e841 2300 	strex	r3, r2, [r1]
 80046ce:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80046d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d1e3      	bne.n	800469e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046da:	4618      	mov	r0, r3
 80046dc:	f7fe fb64 	bl	8002da8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2202      	movs	r2, #2
 80046e4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	4619      	mov	r1, r3
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f7fc feea 	bl	80014d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80046fc:	e09c      	b.n	8004838 <HAL_UART_IRQHandler+0x518>
 80046fe:	bf00      	nop
 8004700:	08004ccf 	.word	0x08004ccf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800470c:	b29b      	uxth	r3, r3
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004718:	b29b      	uxth	r3, r3
 800471a:	2b00      	cmp	r3, #0
 800471c:	f000 808e 	beq.w	800483c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004720:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004724:	2b00      	cmp	r3, #0
 8004726:	f000 8089 	beq.w	800483c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	330c      	adds	r3, #12
 8004730:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004734:	e853 3f00 	ldrex	r3, [r3]
 8004738:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800473a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800473c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004740:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	330c      	adds	r3, #12
 800474a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800474e:	647a      	str	r2, [r7, #68]	; 0x44
 8004750:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004752:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004754:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004756:	e841 2300 	strex	r3, r2, [r1]
 800475a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800475c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800475e:	2b00      	cmp	r3, #0
 8004760:	d1e3      	bne.n	800472a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	3314      	adds	r3, #20
 8004768:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800476a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476c:	e853 3f00 	ldrex	r3, [r3]
 8004770:	623b      	str	r3, [r7, #32]
   return(result);
 8004772:	6a3b      	ldr	r3, [r7, #32]
 8004774:	f023 0301 	bic.w	r3, r3, #1
 8004778:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	3314      	adds	r3, #20
 8004782:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004786:	633a      	str	r2, [r7, #48]	; 0x30
 8004788:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800478a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800478c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800478e:	e841 2300 	strex	r3, r2, [r1]
 8004792:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004796:	2b00      	cmp	r3, #0
 8004798:	d1e3      	bne.n	8004762 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2220      	movs	r2, #32
 800479e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	330c      	adds	r3, #12
 80047ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	e853 3f00 	ldrex	r3, [r3]
 80047b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f023 0310 	bic.w	r3, r3, #16
 80047be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	330c      	adds	r3, #12
 80047c8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80047cc:	61fa      	str	r2, [r7, #28]
 80047ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d0:	69b9      	ldr	r1, [r7, #24]
 80047d2:	69fa      	ldr	r2, [r7, #28]
 80047d4:	e841 2300 	strex	r3, r2, [r1]
 80047d8:	617b      	str	r3, [r7, #20]
   return(result);
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d1e3      	bne.n	80047a8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2202      	movs	r2, #2
 80047e4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80047e6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80047ea:	4619      	mov	r1, r3
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f7fc fe6f 	bl	80014d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80047f2:	e023      	b.n	800483c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80047f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d009      	beq.n	8004814 <HAL_UART_IRQHandler+0x4f4>
 8004800:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004804:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004808:	2b00      	cmp	r3, #0
 800480a:	d003      	beq.n	8004814 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f000 fa72 	bl	8004cf6 <UART_Transmit_IT>
    return;
 8004812:	e014      	b.n	800483e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004814:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800481c:	2b00      	cmp	r3, #0
 800481e:	d00e      	beq.n	800483e <HAL_UART_IRQHandler+0x51e>
 8004820:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004828:	2b00      	cmp	r3, #0
 800482a:	d008      	beq.n	800483e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f000 fab1 	bl	8004d94 <UART_EndTransmit_IT>
    return;
 8004832:	e004      	b.n	800483e <HAL_UART_IRQHandler+0x51e>
    return;
 8004834:	bf00      	nop
 8004836:	e002      	b.n	800483e <HAL_UART_IRQHandler+0x51e>
      return;
 8004838:	bf00      	nop
 800483a:	e000      	b.n	800483e <HAL_UART_IRQHandler+0x51e>
      return;
 800483c:	bf00      	nop
  }
}
 800483e:	37e8      	adds	r7, #232	; 0xe8
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}

08004844 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800484c:	bf00      	nop
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	bc80      	pop	{r7}
 8004854:	4770      	bx	lr

08004856 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004856:	b480      	push	{r7}
 8004858:	b083      	sub	sp, #12
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800485e:	bf00      	nop
 8004860:	370c      	adds	r7, #12
 8004862:	46bd      	mov	sp, r7
 8004864:	bc80      	pop	{r7}
 8004866:	4770      	bx	lr

08004868 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004870:	bf00      	nop
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	bc80      	pop	{r7}
 8004878:	4770      	bx	lr

0800487a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800487a:	b480      	push	{r7}
 800487c:	b083      	sub	sp, #12
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004882:	bf00      	nop
 8004884:	370c      	adds	r7, #12
 8004886:	46bd      	mov	sp, r7
 8004888:	bc80      	pop	{r7}
 800488a:	4770      	bx	lr

0800488c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b09c      	sub	sp, #112	; 0x70
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004898:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0320 	and.w	r3, r3, #32
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d172      	bne.n	800498e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80048a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048aa:	2200      	movs	r2, #0
 80048ac:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	330c      	adds	r3, #12
 80048b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048b8:	e853 3f00 	ldrex	r3, [r3]
 80048bc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80048be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80048c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	330c      	adds	r3, #12
 80048cc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80048ce:	65ba      	str	r2, [r7, #88]	; 0x58
 80048d0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80048d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80048d6:	e841 2300 	strex	r3, r2, [r1]
 80048da:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80048dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1e5      	bne.n	80048ae <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	3314      	adds	r3, #20
 80048e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ec:	e853 3f00 	ldrex	r3, [r3]
 80048f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80048f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048f4:	f023 0301 	bic.w	r3, r3, #1
 80048f8:	667b      	str	r3, [r7, #100]	; 0x64
 80048fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	3314      	adds	r3, #20
 8004900:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004902:	647a      	str	r2, [r7, #68]	; 0x44
 8004904:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004906:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004908:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800490a:	e841 2300 	strex	r3, r2, [r1]
 800490e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004912:	2b00      	cmp	r3, #0
 8004914:	d1e5      	bne.n	80048e2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004916:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	3314      	adds	r3, #20
 800491c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800491e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004920:	e853 3f00 	ldrex	r3, [r3]
 8004924:	623b      	str	r3, [r7, #32]
   return(result);
 8004926:	6a3b      	ldr	r3, [r7, #32]
 8004928:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800492c:	663b      	str	r3, [r7, #96]	; 0x60
 800492e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	3314      	adds	r3, #20
 8004934:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004936:	633a      	str	r2, [r7, #48]	; 0x30
 8004938:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800493a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800493c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800493e:	e841 2300 	strex	r3, r2, [r1]
 8004942:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004946:	2b00      	cmp	r3, #0
 8004948:	d1e5      	bne.n	8004916 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800494a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800494c:	2220      	movs	r2, #32
 800494e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004952:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004956:	2b01      	cmp	r3, #1
 8004958:	d119      	bne.n	800498e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800495a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	330c      	adds	r3, #12
 8004960:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	e853 3f00 	ldrex	r3, [r3]
 8004968:	60fb      	str	r3, [r7, #12]
   return(result);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f023 0310 	bic.w	r3, r3, #16
 8004970:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004972:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	330c      	adds	r3, #12
 8004978:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800497a:	61fa      	str	r2, [r7, #28]
 800497c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800497e:	69b9      	ldr	r1, [r7, #24]
 8004980:	69fa      	ldr	r2, [r7, #28]
 8004982:	e841 2300 	strex	r3, r2, [r1]
 8004986:	617b      	str	r3, [r7, #20]
   return(result);
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d1e5      	bne.n	800495a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800498e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004990:	2200      	movs	r2, #0
 8004992:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004994:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004998:	2b01      	cmp	r3, #1
 800499a:	d106      	bne.n	80049aa <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800499c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800499e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80049a0:	4619      	mov	r1, r3
 80049a2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80049a4:	f7fc fd94 	bl	80014d0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80049a8:	e002      	b.n	80049b0 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80049aa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80049ac:	f7ff ff53 	bl	8004856 <HAL_UART_RxCpltCallback>
}
 80049b0:	bf00      	nop
 80049b2:	3770      	adds	r7, #112	; 0x70
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2201      	movs	r2, #1
 80049ca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d108      	bne.n	80049e6 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80049d8:	085b      	lsrs	r3, r3, #1
 80049da:	b29b      	uxth	r3, r3
 80049dc:	4619      	mov	r1, r3
 80049de:	68f8      	ldr	r0, [r7, #12]
 80049e0:	f7fc fd76 	bl	80014d0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80049e4:	e002      	b.n	80049ec <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80049e6:	68f8      	ldr	r0, [r7, #12]
 80049e8:	f7ff ff3e 	bl	8004868 <HAL_UART_RxHalfCpltCallback>
}
 80049ec:	bf00      	nop
 80049ee:	3710      	adds	r7, #16
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80049fc:	2300      	movs	r3, #0
 80049fe:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a04:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	695b      	ldr	r3, [r3, #20]
 8004a0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	bf14      	ite	ne
 8004a14:	2301      	movne	r3, #1
 8004a16:	2300      	moveq	r3, #0
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	2b21      	cmp	r3, #33	; 0x21
 8004a26:	d108      	bne.n	8004a3a <UART_DMAError+0x46>
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d005      	beq.n	8004a3a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	2200      	movs	r2, #0
 8004a32:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004a34:	68b8      	ldr	r0, [r7, #8]
 8004a36:	f000 f8c1 	bl	8004bbc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	695b      	ldr	r3, [r3, #20]
 8004a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	bf14      	ite	ne
 8004a48:	2301      	movne	r3, #1
 8004a4a:	2300      	moveq	r3, #0
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	2b22      	cmp	r3, #34	; 0x22
 8004a5a:	d108      	bne.n	8004a6e <UART_DMAError+0x7a>
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d005      	beq.n	8004a6e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	2200      	movs	r2, #0
 8004a66:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004a68:	68b8      	ldr	r0, [r7, #8]
 8004a6a:	f000 f8ce 	bl	8004c0a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a72:	f043 0210 	orr.w	r2, r3, #16
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a7a:	68b8      	ldr	r0, [r7, #8]
 8004a7c:	f7ff fefd 	bl	800487a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a80:	bf00      	nop
 8004a82:	3710      	adds	r7, #16
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b098      	sub	sp, #96	; 0x60
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	4613      	mov	r3, r2
 8004a94:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004a96:	68ba      	ldr	r2, [r7, #8]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	88fa      	ldrh	r2, [r7, #6]
 8004aa0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2222      	movs	r2, #34	; 0x22
 8004aac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ab4:	4a3e      	ldr	r2, [pc, #248]	; (8004bb0 <UART_Start_Receive_DMA+0x128>)
 8004ab6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004abc:	4a3d      	ldr	r2, [pc, #244]	; (8004bb4 <UART_Start_Receive_DMA+0x12c>)
 8004abe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac4:	4a3c      	ldr	r2, [pc, #240]	; (8004bb8 <UART_Start_Receive_DMA+0x130>)
 8004ac6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004acc:	2200      	movs	r2, #0
 8004ace:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004ad0:	f107 0308 	add.w	r3, r7, #8
 8004ad4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	3304      	adds	r3, #4
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	88fb      	ldrh	r3, [r7, #6]
 8004ae8:	f7fe f8fe 	bl	8002ce8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004aec:	2300      	movs	r3, #0
 8004aee:	613b      	str	r3, [r7, #16]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	613b      	str	r3, [r7, #16]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	613b      	str	r3, [r7, #16]
 8004b00:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d019      	beq.n	8004b3e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	330c      	adds	r3, #12
 8004b10:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b14:	e853 3f00 	ldrex	r3, [r3]
 8004b18:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b20:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	330c      	adds	r3, #12
 8004b28:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b2a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004b2c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b2e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004b30:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b32:	e841 2300 	strex	r3, r2, [r1]
 8004b36:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004b38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1e5      	bne.n	8004b0a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	3314      	adds	r3, #20
 8004b44:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b48:	e853 3f00 	ldrex	r3, [r3]
 8004b4c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b50:	f043 0301 	orr.w	r3, r3, #1
 8004b54:	657b      	str	r3, [r7, #84]	; 0x54
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	3314      	adds	r3, #20
 8004b5c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004b5e:	63ba      	str	r2, [r7, #56]	; 0x38
 8004b60:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b62:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004b64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b66:	e841 2300 	strex	r3, r2, [r1]
 8004b6a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d1e5      	bne.n	8004b3e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	3314      	adds	r3, #20
 8004b78:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	e853 3f00 	ldrex	r3, [r3]
 8004b80:	617b      	str	r3, [r7, #20]
   return(result);
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b88:	653b      	str	r3, [r7, #80]	; 0x50
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	3314      	adds	r3, #20
 8004b90:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004b92:	627a      	str	r2, [r7, #36]	; 0x24
 8004b94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b96:	6a39      	ldr	r1, [r7, #32]
 8004b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b9a:	e841 2300 	strex	r3, r2, [r1]
 8004b9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d1e5      	bne.n	8004b72 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004ba6:	2300      	movs	r3, #0
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3760      	adds	r7, #96	; 0x60
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	0800488d 	.word	0x0800488d
 8004bb4:	080049b9 	.word	0x080049b9
 8004bb8:	080049f5 	.word	0x080049f5

08004bbc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b089      	sub	sp, #36	; 0x24
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	330c      	adds	r3, #12
 8004bca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	e853 3f00 	ldrex	r3, [r3]
 8004bd2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004bda:	61fb      	str	r3, [r7, #28]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	330c      	adds	r3, #12
 8004be2:	69fa      	ldr	r2, [r7, #28]
 8004be4:	61ba      	str	r2, [r7, #24]
 8004be6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be8:	6979      	ldr	r1, [r7, #20]
 8004bea:	69ba      	ldr	r2, [r7, #24]
 8004bec:	e841 2300 	strex	r3, r2, [r1]
 8004bf0:	613b      	str	r3, [r7, #16]
   return(result);
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d1e5      	bne.n	8004bc4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2220      	movs	r2, #32
 8004bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8004c00:	bf00      	nop
 8004c02:	3724      	adds	r7, #36	; 0x24
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bc80      	pop	{r7}
 8004c08:	4770      	bx	lr

08004c0a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c0a:	b480      	push	{r7}
 8004c0c:	b095      	sub	sp, #84	; 0x54
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	330c      	adds	r3, #12
 8004c18:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c1c:	e853 3f00 	ldrex	r3, [r3]
 8004c20:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c28:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	330c      	adds	r3, #12
 8004c30:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c32:	643a      	str	r2, [r7, #64]	; 0x40
 8004c34:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c36:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004c38:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c3a:	e841 2300 	strex	r3, r2, [r1]
 8004c3e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d1e5      	bne.n	8004c12 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	3314      	adds	r3, #20
 8004c4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c4e:	6a3b      	ldr	r3, [r7, #32]
 8004c50:	e853 3f00 	ldrex	r3, [r3]
 8004c54:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	f023 0301 	bic.w	r3, r3, #1
 8004c5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	3314      	adds	r3, #20
 8004c64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c68:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c6e:	e841 2300 	strex	r3, r2, [r1]
 8004c72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d1e5      	bne.n	8004c46 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d119      	bne.n	8004cb6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	330c      	adds	r3, #12
 8004c88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	e853 3f00 	ldrex	r3, [r3]
 8004c90:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	f023 0310 	bic.w	r3, r3, #16
 8004c98:	647b      	str	r3, [r7, #68]	; 0x44
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	330c      	adds	r3, #12
 8004ca0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ca2:	61ba      	str	r2, [r7, #24]
 8004ca4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca6:	6979      	ldr	r1, [r7, #20]
 8004ca8:	69ba      	ldr	r2, [r7, #24]
 8004caa:	e841 2300 	strex	r3, r2, [r1]
 8004cae:	613b      	str	r3, [r7, #16]
   return(result);
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d1e5      	bne.n	8004c82 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2220      	movs	r2, #32
 8004cba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004cc4:	bf00      	nop
 8004cc6:	3754      	adds	r7, #84	; 0x54
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bc80      	pop	{r7}
 8004ccc:	4770      	bx	lr

08004cce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004cce:	b580      	push	{r7, lr}
 8004cd0:	b084      	sub	sp, #16
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cda:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ce8:	68f8      	ldr	r0, [r7, #12]
 8004cea:	f7ff fdc6 	bl	800487a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cee:	bf00      	nop
 8004cf0:	3710      	adds	r7, #16
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}

08004cf6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004cf6:	b480      	push	{r7}
 8004cf8:	b085      	sub	sp, #20
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	2b21      	cmp	r3, #33	; 0x21
 8004d08:	d13e      	bne.n	8004d88 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d12:	d114      	bne.n	8004d3e <UART_Transmit_IT+0x48>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	691b      	ldr	r3, [r3, #16]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d110      	bne.n	8004d3e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a1b      	ldr	r3, [r3, #32]
 8004d20:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	881b      	ldrh	r3, [r3, #0]
 8004d26:	461a      	mov	r2, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d30:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a1b      	ldr	r3, [r3, #32]
 8004d36:	1c9a      	adds	r2, r3, #2
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	621a      	str	r2, [r3, #32]
 8004d3c:	e008      	b.n	8004d50 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a1b      	ldr	r3, [r3, #32]
 8004d42:	1c59      	adds	r1, r3, #1
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	6211      	str	r1, [r2, #32]
 8004d48:	781a      	ldrb	r2, [r3, #0]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	3b01      	subs	r3, #1
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d10f      	bne.n	8004d84 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	68da      	ldr	r2, [r3, #12]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d72:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68da      	ldr	r2, [r3, #12]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d82:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004d84:	2300      	movs	r3, #0
 8004d86:	e000      	b.n	8004d8a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004d88:	2302      	movs	r3, #2
  }
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3714      	adds	r7, #20
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bc80      	pop	{r7}
 8004d92:	4770      	bx	lr

08004d94 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	68da      	ldr	r2, [r3, #12]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004daa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2220      	movs	r2, #32
 8004db0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f7ff fd45 	bl	8004844 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004dba:	2300      	movs	r3, #0
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3708      	adds	r7, #8
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b08c      	sub	sp, #48	; 0x30
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	2b22      	cmp	r3, #34	; 0x22
 8004dd6:	f040 80ae 	bne.w	8004f36 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004de2:	d117      	bne.n	8004e14 <UART_Receive_IT+0x50>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d113      	bne.n	8004e14 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004dec:	2300      	movs	r3, #0
 8004dee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df4:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e02:	b29a      	uxth	r2, r3
 8004e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e06:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e0c:	1c9a      	adds	r2, r3, #2
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	629a      	str	r2, [r3, #40]	; 0x28
 8004e12:	e026      	b.n	8004e62 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e18:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e26:	d007      	beq.n	8004e38 <UART_Receive_IT+0x74>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d10a      	bne.n	8004e46 <UART_Receive_IT+0x82>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d106      	bne.n	8004e46 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	b2da      	uxtb	r2, r3
 8004e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e42:	701a      	strb	r2, [r3, #0]
 8004e44:	e008      	b.n	8004e58 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e52:	b2da      	uxtb	r2, r3
 8004e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e56:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e5c:	1c5a      	adds	r2, r3, #1
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	3b01      	subs	r3, #1
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	4619      	mov	r1, r3
 8004e70:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d15d      	bne.n	8004f32 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68da      	ldr	r2, [r3, #12]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f022 0220 	bic.w	r2, r2, #32
 8004e84:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	68da      	ldr	r2, [r3, #12]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e94:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	695a      	ldr	r2, [r3, #20]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f022 0201 	bic.w	r2, r2, #1
 8004ea4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2220      	movs	r2, #32
 8004eaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d135      	bne.n	8004f28 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	330c      	adds	r3, #12
 8004ec8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	e853 3f00 	ldrex	r3, [r3]
 8004ed0:	613b      	str	r3, [r7, #16]
   return(result);
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	f023 0310 	bic.w	r3, r3, #16
 8004ed8:	627b      	str	r3, [r7, #36]	; 0x24
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	330c      	adds	r3, #12
 8004ee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ee2:	623a      	str	r2, [r7, #32]
 8004ee4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee6:	69f9      	ldr	r1, [r7, #28]
 8004ee8:	6a3a      	ldr	r2, [r7, #32]
 8004eea:	e841 2300 	strex	r3, r2, [r1]
 8004eee:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d1e5      	bne.n	8004ec2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0310 	and.w	r3, r3, #16
 8004f00:	2b10      	cmp	r3, #16
 8004f02:	d10a      	bne.n	8004f1a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f04:	2300      	movs	r3, #0
 8004f06:	60fb      	str	r3, [r7, #12]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	60fb      	str	r3, [r7, #12]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	60fb      	str	r3, [r7, #12]
 8004f18:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f1e:	4619      	mov	r1, r3
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f7fc fad5 	bl	80014d0 <HAL_UARTEx_RxEventCallback>
 8004f26:	e002      	b.n	8004f2e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f7ff fc94 	bl	8004856 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	e002      	b.n	8004f38 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004f32:	2300      	movs	r3, #0
 8004f34:	e000      	b.n	8004f38 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004f36:	2302      	movs	r3, #2
  }
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3730      	adds	r7, #48	; 0x30
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	68da      	ldr	r2, [r3, #12]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	430a      	orrs	r2, r1
 8004f5c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	689a      	ldr	r2, [r3, #8]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	431a      	orrs	r2, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	695b      	ldr	r3, [r3, #20]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004f7a:	f023 030c 	bic.w	r3, r3, #12
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	6812      	ldr	r2, [r2, #0]
 8004f82:	68b9      	ldr	r1, [r7, #8]
 8004f84:	430b      	orrs	r3, r1
 8004f86:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	695b      	ldr	r3, [r3, #20]
 8004f8e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	699a      	ldr	r2, [r3, #24]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	430a      	orrs	r2, r1
 8004f9c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a2c      	ldr	r2, [pc, #176]	; (8005054 <UART_SetConfig+0x114>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d103      	bne.n	8004fb0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004fa8:	f7fe fe60 	bl	8003c6c <HAL_RCC_GetPCLK2Freq>
 8004fac:	60f8      	str	r0, [r7, #12]
 8004fae:	e002      	b.n	8004fb6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004fb0:	f7fe fe48 	bl	8003c44 <HAL_RCC_GetPCLK1Freq>
 8004fb4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	4613      	mov	r3, r2
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	4413      	add	r3, r2
 8004fbe:	009a      	lsls	r2, r3, #2
 8004fc0:	441a      	add	r2, r3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fcc:	4a22      	ldr	r2, [pc, #136]	; (8005058 <UART_SetConfig+0x118>)
 8004fce:	fba2 2303 	umull	r2, r3, r2, r3
 8004fd2:	095b      	lsrs	r3, r3, #5
 8004fd4:	0119      	lsls	r1, r3, #4
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	4613      	mov	r3, r2
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	4413      	add	r3, r2
 8004fde:	009a      	lsls	r2, r3, #2
 8004fe0:	441a      	add	r2, r3
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004fec:	4b1a      	ldr	r3, [pc, #104]	; (8005058 <UART_SetConfig+0x118>)
 8004fee:	fba3 0302 	umull	r0, r3, r3, r2
 8004ff2:	095b      	lsrs	r3, r3, #5
 8004ff4:	2064      	movs	r0, #100	; 0x64
 8004ff6:	fb00 f303 	mul.w	r3, r0, r3
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	011b      	lsls	r3, r3, #4
 8004ffe:	3332      	adds	r3, #50	; 0x32
 8005000:	4a15      	ldr	r2, [pc, #84]	; (8005058 <UART_SetConfig+0x118>)
 8005002:	fba2 2303 	umull	r2, r3, r2, r3
 8005006:	095b      	lsrs	r3, r3, #5
 8005008:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800500c:	4419      	add	r1, r3
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	4613      	mov	r3, r2
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	4413      	add	r3, r2
 8005016:	009a      	lsls	r2, r3, #2
 8005018:	441a      	add	r2, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	fbb2 f2f3 	udiv	r2, r2, r3
 8005024:	4b0c      	ldr	r3, [pc, #48]	; (8005058 <UART_SetConfig+0x118>)
 8005026:	fba3 0302 	umull	r0, r3, r3, r2
 800502a:	095b      	lsrs	r3, r3, #5
 800502c:	2064      	movs	r0, #100	; 0x64
 800502e:	fb00 f303 	mul.w	r3, r0, r3
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	011b      	lsls	r3, r3, #4
 8005036:	3332      	adds	r3, #50	; 0x32
 8005038:	4a07      	ldr	r2, [pc, #28]	; (8005058 <UART_SetConfig+0x118>)
 800503a:	fba2 2303 	umull	r2, r3, r2, r3
 800503e:	095b      	lsrs	r3, r3, #5
 8005040:	f003 020f 	and.w	r2, r3, #15
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	440a      	add	r2, r1
 800504a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800504c:	bf00      	nop
 800504e:	3710      	adds	r7, #16
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}
 8005054:	40013800 	.word	0x40013800
 8005058:	51eb851f 	.word	0x51eb851f

0800505c <__NVIC_SystemReset>:
{
 800505c:	b480      	push	{r7}
 800505e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8005060:	f3bf 8f4f 	dsb	sy
}
 8005064:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8005066:	4b06      	ldr	r3, [pc, #24]	; (8005080 <__NVIC_SystemReset+0x24>)
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800506e:	4904      	ldr	r1, [pc, #16]	; (8005080 <__NVIC_SystemReset+0x24>)
 8005070:	4b04      	ldr	r3, [pc, #16]	; (8005084 <__NVIC_SystemReset+0x28>)
 8005072:	4313      	orrs	r3, r2
 8005074:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8005076:	f3bf 8f4f 	dsb	sy
}
 800507a:	bf00      	nop
    __NOP();
 800507c:	bf00      	nop
 800507e:	e7fd      	b.n	800507c <__NVIC_SystemReset+0x20>
 8005080:	e000ed00 	.word	0xe000ed00
 8005084:	05fa0004 	.word	0x05fa0004

08005088 <gps_wait_signal>:
//    GPS_CHECK_SIGNAL,
//    GPS_SEND_DATA,
//    GPS_RECOVERY,
//    GPS_PROCESS,
//    SEND_ERROR_SIGNAL
void gps_wait_signal() {
 8005088:	b480      	push	{r7}
 800508a:	af00      	add	r7, sp, #0
	while(Signalready==0);
 800508c:	bf00      	nop
 800508e:	4b05      	ldr	r3, [pc, #20]	; (80050a4 <gps_wait_signal+0x1c>)
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d0fb      	beq.n	800508e <gps_wait_signal+0x6>
	gpsstate=GPS_GETDATA;
 8005096:	4b04      	ldr	r3, [pc, #16]	; (80050a8 <gps_wait_signal+0x20>)
 8005098:	2202      	movs	r2, #2
 800509a:	701a      	strb	r2, [r3, #0]
}
 800509c:	bf00      	nop
 800509e:	46bd      	mov	sp, r7
 80050a0:	bc80      	pop	{r7}
 80050a2:	4770      	bx	lr
 80050a4:	200004b0 	.word	0x200004b0
 80050a8:	200004b1 	.word	0x200004b1

080050ac <gps_getdata>:

void gps_getdata() {
 80050ac:	b580      	push	{r7, lr}
 80050ae:	af00      	add	r7, sp, #0
	nmea_parse(&myData, DataBuffer);
 80050b0:	4904      	ldr	r1, [pc, #16]	; (80050c4 <gps_getdata+0x18>)
 80050b2:	4805      	ldr	r0, [pc, #20]	; (80050c8 <gps_getdata+0x1c>)
 80050b4:	f000 fdfe 	bl	8005cb4 <nmea_parse>
	gpsstate=GPS_CHECK_SIGNAL;
 80050b8:	4b04      	ldr	r3, [pc, #16]	; (80050cc <gps_getdata+0x20>)
 80050ba:	2203      	movs	r2, #3
 80050bc:	701a      	strb	r2, [r3, #0]
}
 80050be:	bf00      	nop
 80050c0:	bd80      	pop	{r7, pc}
 80050c2:	bf00      	nop
 80050c4:	20000284 	.word	0x20000284
 80050c8:	20000484 	.word	0x20000484
 80050cc:	200004b1 	.word	0x200004b1

080050d0 <gps_check_signal>:

void gps_check_signal() {
 80050d0:	b580      	push	{r7, lr}
 80050d2:	af00      	add	r7, sp, #0
	if(myData.fix==1){
 80050d4:	4b34      	ldr	r3, [pc, #208]	; (80051a8 <gps_check_signal+0xd8>)
 80050d6:	69db      	ldr	r3, [r3, #28]
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d155      	bne.n	8005188 <gps_check_signal+0xb8>
		if(myData.latitude > -90.0 && myData.latitude !=0 && myData.latitude < 90.0 && myData.latitude !=0 && myData.longitude > -180.0 && myData.longitude < 180.0) {
 80050dc:	4b32      	ldr	r3, [pc, #200]	; (80051a8 <gps_check_signal+0xd8>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4932      	ldr	r1, [pc, #200]	; (80051ac <gps_check_signal+0xdc>)
 80050e2:	4618      	mov	r0, r3
 80050e4:	f7fc f80a 	bl	80010fc <__aeabi_fcmpgt>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d03d      	beq.n	800516a <gps_check_signal+0x9a>
 80050ee:	4b2e      	ldr	r3, [pc, #184]	; (80051a8 <gps_check_signal+0xd8>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f04f 0100 	mov.w	r1, #0
 80050f6:	4618      	mov	r0, r3
 80050f8:	f7fb ffd8 	bl	80010ac <__aeabi_fcmpeq>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d133      	bne.n	800516a <gps_check_signal+0x9a>
 8005102:	4b29      	ldr	r3, [pc, #164]	; (80051a8 <gps_check_signal+0xd8>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	492a      	ldr	r1, [pc, #168]	; (80051b0 <gps_check_signal+0xe0>)
 8005108:	4618      	mov	r0, r3
 800510a:	f7fb ffd9 	bl	80010c0 <__aeabi_fcmplt>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d02a      	beq.n	800516a <gps_check_signal+0x9a>
 8005114:	4b24      	ldr	r3, [pc, #144]	; (80051a8 <gps_check_signal+0xd8>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f04f 0100 	mov.w	r1, #0
 800511c:	4618      	mov	r0, r3
 800511e:	f7fb ffc5 	bl	80010ac <__aeabi_fcmpeq>
 8005122:	4603      	mov	r3, r0
 8005124:	2b00      	cmp	r3, #0
 8005126:	d120      	bne.n	800516a <gps_check_signal+0x9a>
 8005128:	4b1f      	ldr	r3, [pc, #124]	; (80051a8 <gps_check_signal+0xd8>)
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	4921      	ldr	r1, [pc, #132]	; (80051b4 <gps_check_signal+0xe4>)
 800512e:	4618      	mov	r0, r3
 8005130:	f7fb ffe4 	bl	80010fc <__aeabi_fcmpgt>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d017      	beq.n	800516a <gps_check_signal+0x9a>
 800513a:	4b1b      	ldr	r3, [pc, #108]	; (80051a8 <gps_check_signal+0xd8>)
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	491e      	ldr	r1, [pc, #120]	; (80051b8 <gps_check_signal+0xe8>)
 8005140:	4618      	mov	r0, r3
 8005142:	f7fb ffbd 	bl	80010c0 <__aeabi_fcmplt>
 8005146:	4603      	mov	r3, r0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d00e      	beq.n	800516a <gps_check_signal+0x9a>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,GPIO_PIN_RESET);
 800514c:	2200      	movs	r2, #0
 800514e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005152:	481a      	ldr	r0, [pc, #104]	; (80051bc <gps_check_signal+0xec>)
 8005154:	f7fe f994 	bl	8003480 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,GPIO_PIN_SET);
 8005158:	2201      	movs	r2, #1
 800515a:	2108      	movs	r1, #8
 800515c:	4817      	ldr	r0, [pc, #92]	; (80051bc <gps_check_signal+0xec>)
 800515e:	f7fe f98f 	bl	8003480 <HAL_GPIO_WritePin>
			gpsstate=GPS_PROCESS;
 8005162:	4b17      	ldr	r3, [pc, #92]	; (80051c0 <gps_check_signal+0xf0>)
 8005164:	2205      	movs	r2, #5
 8005166:	701a      	strb	r2, [r3, #0]
	else{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,GPIO_PIN_SET);
		gpsstate=GPS_SENDERRORDATA;
	}
}
 8005168:	e01c      	b.n	80051a4 <gps_check_signal+0xd4>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,GPIO_PIN_RESET);
 800516a:	2200      	movs	r2, #0
 800516c:	2108      	movs	r1, #8
 800516e:	4813      	ldr	r0, [pc, #76]	; (80051bc <gps_check_signal+0xec>)
 8005170:	f7fe f986 	bl	8003480 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,GPIO_PIN_SET);
 8005174:	2201      	movs	r2, #1
 8005176:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800517a:	4810      	ldr	r0, [pc, #64]	; (80051bc <gps_check_signal+0xec>)
 800517c:	f7fe f980 	bl	8003480 <HAL_GPIO_WritePin>
			gpsstate=GPS_SENDERRORDATA;
 8005180:	4b0f      	ldr	r3, [pc, #60]	; (80051c0 <gps_check_signal+0xf0>)
 8005182:	2207      	movs	r2, #7
 8005184:	701a      	strb	r2, [r3, #0]
}
 8005186:	e00d      	b.n	80051a4 <gps_check_signal+0xd4>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,GPIO_PIN_RESET);
 8005188:	2200      	movs	r2, #0
 800518a:	2108      	movs	r1, #8
 800518c:	480b      	ldr	r0, [pc, #44]	; (80051bc <gps_check_signal+0xec>)
 800518e:	f7fe f977 	bl	8003480 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,GPIO_PIN_SET);
 8005192:	2201      	movs	r2, #1
 8005194:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005198:	4808      	ldr	r0, [pc, #32]	; (80051bc <gps_check_signal+0xec>)
 800519a:	f7fe f971 	bl	8003480 <HAL_GPIO_WritePin>
		gpsstate=GPS_SENDERRORDATA;
 800519e:	4b08      	ldr	r3, [pc, #32]	; (80051c0 <gps_check_signal+0xf0>)
 80051a0:	2207      	movs	r2, #7
 80051a2:	701a      	strb	r2, [r3, #0]
}
 80051a4:	bf00      	nop
 80051a6:	bd80      	pop	{r7, pc}
 80051a8:	20000484 	.word	0x20000484
 80051ac:	c2b40000 	.word	0xc2b40000
 80051b0:	42b40000 	.word	0x42b40000
 80051b4:	c3340000 	.word	0xc3340000
 80051b8:	43340000 	.word	0x43340000
 80051bc:	40010c00 	.word	0x40010c00
 80051c0:	200004b1 	.word	0x200004b1

080051c4 <gps_recovery>:
//int Serialcnt=0;
//char str[50];
void gps_recovery() {
 80051c4:	b580      	push	{r7, lr}
 80051c6:	af00      	add	r7, sp, #0
	if(ErrCnt.GPS_Error_DataCounter==5){
 80051c8:	4b34      	ldr	r3, [pc, #208]	; (800529c <gps_recovery+0xd8>)
 80051ca:	789b      	ldrb	r3, [r3, #2]
 80051cc:	2b05      	cmp	r3, #5
 80051ce:	d110      	bne.n	80051f2 <gps_recovery+0x2e>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,GPIO_PIN_RESET);
 80051d0:	2200      	movs	r2, #0
 80051d2:	2108      	movs	r1, #8
 80051d4:	4832      	ldr	r0, [pc, #200]	; (80052a0 <gps_recovery+0xdc>)
 80051d6:	f7fe f953 	bl	8003480 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,GPIO_PIN_SET);
 80051da:	2201      	movs	r2, #1
 80051dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80051e0:	482f      	ldr	r0, [pc, #188]	; (80052a0 <gps_recovery+0xdc>)
 80051e2:	f7fe f94d 	bl	8003480 <HAL_GPIO_WritePin>
			HAL_Delay(2000);
 80051e6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80051ea:	f7fc fdbd 	bl	8001d68 <HAL_Delay>
			NVIC_SystemReset();
 80051ee:	f7ff ff35 	bl	800505c <__NVIC_SystemReset>
		}
		else if(ErrCnt.CAN_Error_SenDataCounter==3){
 80051f2:	4b2a      	ldr	r3, [pc, #168]	; (800529c <gps_recovery+0xd8>)
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	2b03      	cmp	r3, #3
 80051f8:	d115      	bne.n	8005226 <gps_recovery+0x62>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,GPIO_PIN_RESET);
 80051fa:	2200      	movs	r2, #0
 80051fc:	2108      	movs	r1, #8
 80051fe:	4828      	ldr	r0, [pc, #160]	; (80052a0 <gps_recovery+0xdc>)
 8005200:	f7fe f93e 	bl	8003480 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,GPIO_PIN_SET);
 8005204:	2201      	movs	r2, #1
 8005206:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800520a:	4825      	ldr	r0, [pc, #148]	; (80052a0 <gps_recovery+0xdc>)
 800520c:	f7fe f938 	bl	8003480 <HAL_GPIO_WritePin>
			HAL_Delay(2000);
 8005210:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005214:	f7fc fda8 	bl	8001d68 <HAL_Delay>
			HAL_CAN_ResetError(&hcan);
 8005218:	4822      	ldr	r0, [pc, #136]	; (80052a4 <gps_recovery+0xe0>)
 800521a:	f7fd fc09 	bl	8002a30 <HAL_CAN_ResetError>
			gpsstate=GPS_GETDATA;
 800521e:	4b22      	ldr	r3, [pc, #136]	; (80052a8 <gps_recovery+0xe4>)
 8005220:	2202      	movs	r2, #2
 8005222:	701a      	strb	r2, [r3, #0]
 8005224:	e034      	b.n	8005290 <gps_recovery+0xcc>
		}
		else if(ErrCnt.CAN_Error_SenErrorCounter==3){
 8005226:	4b1d      	ldr	r3, [pc, #116]	; (800529c <gps_recovery+0xd8>)
 8005228:	785b      	ldrb	r3, [r3, #1]
 800522a:	2b03      	cmp	r3, #3
 800522c:	d115      	bne.n	800525a <gps_recovery+0x96>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,GPIO_PIN_RESET);
 800522e:	2200      	movs	r2, #0
 8005230:	2108      	movs	r1, #8
 8005232:	481b      	ldr	r0, [pc, #108]	; (80052a0 <gps_recovery+0xdc>)
 8005234:	f7fe f924 	bl	8003480 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,GPIO_PIN_SET);
 8005238:	2201      	movs	r2, #1
 800523a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800523e:	4818      	ldr	r0, [pc, #96]	; (80052a0 <gps_recovery+0xdc>)
 8005240:	f7fe f91e 	bl	8003480 <HAL_GPIO_WritePin>
			HAL_Delay(2000);
 8005244:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005248:	f7fc fd8e 	bl	8001d68 <HAL_Delay>
			HAL_CAN_ResetError(&hcan);
 800524c:	4815      	ldr	r0, [pc, #84]	; (80052a4 <gps_recovery+0xe0>)
 800524e:	f7fd fbef 	bl	8002a30 <HAL_CAN_ResetError>
			gpsstate=GPS_GETDATA;
 8005252:	4b15      	ldr	r3, [pc, #84]	; (80052a8 <gps_recovery+0xe4>)
 8005254:	2202      	movs	r2, #2
 8005256:	701a      	strb	r2, [r3, #0]
 8005258:	e01a      	b.n	8005290 <gps_recovery+0xcc>
		}
		else if(ErrCnt.GPS_Error_DataCounter==5||ErrCnt.CAN_Error_SenDataCounter==6||ErrCnt.CAN_Error_SenErrorCounter==6){
 800525a:	4b10      	ldr	r3, [pc, #64]	; (800529c <gps_recovery+0xd8>)
 800525c:	789b      	ldrb	r3, [r3, #2]
 800525e:	2b05      	cmp	r3, #5
 8005260:	d007      	beq.n	8005272 <gps_recovery+0xae>
 8005262:	4b0e      	ldr	r3, [pc, #56]	; (800529c <gps_recovery+0xd8>)
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	2b06      	cmp	r3, #6
 8005268:	d003      	beq.n	8005272 <gps_recovery+0xae>
 800526a:	4b0c      	ldr	r3, [pc, #48]	; (800529c <gps_recovery+0xd8>)
 800526c:	785b      	ldrb	r3, [r3, #1]
 800526e:	2b06      	cmp	r3, #6
 8005270:	d10e      	bne.n	8005290 <gps_recovery+0xcc>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,GPIO_PIN_RESET);
 8005272:	2200      	movs	r2, #0
 8005274:	2108      	movs	r1, #8
 8005276:	480a      	ldr	r0, [pc, #40]	; (80052a0 <gps_recovery+0xdc>)
 8005278:	f7fe f902 	bl	8003480 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,GPIO_PIN_SET);
 800527c:	2201      	movs	r2, #1
 800527e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005282:	4807      	ldr	r0, [pc, #28]	; (80052a0 <gps_recovery+0xdc>)
 8005284:	f7fe f8fc 	bl	8003480 <HAL_GPIO_WritePin>
			HAL_Delay(2000);
 8005288:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800528c:	f7fc fd6c 	bl	8001d68 <HAL_Delay>
		}
	gpsstate=GPS_GETDATA;
 8005290:	4b05      	ldr	r3, [pc, #20]	; (80052a8 <gps_recovery+0xe4>)
 8005292:	2202      	movs	r2, #2
 8005294:	701a      	strb	r2, [r3, #0]
}
 8005296:	bf00      	nop
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	200004b4 	.word	0x200004b4
 80052a0:	40010c00 	.word	0x40010c00
 80052a4:	20000218 	.word	0x20000218
 80052a8:	200004b1 	.word	0x200004b1

080052ac <gps_process>:

void gps_process(){
 80052ac:	b580      	push	{r7, lr}
 80052ae:	af00      	add	r7, sp, #0
	float2Bytes(Lat,myData.latitude);
 80052b0:	4b18      	ldr	r3, [pc, #96]	; (8005314 <gps_process+0x68>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4619      	mov	r1, r3
 80052b6:	4818      	ldr	r0, [pc, #96]	; (8005318 <gps_process+0x6c>)
 80052b8:	f7fb ff78 	bl	80011ac <float2Bytes>
	float2Bytes(Long,myData.longitude);
 80052bc:	4b15      	ldr	r3, [pc, #84]	; (8005314 <gps_process+0x68>)
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	4619      	mov	r1, r3
 80052c2:	4816      	ldr	r0, [pc, #88]	; (800531c <gps_process+0x70>)
 80052c4:	f7fb ff72 	bl	80011ac <float2Bytes>
	Data[0]=Lat[0];
 80052c8:	4b13      	ldr	r3, [pc, #76]	; (8005318 <gps_process+0x6c>)
 80052ca:	781a      	ldrb	r2, [r3, #0]
 80052cc:	4b14      	ldr	r3, [pc, #80]	; (8005320 <gps_process+0x74>)
 80052ce:	701a      	strb	r2, [r3, #0]
	Data[1]=Lat[1];
 80052d0:	4b11      	ldr	r3, [pc, #68]	; (8005318 <gps_process+0x6c>)
 80052d2:	785a      	ldrb	r2, [r3, #1]
 80052d4:	4b12      	ldr	r3, [pc, #72]	; (8005320 <gps_process+0x74>)
 80052d6:	705a      	strb	r2, [r3, #1]
	Data[2]=Lat[2];
 80052d8:	4b0f      	ldr	r3, [pc, #60]	; (8005318 <gps_process+0x6c>)
 80052da:	789a      	ldrb	r2, [r3, #2]
 80052dc:	4b10      	ldr	r3, [pc, #64]	; (8005320 <gps_process+0x74>)
 80052de:	709a      	strb	r2, [r3, #2]
	Data[3]=Lat[3];
 80052e0:	4b0d      	ldr	r3, [pc, #52]	; (8005318 <gps_process+0x6c>)
 80052e2:	78da      	ldrb	r2, [r3, #3]
 80052e4:	4b0e      	ldr	r3, [pc, #56]	; (8005320 <gps_process+0x74>)
 80052e6:	70da      	strb	r2, [r3, #3]
	Data[4]=Long[0];
 80052e8:	4b0c      	ldr	r3, [pc, #48]	; (800531c <gps_process+0x70>)
 80052ea:	781a      	ldrb	r2, [r3, #0]
 80052ec:	4b0c      	ldr	r3, [pc, #48]	; (8005320 <gps_process+0x74>)
 80052ee:	711a      	strb	r2, [r3, #4]
	Data[5]=Long[1];
 80052f0:	4b0a      	ldr	r3, [pc, #40]	; (800531c <gps_process+0x70>)
 80052f2:	785a      	ldrb	r2, [r3, #1]
 80052f4:	4b0a      	ldr	r3, [pc, #40]	; (8005320 <gps_process+0x74>)
 80052f6:	715a      	strb	r2, [r3, #5]
	Data[6]=Long[2];
 80052f8:	4b08      	ldr	r3, [pc, #32]	; (800531c <gps_process+0x70>)
 80052fa:	789a      	ldrb	r2, [r3, #2]
 80052fc:	4b08      	ldr	r3, [pc, #32]	; (8005320 <gps_process+0x74>)
 80052fe:	719a      	strb	r2, [r3, #6]
	Data[7]=Long[3];
 8005300:	4b06      	ldr	r3, [pc, #24]	; (800531c <gps_process+0x70>)
 8005302:	78da      	ldrb	r2, [r3, #3]
 8005304:	4b06      	ldr	r3, [pc, #24]	; (8005320 <gps_process+0x74>)
 8005306:	71da      	strb	r2, [r3, #7]
//	char * str = (char*)malloc(sizeof(char)*200);
//		          sprintf(str, "\r\n%d: Lat: %f %c, Lon: %f %c, Alt: %f m, Satellites: %d HDOP: %f\r\n",
//		                  Serialcnt, myData.latitude, myData.latSide, myData.longitude, myData.lonSide, myData.altitude, myData.satelliteCount, myData.hdop);
//		          HAL_UART_Transmit(&huart3, (uint8_t *)str, strlen(str), 1000);
	gpsstate=GPS_SENDDATA;
 8005308:	4b06      	ldr	r3, [pc, #24]	; (8005324 <gps_process+0x78>)
 800530a:	2206      	movs	r2, #6
 800530c:	701a      	strb	r2, [r3, #0]
}
 800530e:	bf00      	nop
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	20000484 	.word	0x20000484
 8005318:	2000059c 	.word	0x2000059c
 800531c:	200005a0 	.word	0x200005a0
 8005320:	200004b8 	.word	0x200004b8
 8005324:	200004b1 	.word	0x200004b1

08005328 <send_error_signal>:
void send_error_signal() {
 8005328:	b580      	push	{r7, lr}
 800532a:	af00      	add	r7, sp, #0
	if(CAN_HandleSendData(0x207,Data,8)==HAL_OK){
 800532c:	2208      	movs	r2, #8
 800532e:	4922      	ldr	r1, [pc, #136]	; (80053b8 <send_error_signal+0x90>)
 8005330:	f240 2007 	movw	r0, #519	; 0x207
 8005334:	f7fb ff4a 	bl	80011cc <CAN_HandleSendData>
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d10e      	bne.n	800535c <send_error_signal+0x34>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,GPIO_PIN_RESET);
 800533e:	2200      	movs	r2, #0
 8005340:	2108      	movs	r1, #8
 8005342:	481e      	ldr	r0, [pc, #120]	; (80053bc <send_error_signal+0x94>)
 8005344:	f7fe f89c 	bl	8003480 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,GPIO_PIN_SET);
 8005348:	2201      	movs	r2, #1
 800534a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800534e:	481b      	ldr	r0, [pc, #108]	; (80053bc <send_error_signal+0x94>)
 8005350:	f7fe f896 	bl	8003480 <HAL_GPIO_WritePin>
			gpsstate=GPS_GETDATA;
 8005354:	4b1a      	ldr	r3, [pc, #104]	; (80053c0 <send_error_signal+0x98>)
 8005356:	2202      	movs	r2, #2
 8005358:	701a      	strb	r2, [r3, #0]
				}
				else{
					gpsstate=GPS_GETDATA;
				}
			}
}
 800535a:	e02a      	b.n	80053b2 <send_error_signal+0x8a>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,GPIO_PIN_RESET);
 800535c:	2200      	movs	r2, #0
 800535e:	2108      	movs	r1, #8
 8005360:	4816      	ldr	r0, [pc, #88]	; (80053bc <send_error_signal+0x94>)
 8005362:	f7fe f88d 	bl	8003480 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,GPIO_PIN_SET);
 8005366:	2201      	movs	r2, #1
 8005368:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800536c:	4813      	ldr	r0, [pc, #76]	; (80053bc <send_error_signal+0x94>)
 800536e:	f7fe f887 	bl	8003480 <HAL_GPIO_WritePin>
				ErrCnt.CAN_Error_SenErrorCounter++;
 8005372:	4b14      	ldr	r3, [pc, #80]	; (80053c4 <send_error_signal+0x9c>)
 8005374:	785b      	ldrb	r3, [r3, #1]
 8005376:	3301      	adds	r3, #1
 8005378:	b2da      	uxtb	r2, r3
 800537a:	4b12      	ldr	r3, [pc, #72]	; (80053c4 <send_error_signal+0x9c>)
 800537c:	705a      	strb	r2, [r3, #1]
				if(ErrCnt.CAN_Error_SenErrorCounter==3||ErrCnt.CAN_Error_SenErrorCounter==6){
 800537e:	4b11      	ldr	r3, [pc, #68]	; (80053c4 <send_error_signal+0x9c>)
 8005380:	785b      	ldrb	r3, [r3, #1]
 8005382:	2b03      	cmp	r3, #3
 8005384:	d003      	beq.n	800538e <send_error_signal+0x66>
 8005386:	4b0f      	ldr	r3, [pc, #60]	; (80053c4 <send_error_signal+0x9c>)
 8005388:	785b      	ldrb	r3, [r3, #1]
 800538a:	2b06      	cmp	r3, #6
 800538c:	d10e      	bne.n	80053ac <send_error_signal+0x84>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,GPIO_PIN_RESET);
 800538e:	2200      	movs	r2, #0
 8005390:	2108      	movs	r1, #8
 8005392:	480a      	ldr	r0, [pc, #40]	; (80053bc <send_error_signal+0x94>)
 8005394:	f7fe f874 	bl	8003480 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,GPIO_PIN_SET);
 8005398:	2201      	movs	r2, #1
 800539a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800539e:	4807      	ldr	r0, [pc, #28]	; (80053bc <send_error_signal+0x94>)
 80053a0:	f7fe f86e 	bl	8003480 <HAL_GPIO_WritePin>
					gpsstate=GPS_RECOVERY;
 80053a4:	4b06      	ldr	r3, [pc, #24]	; (80053c0 <send_error_signal+0x98>)
 80053a6:	2204      	movs	r2, #4
 80053a8:	701a      	strb	r2, [r3, #0]
}
 80053aa:	e002      	b.n	80053b2 <send_error_signal+0x8a>
					gpsstate=GPS_GETDATA;
 80053ac:	4b04      	ldr	r3, [pc, #16]	; (80053c0 <send_error_signal+0x98>)
 80053ae:	2202      	movs	r2, #2
 80053b0:	701a      	strb	r2, [r3, #0]
}
 80053b2:	bf00      	nop
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	200004b8 	.word	0x200004b8
 80053bc:	40010c00 	.word	0x40010c00
 80053c0:	200004b1 	.word	0x200004b1
 80053c4:	200004b4 	.word	0x200004b4

080053c8 <gps_send_data>:
void gps_send_data() {
 80053c8:	b580      	push	{r7, lr}
 80053ca:	af00      	add	r7, sp, #0
	if(CAN_HandleSendData(0x207,Data,8)==HAL_OK){
 80053cc:	2208      	movs	r2, #8
 80053ce:	4922      	ldr	r1, [pc, #136]	; (8005458 <gps_send_data+0x90>)
 80053d0:	f240 2007 	movw	r0, #519	; 0x207
 80053d4:	f7fb fefa 	bl	80011cc <CAN_HandleSendData>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d10e      	bne.n	80053fc <gps_send_data+0x34>
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,GPIO_PIN_RESET);
 80053de:	2200      	movs	r2, #0
 80053e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80053e4:	481d      	ldr	r0, [pc, #116]	; (800545c <gps_send_data+0x94>)
 80053e6:	f7fe f84b 	bl	8003480 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,GPIO_PIN_SET);
 80053ea:	2201      	movs	r2, #1
 80053ec:	2108      	movs	r1, #8
 80053ee:	481b      	ldr	r0, [pc, #108]	; (800545c <gps_send_data+0x94>)
 80053f0:	f7fe f846 	bl	8003480 <HAL_GPIO_WritePin>
			gpsstate=GPS_GETDATA;
 80053f4:	4b1a      	ldr	r3, [pc, #104]	; (8005460 <gps_send_data+0x98>)
 80053f6:	2202      	movs	r2, #2
 80053f8:	701a      	strb	r2, [r3, #0]
			}
			else{
				gpsstate=GPS_GETDATA;
			}
		}
}
 80053fa:	e02a      	b.n	8005452 <gps_send_data+0x8a>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,GPIO_PIN_RESET);
 80053fc:	2200      	movs	r2, #0
 80053fe:	2108      	movs	r1, #8
 8005400:	4816      	ldr	r0, [pc, #88]	; (800545c <gps_send_data+0x94>)
 8005402:	f7fe f83d 	bl	8003480 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,GPIO_PIN_SET);
 8005406:	2201      	movs	r2, #1
 8005408:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800540c:	4813      	ldr	r0, [pc, #76]	; (800545c <gps_send_data+0x94>)
 800540e:	f7fe f837 	bl	8003480 <HAL_GPIO_WritePin>
			ErrCnt.CAN_Error_SenDataCounter++;
 8005412:	4b14      	ldr	r3, [pc, #80]	; (8005464 <gps_send_data+0x9c>)
 8005414:	781b      	ldrb	r3, [r3, #0]
 8005416:	3301      	adds	r3, #1
 8005418:	b2da      	uxtb	r2, r3
 800541a:	4b12      	ldr	r3, [pc, #72]	; (8005464 <gps_send_data+0x9c>)
 800541c:	701a      	strb	r2, [r3, #0]
			if(ErrCnt.CAN_Error_SenDataCounter==3||ErrCnt.CAN_Error_SenDataCounter==6){
 800541e:	4b11      	ldr	r3, [pc, #68]	; (8005464 <gps_send_data+0x9c>)
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	2b03      	cmp	r3, #3
 8005424:	d003      	beq.n	800542e <gps_send_data+0x66>
 8005426:	4b0f      	ldr	r3, [pc, #60]	; (8005464 <gps_send_data+0x9c>)
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	2b06      	cmp	r3, #6
 800542c:	d10e      	bne.n	800544c <gps_send_data+0x84>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,GPIO_PIN_RESET);
 800542e:	2200      	movs	r2, #0
 8005430:	2108      	movs	r1, #8
 8005432:	480a      	ldr	r0, [pc, #40]	; (800545c <gps_send_data+0x94>)
 8005434:	f7fe f824 	bl	8003480 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,GPIO_PIN_SET);
 8005438:	2201      	movs	r2, #1
 800543a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800543e:	4807      	ldr	r0, [pc, #28]	; (800545c <gps_send_data+0x94>)
 8005440:	f7fe f81e 	bl	8003480 <HAL_GPIO_WritePin>
				gpsstate=GPS_RECOVERY;
 8005444:	4b06      	ldr	r3, [pc, #24]	; (8005460 <gps_send_data+0x98>)
 8005446:	2204      	movs	r2, #4
 8005448:	701a      	strb	r2, [r3, #0]
}
 800544a:	e002      	b.n	8005452 <gps_send_data+0x8a>
				gpsstate=GPS_GETDATA;
 800544c:	4b04      	ldr	r3, [pc, #16]	; (8005460 <gps_send_data+0x98>)
 800544e:	2202      	movs	r2, #2
 8005450:	701a      	strb	r2, [r3, #0]
}
 8005452:	bf00      	nop
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	200004b8 	.word	0x200004b8
 800545c:	40010c00 	.word	0x40010c00
 8005460:	200004b1 	.word	0x200004b1
 8005464:	200004b4 	.word	0x200004b4

08005468 <gps_checksum>:


char *data[15];

int gps_checksum(char *nmea_data)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b086      	sub	sp, #24
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
    //if you point a string with less than 5 characters the function will read outside of scope and crash the mcu.
    if(strlen(nmea_data) < 5) return 0;
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f7fa fe6d 	bl	8000150 <strlen>
 8005476:	4603      	mov	r3, r0
 8005478:	2b04      	cmp	r3, #4
 800547a:	d801      	bhi.n	8005480 <gps_checksum+0x18>
 800547c:	2300      	movs	r3, #0
 800547e:	e038      	b.n	80054f2 <gps_checksum+0x8a>
    char recv_crc[2];
    recv_crc[0] = nmea_data[strlen(nmea_data) - 4];
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f7fa fe65 	bl	8000150 <strlen>
 8005486:	4603      	mov	r3, r0
 8005488:	3b04      	subs	r3, #4
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	4413      	add	r3, r2
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	723b      	strb	r3, [r7, #8]
    recv_crc[1] = nmea_data[strlen(nmea_data) - 3];
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f7fa fe5c 	bl	8000150 <strlen>
 8005498:	4603      	mov	r3, r0
 800549a:	3b03      	subs	r3, #3
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	4413      	add	r3, r2
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	727b      	strb	r3, [r7, #9]
    int crc = 0;
 80054a4:	2300      	movs	r3, #0
 80054a6:	617b      	str	r3, [r7, #20]
    int i;

    //exclude the CRLF plus CRC with an * from the end
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 80054a8:	2300      	movs	r3, #0
 80054aa:	613b      	str	r3, [r7, #16]
 80054ac:	e00a      	b.n	80054c4 <gps_checksum+0x5c>
        crc ^= nmea_data[i];
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	4413      	add	r3, r2
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	461a      	mov	r2, r3
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	4053      	eors	r3, r2
 80054bc:	617b      	str	r3, [r7, #20]
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	3301      	adds	r3, #1
 80054c2:	613b      	str	r3, [r7, #16]
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f7fa fe43 	bl	8000150 <strlen>
 80054ca:	4603      	mov	r3, r0
 80054cc:	1f5a      	subs	r2, r3, #5
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d8ec      	bhi.n	80054ae <gps_checksum+0x46>
    }
    int receivedHash = strtol(recv_crc, NULL, 16);
 80054d4:	f107 0308 	add.w	r3, r7, #8
 80054d8:	2210      	movs	r2, #16
 80054da:	2100      	movs	r1, #0
 80054dc:	4618      	mov	r0, r3
 80054de:	f001 fc49 	bl	8006d74 <strtol>
 80054e2:	60f8      	str	r0, [r7, #12]
    if (crc == receivedHash) {
 80054e4:	697a      	ldr	r2, [r7, #20]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d101      	bne.n	80054f0 <gps_checksum+0x88>
        return 1;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e000      	b.n	80054f2 <gps_checksum+0x8a>
    }
    else{
        return 0;
 80054f0:	2300      	movs	r3, #0
    }
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3718      	adds	r7, #24
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
	...

080054fc <nmea_GPGGA>:

int nmea_GPGGA(GPS *gps_data, char*inputString){
 80054fc:	b590      	push	{r4, r7, lr}
 80054fe:	b0b7      	sub	sp, #220	; 0xdc
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8005506:	2300      	movs	r3, #0
 8005508:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    memset(values, 0, sizeof(values));
 800550c:	f107 0320 	add.w	r3, r7, #32
 8005510:	2264      	movs	r2, #100	; 0x64
 8005512:	2100      	movs	r1, #0
 8005514:	4618      	mov	r0, r3
 8005516:	f002 fbc8 	bl	8007caa <memset>
    char *marker = strtok(inputString, ",");
 800551a:	49c7      	ldr	r1, [pc, #796]	; (8005838 <nmea_GPGGA+0x33c>)
 800551c:	6838      	ldr	r0, [r7, #0]
 800551e:	f002 fbdf 	bl	8007ce0 <strtok>
 8005522:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 8005526:	e027      	b.n	8005578 <nmea_GPGGA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8005528:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800552c:	f7fa fe10 	bl	8000150 <strlen>
 8005530:	4603      	mov	r3, r0
 8005532:	1c5a      	adds	r2, r3, #1
 8005534:	f8d7 40d4 	ldr.w	r4, [r7, #212]	; 0xd4
 8005538:	1c63      	adds	r3, r4, #1
 800553a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800553e:	4610      	mov	r0, r2
 8005540:	f000 fc68 	bl	8005e14 <malloc>
 8005544:	4603      	mov	r3, r0
 8005546:	461a      	mov	r2, r3
 8005548:	00a3      	lsls	r3, r4, #2
 800554a:	33d8      	adds	r3, #216	; 0xd8
 800554c:	443b      	add	r3, r7
 800554e:	f843 2cb8 	str.w	r2, [r3, #-184]
        strcpy(values[counter - 1], marker);
 8005552:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005556:	3b01      	subs	r3, #1
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	33d8      	adds	r3, #216	; 0xd8
 800555c:	443b      	add	r3, r7
 800555e:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8005562:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8005566:	4618      	mov	r0, r3
 8005568:	f002 fcb3 	bl	8007ed2 <strcpy>
        marker = strtok(NULL, ",");
 800556c:	49b2      	ldr	r1, [pc, #712]	; (8005838 <nmea_GPGGA+0x33c>)
 800556e:	2000      	movs	r0, #0
 8005570:	f002 fbb6 	bl	8007ce0 <strtok>
 8005574:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 8005578:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800557c:	2b00      	cmp	r3, #0
 800557e:	d1d3      	bne.n	8005528 <nmea_GPGGA+0x2c>
    }
    char lonSide = values[5][0];
 8005580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
    char latSide = values[3][0];
 8005588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
    strcpy(gps_data->lastMeasure, values[1]);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	3320      	adds	r3, #32
 8005594:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005596:	4611      	mov	r1, r2
 8005598:	4618      	mov	r0, r3
 800559a:	f002 fc9a 	bl	8007ed2 <strcpy>
    if(latSide == 'S' || latSide == 'N'){
 800559e:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 80055a2:	2b53      	cmp	r3, #83	; 0x53
 80055a4:	d004      	beq.n	80055b0 <nmea_GPGGA+0xb4>
 80055a6:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 80055aa:	2b4e      	cmp	r3, #78	; 0x4e
 80055ac:	f040 8163 	bne.w	8005876 <nmea_GPGGA+0x37a>
        char lat_d[2];
        char lat_m[7];
        for (int z = 0; z < 2; z++) lat_d[z] = values[2][z];
 80055b0:	2300      	movs	r3, #0
 80055b2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80055b6:	e010      	b.n	80055da <nmea_GPGGA+0xde>
 80055b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80055be:	4413      	add	r3, r2
 80055c0:	7819      	ldrb	r1, [r3, #0]
 80055c2:	f107 021c 	add.w	r2, r7, #28
 80055c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80055ca:	4413      	add	r3, r2
 80055cc:	460a      	mov	r2, r1
 80055ce:	701a      	strb	r2, [r3, #0]
 80055d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80055d4:	3301      	adds	r3, #1
 80055d6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80055da:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80055de:	2b01      	cmp	r3, #1
 80055e0:	ddea      	ble.n	80055b8 <nmea_GPGGA+0xbc>
        for (int z = 0; z < 6; z++) lat_m[z] = values[2][z + 2];
 80055e2:	2300      	movs	r3, #0
 80055e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80055e8:	e011      	b.n	800560e <nmea_GPGGA+0x112>
 80055ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80055f0:	3302      	adds	r3, #2
 80055f2:	4413      	add	r3, r2
 80055f4:	7819      	ldrb	r1, [r3, #0]
 80055f6:	f107 0214 	add.w	r2, r7, #20
 80055fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80055fe:	4413      	add	r3, r2
 8005600:	460a      	mov	r2, r1
 8005602:	701a      	strb	r2, [r3, #0]
 8005604:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005608:	3301      	adds	r3, #1
 800560a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800560e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005612:	2b05      	cmp	r3, #5
 8005614:	dde9      	ble.n	80055ea <nmea_GPGGA+0xee>

        int lat_deg_strtol = strtol(lat_d, NULL, 10);
 8005616:	f107 031c 	add.w	r3, r7, #28
 800561a:	220a      	movs	r2, #10
 800561c:	2100      	movs	r1, #0
 800561e:	4618      	mov	r0, r3
 8005620:	f001 fba8 	bl	8006d74 <strtol>
 8005624:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
        float lat_min_strtof = strtof(lat_m, NULL);
 8005628:	f107 0314 	add.w	r3, r7, #20
 800562c:	2100      	movs	r1, #0
 800562e:	4618      	mov	r0, r3
 8005630:	f001 fac8 	bl	8006bc4 <strtof>
 8005634:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
        double lat_deg = lat_deg_strtol + lat_min_strtof / 60;
 8005638:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800563c:	f7fb fb4e 	bl	8000cdc <__aeabi_i2f>
 8005640:	4604      	mov	r4, r0
 8005642:	497e      	ldr	r1, [pc, #504]	; (800583c <nmea_GPGGA+0x340>)
 8005644:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8005648:	f7fb fc50 	bl	8000eec <__aeabi_fdiv>
 800564c:	4603      	mov	r3, r0
 800564e:	4619      	mov	r1, r3
 8005650:	4620      	mov	r0, r4
 8005652:	f7fb fa8f 	bl	8000b74 <__addsf3>
 8005656:	4603      	mov	r3, r0
 8005658:	4618      	mov	r0, r3
 800565a:	f7fa fee5 	bl	8000428 <__aeabi_f2d>
 800565e:	4602      	mov	r2, r0
 8005660:	460b      	mov	r3, r1
 8005662:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0

        char lon_d[3];
        char lon_m[7];

        for (int z = 0; z < 3; z++) lon_d[z] = values[4][z];
 8005666:	2300      	movs	r3, #0
 8005668:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800566c:	e010      	b.n	8005690 <nmea_GPGGA+0x194>
 800566e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005670:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005674:	4413      	add	r3, r2
 8005676:	7819      	ldrb	r1, [r3, #0]
 8005678:	f107 0210 	add.w	r2, r7, #16
 800567c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005680:	4413      	add	r3, r2
 8005682:	460a      	mov	r2, r1
 8005684:	701a      	strb	r2, [r3, #0]
 8005686:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800568a:	3301      	adds	r3, #1
 800568c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005690:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005694:	2b02      	cmp	r3, #2
 8005696:	ddea      	ble.n	800566e <nmea_GPGGA+0x172>
        for (int z = 0; z < 6; z++) lon_m[z] = values[4][z + 3];
 8005698:	2300      	movs	r3, #0
 800569a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800569e:	e011      	b.n	80056c4 <nmea_GPGGA+0x1c8>
 80056a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80056a6:	3303      	adds	r3, #3
 80056a8:	4413      	add	r3, r2
 80056aa:	7819      	ldrb	r1, [r3, #0]
 80056ac:	f107 0208 	add.w	r2, r7, #8
 80056b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80056b4:	4413      	add	r3, r2
 80056b6:	460a      	mov	r2, r1
 80056b8:	701a      	strb	r2, [r3, #0]
 80056ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80056be:	3301      	adds	r3, #1
 80056c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80056c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80056c8:	2b05      	cmp	r3, #5
 80056ca:	dde9      	ble.n	80056a0 <nmea_GPGGA+0x1a4>

        int lon_deg_strtol = strtol(lon_d, NULL, 10);
 80056cc:	f107 0310 	add.w	r3, r7, #16
 80056d0:	220a      	movs	r2, #10
 80056d2:	2100      	movs	r1, #0
 80056d4:	4618      	mov	r0, r3
 80056d6:	f001 fb4d 	bl	8006d74 <strtol>
 80056da:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        float lon_min_strtof = strtof(lon_m, NULL);
 80056de:	f107 0308 	add.w	r3, r7, #8
 80056e2:	2100      	movs	r1, #0
 80056e4:	4618      	mov	r0, r3
 80056e6:	f001 fa6d 	bl	8006bc4 <strtof>
 80056ea:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
        double lon_deg = lon_deg_strtol + lon_min_strtof / 60;
 80056ee:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80056f2:	f7fb faf3 	bl	8000cdc <__aeabi_i2f>
 80056f6:	4604      	mov	r4, r0
 80056f8:	4950      	ldr	r1, [pc, #320]	; (800583c <nmea_GPGGA+0x340>)
 80056fa:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80056fe:	f7fb fbf5 	bl	8000eec <__aeabi_fdiv>
 8005702:	4603      	mov	r3, r0
 8005704:	4619      	mov	r1, r3
 8005706:	4620      	mov	r0, r4
 8005708:	f7fb fa34 	bl	8000b74 <__addsf3>
 800570c:	4603      	mov	r3, r0
 800570e:	4618      	mov	r0, r3
 8005710:	f7fa fe8a 	bl	8000428 <__aeabi_f2d>
 8005714:	4602      	mov	r2, r0
 8005716:	460b      	mov	r3, r1
 8005718:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90

        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 800571c:	f04f 0200 	mov.w	r2, #0
 8005720:	f04f 0300 	mov.w	r3, #0
 8005724:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8005728:	f7fb f93e 	bl	80009a8 <__aeabi_dcmpeq>
 800572c:	4603      	mov	r3, r0
 800572e:	2b00      	cmp	r3, #0
 8005730:	d17e      	bne.n	8005830 <nmea_GPGGA+0x334>
 8005732:	f04f 0200 	mov.w	r2, #0
 8005736:	f04f 0300 	mov.w	r3, #0
 800573a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800573e:	f7fb f933 	bl	80009a8 <__aeabi_dcmpeq>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d173      	bne.n	8005830 <nmea_GPGGA+0x334>
 8005748:	f04f 0200 	mov.w	r2, #0
 800574c:	4b3c      	ldr	r3, [pc, #240]	; (8005840 <nmea_GPGGA+0x344>)
 800574e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8005752:	f7fb f933 	bl	80009bc <__aeabi_dcmplt>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d069      	beq.n	8005830 <nmea_GPGGA+0x334>
 800575c:	f04f 0200 	mov.w	r2, #0
 8005760:	4b38      	ldr	r3, [pc, #224]	; (8005844 <nmea_GPGGA+0x348>)
 8005762:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8005766:	f7fb f929 	bl	80009bc <__aeabi_dcmplt>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d05f      	beq.n	8005830 <nmea_GPGGA+0x334>
            gps_data->latitude = lat_deg;
 8005770:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8005774:	f7fb f9a8 	bl	8000ac8 <__aeabi_d2f>
 8005778:	4602      	mov	r2, r0
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	601a      	str	r2, [r3, #0]
            gps_data->latSide = latSide;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f897 20b6 	ldrb.w	r2, [r7, #182]	; 0xb6
 8005784:	711a      	strb	r2, [r3, #4]
            gps_data->longitude = lon_deg;
 8005786:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800578a:	f7fb f99d 	bl	8000ac8 <__aeabi_d2f>
 800578e:	4602      	mov	r2, r0
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	609a      	str	r2, [r3, #8]
            gps_data->lonSide = lonSide;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f897 20b7 	ldrb.w	r2, [r7, #183]	; 0xb7
 800579a:	731a      	strb	r2, [r3, #12]
            float altitude = strtof(values[9], NULL);
 800579c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800579e:	2100      	movs	r1, #0
 80057a0:	4618      	mov	r0, r3
 80057a2:	f001 fa0f 	bl	8006bc4 <strtof>
 80057a6:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
            gps_data->altitude = altitude!=0 ? altitude : gps_data->altitude;
 80057aa:	f04f 0100 	mov.w	r1, #0
 80057ae:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80057b2:	f7fb fc7b 	bl	80010ac <__aeabi_fcmpeq>
 80057b6:	4603      	mov	r3, r0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d002      	beq.n	80057c2 <nmea_GPGGA+0x2c6>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	e001      	b.n	80057c6 <nmea_GPGGA+0x2ca>
 80057c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	6113      	str	r3, [r2, #16]
            gps_data->satelliteCount = strtol(values[7], NULL, 10);
 80057ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057cc:	220a      	movs	r2, #10
 80057ce:	2100      	movs	r1, #0
 80057d0:	4618      	mov	r0, r3
 80057d2:	f001 facf 	bl	8006d74 <strtol>
 80057d6:	4602      	mov	r2, r0
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	619a      	str	r2, [r3, #24]

            int fixQuality = strtol(values[6], NULL, 10);
 80057dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057de:	220a      	movs	r2, #10
 80057e0:	2100      	movs	r1, #0
 80057e2:	4618      	mov	r0, r3
 80057e4:	f001 fac6 	bl	8006d74 <strtol>
 80057e8:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
            gps_data->fix = fixQuality > 0 ? 1 : 0;
 80057ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	bfcc      	ite	gt
 80057f4:	2301      	movgt	r3, #1
 80057f6:	2300      	movle	r3, #0
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	461a      	mov	r2, r3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	61da      	str	r2, [r3, #28]

            float hdop = strtof(values[8], NULL);
 8005800:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005802:	2100      	movs	r1, #0
 8005804:	4618      	mov	r0, r3
 8005806:	f001 f9dd 	bl	8006bc4 <strtof>
 800580a:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
            gps_data->hdop = hdop!=0 ? hdop : gps_data->hdop;
 800580e:	f04f 0100 	mov.w	r1, #0
 8005812:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8005816:	f7fb fc49 	bl	80010ac <__aeabi_fcmpeq>
 800581a:	4603      	mov	r3, r0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d002      	beq.n	8005826 <nmea_GPGGA+0x32a>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	695b      	ldr	r3, [r3, #20]
 8005824:	e001      	b.n	800582a <nmea_GPGGA+0x32e>
 8005826:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	6153      	str	r3, [r2, #20]
        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 800582e:	e022      	b.n	8005876 <nmea_GPGGA+0x37a>
        }
        else {
            for(int i=0; i<counter; i++) free(values[i]);
 8005830:	2300      	movs	r3, #0
 8005832:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005836:	e016      	b.n	8005866 <nmea_GPGGA+0x36a>
 8005838:	0800a760 	.word	0x0800a760
 800583c:	42700000 	.word	0x42700000
 8005840:	40568000 	.word	0x40568000
 8005844:	40668000 	.word	0x40668000
 8005848:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	33d8      	adds	r3, #216	; 0xd8
 8005850:	443b      	add	r3, r7
 8005852:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8005856:	4618      	mov	r0, r3
 8005858:	f000 fae4 	bl	8005e24 <free>
 800585c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005860:	3301      	adds	r3, #1
 8005862:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005866:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800586a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800586e:	429a      	cmp	r2, r3
 8005870:	dbea      	blt.n	8005848 <nmea_GPGGA+0x34c>
            return 0;
 8005872:	2300      	movs	r3, #0
 8005874:	e019      	b.n	80058aa <nmea_GPGGA+0x3ae>
        }

    }

    for(int i=0; i<counter; i++) free(values[i]);
 8005876:	2300      	movs	r3, #0
 8005878:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800587c:	e00e      	b.n	800589c <nmea_GPGGA+0x3a0>
 800587e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	33d8      	adds	r3, #216	; 0xd8
 8005886:	443b      	add	r3, r7
 8005888:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 800588c:	4618      	mov	r0, r3
 800588e:	f000 fac9 	bl	8005e24 <free>
 8005892:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005896:	3301      	adds	r3, #1
 8005898:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800589c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80058a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80058a4:	429a      	cmp	r2, r3
 80058a6:	dbea      	blt.n	800587e <nmea_GPGGA+0x382>
    return 1;
 80058a8:	2301      	movs	r3, #1
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	37dc      	adds	r7, #220	; 0xdc
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd90      	pop	{r4, r7, pc}
 80058b2:	bf00      	nop

080058b4 <nmea_GPGSA>:


int nmea_GPGSA(GPS *gps_data, char*inputString){
 80058b4:	b590      	push	{r4, r7, lr}
 80058b6:	b0a3      	sub	sp, #140	; 0x8c
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 80058be:	2300      	movs	r3, #0
 80058c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    memset(values, 0, sizeof(values));
 80058c4:	f107 030c 	add.w	r3, r7, #12
 80058c8:	2264      	movs	r2, #100	; 0x64
 80058ca:	2100      	movs	r1, #0
 80058cc:	4618      	mov	r0, r3
 80058ce:	f002 f9ec 	bl	8007caa <memset>
    char *marker = strtok(inputString, ",");
 80058d2:	493b      	ldr	r1, [pc, #236]	; (80059c0 <nmea_GPGSA+0x10c>)
 80058d4:	6838      	ldr	r0, [r7, #0]
 80058d6:	f002 fa03 	bl	8007ce0 <strtok>
 80058da:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    while (marker != NULL) {
 80058de:	e027      	b.n	8005930 <nmea_GPGSA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 80058e0:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80058e4:	f7fa fc34 	bl	8000150 <strlen>
 80058e8:	4603      	mov	r3, r0
 80058ea:	1c5a      	adds	r2, r3, #1
 80058ec:	f8d7 4084 	ldr.w	r4, [r7, #132]	; 0x84
 80058f0:	1c63      	adds	r3, r4, #1
 80058f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80058f6:	4610      	mov	r0, r2
 80058f8:	f000 fa8c 	bl	8005e14 <malloc>
 80058fc:	4603      	mov	r3, r0
 80058fe:	461a      	mov	r2, r3
 8005900:	00a3      	lsls	r3, r4, #2
 8005902:	3388      	adds	r3, #136	; 0x88
 8005904:	443b      	add	r3, r7
 8005906:	f843 2c7c 	str.w	r2, [r3, #-124]
        strcpy(values[counter - 1], marker);
 800590a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800590e:	3b01      	subs	r3, #1
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	3388      	adds	r3, #136	; 0x88
 8005914:	443b      	add	r3, r7
 8005916:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 800591a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800591e:	4618      	mov	r0, r3
 8005920:	f002 fad7 	bl	8007ed2 <strcpy>
        marker = strtok(NULL, ",");
 8005924:	4926      	ldr	r1, [pc, #152]	; (80059c0 <nmea_GPGSA+0x10c>)
 8005926:	2000      	movs	r0, #0
 8005928:	f002 f9da 	bl	8007ce0 <strtok>
 800592c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    while (marker != NULL) {
 8005930:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005934:	2b00      	cmp	r3, #0
 8005936:	d1d3      	bne.n	80058e0 <nmea_GPGSA+0x2c>
    }
    int fix = strtol(values[2], NULL, 10);
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	220a      	movs	r2, #10
 800593c:	2100      	movs	r1, #0
 800593e:	4618      	mov	r0, r3
 8005940:	f001 fa18 	bl	8006d74 <strtol>
 8005944:	6738      	str	r0, [r7, #112]	; 0x70
    gps_data->fix = fix > 1 ? 1 : 0;
 8005946:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005948:	2b01      	cmp	r3, #1
 800594a:	bfcc      	ite	gt
 800594c:	2301      	movgt	r3, #1
 800594e:	2300      	movle	r3, #0
 8005950:	b2db      	uxtb	r3, r3
 8005952:	461a      	mov	r2, r3
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	61da      	str	r2, [r3, #28]
    int satelliteCount = 0;
 8005958:	2300      	movs	r3, #0
 800595a:	67fb      	str	r3, [r7, #124]	; 0x7c
    for(int i=3; i<15; i++){
 800595c:	2303      	movs	r3, #3
 800595e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005960:	e00e      	b.n	8005980 <nmea_GPGSA+0xcc>
        if(values[i][0] != '\0'){
 8005962:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	3388      	adds	r3, #136	; 0x88
 8005968:	443b      	add	r3, r7
 800596a:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d002      	beq.n	800597a <nmea_GPGSA+0xc6>
            satelliteCount++;
 8005974:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005976:	3301      	adds	r3, #1
 8005978:	67fb      	str	r3, [r7, #124]	; 0x7c
    for(int i=3; i<15; i++){
 800597a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800597c:	3301      	adds	r3, #1
 800597e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005980:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005982:	2b0e      	cmp	r3, #14
 8005984:	dded      	ble.n	8005962 <nmea_GPGSA+0xae>
        }
    }
    gps_data->satelliteCount = satelliteCount;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800598a:	619a      	str	r2, [r3, #24]
    for(int i=0; i<counter; i++) free(values[i]);
 800598c:	2300      	movs	r3, #0
 800598e:	677b      	str	r3, [r7, #116]	; 0x74
 8005990:	e00b      	b.n	80059aa <nmea_GPGSA+0xf6>
 8005992:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	3388      	adds	r3, #136	; 0x88
 8005998:	443b      	add	r3, r7
 800599a:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 800599e:	4618      	mov	r0, r3
 80059a0:	f000 fa40 	bl	8005e24 <free>
 80059a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059a6:	3301      	adds	r3, #1
 80059a8:	677b      	str	r3, [r7, #116]	; 0x74
 80059aa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80059ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80059b0:	429a      	cmp	r2, r3
 80059b2:	dbee      	blt.n	8005992 <nmea_GPGSA+0xde>
    return 1;
 80059b4:	2301      	movs	r3, #1
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	378c      	adds	r7, #140	; 0x8c
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd90      	pop	{r4, r7, pc}
 80059be:	bf00      	nop
 80059c0:	0800a760 	.word	0x0800a760

080059c4 <nmea_GPGLL>:



int nmea_GPGLL(GPS *gps_data, char*inputString) {
 80059c4:	b590      	push	{r4, r7, lr}
 80059c6:	b0b7      	sub	sp, #220	; 0xdc
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]

    char *values[25];
    int counter = 0;
 80059ce:	2300      	movs	r3, #0
 80059d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    memset(values, 0, sizeof(values));
 80059d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059d8:	2264      	movs	r2, #100	; 0x64
 80059da:	2100      	movs	r1, #0
 80059dc:	4618      	mov	r0, r3
 80059de:	f002 f964 	bl	8007caa <memset>
    char *marker = strtok(inputString, ",");
 80059e2:	49b2      	ldr	r1, [pc, #712]	; (8005cac <nmea_GPGLL+0x2e8>)
 80059e4:	6838      	ldr	r0, [r7, #0]
 80059e6:	f002 f97b 	bl	8007ce0 <strtok>
 80059ea:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 80059ee:	e027      	b.n	8005a40 <nmea_GPGLL+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 80059f0:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80059f4:	f7fa fbac 	bl	8000150 <strlen>
 80059f8:	4603      	mov	r3, r0
 80059fa:	1c5a      	adds	r2, r3, #1
 80059fc:	f8d7 40d4 	ldr.w	r4, [r7, #212]	; 0xd4
 8005a00:	1c63      	adds	r3, r4, #1
 8005a02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005a06:	4610      	mov	r0, r2
 8005a08:	f000 fa04 	bl	8005e14 <malloc>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	461a      	mov	r2, r3
 8005a10:	00a3      	lsls	r3, r4, #2
 8005a12:	33d8      	adds	r3, #216	; 0xd8
 8005a14:	443b      	add	r3, r7
 8005a16:	f843 2cb4 	str.w	r2, [r3, #-180]
        strcpy(values[counter - 1], marker);
 8005a1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a1e:	3b01      	subs	r3, #1
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	33d8      	adds	r3, #216	; 0xd8
 8005a24:	443b      	add	r3, r7
 8005a26:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 8005a2a:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f002 fa4f 	bl	8007ed2 <strcpy>
        marker = strtok(NULL, ",");
 8005a34:	499d      	ldr	r1, [pc, #628]	; (8005cac <nmea_GPGLL+0x2e8>)
 8005a36:	2000      	movs	r0, #0
 8005a38:	f002 f952 	bl	8007ce0 <strtok>
 8005a3c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 8005a40:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d1d3      	bne.n	80059f0 <nmea_GPGLL+0x2c>
    }
    char latSide = values[2][0];
 8005a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
    if (latSide == 'S' || latSide == 'N') { //check if data is sorta intact
 8005a50:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8005a54:	2b53      	cmp	r3, #83	; 0x53
 8005a56:	d004      	beq.n	8005a62 <nmea_GPGLL+0x9e>
 8005a58:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8005a5c:	2b4e      	cmp	r3, #78	; 0x4e
 8005a5e:	f040 8120 	bne.w	8005ca2 <nmea_GPGLL+0x2de>
        char lat_d[2];
        char lat_m[7];
        for (int z = 0; z < 2; z++) lat_d[z] = values[1][z];
 8005a62:	2300      	movs	r3, #0
 8005a64:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005a68:	e010      	b.n	8005a8c <nmea_GPGLL+0xc8>
 8005a6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a6c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005a70:	4413      	add	r3, r2
 8005a72:	7819      	ldrb	r1, [r3, #0]
 8005a74:	f107 0220 	add.w	r2, r7, #32
 8005a78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005a7c:	4413      	add	r3, r2
 8005a7e:	460a      	mov	r2, r1
 8005a80:	701a      	strb	r2, [r3, #0]
 8005a82:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005a86:	3301      	adds	r3, #1
 8005a88:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005a8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	ddea      	ble.n	8005a6a <nmea_GPGLL+0xa6>
        for (int z = 0; z < 6; z++) lat_m[z] = values[1][z + 2];
 8005a94:	2300      	movs	r3, #0
 8005a96:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a9a:	e011      	b.n	8005ac0 <nmea_GPGLL+0xfc>
 8005a9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a9e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005aa2:	3302      	adds	r3, #2
 8005aa4:	4413      	add	r3, r2
 8005aa6:	7819      	ldrb	r1, [r3, #0]
 8005aa8:	f107 0218 	add.w	r2, r7, #24
 8005aac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ab0:	4413      	add	r3, r2
 8005ab2:	460a      	mov	r2, r1
 8005ab4:	701a      	strb	r2, [r3, #0]
 8005ab6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005aba:	3301      	adds	r3, #1
 8005abc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005ac0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ac4:	2b05      	cmp	r3, #5
 8005ac6:	dde9      	ble.n	8005a9c <nmea_GPGLL+0xd8>

        int lat_deg_strtol = strtol(lat_d, NULL, 10);
 8005ac8:	f107 0320 	add.w	r3, r7, #32
 8005acc:	220a      	movs	r2, #10
 8005ace:	2100      	movs	r1, #0
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f001 f94f 	bl	8006d74 <strtol>
 8005ad6:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
        float lat_min_strtof = strtof(lat_m, NULL);
 8005ada:	f107 0318 	add.w	r3, r7, #24
 8005ade:	2100      	movs	r1, #0
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f001 f86f 	bl	8006bc4 <strtof>
 8005ae6:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
        double lat_deg = lat_deg_strtol + lat_min_strtof / 60;
 8005aea:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8005aee:	f7fb f8f5 	bl	8000cdc <__aeabi_i2f>
 8005af2:	4604      	mov	r4, r0
 8005af4:	496e      	ldr	r1, [pc, #440]	; (8005cb0 <nmea_GPGLL+0x2ec>)
 8005af6:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8005afa:	f7fb f9f7 	bl	8000eec <__aeabi_fdiv>
 8005afe:	4603      	mov	r3, r0
 8005b00:	4619      	mov	r1, r3
 8005b02:	4620      	mov	r0, r4
 8005b04:	f7fb f836 	bl	8000b74 <__addsf3>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f7fa fc8c 	bl	8000428 <__aeabi_f2d>
 8005b10:	4602      	mov	r2, r0
 8005b12:	460b      	mov	r3, r1
 8005b14:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0

        char lon_d[3];
        char lon_m[7];
        char lonSide = values[4][0];
 8005b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
        for (int z = 0; z < 3; z++) lon_d[z] = values[3][z];
 8005b20:	2300      	movs	r3, #0
 8005b22:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005b26:	e010      	b.n	8005b4a <nmea_GPGLL+0x186>
 8005b28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b2a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005b2e:	4413      	add	r3, r2
 8005b30:	7819      	ldrb	r1, [r3, #0]
 8005b32:	f107 0214 	add.w	r2, r7, #20
 8005b36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005b3a:	4413      	add	r3, r2
 8005b3c:	460a      	mov	r2, r1
 8005b3e:	701a      	strb	r2, [r3, #0]
 8005b40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005b44:	3301      	adds	r3, #1
 8005b46:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005b4a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005b4e:	2b02      	cmp	r3, #2
 8005b50:	ddea      	ble.n	8005b28 <nmea_GPGLL+0x164>
        for (int z = 0; z < 6; z++) lon_m[z] = values[3][z + 3];
 8005b52:	2300      	movs	r3, #0
 8005b54:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b58:	e011      	b.n	8005b7e <nmea_GPGLL+0x1ba>
 8005b5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b5c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005b60:	3303      	adds	r3, #3
 8005b62:	4413      	add	r3, r2
 8005b64:	7819      	ldrb	r1, [r3, #0]
 8005b66:	f107 020c 	add.w	r2, r7, #12
 8005b6a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005b6e:	4413      	add	r3, r2
 8005b70:	460a      	mov	r2, r1
 8005b72:	701a      	strb	r2, [r3, #0]
 8005b74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005b78:	3301      	adds	r3, #1
 8005b7a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b7e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005b82:	2b05      	cmp	r3, #5
 8005b84:	dde9      	ble.n	8005b5a <nmea_GPGLL+0x196>

        int lon_deg_strtol = strtol(lon_d, NULL, 10);
 8005b86:	f107 0314 	add.w	r3, r7, #20
 8005b8a:	220a      	movs	r2, #10
 8005b8c:	2100      	movs	r1, #0
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f001 f8f0 	bl	8006d74 <strtol>
 8005b94:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
        float lon_min_strtof = strtof(lon_m, NULL);
 8005b98:	f107 030c 	add.w	r3, r7, #12
 8005b9c:	2100      	movs	r1, #0
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f001 f810 	bl	8006bc4 <strtof>
 8005ba4:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
        double lon_deg = lon_deg_strtol + lon_min_strtof / 60;
 8005ba8:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8005bac:	f7fb f896 	bl	8000cdc <__aeabi_i2f>
 8005bb0:	4604      	mov	r4, r0
 8005bb2:	493f      	ldr	r1, [pc, #252]	; (8005cb0 <nmea_GPGLL+0x2ec>)
 8005bb4:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8005bb8:	f7fb f998 	bl	8000eec <__aeabi_fdiv>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	4619      	mov	r1, r3
 8005bc0:	4620      	mov	r0, r4
 8005bc2:	f7fa ffd7 	bl	8000b74 <__addsf3>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f7fa fc2d 	bl	8000428 <__aeabi_f2d>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
        //confirm that we aren't on null island
        if(lon_deg_strtol == 0 || lon_min_strtof == 0 || lat_deg_strtol == 0 || lat_min_strtof == 0) {
 8005bd6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d015      	beq.n	8005c0a <nmea_GPGLL+0x246>
 8005bde:	f04f 0100 	mov.w	r1, #0
 8005be2:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8005be6:	f7fb fa61 	bl	80010ac <__aeabi_fcmpeq>
 8005bea:	4603      	mov	r3, r0
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d10c      	bne.n	8005c0a <nmea_GPGLL+0x246>
 8005bf0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d008      	beq.n	8005c0a <nmea_GPGLL+0x246>
 8005bf8:	f04f 0100 	mov.w	r1, #0
 8005bfc:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8005c00:	f7fb fa54 	bl	80010ac <__aeabi_fcmpeq>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d01a      	beq.n	8005c40 <nmea_GPGLL+0x27c>
            for(int i = 0; i<counter; i++) free(values[i]);
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005c10:	e00e      	b.n	8005c30 <nmea_GPGLL+0x26c>
 8005c12:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	33d8      	adds	r3, #216	; 0xd8
 8005c1a:	443b      	add	r3, r7
 8005c1c:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 8005c20:	4618      	mov	r0, r3
 8005c22:	f000 f8ff 	bl	8005e24 <free>
 8005c26:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005c30:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005c34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	dbea      	blt.n	8005c12 <nmea_GPGLL+0x24e>
            return 0;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	e031      	b.n	8005ca4 <nmea_GPGLL+0x2e0>
        }
        else{
            gps_data->latitude = lat_deg;
 8005c40:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8005c44:	f7fa ff40 	bl	8000ac8 <__aeabi_d2f>
 8005c48:	4602      	mov	r2, r0
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	601a      	str	r2, [r3, #0]
            gps_data->longitude = lon_deg;
 8005c4e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8005c52:	f7fa ff39 	bl	8000ac8 <__aeabi_d2f>
 8005c56:	4602      	mov	r2, r0
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	609a      	str	r2, [r3, #8]
            gps_data->latSide = latSide;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f897 20b7 	ldrb.w	r2, [r7, #183]	; 0xb7
 8005c62:	711a      	strb	r2, [r3, #4]
            gps_data->lonSide = lonSide;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 8005c6a:	731a      	strb	r2, [r3, #12]
            for(int i = 0; i<counter; i++) free(values[i]);
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c72:	e00e      	b.n	8005c92 <nmea_GPGLL+0x2ce>
 8005c74:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	33d8      	adds	r3, #216	; 0xd8
 8005c7c:	443b      	add	r3, r7
 8005c7e:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 8005c82:	4618      	mov	r0, r3
 8005c84:	f000 f8ce 	bl	8005e24 <free>
 8005c88:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c92:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005c96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	dbea      	blt.n	8005c74 <nmea_GPGLL+0x2b0>
            return 1;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e000      	b.n	8005ca4 <nmea_GPGLL+0x2e0>
        }
    }
    else return 0;
 8005ca2:	2300      	movs	r3, #0
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	37dc      	adds	r7, #220	; 0xdc
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd90      	pop	{r4, r7, pc}
 8005cac:	0800a760 	.word	0x0800a760
 8005cb0:	42700000 	.word	0x42700000

08005cb4 <nmea_parse>:

void nmea_parse(GPS *gps_data, uint8_t *buffer){
 8005cb4:	b590      	push	{r4, r7, lr}
 8005cb6:	b087      	sub	sp, #28
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
    memset(data, 0, sizeof(data));
 8005cbe:	223c      	movs	r2, #60	; 0x3c
 8005cc0:	2100      	movs	r1, #0
 8005cc2:	484e      	ldr	r0, [pc, #312]	; (8005dfc <nmea_parse+0x148>)
 8005cc4:	f001 fff1 	bl	8007caa <memset>
    char * token = strtok(buffer, "$");
 8005cc8:	494d      	ldr	r1, [pc, #308]	; (8005e00 <nmea_parse+0x14c>)
 8005cca:	6838      	ldr	r0, [r7, #0]
 8005ccc:	f002 f808 	bl	8007ce0 <strtok>
 8005cd0:	6178      	str	r0, [r7, #20]
    int cnt = 0;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	613b      	str	r3, [r7, #16]
    while(token !=NULL){
 8005cd6:	e01d      	b.n	8005d14 <nmea_parse+0x60>
        data[cnt++] = malloc(strlen(token)+1); //free later!!!!!
 8005cd8:	6978      	ldr	r0, [r7, #20]
 8005cda:	f7fa fa39 	bl	8000150 <strlen>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	1c5a      	adds	r2, r3, #1
 8005ce2:	693c      	ldr	r4, [r7, #16]
 8005ce4:	1c63      	adds	r3, r4, #1
 8005ce6:	613b      	str	r3, [r7, #16]
 8005ce8:	4610      	mov	r0, r2
 8005cea:	f000 f893 	bl	8005e14 <malloc>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	4b42      	ldr	r3, [pc, #264]	; (8005dfc <nmea_parse+0x148>)
 8005cf4:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
        strcpy(data[cnt-1], token);
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	3b01      	subs	r3, #1
 8005cfc:	4a3f      	ldr	r2, [pc, #252]	; (8005dfc <nmea_parse+0x148>)
 8005cfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d02:	6979      	ldr	r1, [r7, #20]
 8005d04:	4618      	mov	r0, r3
 8005d06:	f002 f8e4 	bl	8007ed2 <strcpy>
        token = strtok(NULL, "$");
 8005d0a:	493d      	ldr	r1, [pc, #244]	; (8005e00 <nmea_parse+0x14c>)
 8005d0c:	2000      	movs	r0, #0
 8005d0e:	f001 ffe7 	bl	8007ce0 <strtok>
 8005d12:	6178      	str	r0, [r7, #20]
    while(token !=NULL){
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d1de      	bne.n	8005cd8 <nmea_parse+0x24>
    }
    for(int i = 0; i<cnt; i++){
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	60fb      	str	r3, [r7, #12]
 8005d1e:	e052      	b.n	8005dc6 <nmea_parse+0x112>
       if(strstr(data[i], "\r\n")!=NULL && gps_checksum(data[i])){
 8005d20:	4a36      	ldr	r2, [pc, #216]	; (8005dfc <nmea_parse+0x148>)
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d28:	4936      	ldr	r1, [pc, #216]	; (8005e04 <nmea_parse+0x150>)
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f002 f834 	bl	8007d98 <strstr>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d044      	beq.n	8005dc0 <nmea_parse+0x10c>
 8005d36:	4a31      	ldr	r2, [pc, #196]	; (8005dfc <nmea_parse+0x148>)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f7ff fb92 	bl	8005468 <gps_checksum>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d03a      	beq.n	8005dc0 <nmea_parse+0x10c>
           if(strstr(data[i], "GNGLL")!=NULL){
 8005d4a:	4a2c      	ldr	r2, [pc, #176]	; (8005dfc <nmea_parse+0x148>)
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d52:	492d      	ldr	r1, [pc, #180]	; (8005e08 <nmea_parse+0x154>)
 8005d54:	4618      	mov	r0, r3
 8005d56:	f002 f81f 	bl	8007d98 <strstr>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d008      	beq.n	8005d72 <nmea_parse+0xbe>
               nmea_GPGLL(gps_data, data[i]);
 8005d60:	4a26      	ldr	r2, [pc, #152]	; (8005dfc <nmea_parse+0x148>)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d68:	4619      	mov	r1, r3
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f7ff fe2a 	bl	80059c4 <nmea_GPGLL>
 8005d70:	e026      	b.n	8005dc0 <nmea_parse+0x10c>
           }
           else if(strstr(data[i], "GNGSA")!=NULL){
 8005d72:	4a22      	ldr	r2, [pc, #136]	; (8005dfc <nmea_parse+0x148>)
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d7a:	4924      	ldr	r1, [pc, #144]	; (8005e0c <nmea_parse+0x158>)
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f002 f80b 	bl	8007d98 <strstr>
 8005d82:	4603      	mov	r3, r0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d008      	beq.n	8005d9a <nmea_parse+0xe6>
               nmea_GPGSA(gps_data, data[i]);
 8005d88:	4a1c      	ldr	r2, [pc, #112]	; (8005dfc <nmea_parse+0x148>)
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d90:	4619      	mov	r1, r3
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f7ff fd8e 	bl	80058b4 <nmea_GPGSA>
 8005d98:	e012      	b.n	8005dc0 <nmea_parse+0x10c>
           }
           else if(strstr(data[i], "GNGGA")!=NULL){
 8005d9a:	4a18      	ldr	r2, [pc, #96]	; (8005dfc <nmea_parse+0x148>)
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005da2:	491b      	ldr	r1, [pc, #108]	; (8005e10 <nmea_parse+0x15c>)
 8005da4:	4618      	mov	r0, r3
 8005da6:	f001 fff7 	bl	8007d98 <strstr>
 8005daa:	4603      	mov	r3, r0
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d007      	beq.n	8005dc0 <nmea_parse+0x10c>
               nmea_GPGGA(gps_data, data[i]);
 8005db0:	4a12      	ldr	r2, [pc, #72]	; (8005dfc <nmea_parse+0x148>)
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005db8:	4619      	mov	r1, r3
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f7ff fb9e 	bl	80054fc <nmea_GPGGA>
    for(int i = 0; i<cnt; i++){
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	60fb      	str	r3, [r7, #12]
 8005dc6:	68fa      	ldr	r2, [r7, #12]
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	dba8      	blt.n	8005d20 <nmea_parse+0x6c>
           }
       }

    }
    for(int i = 0; i<cnt; i++) free(data[i]);
 8005dce:	2300      	movs	r3, #0
 8005dd0:	60bb      	str	r3, [r7, #8]
 8005dd2:	e009      	b.n	8005de8 <nmea_parse+0x134>
 8005dd4:	4a09      	ldr	r2, [pc, #36]	; (8005dfc <nmea_parse+0x148>)
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f000 f821 	bl	8005e24 <free>
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	3301      	adds	r3, #1
 8005de6:	60bb      	str	r3, [r7, #8]
 8005de8:	68ba      	ldr	r2, [r7, #8]
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	dbf1      	blt.n	8005dd4 <nmea_parse+0x120>
}
 8005df0:	bf00      	nop
 8005df2:	bf00      	nop
 8005df4:	371c      	adds	r7, #28
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd90      	pop	{r4, r7, pc}
 8005dfa:	bf00      	nop
 8005dfc:	200005a4 	.word	0x200005a4
 8005e00:	0800a764 	.word	0x0800a764
 8005e04:	0800a768 	.word	0x0800a768
 8005e08:	0800a76c 	.word	0x0800a76c
 8005e0c:	0800a774 	.word	0x0800a774
 8005e10:	0800a77c 	.word	0x0800a77c

08005e14 <malloc>:
 8005e14:	4b02      	ldr	r3, [pc, #8]	; (8005e20 <malloc+0xc>)
 8005e16:	4601      	mov	r1, r0
 8005e18:	6818      	ldr	r0, [r3, #0]
 8005e1a:	f000 b82b 	b.w	8005e74 <_malloc_r>
 8005e1e:	bf00      	nop
 8005e20:	200001d0 	.word	0x200001d0

08005e24 <free>:
 8005e24:	4b02      	ldr	r3, [pc, #8]	; (8005e30 <free+0xc>)
 8005e26:	4601      	mov	r1, r0
 8005e28:	6818      	ldr	r0, [r3, #0]
 8005e2a:	f002 bf0d 	b.w	8008c48 <_free_r>
 8005e2e:	bf00      	nop
 8005e30:	200001d0 	.word	0x200001d0

08005e34 <sbrk_aligned>:
 8005e34:	b570      	push	{r4, r5, r6, lr}
 8005e36:	4e0e      	ldr	r6, [pc, #56]	; (8005e70 <sbrk_aligned+0x3c>)
 8005e38:	460c      	mov	r4, r1
 8005e3a:	6831      	ldr	r1, [r6, #0]
 8005e3c:	4605      	mov	r5, r0
 8005e3e:	b911      	cbnz	r1, 8005e46 <sbrk_aligned+0x12>
 8005e40:	f001 fff8 	bl	8007e34 <_sbrk_r>
 8005e44:	6030      	str	r0, [r6, #0]
 8005e46:	4621      	mov	r1, r4
 8005e48:	4628      	mov	r0, r5
 8005e4a:	f001 fff3 	bl	8007e34 <_sbrk_r>
 8005e4e:	1c43      	adds	r3, r0, #1
 8005e50:	d00a      	beq.n	8005e68 <sbrk_aligned+0x34>
 8005e52:	1cc4      	adds	r4, r0, #3
 8005e54:	f024 0403 	bic.w	r4, r4, #3
 8005e58:	42a0      	cmp	r0, r4
 8005e5a:	d007      	beq.n	8005e6c <sbrk_aligned+0x38>
 8005e5c:	1a21      	subs	r1, r4, r0
 8005e5e:	4628      	mov	r0, r5
 8005e60:	f001 ffe8 	bl	8007e34 <_sbrk_r>
 8005e64:	3001      	adds	r0, #1
 8005e66:	d101      	bne.n	8005e6c <sbrk_aligned+0x38>
 8005e68:	f04f 34ff 	mov.w	r4, #4294967295
 8005e6c:	4620      	mov	r0, r4
 8005e6e:	bd70      	pop	{r4, r5, r6, pc}
 8005e70:	200005e4 	.word	0x200005e4

08005e74 <_malloc_r>:
 8005e74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e78:	1ccd      	adds	r5, r1, #3
 8005e7a:	f025 0503 	bic.w	r5, r5, #3
 8005e7e:	3508      	adds	r5, #8
 8005e80:	2d0c      	cmp	r5, #12
 8005e82:	bf38      	it	cc
 8005e84:	250c      	movcc	r5, #12
 8005e86:	2d00      	cmp	r5, #0
 8005e88:	4607      	mov	r7, r0
 8005e8a:	db01      	blt.n	8005e90 <_malloc_r+0x1c>
 8005e8c:	42a9      	cmp	r1, r5
 8005e8e:	d905      	bls.n	8005e9c <_malloc_r+0x28>
 8005e90:	230c      	movs	r3, #12
 8005e92:	2600      	movs	r6, #0
 8005e94:	603b      	str	r3, [r7, #0]
 8005e96:	4630      	mov	r0, r6
 8005e98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e9c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005f70 <_malloc_r+0xfc>
 8005ea0:	f000 f868 	bl	8005f74 <__malloc_lock>
 8005ea4:	f8d8 3000 	ldr.w	r3, [r8]
 8005ea8:	461c      	mov	r4, r3
 8005eaa:	bb5c      	cbnz	r4, 8005f04 <_malloc_r+0x90>
 8005eac:	4629      	mov	r1, r5
 8005eae:	4638      	mov	r0, r7
 8005eb0:	f7ff ffc0 	bl	8005e34 <sbrk_aligned>
 8005eb4:	1c43      	adds	r3, r0, #1
 8005eb6:	4604      	mov	r4, r0
 8005eb8:	d155      	bne.n	8005f66 <_malloc_r+0xf2>
 8005eba:	f8d8 4000 	ldr.w	r4, [r8]
 8005ebe:	4626      	mov	r6, r4
 8005ec0:	2e00      	cmp	r6, #0
 8005ec2:	d145      	bne.n	8005f50 <_malloc_r+0xdc>
 8005ec4:	2c00      	cmp	r4, #0
 8005ec6:	d048      	beq.n	8005f5a <_malloc_r+0xe6>
 8005ec8:	6823      	ldr	r3, [r4, #0]
 8005eca:	4631      	mov	r1, r6
 8005ecc:	4638      	mov	r0, r7
 8005ece:	eb04 0903 	add.w	r9, r4, r3
 8005ed2:	f001 ffaf 	bl	8007e34 <_sbrk_r>
 8005ed6:	4581      	cmp	r9, r0
 8005ed8:	d13f      	bne.n	8005f5a <_malloc_r+0xe6>
 8005eda:	6821      	ldr	r1, [r4, #0]
 8005edc:	4638      	mov	r0, r7
 8005ede:	1a6d      	subs	r5, r5, r1
 8005ee0:	4629      	mov	r1, r5
 8005ee2:	f7ff ffa7 	bl	8005e34 <sbrk_aligned>
 8005ee6:	3001      	adds	r0, #1
 8005ee8:	d037      	beq.n	8005f5a <_malloc_r+0xe6>
 8005eea:	6823      	ldr	r3, [r4, #0]
 8005eec:	442b      	add	r3, r5
 8005eee:	6023      	str	r3, [r4, #0]
 8005ef0:	f8d8 3000 	ldr.w	r3, [r8]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d038      	beq.n	8005f6a <_malloc_r+0xf6>
 8005ef8:	685a      	ldr	r2, [r3, #4]
 8005efa:	42a2      	cmp	r2, r4
 8005efc:	d12b      	bne.n	8005f56 <_malloc_r+0xe2>
 8005efe:	2200      	movs	r2, #0
 8005f00:	605a      	str	r2, [r3, #4]
 8005f02:	e00f      	b.n	8005f24 <_malloc_r+0xb0>
 8005f04:	6822      	ldr	r2, [r4, #0]
 8005f06:	1b52      	subs	r2, r2, r5
 8005f08:	d41f      	bmi.n	8005f4a <_malloc_r+0xd6>
 8005f0a:	2a0b      	cmp	r2, #11
 8005f0c:	d917      	bls.n	8005f3e <_malloc_r+0xca>
 8005f0e:	1961      	adds	r1, r4, r5
 8005f10:	42a3      	cmp	r3, r4
 8005f12:	6025      	str	r5, [r4, #0]
 8005f14:	bf18      	it	ne
 8005f16:	6059      	strne	r1, [r3, #4]
 8005f18:	6863      	ldr	r3, [r4, #4]
 8005f1a:	bf08      	it	eq
 8005f1c:	f8c8 1000 	streq.w	r1, [r8]
 8005f20:	5162      	str	r2, [r4, r5]
 8005f22:	604b      	str	r3, [r1, #4]
 8005f24:	4638      	mov	r0, r7
 8005f26:	f104 060b 	add.w	r6, r4, #11
 8005f2a:	f000 f829 	bl	8005f80 <__malloc_unlock>
 8005f2e:	f026 0607 	bic.w	r6, r6, #7
 8005f32:	1d23      	adds	r3, r4, #4
 8005f34:	1af2      	subs	r2, r6, r3
 8005f36:	d0ae      	beq.n	8005e96 <_malloc_r+0x22>
 8005f38:	1b9b      	subs	r3, r3, r6
 8005f3a:	50a3      	str	r3, [r4, r2]
 8005f3c:	e7ab      	b.n	8005e96 <_malloc_r+0x22>
 8005f3e:	42a3      	cmp	r3, r4
 8005f40:	6862      	ldr	r2, [r4, #4]
 8005f42:	d1dd      	bne.n	8005f00 <_malloc_r+0x8c>
 8005f44:	f8c8 2000 	str.w	r2, [r8]
 8005f48:	e7ec      	b.n	8005f24 <_malloc_r+0xb0>
 8005f4a:	4623      	mov	r3, r4
 8005f4c:	6864      	ldr	r4, [r4, #4]
 8005f4e:	e7ac      	b.n	8005eaa <_malloc_r+0x36>
 8005f50:	4634      	mov	r4, r6
 8005f52:	6876      	ldr	r6, [r6, #4]
 8005f54:	e7b4      	b.n	8005ec0 <_malloc_r+0x4c>
 8005f56:	4613      	mov	r3, r2
 8005f58:	e7cc      	b.n	8005ef4 <_malloc_r+0x80>
 8005f5a:	230c      	movs	r3, #12
 8005f5c:	4638      	mov	r0, r7
 8005f5e:	603b      	str	r3, [r7, #0]
 8005f60:	f000 f80e 	bl	8005f80 <__malloc_unlock>
 8005f64:	e797      	b.n	8005e96 <_malloc_r+0x22>
 8005f66:	6025      	str	r5, [r4, #0]
 8005f68:	e7dc      	b.n	8005f24 <_malloc_r+0xb0>
 8005f6a:	605b      	str	r3, [r3, #4]
 8005f6c:	deff      	udf	#255	; 0xff
 8005f6e:	bf00      	nop
 8005f70:	200005e0 	.word	0x200005e0

08005f74 <__malloc_lock>:
 8005f74:	4801      	ldr	r0, [pc, #4]	; (8005f7c <__malloc_lock+0x8>)
 8005f76:	f001 bfaa 	b.w	8007ece <__retarget_lock_acquire_recursive>
 8005f7a:	bf00      	nop
 8005f7c:	20000728 	.word	0x20000728

08005f80 <__malloc_unlock>:
 8005f80:	4801      	ldr	r0, [pc, #4]	; (8005f88 <__malloc_unlock+0x8>)
 8005f82:	f001 bfa5 	b.w	8007ed0 <__retarget_lock_release_recursive>
 8005f86:	bf00      	nop
 8005f88:	20000728 	.word	0x20000728

08005f8c <sulp>:
 8005f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f90:	460f      	mov	r7, r1
 8005f92:	4690      	mov	r8, r2
 8005f94:	f003 fd78 	bl	8009a88 <__ulp>
 8005f98:	4604      	mov	r4, r0
 8005f9a:	460d      	mov	r5, r1
 8005f9c:	f1b8 0f00 	cmp.w	r8, #0
 8005fa0:	d011      	beq.n	8005fc6 <sulp+0x3a>
 8005fa2:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005fa6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	dd0b      	ble.n	8005fc6 <sulp+0x3a>
 8005fae:	2400      	movs	r4, #0
 8005fb0:	051b      	lsls	r3, r3, #20
 8005fb2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005fb6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005fba:	4622      	mov	r2, r4
 8005fbc:	462b      	mov	r3, r5
 8005fbe:	f7fa fa8b 	bl	80004d8 <__aeabi_dmul>
 8005fc2:	4604      	mov	r4, r0
 8005fc4:	460d      	mov	r5, r1
 8005fc6:	4620      	mov	r0, r4
 8005fc8:	4629      	mov	r1, r5
 8005fca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08005fd0 <_strtod_l>:
 8005fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fd4:	b09f      	sub	sp, #124	; 0x7c
 8005fd6:	9217      	str	r2, [sp, #92]	; 0x5c
 8005fd8:	2200      	movs	r2, #0
 8005fda:	4604      	mov	r4, r0
 8005fdc:	921a      	str	r2, [sp, #104]	; 0x68
 8005fde:	460d      	mov	r5, r1
 8005fe0:	f04f 0800 	mov.w	r8, #0
 8005fe4:	f04f 0900 	mov.w	r9, #0
 8005fe8:	460a      	mov	r2, r1
 8005fea:	9219      	str	r2, [sp, #100]	; 0x64
 8005fec:	7811      	ldrb	r1, [r2, #0]
 8005fee:	292b      	cmp	r1, #43	; 0x2b
 8005ff0:	d04a      	beq.n	8006088 <_strtod_l+0xb8>
 8005ff2:	d838      	bhi.n	8006066 <_strtod_l+0x96>
 8005ff4:	290d      	cmp	r1, #13
 8005ff6:	d832      	bhi.n	800605e <_strtod_l+0x8e>
 8005ff8:	2908      	cmp	r1, #8
 8005ffa:	d832      	bhi.n	8006062 <_strtod_l+0x92>
 8005ffc:	2900      	cmp	r1, #0
 8005ffe:	d03b      	beq.n	8006078 <_strtod_l+0xa8>
 8006000:	2200      	movs	r2, #0
 8006002:	920e      	str	r2, [sp, #56]	; 0x38
 8006004:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8006006:	7832      	ldrb	r2, [r6, #0]
 8006008:	2a30      	cmp	r2, #48	; 0x30
 800600a:	f040 80b2 	bne.w	8006172 <_strtod_l+0x1a2>
 800600e:	7872      	ldrb	r2, [r6, #1]
 8006010:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8006014:	2a58      	cmp	r2, #88	; 0x58
 8006016:	d16e      	bne.n	80060f6 <_strtod_l+0x126>
 8006018:	9302      	str	r3, [sp, #8]
 800601a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800601c:	4620      	mov	r0, r4
 800601e:	9301      	str	r3, [sp, #4]
 8006020:	ab1a      	add	r3, sp, #104	; 0x68
 8006022:	9300      	str	r3, [sp, #0]
 8006024:	4a8c      	ldr	r2, [pc, #560]	; (8006258 <_strtod_l+0x288>)
 8006026:	ab1b      	add	r3, sp, #108	; 0x6c
 8006028:	a919      	add	r1, sp, #100	; 0x64
 800602a:	f002 febd 	bl	8008da8 <__gethex>
 800602e:	f010 070f 	ands.w	r7, r0, #15
 8006032:	4605      	mov	r5, r0
 8006034:	d005      	beq.n	8006042 <_strtod_l+0x72>
 8006036:	2f06      	cmp	r7, #6
 8006038:	d128      	bne.n	800608c <_strtod_l+0xbc>
 800603a:	2300      	movs	r3, #0
 800603c:	3601      	adds	r6, #1
 800603e:	9619      	str	r6, [sp, #100]	; 0x64
 8006040:	930e      	str	r3, [sp, #56]	; 0x38
 8006042:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006044:	2b00      	cmp	r3, #0
 8006046:	f040 85a0 	bne.w	8006b8a <_strtod_l+0xbba>
 800604a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800604c:	b1cb      	cbz	r3, 8006082 <_strtod_l+0xb2>
 800604e:	4642      	mov	r2, r8
 8006050:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006054:	4610      	mov	r0, r2
 8006056:	4619      	mov	r1, r3
 8006058:	b01f      	add	sp, #124	; 0x7c
 800605a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800605e:	2920      	cmp	r1, #32
 8006060:	d1ce      	bne.n	8006000 <_strtod_l+0x30>
 8006062:	3201      	adds	r2, #1
 8006064:	e7c1      	b.n	8005fea <_strtod_l+0x1a>
 8006066:	292d      	cmp	r1, #45	; 0x2d
 8006068:	d1ca      	bne.n	8006000 <_strtod_l+0x30>
 800606a:	2101      	movs	r1, #1
 800606c:	910e      	str	r1, [sp, #56]	; 0x38
 800606e:	1c51      	adds	r1, r2, #1
 8006070:	9119      	str	r1, [sp, #100]	; 0x64
 8006072:	7852      	ldrb	r2, [r2, #1]
 8006074:	2a00      	cmp	r2, #0
 8006076:	d1c5      	bne.n	8006004 <_strtod_l+0x34>
 8006078:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800607a:	9519      	str	r5, [sp, #100]	; 0x64
 800607c:	2b00      	cmp	r3, #0
 800607e:	f040 8582 	bne.w	8006b86 <_strtod_l+0xbb6>
 8006082:	4642      	mov	r2, r8
 8006084:	464b      	mov	r3, r9
 8006086:	e7e5      	b.n	8006054 <_strtod_l+0x84>
 8006088:	2100      	movs	r1, #0
 800608a:	e7ef      	b.n	800606c <_strtod_l+0x9c>
 800608c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800608e:	b13a      	cbz	r2, 80060a0 <_strtod_l+0xd0>
 8006090:	2135      	movs	r1, #53	; 0x35
 8006092:	a81c      	add	r0, sp, #112	; 0x70
 8006094:	f003 fde4 	bl	8009c60 <__copybits>
 8006098:	4620      	mov	r0, r4
 800609a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800609c:	f003 f9c8 	bl	8009430 <_Bfree>
 80060a0:	3f01      	subs	r7, #1
 80060a2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80060a4:	2f04      	cmp	r7, #4
 80060a6:	d806      	bhi.n	80060b6 <_strtod_l+0xe6>
 80060a8:	e8df f007 	tbb	[pc, r7]
 80060ac:	201d0314 	.word	0x201d0314
 80060b0:	14          	.byte	0x14
 80060b1:	00          	.byte	0x00
 80060b2:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80060b6:	05e9      	lsls	r1, r5, #23
 80060b8:	bf48      	it	mi
 80060ba:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80060be:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80060c2:	0d1b      	lsrs	r3, r3, #20
 80060c4:	051b      	lsls	r3, r3, #20
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d1bb      	bne.n	8006042 <_strtod_l+0x72>
 80060ca:	f001 fed5 	bl	8007e78 <__errno>
 80060ce:	2322      	movs	r3, #34	; 0x22
 80060d0:	6003      	str	r3, [r0, #0]
 80060d2:	e7b6      	b.n	8006042 <_strtod_l+0x72>
 80060d4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80060d8:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80060dc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80060e0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80060e4:	e7e7      	b.n	80060b6 <_strtod_l+0xe6>
 80060e6:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800625c <_strtod_l+0x28c>
 80060ea:	e7e4      	b.n	80060b6 <_strtod_l+0xe6>
 80060ec:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80060f0:	f04f 38ff 	mov.w	r8, #4294967295
 80060f4:	e7df      	b.n	80060b6 <_strtod_l+0xe6>
 80060f6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80060f8:	1c5a      	adds	r2, r3, #1
 80060fa:	9219      	str	r2, [sp, #100]	; 0x64
 80060fc:	785b      	ldrb	r3, [r3, #1]
 80060fe:	2b30      	cmp	r3, #48	; 0x30
 8006100:	d0f9      	beq.n	80060f6 <_strtod_l+0x126>
 8006102:	2b00      	cmp	r3, #0
 8006104:	d09d      	beq.n	8006042 <_strtod_l+0x72>
 8006106:	2301      	movs	r3, #1
 8006108:	f04f 0a00 	mov.w	sl, #0
 800610c:	220a      	movs	r2, #10
 800610e:	46d3      	mov	fp, sl
 8006110:	9305      	str	r3, [sp, #20]
 8006112:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006114:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8006118:	930b      	str	r3, [sp, #44]	; 0x2c
 800611a:	9819      	ldr	r0, [sp, #100]	; 0x64
 800611c:	7806      	ldrb	r6, [r0, #0]
 800611e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006122:	b2d9      	uxtb	r1, r3
 8006124:	2909      	cmp	r1, #9
 8006126:	d926      	bls.n	8006176 <_strtod_l+0x1a6>
 8006128:	2201      	movs	r2, #1
 800612a:	494d      	ldr	r1, [pc, #308]	; (8006260 <_strtod_l+0x290>)
 800612c:	f001 fdc5 	bl	8007cba <strncmp>
 8006130:	2800      	cmp	r0, #0
 8006132:	d030      	beq.n	8006196 <_strtod_l+0x1c6>
 8006134:	2000      	movs	r0, #0
 8006136:	4632      	mov	r2, r6
 8006138:	4603      	mov	r3, r0
 800613a:	465e      	mov	r6, fp
 800613c:	9008      	str	r0, [sp, #32]
 800613e:	2a65      	cmp	r2, #101	; 0x65
 8006140:	d001      	beq.n	8006146 <_strtod_l+0x176>
 8006142:	2a45      	cmp	r2, #69	; 0x45
 8006144:	d113      	bne.n	800616e <_strtod_l+0x19e>
 8006146:	b91e      	cbnz	r6, 8006150 <_strtod_l+0x180>
 8006148:	9a05      	ldr	r2, [sp, #20]
 800614a:	4302      	orrs	r2, r0
 800614c:	d094      	beq.n	8006078 <_strtod_l+0xa8>
 800614e:	2600      	movs	r6, #0
 8006150:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8006152:	1c6a      	adds	r2, r5, #1
 8006154:	9219      	str	r2, [sp, #100]	; 0x64
 8006156:	786a      	ldrb	r2, [r5, #1]
 8006158:	2a2b      	cmp	r2, #43	; 0x2b
 800615a:	d074      	beq.n	8006246 <_strtod_l+0x276>
 800615c:	2a2d      	cmp	r2, #45	; 0x2d
 800615e:	d078      	beq.n	8006252 <_strtod_l+0x282>
 8006160:	f04f 0c00 	mov.w	ip, #0
 8006164:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006168:	2909      	cmp	r1, #9
 800616a:	d97f      	bls.n	800626c <_strtod_l+0x29c>
 800616c:	9519      	str	r5, [sp, #100]	; 0x64
 800616e:	2700      	movs	r7, #0
 8006170:	e09e      	b.n	80062b0 <_strtod_l+0x2e0>
 8006172:	2300      	movs	r3, #0
 8006174:	e7c8      	b.n	8006108 <_strtod_l+0x138>
 8006176:	f1bb 0f08 	cmp.w	fp, #8
 800617a:	bfd8      	it	le
 800617c:	990a      	ldrle	r1, [sp, #40]	; 0x28
 800617e:	f100 0001 	add.w	r0, r0, #1
 8006182:	bfd6      	itet	le
 8006184:	fb02 3301 	mlale	r3, r2, r1, r3
 8006188:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800618c:	930a      	strle	r3, [sp, #40]	; 0x28
 800618e:	f10b 0b01 	add.w	fp, fp, #1
 8006192:	9019      	str	r0, [sp, #100]	; 0x64
 8006194:	e7c1      	b.n	800611a <_strtod_l+0x14a>
 8006196:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006198:	1c5a      	adds	r2, r3, #1
 800619a:	9219      	str	r2, [sp, #100]	; 0x64
 800619c:	785a      	ldrb	r2, [r3, #1]
 800619e:	f1bb 0f00 	cmp.w	fp, #0
 80061a2:	d037      	beq.n	8006214 <_strtod_l+0x244>
 80061a4:	465e      	mov	r6, fp
 80061a6:	9008      	str	r0, [sp, #32]
 80061a8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80061ac:	2b09      	cmp	r3, #9
 80061ae:	d912      	bls.n	80061d6 <_strtod_l+0x206>
 80061b0:	2301      	movs	r3, #1
 80061b2:	e7c4      	b.n	800613e <_strtod_l+0x16e>
 80061b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80061b6:	3001      	adds	r0, #1
 80061b8:	1c5a      	adds	r2, r3, #1
 80061ba:	9219      	str	r2, [sp, #100]	; 0x64
 80061bc:	785a      	ldrb	r2, [r3, #1]
 80061be:	2a30      	cmp	r2, #48	; 0x30
 80061c0:	d0f8      	beq.n	80061b4 <_strtod_l+0x1e4>
 80061c2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80061c6:	2b08      	cmp	r3, #8
 80061c8:	f200 84e4 	bhi.w	8006b94 <_strtod_l+0xbc4>
 80061cc:	9008      	str	r0, [sp, #32]
 80061ce:	2000      	movs	r0, #0
 80061d0:	4606      	mov	r6, r0
 80061d2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80061d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80061d6:	3a30      	subs	r2, #48	; 0x30
 80061d8:	f100 0301 	add.w	r3, r0, #1
 80061dc:	d014      	beq.n	8006208 <_strtod_l+0x238>
 80061de:	9908      	ldr	r1, [sp, #32]
 80061e0:	eb00 0c06 	add.w	ip, r0, r6
 80061e4:	4419      	add	r1, r3
 80061e6:	9108      	str	r1, [sp, #32]
 80061e8:	4633      	mov	r3, r6
 80061ea:	210a      	movs	r1, #10
 80061ec:	4563      	cmp	r3, ip
 80061ee:	d113      	bne.n	8006218 <_strtod_l+0x248>
 80061f0:	1833      	adds	r3, r6, r0
 80061f2:	2b08      	cmp	r3, #8
 80061f4:	f106 0601 	add.w	r6, r6, #1
 80061f8:	4406      	add	r6, r0
 80061fa:	dc1a      	bgt.n	8006232 <_strtod_l+0x262>
 80061fc:	230a      	movs	r3, #10
 80061fe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006200:	fb03 2301 	mla	r3, r3, r1, r2
 8006204:	930a      	str	r3, [sp, #40]	; 0x28
 8006206:	2300      	movs	r3, #0
 8006208:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800620a:	4618      	mov	r0, r3
 800620c:	1c51      	adds	r1, r2, #1
 800620e:	9119      	str	r1, [sp, #100]	; 0x64
 8006210:	7852      	ldrb	r2, [r2, #1]
 8006212:	e7c9      	b.n	80061a8 <_strtod_l+0x1d8>
 8006214:	4658      	mov	r0, fp
 8006216:	e7d2      	b.n	80061be <_strtod_l+0x1ee>
 8006218:	2b08      	cmp	r3, #8
 800621a:	f103 0301 	add.w	r3, r3, #1
 800621e:	dc03      	bgt.n	8006228 <_strtod_l+0x258>
 8006220:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006222:	434f      	muls	r7, r1
 8006224:	970a      	str	r7, [sp, #40]	; 0x28
 8006226:	e7e1      	b.n	80061ec <_strtod_l+0x21c>
 8006228:	2b10      	cmp	r3, #16
 800622a:	bfd8      	it	le
 800622c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8006230:	e7dc      	b.n	80061ec <_strtod_l+0x21c>
 8006232:	2e10      	cmp	r6, #16
 8006234:	bfdc      	itt	le
 8006236:	230a      	movle	r3, #10
 8006238:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800623c:	e7e3      	b.n	8006206 <_strtod_l+0x236>
 800623e:	2300      	movs	r3, #0
 8006240:	9308      	str	r3, [sp, #32]
 8006242:	2301      	movs	r3, #1
 8006244:	e780      	b.n	8006148 <_strtod_l+0x178>
 8006246:	f04f 0c00 	mov.w	ip, #0
 800624a:	1caa      	adds	r2, r5, #2
 800624c:	9219      	str	r2, [sp, #100]	; 0x64
 800624e:	78aa      	ldrb	r2, [r5, #2]
 8006250:	e788      	b.n	8006164 <_strtod_l+0x194>
 8006252:	f04f 0c01 	mov.w	ip, #1
 8006256:	e7f8      	b.n	800624a <_strtod_l+0x27a>
 8006258:	0800a7b0 	.word	0x0800a7b0
 800625c:	7ff00000 	.word	0x7ff00000
 8006260:	0800a7ae 	.word	0x0800a7ae
 8006264:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006266:	1c51      	adds	r1, r2, #1
 8006268:	9119      	str	r1, [sp, #100]	; 0x64
 800626a:	7852      	ldrb	r2, [r2, #1]
 800626c:	2a30      	cmp	r2, #48	; 0x30
 800626e:	d0f9      	beq.n	8006264 <_strtod_l+0x294>
 8006270:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006274:	2908      	cmp	r1, #8
 8006276:	f63f af7a 	bhi.w	800616e <_strtod_l+0x19e>
 800627a:	3a30      	subs	r2, #48	; 0x30
 800627c:	9209      	str	r2, [sp, #36]	; 0x24
 800627e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006280:	920c      	str	r2, [sp, #48]	; 0x30
 8006282:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006284:	1c57      	adds	r7, r2, #1
 8006286:	9719      	str	r7, [sp, #100]	; 0x64
 8006288:	7852      	ldrb	r2, [r2, #1]
 800628a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800628e:	f1be 0f09 	cmp.w	lr, #9
 8006292:	d938      	bls.n	8006306 <_strtod_l+0x336>
 8006294:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006296:	1a7f      	subs	r7, r7, r1
 8006298:	2f08      	cmp	r7, #8
 800629a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800629e:	dc03      	bgt.n	80062a8 <_strtod_l+0x2d8>
 80062a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80062a2:	428f      	cmp	r7, r1
 80062a4:	bfa8      	it	ge
 80062a6:	460f      	movge	r7, r1
 80062a8:	f1bc 0f00 	cmp.w	ip, #0
 80062ac:	d000      	beq.n	80062b0 <_strtod_l+0x2e0>
 80062ae:	427f      	negs	r7, r7
 80062b0:	2e00      	cmp	r6, #0
 80062b2:	d14f      	bne.n	8006354 <_strtod_l+0x384>
 80062b4:	9905      	ldr	r1, [sp, #20]
 80062b6:	4301      	orrs	r1, r0
 80062b8:	f47f aec3 	bne.w	8006042 <_strtod_l+0x72>
 80062bc:	2b00      	cmp	r3, #0
 80062be:	f47f aedb 	bne.w	8006078 <_strtod_l+0xa8>
 80062c2:	2a69      	cmp	r2, #105	; 0x69
 80062c4:	d029      	beq.n	800631a <_strtod_l+0x34a>
 80062c6:	dc26      	bgt.n	8006316 <_strtod_l+0x346>
 80062c8:	2a49      	cmp	r2, #73	; 0x49
 80062ca:	d026      	beq.n	800631a <_strtod_l+0x34a>
 80062cc:	2a4e      	cmp	r2, #78	; 0x4e
 80062ce:	f47f aed3 	bne.w	8006078 <_strtod_l+0xa8>
 80062d2:	499a      	ldr	r1, [pc, #616]	; (800653c <_strtod_l+0x56c>)
 80062d4:	a819      	add	r0, sp, #100	; 0x64
 80062d6:	f002 ffa9 	bl	800922c <__match>
 80062da:	2800      	cmp	r0, #0
 80062dc:	f43f aecc 	beq.w	8006078 <_strtod_l+0xa8>
 80062e0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	2b28      	cmp	r3, #40	; 0x28
 80062e6:	d12f      	bne.n	8006348 <_strtod_l+0x378>
 80062e8:	4995      	ldr	r1, [pc, #596]	; (8006540 <_strtod_l+0x570>)
 80062ea:	aa1c      	add	r2, sp, #112	; 0x70
 80062ec:	a819      	add	r0, sp, #100	; 0x64
 80062ee:	f002 ffb1 	bl	8009254 <__hexnan>
 80062f2:	2805      	cmp	r0, #5
 80062f4:	d128      	bne.n	8006348 <_strtod_l+0x378>
 80062f6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80062f8:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80062fc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006300:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8006304:	e69d      	b.n	8006042 <_strtod_l+0x72>
 8006306:	210a      	movs	r1, #10
 8006308:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800630a:	fb01 2107 	mla	r1, r1, r7, r2
 800630e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8006312:	9209      	str	r2, [sp, #36]	; 0x24
 8006314:	e7b5      	b.n	8006282 <_strtod_l+0x2b2>
 8006316:	2a6e      	cmp	r2, #110	; 0x6e
 8006318:	e7d9      	b.n	80062ce <_strtod_l+0x2fe>
 800631a:	498a      	ldr	r1, [pc, #552]	; (8006544 <_strtod_l+0x574>)
 800631c:	a819      	add	r0, sp, #100	; 0x64
 800631e:	f002 ff85 	bl	800922c <__match>
 8006322:	2800      	cmp	r0, #0
 8006324:	f43f aea8 	beq.w	8006078 <_strtod_l+0xa8>
 8006328:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800632a:	4987      	ldr	r1, [pc, #540]	; (8006548 <_strtod_l+0x578>)
 800632c:	3b01      	subs	r3, #1
 800632e:	a819      	add	r0, sp, #100	; 0x64
 8006330:	9319      	str	r3, [sp, #100]	; 0x64
 8006332:	f002 ff7b 	bl	800922c <__match>
 8006336:	b910      	cbnz	r0, 800633e <_strtod_l+0x36e>
 8006338:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800633a:	3301      	adds	r3, #1
 800633c:	9319      	str	r3, [sp, #100]	; 0x64
 800633e:	f04f 0800 	mov.w	r8, #0
 8006342:	f8df 9208 	ldr.w	r9, [pc, #520]	; 800654c <_strtod_l+0x57c>
 8006346:	e67c      	b.n	8006042 <_strtod_l+0x72>
 8006348:	4881      	ldr	r0, [pc, #516]	; (8006550 <_strtod_l+0x580>)
 800634a:	f001 fde7 	bl	8007f1c <nan>
 800634e:	4680      	mov	r8, r0
 8006350:	4689      	mov	r9, r1
 8006352:	e676      	b.n	8006042 <_strtod_l+0x72>
 8006354:	9b08      	ldr	r3, [sp, #32]
 8006356:	f1bb 0f00 	cmp.w	fp, #0
 800635a:	bf08      	it	eq
 800635c:	46b3      	moveq	fp, r6
 800635e:	1afb      	subs	r3, r7, r3
 8006360:	2e10      	cmp	r6, #16
 8006362:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006364:	4635      	mov	r5, r6
 8006366:	9309      	str	r3, [sp, #36]	; 0x24
 8006368:	bfa8      	it	ge
 800636a:	2510      	movge	r5, #16
 800636c:	f7fa f83a 	bl	80003e4 <__aeabi_ui2d>
 8006370:	2e09      	cmp	r6, #9
 8006372:	4680      	mov	r8, r0
 8006374:	4689      	mov	r9, r1
 8006376:	dd13      	ble.n	80063a0 <_strtod_l+0x3d0>
 8006378:	4b76      	ldr	r3, [pc, #472]	; (8006554 <_strtod_l+0x584>)
 800637a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800637e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006382:	f7fa f8a9 	bl	80004d8 <__aeabi_dmul>
 8006386:	4680      	mov	r8, r0
 8006388:	4650      	mov	r0, sl
 800638a:	4689      	mov	r9, r1
 800638c:	f7fa f82a 	bl	80003e4 <__aeabi_ui2d>
 8006390:	4602      	mov	r2, r0
 8006392:	460b      	mov	r3, r1
 8006394:	4640      	mov	r0, r8
 8006396:	4649      	mov	r1, r9
 8006398:	f7f9 fee8 	bl	800016c <__adddf3>
 800639c:	4680      	mov	r8, r0
 800639e:	4689      	mov	r9, r1
 80063a0:	2e0f      	cmp	r6, #15
 80063a2:	dc36      	bgt.n	8006412 <_strtod_l+0x442>
 80063a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	f43f ae4b 	beq.w	8006042 <_strtod_l+0x72>
 80063ac:	dd22      	ble.n	80063f4 <_strtod_l+0x424>
 80063ae:	2b16      	cmp	r3, #22
 80063b0:	dc09      	bgt.n	80063c6 <_strtod_l+0x3f6>
 80063b2:	4968      	ldr	r1, [pc, #416]	; (8006554 <_strtod_l+0x584>)
 80063b4:	4642      	mov	r2, r8
 80063b6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80063ba:	464b      	mov	r3, r9
 80063bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80063c0:	f7fa f88a 	bl	80004d8 <__aeabi_dmul>
 80063c4:	e7c3      	b.n	800634e <_strtod_l+0x37e>
 80063c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063c8:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80063cc:	4293      	cmp	r3, r2
 80063ce:	db20      	blt.n	8006412 <_strtod_l+0x442>
 80063d0:	4c60      	ldr	r4, [pc, #384]	; (8006554 <_strtod_l+0x584>)
 80063d2:	f1c6 060f 	rsb	r6, r6, #15
 80063d6:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80063da:	4642      	mov	r2, r8
 80063dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80063e0:	464b      	mov	r3, r9
 80063e2:	f7fa f879 	bl	80004d8 <__aeabi_dmul>
 80063e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063e8:	1b9e      	subs	r6, r3, r6
 80063ea:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80063ee:	e9d4 2300 	ldrd	r2, r3, [r4]
 80063f2:	e7e5      	b.n	80063c0 <_strtod_l+0x3f0>
 80063f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063f6:	3316      	adds	r3, #22
 80063f8:	db0b      	blt.n	8006412 <_strtod_l+0x442>
 80063fa:	9b08      	ldr	r3, [sp, #32]
 80063fc:	4640      	mov	r0, r8
 80063fe:	1bdf      	subs	r7, r3, r7
 8006400:	4b54      	ldr	r3, [pc, #336]	; (8006554 <_strtod_l+0x584>)
 8006402:	4649      	mov	r1, r9
 8006404:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006408:	e9d7 2300 	ldrd	r2, r3, [r7]
 800640c:	f7fa f98e 	bl	800072c <__aeabi_ddiv>
 8006410:	e79d      	b.n	800634e <_strtod_l+0x37e>
 8006412:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006414:	1b75      	subs	r5, r6, r5
 8006416:	441d      	add	r5, r3
 8006418:	2d00      	cmp	r5, #0
 800641a:	dd70      	ble.n	80064fe <_strtod_l+0x52e>
 800641c:	f015 030f 	ands.w	r3, r5, #15
 8006420:	d00a      	beq.n	8006438 <_strtod_l+0x468>
 8006422:	494c      	ldr	r1, [pc, #304]	; (8006554 <_strtod_l+0x584>)
 8006424:	4642      	mov	r2, r8
 8006426:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800642a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800642e:	464b      	mov	r3, r9
 8006430:	f7fa f852 	bl	80004d8 <__aeabi_dmul>
 8006434:	4680      	mov	r8, r0
 8006436:	4689      	mov	r9, r1
 8006438:	f035 050f 	bics.w	r5, r5, #15
 800643c:	d04d      	beq.n	80064da <_strtod_l+0x50a>
 800643e:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8006442:	dd22      	ble.n	800648a <_strtod_l+0x4ba>
 8006444:	2600      	movs	r6, #0
 8006446:	46b3      	mov	fp, r6
 8006448:	960b      	str	r6, [sp, #44]	; 0x2c
 800644a:	9608      	str	r6, [sp, #32]
 800644c:	2322      	movs	r3, #34	; 0x22
 800644e:	f04f 0800 	mov.w	r8, #0
 8006452:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 800654c <_strtod_l+0x57c>
 8006456:	6023      	str	r3, [r4, #0]
 8006458:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800645a:	2b00      	cmp	r3, #0
 800645c:	f43f adf1 	beq.w	8006042 <_strtod_l+0x72>
 8006460:	4620      	mov	r0, r4
 8006462:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006464:	f002 ffe4 	bl	8009430 <_Bfree>
 8006468:	4620      	mov	r0, r4
 800646a:	9908      	ldr	r1, [sp, #32]
 800646c:	f002 ffe0 	bl	8009430 <_Bfree>
 8006470:	4659      	mov	r1, fp
 8006472:	4620      	mov	r0, r4
 8006474:	f002 ffdc 	bl	8009430 <_Bfree>
 8006478:	4620      	mov	r0, r4
 800647a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800647c:	f002 ffd8 	bl	8009430 <_Bfree>
 8006480:	4631      	mov	r1, r6
 8006482:	4620      	mov	r0, r4
 8006484:	f002 ffd4 	bl	8009430 <_Bfree>
 8006488:	e5db      	b.n	8006042 <_strtod_l+0x72>
 800648a:	4b33      	ldr	r3, [pc, #204]	; (8006558 <_strtod_l+0x588>)
 800648c:	4640      	mov	r0, r8
 800648e:	9305      	str	r3, [sp, #20]
 8006490:	2300      	movs	r3, #0
 8006492:	4649      	mov	r1, r9
 8006494:	469a      	mov	sl, r3
 8006496:	112d      	asrs	r5, r5, #4
 8006498:	2d01      	cmp	r5, #1
 800649a:	dc21      	bgt.n	80064e0 <_strtod_l+0x510>
 800649c:	b10b      	cbz	r3, 80064a2 <_strtod_l+0x4d2>
 800649e:	4680      	mov	r8, r0
 80064a0:	4689      	mov	r9, r1
 80064a2:	492d      	ldr	r1, [pc, #180]	; (8006558 <_strtod_l+0x588>)
 80064a4:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80064a8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80064ac:	4642      	mov	r2, r8
 80064ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80064b2:	464b      	mov	r3, r9
 80064b4:	f7fa f810 	bl	80004d8 <__aeabi_dmul>
 80064b8:	4b24      	ldr	r3, [pc, #144]	; (800654c <_strtod_l+0x57c>)
 80064ba:	460a      	mov	r2, r1
 80064bc:	400b      	ands	r3, r1
 80064be:	4927      	ldr	r1, [pc, #156]	; (800655c <_strtod_l+0x58c>)
 80064c0:	4680      	mov	r8, r0
 80064c2:	428b      	cmp	r3, r1
 80064c4:	d8be      	bhi.n	8006444 <_strtod_l+0x474>
 80064c6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80064ca:	428b      	cmp	r3, r1
 80064cc:	bf86      	itte	hi
 80064ce:	f04f 38ff 	movhi.w	r8, #4294967295
 80064d2:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8006560 <_strtod_l+0x590>
 80064d6:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80064da:	2300      	movs	r3, #0
 80064dc:	9305      	str	r3, [sp, #20]
 80064de:	e07b      	b.n	80065d8 <_strtod_l+0x608>
 80064e0:	07ea      	lsls	r2, r5, #31
 80064e2:	d505      	bpl.n	80064f0 <_strtod_l+0x520>
 80064e4:	9b05      	ldr	r3, [sp, #20]
 80064e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ea:	f7f9 fff5 	bl	80004d8 <__aeabi_dmul>
 80064ee:	2301      	movs	r3, #1
 80064f0:	9a05      	ldr	r2, [sp, #20]
 80064f2:	f10a 0a01 	add.w	sl, sl, #1
 80064f6:	3208      	adds	r2, #8
 80064f8:	106d      	asrs	r5, r5, #1
 80064fa:	9205      	str	r2, [sp, #20]
 80064fc:	e7cc      	b.n	8006498 <_strtod_l+0x4c8>
 80064fe:	d0ec      	beq.n	80064da <_strtod_l+0x50a>
 8006500:	426d      	negs	r5, r5
 8006502:	f015 020f 	ands.w	r2, r5, #15
 8006506:	d00a      	beq.n	800651e <_strtod_l+0x54e>
 8006508:	4b12      	ldr	r3, [pc, #72]	; (8006554 <_strtod_l+0x584>)
 800650a:	4640      	mov	r0, r8
 800650c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006510:	4649      	mov	r1, r9
 8006512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006516:	f7fa f909 	bl	800072c <__aeabi_ddiv>
 800651a:	4680      	mov	r8, r0
 800651c:	4689      	mov	r9, r1
 800651e:	112d      	asrs	r5, r5, #4
 8006520:	d0db      	beq.n	80064da <_strtod_l+0x50a>
 8006522:	2d1f      	cmp	r5, #31
 8006524:	dd1e      	ble.n	8006564 <_strtod_l+0x594>
 8006526:	2600      	movs	r6, #0
 8006528:	46b3      	mov	fp, r6
 800652a:	960b      	str	r6, [sp, #44]	; 0x2c
 800652c:	9608      	str	r6, [sp, #32]
 800652e:	2322      	movs	r3, #34	; 0x22
 8006530:	f04f 0800 	mov.w	r8, #0
 8006534:	f04f 0900 	mov.w	r9, #0
 8006538:	6023      	str	r3, [r4, #0]
 800653a:	e78d      	b.n	8006458 <_strtod_l+0x488>
 800653c:	0800a90e 	.word	0x0800a90e
 8006540:	0800a7c4 	.word	0x0800a7c4
 8006544:	0800a906 	.word	0x0800a906
 8006548:	0800a9f2 	.word	0x0800a9f2
 800654c:	7ff00000 	.word	0x7ff00000
 8006550:	0800a9ee 	.word	0x0800a9ee
 8006554:	0800ab48 	.word	0x0800ab48
 8006558:	0800ab20 	.word	0x0800ab20
 800655c:	7ca00000 	.word	0x7ca00000
 8006560:	7fefffff 	.word	0x7fefffff
 8006564:	f015 0310 	ands.w	r3, r5, #16
 8006568:	bf18      	it	ne
 800656a:	236a      	movne	r3, #106	; 0x6a
 800656c:	4640      	mov	r0, r8
 800656e:	9305      	str	r3, [sp, #20]
 8006570:	4649      	mov	r1, r9
 8006572:	2300      	movs	r3, #0
 8006574:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8006840 <_strtod_l+0x870>
 8006578:	07ea      	lsls	r2, r5, #31
 800657a:	d504      	bpl.n	8006586 <_strtod_l+0x5b6>
 800657c:	e9da 2300 	ldrd	r2, r3, [sl]
 8006580:	f7f9 ffaa 	bl	80004d8 <__aeabi_dmul>
 8006584:	2301      	movs	r3, #1
 8006586:	106d      	asrs	r5, r5, #1
 8006588:	f10a 0a08 	add.w	sl, sl, #8
 800658c:	d1f4      	bne.n	8006578 <_strtod_l+0x5a8>
 800658e:	b10b      	cbz	r3, 8006594 <_strtod_l+0x5c4>
 8006590:	4680      	mov	r8, r0
 8006592:	4689      	mov	r9, r1
 8006594:	9b05      	ldr	r3, [sp, #20]
 8006596:	b1bb      	cbz	r3, 80065c8 <_strtod_l+0x5f8>
 8006598:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800659c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	4649      	mov	r1, r9
 80065a4:	dd10      	ble.n	80065c8 <_strtod_l+0x5f8>
 80065a6:	2b1f      	cmp	r3, #31
 80065a8:	f340 8128 	ble.w	80067fc <_strtod_l+0x82c>
 80065ac:	2b34      	cmp	r3, #52	; 0x34
 80065ae:	bfd8      	it	le
 80065b0:	f04f 33ff 	movle.w	r3, #4294967295
 80065b4:	f04f 0800 	mov.w	r8, #0
 80065b8:	bfcf      	iteee	gt
 80065ba:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80065be:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80065c2:	4093      	lslle	r3, r2
 80065c4:	ea03 0901 	andle.w	r9, r3, r1
 80065c8:	2200      	movs	r2, #0
 80065ca:	2300      	movs	r3, #0
 80065cc:	4640      	mov	r0, r8
 80065ce:	4649      	mov	r1, r9
 80065d0:	f7fa f9ea 	bl	80009a8 <__aeabi_dcmpeq>
 80065d4:	2800      	cmp	r0, #0
 80065d6:	d1a6      	bne.n	8006526 <_strtod_l+0x556>
 80065d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065da:	465a      	mov	r2, fp
 80065dc:	9300      	str	r3, [sp, #0]
 80065de:	4620      	mov	r0, r4
 80065e0:	4633      	mov	r3, r6
 80065e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80065e4:	f002 ff8c 	bl	8009500 <__s2b>
 80065e8:	900b      	str	r0, [sp, #44]	; 0x2c
 80065ea:	2800      	cmp	r0, #0
 80065ec:	f43f af2a 	beq.w	8006444 <_strtod_l+0x474>
 80065f0:	2600      	movs	r6, #0
 80065f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80065f4:	9b08      	ldr	r3, [sp, #32]
 80065f6:	2a00      	cmp	r2, #0
 80065f8:	eba3 0307 	sub.w	r3, r3, r7
 80065fc:	bfa8      	it	ge
 80065fe:	2300      	movge	r3, #0
 8006600:	46b3      	mov	fp, r6
 8006602:	9312      	str	r3, [sp, #72]	; 0x48
 8006604:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006608:	9316      	str	r3, [sp, #88]	; 0x58
 800660a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800660c:	4620      	mov	r0, r4
 800660e:	6859      	ldr	r1, [r3, #4]
 8006610:	f002 fece 	bl	80093b0 <_Balloc>
 8006614:	9008      	str	r0, [sp, #32]
 8006616:	2800      	cmp	r0, #0
 8006618:	f43f af18 	beq.w	800644c <_strtod_l+0x47c>
 800661c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800661e:	300c      	adds	r0, #12
 8006620:	691a      	ldr	r2, [r3, #16]
 8006622:	f103 010c 	add.w	r1, r3, #12
 8006626:	3202      	adds	r2, #2
 8006628:	0092      	lsls	r2, r2, #2
 800662a:	f001 fc68 	bl	8007efe <memcpy>
 800662e:	ab1c      	add	r3, sp, #112	; 0x70
 8006630:	9301      	str	r3, [sp, #4]
 8006632:	ab1b      	add	r3, sp, #108	; 0x6c
 8006634:	9300      	str	r3, [sp, #0]
 8006636:	4642      	mov	r2, r8
 8006638:	464b      	mov	r3, r9
 800663a:	4620      	mov	r0, r4
 800663c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8006640:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8006644:	f003 fa88 	bl	8009b58 <__d2b>
 8006648:	901a      	str	r0, [sp, #104]	; 0x68
 800664a:	2800      	cmp	r0, #0
 800664c:	f43f aefe 	beq.w	800644c <_strtod_l+0x47c>
 8006650:	2101      	movs	r1, #1
 8006652:	4620      	mov	r0, r4
 8006654:	f002 ffec 	bl	8009630 <__i2b>
 8006658:	4683      	mov	fp, r0
 800665a:	2800      	cmp	r0, #0
 800665c:	f43f aef6 	beq.w	800644c <_strtod_l+0x47c>
 8006660:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8006662:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006664:	2f00      	cmp	r7, #0
 8006666:	bfab      	itete	ge
 8006668:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 800666a:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800666c:	eb07 0a03 	addge.w	sl, r7, r3
 8006670:	1bdd      	sublt	r5, r3, r7
 8006672:	9b05      	ldr	r3, [sp, #20]
 8006674:	bfa8      	it	ge
 8006676:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8006678:	eba7 0703 	sub.w	r7, r7, r3
 800667c:	4417      	add	r7, r2
 800667e:	4b71      	ldr	r3, [pc, #452]	; (8006844 <_strtod_l+0x874>)
 8006680:	f107 37ff 	add.w	r7, r7, #4294967295
 8006684:	bfb8      	it	lt
 8006686:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 800668a:	429f      	cmp	r7, r3
 800668c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006690:	f280 80c7 	bge.w	8006822 <_strtod_l+0x852>
 8006694:	1bdb      	subs	r3, r3, r7
 8006696:	2b1f      	cmp	r3, #31
 8006698:	f04f 0101 	mov.w	r1, #1
 800669c:	eba2 0203 	sub.w	r2, r2, r3
 80066a0:	f300 80b3 	bgt.w	800680a <_strtod_l+0x83a>
 80066a4:	fa01 f303 	lsl.w	r3, r1, r3
 80066a8:	9313      	str	r3, [sp, #76]	; 0x4c
 80066aa:	2300      	movs	r3, #0
 80066ac:	9310      	str	r3, [sp, #64]	; 0x40
 80066ae:	eb0a 0702 	add.w	r7, sl, r2
 80066b2:	9b05      	ldr	r3, [sp, #20]
 80066b4:	45ba      	cmp	sl, r7
 80066b6:	4415      	add	r5, r2
 80066b8:	441d      	add	r5, r3
 80066ba:	4653      	mov	r3, sl
 80066bc:	bfa8      	it	ge
 80066be:	463b      	movge	r3, r7
 80066c0:	42ab      	cmp	r3, r5
 80066c2:	bfa8      	it	ge
 80066c4:	462b      	movge	r3, r5
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	bfc2      	ittt	gt
 80066ca:	1aff      	subgt	r7, r7, r3
 80066cc:	1aed      	subgt	r5, r5, r3
 80066ce:	ebaa 0a03 	subgt.w	sl, sl, r3
 80066d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	dd17      	ble.n	8006708 <_strtod_l+0x738>
 80066d8:	4659      	mov	r1, fp
 80066da:	461a      	mov	r2, r3
 80066dc:	4620      	mov	r0, r4
 80066de:	f003 f865 	bl	80097ac <__pow5mult>
 80066e2:	4683      	mov	fp, r0
 80066e4:	2800      	cmp	r0, #0
 80066e6:	f43f aeb1 	beq.w	800644c <_strtod_l+0x47c>
 80066ea:	4601      	mov	r1, r0
 80066ec:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80066ee:	4620      	mov	r0, r4
 80066f0:	f002 ffb4 	bl	800965c <__multiply>
 80066f4:	900a      	str	r0, [sp, #40]	; 0x28
 80066f6:	2800      	cmp	r0, #0
 80066f8:	f43f aea8 	beq.w	800644c <_strtod_l+0x47c>
 80066fc:	4620      	mov	r0, r4
 80066fe:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006700:	f002 fe96 	bl	8009430 <_Bfree>
 8006704:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006706:	931a      	str	r3, [sp, #104]	; 0x68
 8006708:	2f00      	cmp	r7, #0
 800670a:	f300 808f 	bgt.w	800682c <_strtod_l+0x85c>
 800670e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006710:	2b00      	cmp	r3, #0
 8006712:	dd08      	ble.n	8006726 <_strtod_l+0x756>
 8006714:	4620      	mov	r0, r4
 8006716:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006718:	9908      	ldr	r1, [sp, #32]
 800671a:	f003 f847 	bl	80097ac <__pow5mult>
 800671e:	9008      	str	r0, [sp, #32]
 8006720:	2800      	cmp	r0, #0
 8006722:	f43f ae93 	beq.w	800644c <_strtod_l+0x47c>
 8006726:	2d00      	cmp	r5, #0
 8006728:	dd08      	ble.n	800673c <_strtod_l+0x76c>
 800672a:	462a      	mov	r2, r5
 800672c:	4620      	mov	r0, r4
 800672e:	9908      	ldr	r1, [sp, #32]
 8006730:	f003 f896 	bl	8009860 <__lshift>
 8006734:	9008      	str	r0, [sp, #32]
 8006736:	2800      	cmp	r0, #0
 8006738:	f43f ae88 	beq.w	800644c <_strtod_l+0x47c>
 800673c:	f1ba 0f00 	cmp.w	sl, #0
 8006740:	dd08      	ble.n	8006754 <_strtod_l+0x784>
 8006742:	4659      	mov	r1, fp
 8006744:	4652      	mov	r2, sl
 8006746:	4620      	mov	r0, r4
 8006748:	f003 f88a 	bl	8009860 <__lshift>
 800674c:	4683      	mov	fp, r0
 800674e:	2800      	cmp	r0, #0
 8006750:	f43f ae7c 	beq.w	800644c <_strtod_l+0x47c>
 8006754:	4620      	mov	r0, r4
 8006756:	9a08      	ldr	r2, [sp, #32]
 8006758:	991a      	ldr	r1, [sp, #104]	; 0x68
 800675a:	f003 f909 	bl	8009970 <__mdiff>
 800675e:	4606      	mov	r6, r0
 8006760:	2800      	cmp	r0, #0
 8006762:	f43f ae73 	beq.w	800644c <_strtod_l+0x47c>
 8006766:	2500      	movs	r5, #0
 8006768:	68c3      	ldr	r3, [r0, #12]
 800676a:	4659      	mov	r1, fp
 800676c:	60c5      	str	r5, [r0, #12]
 800676e:	930a      	str	r3, [sp, #40]	; 0x28
 8006770:	f003 f8e2 	bl	8009938 <__mcmp>
 8006774:	42a8      	cmp	r0, r5
 8006776:	da6b      	bge.n	8006850 <_strtod_l+0x880>
 8006778:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800677a:	ea53 0308 	orrs.w	r3, r3, r8
 800677e:	f040 808f 	bne.w	80068a0 <_strtod_l+0x8d0>
 8006782:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006786:	2b00      	cmp	r3, #0
 8006788:	f040 808a 	bne.w	80068a0 <_strtod_l+0x8d0>
 800678c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006790:	0d1b      	lsrs	r3, r3, #20
 8006792:	051b      	lsls	r3, r3, #20
 8006794:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006798:	f240 8082 	bls.w	80068a0 <_strtod_l+0x8d0>
 800679c:	6973      	ldr	r3, [r6, #20]
 800679e:	b913      	cbnz	r3, 80067a6 <_strtod_l+0x7d6>
 80067a0:	6933      	ldr	r3, [r6, #16]
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	dd7c      	ble.n	80068a0 <_strtod_l+0x8d0>
 80067a6:	4631      	mov	r1, r6
 80067a8:	2201      	movs	r2, #1
 80067aa:	4620      	mov	r0, r4
 80067ac:	f003 f858 	bl	8009860 <__lshift>
 80067b0:	4659      	mov	r1, fp
 80067b2:	4606      	mov	r6, r0
 80067b4:	f003 f8c0 	bl	8009938 <__mcmp>
 80067b8:	2800      	cmp	r0, #0
 80067ba:	dd71      	ble.n	80068a0 <_strtod_l+0x8d0>
 80067bc:	9905      	ldr	r1, [sp, #20]
 80067be:	464b      	mov	r3, r9
 80067c0:	4a21      	ldr	r2, [pc, #132]	; (8006848 <_strtod_l+0x878>)
 80067c2:	2900      	cmp	r1, #0
 80067c4:	f000 808d 	beq.w	80068e2 <_strtod_l+0x912>
 80067c8:	ea02 0109 	and.w	r1, r2, r9
 80067cc:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80067d0:	f300 8087 	bgt.w	80068e2 <_strtod_l+0x912>
 80067d4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80067d8:	f77f aea9 	ble.w	800652e <_strtod_l+0x55e>
 80067dc:	4640      	mov	r0, r8
 80067de:	4649      	mov	r1, r9
 80067e0:	4b1a      	ldr	r3, [pc, #104]	; (800684c <_strtod_l+0x87c>)
 80067e2:	2200      	movs	r2, #0
 80067e4:	f7f9 fe78 	bl	80004d8 <__aeabi_dmul>
 80067e8:	4b17      	ldr	r3, [pc, #92]	; (8006848 <_strtod_l+0x878>)
 80067ea:	4680      	mov	r8, r0
 80067ec:	400b      	ands	r3, r1
 80067ee:	4689      	mov	r9, r1
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	f47f ae35 	bne.w	8006460 <_strtod_l+0x490>
 80067f6:	2322      	movs	r3, #34	; 0x22
 80067f8:	6023      	str	r3, [r4, #0]
 80067fa:	e631      	b.n	8006460 <_strtod_l+0x490>
 80067fc:	f04f 32ff 	mov.w	r2, #4294967295
 8006800:	fa02 f303 	lsl.w	r3, r2, r3
 8006804:	ea03 0808 	and.w	r8, r3, r8
 8006808:	e6de      	b.n	80065c8 <_strtod_l+0x5f8>
 800680a:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 800680e:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 8006812:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 8006816:	37e2      	adds	r7, #226	; 0xe2
 8006818:	fa01 f307 	lsl.w	r3, r1, r7
 800681c:	9310      	str	r3, [sp, #64]	; 0x40
 800681e:	9113      	str	r1, [sp, #76]	; 0x4c
 8006820:	e745      	b.n	80066ae <_strtod_l+0x6de>
 8006822:	2300      	movs	r3, #0
 8006824:	9310      	str	r3, [sp, #64]	; 0x40
 8006826:	2301      	movs	r3, #1
 8006828:	9313      	str	r3, [sp, #76]	; 0x4c
 800682a:	e740      	b.n	80066ae <_strtod_l+0x6de>
 800682c:	463a      	mov	r2, r7
 800682e:	4620      	mov	r0, r4
 8006830:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006832:	f003 f815 	bl	8009860 <__lshift>
 8006836:	901a      	str	r0, [sp, #104]	; 0x68
 8006838:	2800      	cmp	r0, #0
 800683a:	f47f af68 	bne.w	800670e <_strtod_l+0x73e>
 800683e:	e605      	b.n	800644c <_strtod_l+0x47c>
 8006840:	0800a7d8 	.word	0x0800a7d8
 8006844:	fffffc02 	.word	0xfffffc02
 8006848:	7ff00000 	.word	0x7ff00000
 800684c:	39500000 	.word	0x39500000
 8006850:	46ca      	mov	sl, r9
 8006852:	d165      	bne.n	8006920 <_strtod_l+0x950>
 8006854:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006856:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800685a:	b352      	cbz	r2, 80068b2 <_strtod_l+0x8e2>
 800685c:	4a9e      	ldr	r2, [pc, #632]	; (8006ad8 <_strtod_l+0xb08>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d12a      	bne.n	80068b8 <_strtod_l+0x8e8>
 8006862:	9b05      	ldr	r3, [sp, #20]
 8006864:	4641      	mov	r1, r8
 8006866:	b1fb      	cbz	r3, 80068a8 <_strtod_l+0x8d8>
 8006868:	4b9c      	ldr	r3, [pc, #624]	; (8006adc <_strtod_l+0xb0c>)
 800686a:	f04f 32ff 	mov.w	r2, #4294967295
 800686e:	ea09 0303 	and.w	r3, r9, r3
 8006872:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006876:	d81a      	bhi.n	80068ae <_strtod_l+0x8de>
 8006878:	0d1b      	lsrs	r3, r3, #20
 800687a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800687e:	fa02 f303 	lsl.w	r3, r2, r3
 8006882:	4299      	cmp	r1, r3
 8006884:	d118      	bne.n	80068b8 <_strtod_l+0x8e8>
 8006886:	4b96      	ldr	r3, [pc, #600]	; (8006ae0 <_strtod_l+0xb10>)
 8006888:	459a      	cmp	sl, r3
 800688a:	d102      	bne.n	8006892 <_strtod_l+0x8c2>
 800688c:	3101      	adds	r1, #1
 800688e:	f43f addd 	beq.w	800644c <_strtod_l+0x47c>
 8006892:	f04f 0800 	mov.w	r8, #0
 8006896:	4b91      	ldr	r3, [pc, #580]	; (8006adc <_strtod_l+0xb0c>)
 8006898:	ea0a 0303 	and.w	r3, sl, r3
 800689c:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80068a0:	9b05      	ldr	r3, [sp, #20]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d19a      	bne.n	80067dc <_strtod_l+0x80c>
 80068a6:	e5db      	b.n	8006460 <_strtod_l+0x490>
 80068a8:	f04f 33ff 	mov.w	r3, #4294967295
 80068ac:	e7e9      	b.n	8006882 <_strtod_l+0x8b2>
 80068ae:	4613      	mov	r3, r2
 80068b0:	e7e7      	b.n	8006882 <_strtod_l+0x8b2>
 80068b2:	ea53 0308 	orrs.w	r3, r3, r8
 80068b6:	d081      	beq.n	80067bc <_strtod_l+0x7ec>
 80068b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80068ba:	b1e3      	cbz	r3, 80068f6 <_strtod_l+0x926>
 80068bc:	ea13 0f0a 	tst.w	r3, sl
 80068c0:	d0ee      	beq.n	80068a0 <_strtod_l+0x8d0>
 80068c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068c4:	4640      	mov	r0, r8
 80068c6:	4649      	mov	r1, r9
 80068c8:	9a05      	ldr	r2, [sp, #20]
 80068ca:	b1c3      	cbz	r3, 80068fe <_strtod_l+0x92e>
 80068cc:	f7ff fb5e 	bl	8005f8c <sulp>
 80068d0:	4602      	mov	r2, r0
 80068d2:	460b      	mov	r3, r1
 80068d4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80068d6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80068d8:	f7f9 fc48 	bl	800016c <__adddf3>
 80068dc:	4680      	mov	r8, r0
 80068de:	4689      	mov	r9, r1
 80068e0:	e7de      	b.n	80068a0 <_strtod_l+0x8d0>
 80068e2:	4013      	ands	r3, r2
 80068e4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80068e8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80068ec:	f04f 38ff 	mov.w	r8, #4294967295
 80068f0:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80068f4:	e7d4      	b.n	80068a0 <_strtod_l+0x8d0>
 80068f6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80068f8:	ea13 0f08 	tst.w	r3, r8
 80068fc:	e7e0      	b.n	80068c0 <_strtod_l+0x8f0>
 80068fe:	f7ff fb45 	bl	8005f8c <sulp>
 8006902:	4602      	mov	r2, r0
 8006904:	460b      	mov	r3, r1
 8006906:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006908:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800690a:	f7f9 fc2d 	bl	8000168 <__aeabi_dsub>
 800690e:	2200      	movs	r2, #0
 8006910:	2300      	movs	r3, #0
 8006912:	4680      	mov	r8, r0
 8006914:	4689      	mov	r9, r1
 8006916:	f7fa f847 	bl	80009a8 <__aeabi_dcmpeq>
 800691a:	2800      	cmp	r0, #0
 800691c:	d0c0      	beq.n	80068a0 <_strtod_l+0x8d0>
 800691e:	e606      	b.n	800652e <_strtod_l+0x55e>
 8006920:	4659      	mov	r1, fp
 8006922:	4630      	mov	r0, r6
 8006924:	f003 f96e 	bl	8009c04 <__ratio>
 8006928:	4602      	mov	r2, r0
 800692a:	460b      	mov	r3, r1
 800692c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006930:	2200      	movs	r2, #0
 8006932:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006936:	f7fa f84b 	bl	80009d0 <__aeabi_dcmple>
 800693a:	2800      	cmp	r0, #0
 800693c:	d06f      	beq.n	8006a1e <_strtod_l+0xa4e>
 800693e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006940:	2b00      	cmp	r3, #0
 8006942:	d17c      	bne.n	8006a3e <_strtod_l+0xa6e>
 8006944:	f1b8 0f00 	cmp.w	r8, #0
 8006948:	d159      	bne.n	80069fe <_strtod_l+0xa2e>
 800694a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800694e:	2b00      	cmp	r3, #0
 8006950:	d17b      	bne.n	8006a4a <_strtod_l+0xa7a>
 8006952:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006956:	2200      	movs	r2, #0
 8006958:	4b62      	ldr	r3, [pc, #392]	; (8006ae4 <_strtod_l+0xb14>)
 800695a:	f7fa f82f 	bl	80009bc <__aeabi_dcmplt>
 800695e:	2800      	cmp	r0, #0
 8006960:	d15a      	bne.n	8006a18 <_strtod_l+0xa48>
 8006962:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006966:	2200      	movs	r2, #0
 8006968:	4b5f      	ldr	r3, [pc, #380]	; (8006ae8 <_strtod_l+0xb18>)
 800696a:	f7f9 fdb5 	bl	80004d8 <__aeabi_dmul>
 800696e:	4605      	mov	r5, r0
 8006970:	460f      	mov	r7, r1
 8006972:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8006976:	9506      	str	r5, [sp, #24]
 8006978:	9307      	str	r3, [sp, #28]
 800697a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800697e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006982:	4b56      	ldr	r3, [pc, #344]	; (8006adc <_strtod_l+0xb0c>)
 8006984:	4a55      	ldr	r2, [pc, #340]	; (8006adc <_strtod_l+0xb0c>)
 8006986:	ea0a 0303 	and.w	r3, sl, r3
 800698a:	9313      	str	r3, [sp, #76]	; 0x4c
 800698c:	4b57      	ldr	r3, [pc, #348]	; (8006aec <_strtod_l+0xb1c>)
 800698e:	ea0a 0202 	and.w	r2, sl, r2
 8006992:	429a      	cmp	r2, r3
 8006994:	f040 80b0 	bne.w	8006af8 <_strtod_l+0xb28>
 8006998:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800699c:	4640      	mov	r0, r8
 800699e:	4649      	mov	r1, r9
 80069a0:	f003 f872 	bl	8009a88 <__ulp>
 80069a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80069a8:	f7f9 fd96 	bl	80004d8 <__aeabi_dmul>
 80069ac:	4642      	mov	r2, r8
 80069ae:	464b      	mov	r3, r9
 80069b0:	f7f9 fbdc 	bl	800016c <__adddf3>
 80069b4:	f8df a124 	ldr.w	sl, [pc, #292]	; 8006adc <_strtod_l+0xb0c>
 80069b8:	4a4d      	ldr	r2, [pc, #308]	; (8006af0 <_strtod_l+0xb20>)
 80069ba:	ea01 0a0a 	and.w	sl, r1, sl
 80069be:	4592      	cmp	sl, r2
 80069c0:	4680      	mov	r8, r0
 80069c2:	d948      	bls.n	8006a56 <_strtod_l+0xa86>
 80069c4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80069c6:	4b46      	ldr	r3, [pc, #280]	; (8006ae0 <_strtod_l+0xb10>)
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d103      	bne.n	80069d4 <_strtod_l+0xa04>
 80069cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80069ce:	3301      	adds	r3, #1
 80069d0:	f43f ad3c 	beq.w	800644c <_strtod_l+0x47c>
 80069d4:	f04f 38ff 	mov.w	r8, #4294967295
 80069d8:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8006ae0 <_strtod_l+0xb10>
 80069dc:	4620      	mov	r0, r4
 80069de:	991a      	ldr	r1, [sp, #104]	; 0x68
 80069e0:	f002 fd26 	bl	8009430 <_Bfree>
 80069e4:	4620      	mov	r0, r4
 80069e6:	9908      	ldr	r1, [sp, #32]
 80069e8:	f002 fd22 	bl	8009430 <_Bfree>
 80069ec:	4659      	mov	r1, fp
 80069ee:	4620      	mov	r0, r4
 80069f0:	f002 fd1e 	bl	8009430 <_Bfree>
 80069f4:	4631      	mov	r1, r6
 80069f6:	4620      	mov	r0, r4
 80069f8:	f002 fd1a 	bl	8009430 <_Bfree>
 80069fc:	e605      	b.n	800660a <_strtod_l+0x63a>
 80069fe:	f1b8 0f01 	cmp.w	r8, #1
 8006a02:	d103      	bne.n	8006a0c <_strtod_l+0xa3c>
 8006a04:	f1b9 0f00 	cmp.w	r9, #0
 8006a08:	f43f ad91 	beq.w	800652e <_strtod_l+0x55e>
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	4b39      	ldr	r3, [pc, #228]	; (8006af4 <_strtod_l+0xb24>)
 8006a10:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8006a12:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006a16:	e016      	b.n	8006a46 <_strtod_l+0xa76>
 8006a18:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8006a1a:	4f33      	ldr	r7, [pc, #204]	; (8006ae8 <_strtod_l+0xb18>)
 8006a1c:	e7a9      	b.n	8006972 <_strtod_l+0x9a2>
 8006a1e:	4b32      	ldr	r3, [pc, #200]	; (8006ae8 <_strtod_l+0xb18>)
 8006a20:	2200      	movs	r2, #0
 8006a22:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006a26:	f7f9 fd57 	bl	80004d8 <__aeabi_dmul>
 8006a2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a2c:	4605      	mov	r5, r0
 8006a2e:	460f      	mov	r7, r1
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d09e      	beq.n	8006972 <_strtod_l+0x9a2>
 8006a34:	4602      	mov	r2, r0
 8006a36:	460b      	mov	r3, r1
 8006a38:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006a3c:	e79d      	b.n	800697a <_strtod_l+0x9aa>
 8006a3e:	2200      	movs	r2, #0
 8006a40:	4b28      	ldr	r3, [pc, #160]	; (8006ae4 <_strtod_l+0xb14>)
 8006a42:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006a46:	4f27      	ldr	r7, [pc, #156]	; (8006ae4 <_strtod_l+0xb14>)
 8006a48:	e797      	b.n	800697a <_strtod_l+0x9aa>
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	4b29      	ldr	r3, [pc, #164]	; (8006af4 <_strtod_l+0xb24>)
 8006a4e:	4645      	mov	r5, r8
 8006a50:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006a54:	e7f7      	b.n	8006a46 <_strtod_l+0xa76>
 8006a56:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8006a5a:	9b05      	ldr	r3, [sp, #20]
 8006a5c:	46ca      	mov	sl, r9
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d1bc      	bne.n	80069dc <_strtod_l+0xa0c>
 8006a62:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006a66:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006a68:	0d1b      	lsrs	r3, r3, #20
 8006a6a:	051b      	lsls	r3, r3, #20
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d1b5      	bne.n	80069dc <_strtod_l+0xa0c>
 8006a70:	4628      	mov	r0, r5
 8006a72:	4639      	mov	r1, r7
 8006a74:	f7fa fb62 	bl	800113c <__aeabi_d2lz>
 8006a78:	f7f9 fd00 	bl	800047c <__aeabi_l2d>
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	460b      	mov	r3, r1
 8006a80:	4628      	mov	r0, r5
 8006a82:	4639      	mov	r1, r7
 8006a84:	f7f9 fb70 	bl	8000168 <__aeabi_dsub>
 8006a88:	460b      	mov	r3, r1
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8006a90:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8006a94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a96:	ea4a 0a08 	orr.w	sl, sl, r8
 8006a9a:	ea5a 0a03 	orrs.w	sl, sl, r3
 8006a9e:	d06c      	beq.n	8006b7a <_strtod_l+0xbaa>
 8006aa0:	a309      	add	r3, pc, #36	; (adr r3, 8006ac8 <_strtod_l+0xaf8>)
 8006aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa6:	f7f9 ff89 	bl	80009bc <__aeabi_dcmplt>
 8006aaa:	2800      	cmp	r0, #0
 8006aac:	f47f acd8 	bne.w	8006460 <_strtod_l+0x490>
 8006ab0:	a307      	add	r3, pc, #28	; (adr r3, 8006ad0 <_strtod_l+0xb00>)
 8006ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006aba:	f7f9 ff9d 	bl	80009f8 <__aeabi_dcmpgt>
 8006abe:	2800      	cmp	r0, #0
 8006ac0:	d08c      	beq.n	80069dc <_strtod_l+0xa0c>
 8006ac2:	e4cd      	b.n	8006460 <_strtod_l+0x490>
 8006ac4:	f3af 8000 	nop.w
 8006ac8:	94a03595 	.word	0x94a03595
 8006acc:	3fdfffff 	.word	0x3fdfffff
 8006ad0:	35afe535 	.word	0x35afe535
 8006ad4:	3fe00000 	.word	0x3fe00000
 8006ad8:	000fffff 	.word	0x000fffff
 8006adc:	7ff00000 	.word	0x7ff00000
 8006ae0:	7fefffff 	.word	0x7fefffff
 8006ae4:	3ff00000 	.word	0x3ff00000
 8006ae8:	3fe00000 	.word	0x3fe00000
 8006aec:	7fe00000 	.word	0x7fe00000
 8006af0:	7c9fffff 	.word	0x7c9fffff
 8006af4:	bff00000 	.word	0xbff00000
 8006af8:	9b05      	ldr	r3, [sp, #20]
 8006afa:	b333      	cbz	r3, 8006b4a <_strtod_l+0xb7a>
 8006afc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006afe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006b02:	d822      	bhi.n	8006b4a <_strtod_l+0xb7a>
 8006b04:	a328      	add	r3, pc, #160	; (adr r3, 8006ba8 <_strtod_l+0xbd8>)
 8006b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b0a:	4628      	mov	r0, r5
 8006b0c:	4639      	mov	r1, r7
 8006b0e:	f7f9 ff5f 	bl	80009d0 <__aeabi_dcmple>
 8006b12:	b1a0      	cbz	r0, 8006b3e <_strtod_l+0xb6e>
 8006b14:	4639      	mov	r1, r7
 8006b16:	4628      	mov	r0, r5
 8006b18:	f7f9 ffb6 	bl	8000a88 <__aeabi_d2uiz>
 8006b1c:	2801      	cmp	r0, #1
 8006b1e:	bf38      	it	cc
 8006b20:	2001      	movcc	r0, #1
 8006b22:	f7f9 fc5f 	bl	80003e4 <__aeabi_ui2d>
 8006b26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b28:	4605      	mov	r5, r0
 8006b2a:	460f      	mov	r7, r1
 8006b2c:	bb03      	cbnz	r3, 8006b70 <_strtod_l+0xba0>
 8006b2e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006b32:	9014      	str	r0, [sp, #80]	; 0x50
 8006b34:	9315      	str	r3, [sp, #84]	; 0x54
 8006b36:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006b3a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006b3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006b40:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006b42:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006b46:	1a9b      	subs	r3, r3, r2
 8006b48:	9311      	str	r3, [sp, #68]	; 0x44
 8006b4a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006b4c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006b4e:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 8006b52:	f002 ff99 	bl	8009a88 <__ulp>
 8006b56:	4602      	mov	r2, r0
 8006b58:	460b      	mov	r3, r1
 8006b5a:	4640      	mov	r0, r8
 8006b5c:	4649      	mov	r1, r9
 8006b5e:	f7f9 fcbb 	bl	80004d8 <__aeabi_dmul>
 8006b62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006b64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006b66:	f7f9 fb01 	bl	800016c <__adddf3>
 8006b6a:	4680      	mov	r8, r0
 8006b6c:	4689      	mov	r9, r1
 8006b6e:	e774      	b.n	8006a5a <_strtod_l+0xa8a>
 8006b70:	4602      	mov	r2, r0
 8006b72:	460b      	mov	r3, r1
 8006b74:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8006b78:	e7dd      	b.n	8006b36 <_strtod_l+0xb66>
 8006b7a:	a30d      	add	r3, pc, #52	; (adr r3, 8006bb0 <_strtod_l+0xbe0>)
 8006b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b80:	f7f9 ff1c 	bl	80009bc <__aeabi_dcmplt>
 8006b84:	e79b      	b.n	8006abe <_strtod_l+0xaee>
 8006b86:	2300      	movs	r3, #0
 8006b88:	930e      	str	r3, [sp, #56]	; 0x38
 8006b8a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006b8c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006b8e:	6013      	str	r3, [r2, #0]
 8006b90:	f7ff ba5b 	b.w	800604a <_strtod_l+0x7a>
 8006b94:	2a65      	cmp	r2, #101	; 0x65
 8006b96:	f43f ab52 	beq.w	800623e <_strtod_l+0x26e>
 8006b9a:	2a45      	cmp	r2, #69	; 0x45
 8006b9c:	f43f ab4f 	beq.w	800623e <_strtod_l+0x26e>
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	f7ff bb87 	b.w	80062b4 <_strtod_l+0x2e4>
 8006ba6:	bf00      	nop
 8006ba8:	ffc00000 	.word	0xffc00000
 8006bac:	41dfffff 	.word	0x41dfffff
 8006bb0:	94a03595 	.word	0x94a03595
 8006bb4:	3fcfffff 	.word	0x3fcfffff

08006bb8 <_strtod_r>:
 8006bb8:	4b01      	ldr	r3, [pc, #4]	; (8006bc0 <_strtod_r+0x8>)
 8006bba:	f7ff ba09 	b.w	8005fd0 <_strtod_l>
 8006bbe:	bf00      	nop
 8006bc0:	20000018 	.word	0x20000018

08006bc4 <strtof>:
 8006bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bc8:	4f24      	ldr	r7, [pc, #144]	; (8006c5c <strtof+0x98>)
 8006bca:	460a      	mov	r2, r1
 8006bcc:	4b24      	ldr	r3, [pc, #144]	; (8006c60 <strtof+0x9c>)
 8006bce:	4601      	mov	r1, r0
 8006bd0:	6838      	ldr	r0, [r7, #0]
 8006bd2:	f7ff f9fd 	bl	8005fd0 <_strtod_l>
 8006bd6:	4602      	mov	r2, r0
 8006bd8:	460b      	mov	r3, r1
 8006bda:	4606      	mov	r6, r0
 8006bdc:	460c      	mov	r4, r1
 8006bde:	f7f9 ff15 	bl	8000a0c <__aeabi_dcmpun>
 8006be2:	b168      	cbz	r0, 8006c00 <strtof+0x3c>
 8006be4:	2c00      	cmp	r4, #0
 8006be6:	481f      	ldr	r0, [pc, #124]	; (8006c64 <strtof+0xa0>)
 8006be8:	da06      	bge.n	8006bf8 <strtof+0x34>
 8006bea:	f001 f99d 	bl	8007f28 <nanf>
 8006bee:	f100 4500 	add.w	r5, r0, #2147483648	; 0x80000000
 8006bf2:	4628      	mov	r0, r5
 8006bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bf8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006bfc:	f001 b994 	b.w	8007f28 <nanf>
 8006c00:	4621      	mov	r1, r4
 8006c02:	4630      	mov	r0, r6
 8006c04:	f7f9 ff60 	bl	8000ac8 <__aeabi_d2f>
 8006c08:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 8006c0c:	4605      	mov	r5, r0
 8006c0e:	4916      	ldr	r1, [pc, #88]	; (8006c68 <strtof+0xa4>)
 8006c10:	4640      	mov	r0, r8
 8006c12:	f7fa fa7d 	bl	8001110 <__aeabi_fcmpun>
 8006c16:	b9b0      	cbnz	r0, 8006c46 <strtof+0x82>
 8006c18:	4640      	mov	r0, r8
 8006c1a:	4913      	ldr	r1, [pc, #76]	; (8006c68 <strtof+0xa4>)
 8006c1c:	f7fa fa5a 	bl	80010d4 <__aeabi_fcmple>
 8006c20:	b988      	cbnz	r0, 8006c46 <strtof+0x82>
 8006c22:	f024 4800 	bic.w	r8, r4, #2147483648	; 0x80000000
 8006c26:	f04f 32ff 	mov.w	r2, #4294967295
 8006c2a:	4630      	mov	r0, r6
 8006c2c:	4641      	mov	r1, r8
 8006c2e:	4b0f      	ldr	r3, [pc, #60]	; (8006c6c <strtof+0xa8>)
 8006c30:	f7f9 feec 	bl	8000a0c <__aeabi_dcmpun>
 8006c34:	b970      	cbnz	r0, 8006c54 <strtof+0x90>
 8006c36:	f04f 32ff 	mov.w	r2, #4294967295
 8006c3a:	4630      	mov	r0, r6
 8006c3c:	4641      	mov	r1, r8
 8006c3e:	4b0b      	ldr	r3, [pc, #44]	; (8006c6c <strtof+0xa8>)
 8006c40:	f7f9 fec6 	bl	80009d0 <__aeabi_dcmple>
 8006c44:	b930      	cbnz	r0, 8006c54 <strtof+0x90>
 8006c46:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 8006c4a:	d1d2      	bne.n	8006bf2 <strtof+0x2e>
 8006c4c:	4b08      	ldr	r3, [pc, #32]	; (8006c70 <strtof+0xac>)
 8006c4e:	4023      	ands	r3, r4
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d0ce      	beq.n	8006bf2 <strtof+0x2e>
 8006c54:	2222      	movs	r2, #34	; 0x22
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	601a      	str	r2, [r3, #0]
 8006c5a:	e7ca      	b.n	8006bf2 <strtof+0x2e>
 8006c5c:	200001d0 	.word	0x200001d0
 8006c60:	20000018 	.word	0x20000018
 8006c64:	0800a9ee 	.word	0x0800a9ee
 8006c68:	7f7fffff 	.word	0x7f7fffff
 8006c6c:	7fefffff 	.word	0x7fefffff
 8006c70:	7ff00000 	.word	0x7ff00000

08006c74 <_strtol_l.constprop.0>:
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c7a:	4686      	mov	lr, r0
 8006c7c:	4690      	mov	r8, r2
 8006c7e:	d001      	beq.n	8006c84 <_strtol_l.constprop.0+0x10>
 8006c80:	2b24      	cmp	r3, #36	; 0x24
 8006c82:	d906      	bls.n	8006c92 <_strtol_l.constprop.0+0x1e>
 8006c84:	f001 f8f8 	bl	8007e78 <__errno>
 8006c88:	2316      	movs	r3, #22
 8006c8a:	6003      	str	r3, [r0, #0]
 8006c8c:	2000      	movs	r0, #0
 8006c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c92:	460d      	mov	r5, r1
 8006c94:	4835      	ldr	r0, [pc, #212]	; (8006d6c <_strtol_l.constprop.0+0xf8>)
 8006c96:	462a      	mov	r2, r5
 8006c98:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006c9c:	5d06      	ldrb	r6, [r0, r4]
 8006c9e:	f016 0608 	ands.w	r6, r6, #8
 8006ca2:	d1f8      	bne.n	8006c96 <_strtol_l.constprop.0+0x22>
 8006ca4:	2c2d      	cmp	r4, #45	; 0x2d
 8006ca6:	d12e      	bne.n	8006d06 <_strtol_l.constprop.0+0x92>
 8006ca8:	2601      	movs	r6, #1
 8006caa:	782c      	ldrb	r4, [r5, #0]
 8006cac:	1c95      	adds	r5, r2, #2
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d057      	beq.n	8006d62 <_strtol_l.constprop.0+0xee>
 8006cb2:	2b10      	cmp	r3, #16
 8006cb4:	d109      	bne.n	8006cca <_strtol_l.constprop.0+0x56>
 8006cb6:	2c30      	cmp	r4, #48	; 0x30
 8006cb8:	d107      	bne.n	8006cca <_strtol_l.constprop.0+0x56>
 8006cba:	782a      	ldrb	r2, [r5, #0]
 8006cbc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8006cc0:	2a58      	cmp	r2, #88	; 0x58
 8006cc2:	d149      	bne.n	8006d58 <_strtol_l.constprop.0+0xe4>
 8006cc4:	2310      	movs	r3, #16
 8006cc6:	786c      	ldrb	r4, [r5, #1]
 8006cc8:	3502      	adds	r5, #2
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8006cd0:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006cd4:	fbbc f9f3 	udiv	r9, ip, r3
 8006cd8:	4610      	mov	r0, r2
 8006cda:	fb03 ca19 	mls	sl, r3, r9, ip
 8006cde:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8006ce2:	2f09      	cmp	r7, #9
 8006ce4:	d814      	bhi.n	8006d10 <_strtol_l.constprop.0+0x9c>
 8006ce6:	463c      	mov	r4, r7
 8006ce8:	42a3      	cmp	r3, r4
 8006cea:	dd20      	ble.n	8006d2e <_strtol_l.constprop.0+0xba>
 8006cec:	1c57      	adds	r7, r2, #1
 8006cee:	d007      	beq.n	8006d00 <_strtol_l.constprop.0+0x8c>
 8006cf0:	4581      	cmp	r9, r0
 8006cf2:	d319      	bcc.n	8006d28 <_strtol_l.constprop.0+0xb4>
 8006cf4:	d101      	bne.n	8006cfa <_strtol_l.constprop.0+0x86>
 8006cf6:	45a2      	cmp	sl, r4
 8006cf8:	db16      	blt.n	8006d28 <_strtol_l.constprop.0+0xb4>
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	fb00 4003 	mla	r0, r0, r3, r4
 8006d00:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006d04:	e7eb      	b.n	8006cde <_strtol_l.constprop.0+0x6a>
 8006d06:	2c2b      	cmp	r4, #43	; 0x2b
 8006d08:	bf04      	itt	eq
 8006d0a:	782c      	ldrbeq	r4, [r5, #0]
 8006d0c:	1c95      	addeq	r5, r2, #2
 8006d0e:	e7ce      	b.n	8006cae <_strtol_l.constprop.0+0x3a>
 8006d10:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8006d14:	2f19      	cmp	r7, #25
 8006d16:	d801      	bhi.n	8006d1c <_strtol_l.constprop.0+0xa8>
 8006d18:	3c37      	subs	r4, #55	; 0x37
 8006d1a:	e7e5      	b.n	8006ce8 <_strtol_l.constprop.0+0x74>
 8006d1c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8006d20:	2f19      	cmp	r7, #25
 8006d22:	d804      	bhi.n	8006d2e <_strtol_l.constprop.0+0xba>
 8006d24:	3c57      	subs	r4, #87	; 0x57
 8006d26:	e7df      	b.n	8006ce8 <_strtol_l.constprop.0+0x74>
 8006d28:	f04f 32ff 	mov.w	r2, #4294967295
 8006d2c:	e7e8      	b.n	8006d00 <_strtol_l.constprop.0+0x8c>
 8006d2e:	1c53      	adds	r3, r2, #1
 8006d30:	d108      	bne.n	8006d44 <_strtol_l.constprop.0+0xd0>
 8006d32:	2322      	movs	r3, #34	; 0x22
 8006d34:	4660      	mov	r0, ip
 8006d36:	f8ce 3000 	str.w	r3, [lr]
 8006d3a:	f1b8 0f00 	cmp.w	r8, #0
 8006d3e:	d0a6      	beq.n	8006c8e <_strtol_l.constprop.0+0x1a>
 8006d40:	1e69      	subs	r1, r5, #1
 8006d42:	e006      	b.n	8006d52 <_strtol_l.constprop.0+0xde>
 8006d44:	b106      	cbz	r6, 8006d48 <_strtol_l.constprop.0+0xd4>
 8006d46:	4240      	negs	r0, r0
 8006d48:	f1b8 0f00 	cmp.w	r8, #0
 8006d4c:	d09f      	beq.n	8006c8e <_strtol_l.constprop.0+0x1a>
 8006d4e:	2a00      	cmp	r2, #0
 8006d50:	d1f6      	bne.n	8006d40 <_strtol_l.constprop.0+0xcc>
 8006d52:	f8c8 1000 	str.w	r1, [r8]
 8006d56:	e79a      	b.n	8006c8e <_strtol_l.constprop.0+0x1a>
 8006d58:	2430      	movs	r4, #48	; 0x30
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d1b5      	bne.n	8006cca <_strtol_l.constprop.0+0x56>
 8006d5e:	2308      	movs	r3, #8
 8006d60:	e7b3      	b.n	8006cca <_strtol_l.constprop.0+0x56>
 8006d62:	2c30      	cmp	r4, #48	; 0x30
 8006d64:	d0a9      	beq.n	8006cba <_strtol_l.constprop.0+0x46>
 8006d66:	230a      	movs	r3, #10
 8006d68:	e7af      	b.n	8006cca <_strtol_l.constprop.0+0x56>
 8006d6a:	bf00      	nop
 8006d6c:	0800a801 	.word	0x0800a801

08006d70 <_strtol_r>:
 8006d70:	f7ff bf80 	b.w	8006c74 <_strtol_l.constprop.0>

08006d74 <strtol>:
 8006d74:	4613      	mov	r3, r2
 8006d76:	460a      	mov	r2, r1
 8006d78:	4601      	mov	r1, r0
 8006d7a:	4802      	ldr	r0, [pc, #8]	; (8006d84 <strtol+0x10>)
 8006d7c:	6800      	ldr	r0, [r0, #0]
 8006d7e:	f7ff bf79 	b.w	8006c74 <_strtol_l.constprop.0>
 8006d82:	bf00      	nop
 8006d84:	200001d0 	.word	0x200001d0

08006d88 <__cvt>:
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d8e:	461f      	mov	r7, r3
 8006d90:	bfbb      	ittet	lt
 8006d92:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006d96:	461f      	movlt	r7, r3
 8006d98:	2300      	movge	r3, #0
 8006d9a:	232d      	movlt	r3, #45	; 0x2d
 8006d9c:	b088      	sub	sp, #32
 8006d9e:	4614      	mov	r4, r2
 8006da0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006da2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006da4:	7013      	strb	r3, [r2, #0]
 8006da6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006da8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006dac:	f023 0820 	bic.w	r8, r3, #32
 8006db0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006db4:	d005      	beq.n	8006dc2 <__cvt+0x3a>
 8006db6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006dba:	d100      	bne.n	8006dbe <__cvt+0x36>
 8006dbc:	3501      	adds	r5, #1
 8006dbe:	2302      	movs	r3, #2
 8006dc0:	e000      	b.n	8006dc4 <__cvt+0x3c>
 8006dc2:	2303      	movs	r3, #3
 8006dc4:	aa07      	add	r2, sp, #28
 8006dc6:	9204      	str	r2, [sp, #16]
 8006dc8:	aa06      	add	r2, sp, #24
 8006dca:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006dce:	e9cd 3500 	strd	r3, r5, [sp]
 8006dd2:	4622      	mov	r2, r4
 8006dd4:	463b      	mov	r3, r7
 8006dd6:	f001 f953 	bl	8008080 <_dtoa_r>
 8006dda:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006dde:	4606      	mov	r6, r0
 8006de0:	d102      	bne.n	8006de8 <__cvt+0x60>
 8006de2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006de4:	07db      	lsls	r3, r3, #31
 8006de6:	d522      	bpl.n	8006e2e <__cvt+0xa6>
 8006de8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006dec:	eb06 0905 	add.w	r9, r6, r5
 8006df0:	d110      	bne.n	8006e14 <__cvt+0x8c>
 8006df2:	7833      	ldrb	r3, [r6, #0]
 8006df4:	2b30      	cmp	r3, #48	; 0x30
 8006df6:	d10a      	bne.n	8006e0e <__cvt+0x86>
 8006df8:	2200      	movs	r2, #0
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	4620      	mov	r0, r4
 8006dfe:	4639      	mov	r1, r7
 8006e00:	f7f9 fdd2 	bl	80009a8 <__aeabi_dcmpeq>
 8006e04:	b918      	cbnz	r0, 8006e0e <__cvt+0x86>
 8006e06:	f1c5 0501 	rsb	r5, r5, #1
 8006e0a:	f8ca 5000 	str.w	r5, [sl]
 8006e0e:	f8da 3000 	ldr.w	r3, [sl]
 8006e12:	4499      	add	r9, r3
 8006e14:	2200      	movs	r2, #0
 8006e16:	2300      	movs	r3, #0
 8006e18:	4620      	mov	r0, r4
 8006e1a:	4639      	mov	r1, r7
 8006e1c:	f7f9 fdc4 	bl	80009a8 <__aeabi_dcmpeq>
 8006e20:	b108      	cbz	r0, 8006e26 <__cvt+0x9e>
 8006e22:	f8cd 901c 	str.w	r9, [sp, #28]
 8006e26:	2230      	movs	r2, #48	; 0x30
 8006e28:	9b07      	ldr	r3, [sp, #28]
 8006e2a:	454b      	cmp	r3, r9
 8006e2c:	d307      	bcc.n	8006e3e <__cvt+0xb6>
 8006e2e:	4630      	mov	r0, r6
 8006e30:	9b07      	ldr	r3, [sp, #28]
 8006e32:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006e34:	1b9b      	subs	r3, r3, r6
 8006e36:	6013      	str	r3, [r2, #0]
 8006e38:	b008      	add	sp, #32
 8006e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e3e:	1c59      	adds	r1, r3, #1
 8006e40:	9107      	str	r1, [sp, #28]
 8006e42:	701a      	strb	r2, [r3, #0]
 8006e44:	e7f0      	b.n	8006e28 <__cvt+0xa0>

08006e46 <__exponent>:
 8006e46:	4603      	mov	r3, r0
 8006e48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e4a:	2900      	cmp	r1, #0
 8006e4c:	f803 2b02 	strb.w	r2, [r3], #2
 8006e50:	bfb6      	itet	lt
 8006e52:	222d      	movlt	r2, #45	; 0x2d
 8006e54:	222b      	movge	r2, #43	; 0x2b
 8006e56:	4249      	neglt	r1, r1
 8006e58:	2909      	cmp	r1, #9
 8006e5a:	7042      	strb	r2, [r0, #1]
 8006e5c:	dd2a      	ble.n	8006eb4 <__exponent+0x6e>
 8006e5e:	f10d 0207 	add.w	r2, sp, #7
 8006e62:	4617      	mov	r7, r2
 8006e64:	260a      	movs	r6, #10
 8006e66:	fb91 f5f6 	sdiv	r5, r1, r6
 8006e6a:	4694      	mov	ip, r2
 8006e6c:	fb06 1415 	mls	r4, r6, r5, r1
 8006e70:	3430      	adds	r4, #48	; 0x30
 8006e72:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006e76:	460c      	mov	r4, r1
 8006e78:	2c63      	cmp	r4, #99	; 0x63
 8006e7a:	4629      	mov	r1, r5
 8006e7c:	f102 32ff 	add.w	r2, r2, #4294967295
 8006e80:	dcf1      	bgt.n	8006e66 <__exponent+0x20>
 8006e82:	3130      	adds	r1, #48	; 0x30
 8006e84:	f1ac 0402 	sub.w	r4, ip, #2
 8006e88:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006e8c:	4622      	mov	r2, r4
 8006e8e:	1c41      	adds	r1, r0, #1
 8006e90:	42ba      	cmp	r2, r7
 8006e92:	d30a      	bcc.n	8006eaa <__exponent+0x64>
 8006e94:	f10d 0209 	add.w	r2, sp, #9
 8006e98:	eba2 020c 	sub.w	r2, r2, ip
 8006e9c:	42bc      	cmp	r4, r7
 8006e9e:	bf88      	it	hi
 8006ea0:	2200      	movhi	r2, #0
 8006ea2:	4413      	add	r3, r2
 8006ea4:	1a18      	subs	r0, r3, r0
 8006ea6:	b003      	add	sp, #12
 8006ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006eaa:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006eae:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006eb2:	e7ed      	b.n	8006e90 <__exponent+0x4a>
 8006eb4:	2330      	movs	r3, #48	; 0x30
 8006eb6:	3130      	adds	r1, #48	; 0x30
 8006eb8:	7083      	strb	r3, [r0, #2]
 8006eba:	70c1      	strb	r1, [r0, #3]
 8006ebc:	1d03      	adds	r3, r0, #4
 8006ebe:	e7f1      	b.n	8006ea4 <__exponent+0x5e>

08006ec0 <_printf_float>:
 8006ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ec4:	b091      	sub	sp, #68	; 0x44
 8006ec6:	460c      	mov	r4, r1
 8006ec8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006ecc:	4616      	mov	r6, r2
 8006ece:	461f      	mov	r7, r3
 8006ed0:	4605      	mov	r5, r0
 8006ed2:	f000 ff77 	bl	8007dc4 <_localeconv_r>
 8006ed6:	6803      	ldr	r3, [r0, #0]
 8006ed8:	4618      	mov	r0, r3
 8006eda:	9309      	str	r3, [sp, #36]	; 0x24
 8006edc:	f7f9 f938 	bl	8000150 <strlen>
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	930e      	str	r3, [sp, #56]	; 0x38
 8006ee4:	f8d8 3000 	ldr.w	r3, [r8]
 8006ee8:	900a      	str	r0, [sp, #40]	; 0x28
 8006eea:	3307      	adds	r3, #7
 8006eec:	f023 0307 	bic.w	r3, r3, #7
 8006ef0:	f103 0208 	add.w	r2, r3, #8
 8006ef4:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006ef8:	f8d4 b000 	ldr.w	fp, [r4]
 8006efc:	f8c8 2000 	str.w	r2, [r8]
 8006f00:	e9d3 a800 	ldrd	sl, r8, [r3]
 8006f04:	4652      	mov	r2, sl
 8006f06:	4643      	mov	r3, r8
 8006f08:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006f0c:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8006f10:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f12:	f04f 32ff 	mov.w	r2, #4294967295
 8006f16:	4650      	mov	r0, sl
 8006f18:	4b9c      	ldr	r3, [pc, #624]	; (800718c <_printf_float+0x2cc>)
 8006f1a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006f1c:	f7f9 fd76 	bl	8000a0c <__aeabi_dcmpun>
 8006f20:	bb70      	cbnz	r0, 8006f80 <_printf_float+0xc0>
 8006f22:	f04f 32ff 	mov.w	r2, #4294967295
 8006f26:	4650      	mov	r0, sl
 8006f28:	4b98      	ldr	r3, [pc, #608]	; (800718c <_printf_float+0x2cc>)
 8006f2a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006f2c:	f7f9 fd50 	bl	80009d0 <__aeabi_dcmple>
 8006f30:	bb30      	cbnz	r0, 8006f80 <_printf_float+0xc0>
 8006f32:	2200      	movs	r2, #0
 8006f34:	2300      	movs	r3, #0
 8006f36:	4650      	mov	r0, sl
 8006f38:	4641      	mov	r1, r8
 8006f3a:	f7f9 fd3f 	bl	80009bc <__aeabi_dcmplt>
 8006f3e:	b110      	cbz	r0, 8006f46 <_printf_float+0x86>
 8006f40:	232d      	movs	r3, #45	; 0x2d
 8006f42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f46:	4a92      	ldr	r2, [pc, #584]	; (8007190 <_printf_float+0x2d0>)
 8006f48:	4b92      	ldr	r3, [pc, #584]	; (8007194 <_printf_float+0x2d4>)
 8006f4a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006f4e:	bf94      	ite	ls
 8006f50:	4690      	movls	r8, r2
 8006f52:	4698      	movhi	r8, r3
 8006f54:	2303      	movs	r3, #3
 8006f56:	f04f 0a00 	mov.w	sl, #0
 8006f5a:	6123      	str	r3, [r4, #16]
 8006f5c:	f02b 0304 	bic.w	r3, fp, #4
 8006f60:	6023      	str	r3, [r4, #0]
 8006f62:	4633      	mov	r3, r6
 8006f64:	4621      	mov	r1, r4
 8006f66:	4628      	mov	r0, r5
 8006f68:	9700      	str	r7, [sp, #0]
 8006f6a:	aa0f      	add	r2, sp, #60	; 0x3c
 8006f6c:	f000 f9d6 	bl	800731c <_printf_common>
 8006f70:	3001      	adds	r0, #1
 8006f72:	f040 8090 	bne.w	8007096 <_printf_float+0x1d6>
 8006f76:	f04f 30ff 	mov.w	r0, #4294967295
 8006f7a:	b011      	add	sp, #68	; 0x44
 8006f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f80:	4652      	mov	r2, sl
 8006f82:	4643      	mov	r3, r8
 8006f84:	4650      	mov	r0, sl
 8006f86:	4641      	mov	r1, r8
 8006f88:	f7f9 fd40 	bl	8000a0c <__aeabi_dcmpun>
 8006f8c:	b148      	cbz	r0, 8006fa2 <_printf_float+0xe2>
 8006f8e:	f1b8 0f00 	cmp.w	r8, #0
 8006f92:	bfb8      	it	lt
 8006f94:	232d      	movlt	r3, #45	; 0x2d
 8006f96:	4a80      	ldr	r2, [pc, #512]	; (8007198 <_printf_float+0x2d8>)
 8006f98:	bfb8      	it	lt
 8006f9a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006f9e:	4b7f      	ldr	r3, [pc, #508]	; (800719c <_printf_float+0x2dc>)
 8006fa0:	e7d3      	b.n	8006f4a <_printf_float+0x8a>
 8006fa2:	6863      	ldr	r3, [r4, #4]
 8006fa4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006fa8:	1c5a      	adds	r2, r3, #1
 8006faa:	d142      	bne.n	8007032 <_printf_float+0x172>
 8006fac:	2306      	movs	r3, #6
 8006fae:	6063      	str	r3, [r4, #4]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	9206      	str	r2, [sp, #24]
 8006fb4:	aa0e      	add	r2, sp, #56	; 0x38
 8006fb6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006fba:	aa0d      	add	r2, sp, #52	; 0x34
 8006fbc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006fc0:	9203      	str	r2, [sp, #12]
 8006fc2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006fc6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006fca:	6023      	str	r3, [r4, #0]
 8006fcc:	6863      	ldr	r3, [r4, #4]
 8006fce:	4652      	mov	r2, sl
 8006fd0:	9300      	str	r3, [sp, #0]
 8006fd2:	4628      	mov	r0, r5
 8006fd4:	4643      	mov	r3, r8
 8006fd6:	910b      	str	r1, [sp, #44]	; 0x2c
 8006fd8:	f7ff fed6 	bl	8006d88 <__cvt>
 8006fdc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006fde:	4680      	mov	r8, r0
 8006fe0:	2947      	cmp	r1, #71	; 0x47
 8006fe2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006fe4:	d108      	bne.n	8006ff8 <_printf_float+0x138>
 8006fe6:	1cc8      	adds	r0, r1, #3
 8006fe8:	db02      	blt.n	8006ff0 <_printf_float+0x130>
 8006fea:	6863      	ldr	r3, [r4, #4]
 8006fec:	4299      	cmp	r1, r3
 8006fee:	dd40      	ble.n	8007072 <_printf_float+0x1b2>
 8006ff0:	f1a9 0902 	sub.w	r9, r9, #2
 8006ff4:	fa5f f989 	uxtb.w	r9, r9
 8006ff8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006ffc:	d81f      	bhi.n	800703e <_printf_float+0x17e>
 8006ffe:	464a      	mov	r2, r9
 8007000:	3901      	subs	r1, #1
 8007002:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007006:	910d      	str	r1, [sp, #52]	; 0x34
 8007008:	f7ff ff1d 	bl	8006e46 <__exponent>
 800700c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800700e:	4682      	mov	sl, r0
 8007010:	1813      	adds	r3, r2, r0
 8007012:	2a01      	cmp	r2, #1
 8007014:	6123      	str	r3, [r4, #16]
 8007016:	dc02      	bgt.n	800701e <_printf_float+0x15e>
 8007018:	6822      	ldr	r2, [r4, #0]
 800701a:	07d2      	lsls	r2, r2, #31
 800701c:	d501      	bpl.n	8007022 <_printf_float+0x162>
 800701e:	3301      	adds	r3, #1
 8007020:	6123      	str	r3, [r4, #16]
 8007022:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8007026:	2b00      	cmp	r3, #0
 8007028:	d09b      	beq.n	8006f62 <_printf_float+0xa2>
 800702a:	232d      	movs	r3, #45	; 0x2d
 800702c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007030:	e797      	b.n	8006f62 <_printf_float+0xa2>
 8007032:	2947      	cmp	r1, #71	; 0x47
 8007034:	d1bc      	bne.n	8006fb0 <_printf_float+0xf0>
 8007036:	2b00      	cmp	r3, #0
 8007038:	d1ba      	bne.n	8006fb0 <_printf_float+0xf0>
 800703a:	2301      	movs	r3, #1
 800703c:	e7b7      	b.n	8006fae <_printf_float+0xee>
 800703e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007042:	d118      	bne.n	8007076 <_printf_float+0x1b6>
 8007044:	2900      	cmp	r1, #0
 8007046:	6863      	ldr	r3, [r4, #4]
 8007048:	dd0b      	ble.n	8007062 <_printf_float+0x1a2>
 800704a:	6121      	str	r1, [r4, #16]
 800704c:	b913      	cbnz	r3, 8007054 <_printf_float+0x194>
 800704e:	6822      	ldr	r2, [r4, #0]
 8007050:	07d0      	lsls	r0, r2, #31
 8007052:	d502      	bpl.n	800705a <_printf_float+0x19a>
 8007054:	3301      	adds	r3, #1
 8007056:	440b      	add	r3, r1
 8007058:	6123      	str	r3, [r4, #16]
 800705a:	f04f 0a00 	mov.w	sl, #0
 800705e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007060:	e7df      	b.n	8007022 <_printf_float+0x162>
 8007062:	b913      	cbnz	r3, 800706a <_printf_float+0x1aa>
 8007064:	6822      	ldr	r2, [r4, #0]
 8007066:	07d2      	lsls	r2, r2, #31
 8007068:	d501      	bpl.n	800706e <_printf_float+0x1ae>
 800706a:	3302      	adds	r3, #2
 800706c:	e7f4      	b.n	8007058 <_printf_float+0x198>
 800706e:	2301      	movs	r3, #1
 8007070:	e7f2      	b.n	8007058 <_printf_float+0x198>
 8007072:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007076:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007078:	4299      	cmp	r1, r3
 800707a:	db05      	blt.n	8007088 <_printf_float+0x1c8>
 800707c:	6823      	ldr	r3, [r4, #0]
 800707e:	6121      	str	r1, [r4, #16]
 8007080:	07d8      	lsls	r0, r3, #31
 8007082:	d5ea      	bpl.n	800705a <_printf_float+0x19a>
 8007084:	1c4b      	adds	r3, r1, #1
 8007086:	e7e7      	b.n	8007058 <_printf_float+0x198>
 8007088:	2900      	cmp	r1, #0
 800708a:	bfcc      	ite	gt
 800708c:	2201      	movgt	r2, #1
 800708e:	f1c1 0202 	rsble	r2, r1, #2
 8007092:	4413      	add	r3, r2
 8007094:	e7e0      	b.n	8007058 <_printf_float+0x198>
 8007096:	6823      	ldr	r3, [r4, #0]
 8007098:	055a      	lsls	r2, r3, #21
 800709a:	d407      	bmi.n	80070ac <_printf_float+0x1ec>
 800709c:	6923      	ldr	r3, [r4, #16]
 800709e:	4642      	mov	r2, r8
 80070a0:	4631      	mov	r1, r6
 80070a2:	4628      	mov	r0, r5
 80070a4:	47b8      	blx	r7
 80070a6:	3001      	adds	r0, #1
 80070a8:	d12b      	bne.n	8007102 <_printf_float+0x242>
 80070aa:	e764      	b.n	8006f76 <_printf_float+0xb6>
 80070ac:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80070b0:	f240 80dd 	bls.w	800726e <_printf_float+0x3ae>
 80070b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80070b8:	2200      	movs	r2, #0
 80070ba:	2300      	movs	r3, #0
 80070bc:	f7f9 fc74 	bl	80009a8 <__aeabi_dcmpeq>
 80070c0:	2800      	cmp	r0, #0
 80070c2:	d033      	beq.n	800712c <_printf_float+0x26c>
 80070c4:	2301      	movs	r3, #1
 80070c6:	4631      	mov	r1, r6
 80070c8:	4628      	mov	r0, r5
 80070ca:	4a35      	ldr	r2, [pc, #212]	; (80071a0 <_printf_float+0x2e0>)
 80070cc:	47b8      	blx	r7
 80070ce:	3001      	adds	r0, #1
 80070d0:	f43f af51 	beq.w	8006f76 <_printf_float+0xb6>
 80070d4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80070d8:	429a      	cmp	r2, r3
 80070da:	db02      	blt.n	80070e2 <_printf_float+0x222>
 80070dc:	6823      	ldr	r3, [r4, #0]
 80070de:	07d8      	lsls	r0, r3, #31
 80070e0:	d50f      	bpl.n	8007102 <_printf_float+0x242>
 80070e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80070e6:	4631      	mov	r1, r6
 80070e8:	4628      	mov	r0, r5
 80070ea:	47b8      	blx	r7
 80070ec:	3001      	adds	r0, #1
 80070ee:	f43f af42 	beq.w	8006f76 <_printf_float+0xb6>
 80070f2:	f04f 0800 	mov.w	r8, #0
 80070f6:	f104 091a 	add.w	r9, r4, #26
 80070fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80070fc:	3b01      	subs	r3, #1
 80070fe:	4543      	cmp	r3, r8
 8007100:	dc09      	bgt.n	8007116 <_printf_float+0x256>
 8007102:	6823      	ldr	r3, [r4, #0]
 8007104:	079b      	lsls	r3, r3, #30
 8007106:	f100 8104 	bmi.w	8007312 <_printf_float+0x452>
 800710a:	68e0      	ldr	r0, [r4, #12]
 800710c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800710e:	4298      	cmp	r0, r3
 8007110:	bfb8      	it	lt
 8007112:	4618      	movlt	r0, r3
 8007114:	e731      	b.n	8006f7a <_printf_float+0xba>
 8007116:	2301      	movs	r3, #1
 8007118:	464a      	mov	r2, r9
 800711a:	4631      	mov	r1, r6
 800711c:	4628      	mov	r0, r5
 800711e:	47b8      	blx	r7
 8007120:	3001      	adds	r0, #1
 8007122:	f43f af28 	beq.w	8006f76 <_printf_float+0xb6>
 8007126:	f108 0801 	add.w	r8, r8, #1
 800712a:	e7e6      	b.n	80070fa <_printf_float+0x23a>
 800712c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800712e:	2b00      	cmp	r3, #0
 8007130:	dc38      	bgt.n	80071a4 <_printf_float+0x2e4>
 8007132:	2301      	movs	r3, #1
 8007134:	4631      	mov	r1, r6
 8007136:	4628      	mov	r0, r5
 8007138:	4a19      	ldr	r2, [pc, #100]	; (80071a0 <_printf_float+0x2e0>)
 800713a:	47b8      	blx	r7
 800713c:	3001      	adds	r0, #1
 800713e:	f43f af1a 	beq.w	8006f76 <_printf_float+0xb6>
 8007142:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8007146:	4313      	orrs	r3, r2
 8007148:	d102      	bne.n	8007150 <_printf_float+0x290>
 800714a:	6823      	ldr	r3, [r4, #0]
 800714c:	07d9      	lsls	r1, r3, #31
 800714e:	d5d8      	bpl.n	8007102 <_printf_float+0x242>
 8007150:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007154:	4631      	mov	r1, r6
 8007156:	4628      	mov	r0, r5
 8007158:	47b8      	blx	r7
 800715a:	3001      	adds	r0, #1
 800715c:	f43f af0b 	beq.w	8006f76 <_printf_float+0xb6>
 8007160:	f04f 0900 	mov.w	r9, #0
 8007164:	f104 0a1a 	add.w	sl, r4, #26
 8007168:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800716a:	425b      	negs	r3, r3
 800716c:	454b      	cmp	r3, r9
 800716e:	dc01      	bgt.n	8007174 <_printf_float+0x2b4>
 8007170:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007172:	e794      	b.n	800709e <_printf_float+0x1de>
 8007174:	2301      	movs	r3, #1
 8007176:	4652      	mov	r2, sl
 8007178:	4631      	mov	r1, r6
 800717a:	4628      	mov	r0, r5
 800717c:	47b8      	blx	r7
 800717e:	3001      	adds	r0, #1
 8007180:	f43f aef9 	beq.w	8006f76 <_printf_float+0xb6>
 8007184:	f109 0901 	add.w	r9, r9, #1
 8007188:	e7ee      	b.n	8007168 <_printf_float+0x2a8>
 800718a:	bf00      	nop
 800718c:	7fefffff 	.word	0x7fefffff
 8007190:	0800a901 	.word	0x0800a901
 8007194:	0800a905 	.word	0x0800a905
 8007198:	0800a909 	.word	0x0800a909
 800719c:	0800a90d 	.word	0x0800a90d
 80071a0:	0800a911 	.word	0x0800a911
 80071a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80071a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80071a8:	429a      	cmp	r2, r3
 80071aa:	bfa8      	it	ge
 80071ac:	461a      	movge	r2, r3
 80071ae:	2a00      	cmp	r2, #0
 80071b0:	4691      	mov	r9, r2
 80071b2:	dc37      	bgt.n	8007224 <_printf_float+0x364>
 80071b4:	f04f 0b00 	mov.w	fp, #0
 80071b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80071bc:	f104 021a 	add.w	r2, r4, #26
 80071c0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80071c4:	ebaa 0309 	sub.w	r3, sl, r9
 80071c8:	455b      	cmp	r3, fp
 80071ca:	dc33      	bgt.n	8007234 <_printf_float+0x374>
 80071cc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80071d0:	429a      	cmp	r2, r3
 80071d2:	db3b      	blt.n	800724c <_printf_float+0x38c>
 80071d4:	6823      	ldr	r3, [r4, #0]
 80071d6:	07da      	lsls	r2, r3, #31
 80071d8:	d438      	bmi.n	800724c <_printf_float+0x38c>
 80071da:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80071de:	eba2 0903 	sub.w	r9, r2, r3
 80071e2:	eba2 020a 	sub.w	r2, r2, sl
 80071e6:	4591      	cmp	r9, r2
 80071e8:	bfa8      	it	ge
 80071ea:	4691      	movge	r9, r2
 80071ec:	f1b9 0f00 	cmp.w	r9, #0
 80071f0:	dc34      	bgt.n	800725c <_printf_float+0x39c>
 80071f2:	f04f 0800 	mov.w	r8, #0
 80071f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80071fa:	f104 0a1a 	add.w	sl, r4, #26
 80071fe:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007202:	1a9b      	subs	r3, r3, r2
 8007204:	eba3 0309 	sub.w	r3, r3, r9
 8007208:	4543      	cmp	r3, r8
 800720a:	f77f af7a 	ble.w	8007102 <_printf_float+0x242>
 800720e:	2301      	movs	r3, #1
 8007210:	4652      	mov	r2, sl
 8007212:	4631      	mov	r1, r6
 8007214:	4628      	mov	r0, r5
 8007216:	47b8      	blx	r7
 8007218:	3001      	adds	r0, #1
 800721a:	f43f aeac 	beq.w	8006f76 <_printf_float+0xb6>
 800721e:	f108 0801 	add.w	r8, r8, #1
 8007222:	e7ec      	b.n	80071fe <_printf_float+0x33e>
 8007224:	4613      	mov	r3, r2
 8007226:	4631      	mov	r1, r6
 8007228:	4642      	mov	r2, r8
 800722a:	4628      	mov	r0, r5
 800722c:	47b8      	blx	r7
 800722e:	3001      	adds	r0, #1
 8007230:	d1c0      	bne.n	80071b4 <_printf_float+0x2f4>
 8007232:	e6a0      	b.n	8006f76 <_printf_float+0xb6>
 8007234:	2301      	movs	r3, #1
 8007236:	4631      	mov	r1, r6
 8007238:	4628      	mov	r0, r5
 800723a:	920b      	str	r2, [sp, #44]	; 0x2c
 800723c:	47b8      	blx	r7
 800723e:	3001      	adds	r0, #1
 8007240:	f43f ae99 	beq.w	8006f76 <_printf_float+0xb6>
 8007244:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007246:	f10b 0b01 	add.w	fp, fp, #1
 800724a:	e7b9      	b.n	80071c0 <_printf_float+0x300>
 800724c:	4631      	mov	r1, r6
 800724e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007252:	4628      	mov	r0, r5
 8007254:	47b8      	blx	r7
 8007256:	3001      	adds	r0, #1
 8007258:	d1bf      	bne.n	80071da <_printf_float+0x31a>
 800725a:	e68c      	b.n	8006f76 <_printf_float+0xb6>
 800725c:	464b      	mov	r3, r9
 800725e:	4631      	mov	r1, r6
 8007260:	4628      	mov	r0, r5
 8007262:	eb08 020a 	add.w	r2, r8, sl
 8007266:	47b8      	blx	r7
 8007268:	3001      	adds	r0, #1
 800726a:	d1c2      	bne.n	80071f2 <_printf_float+0x332>
 800726c:	e683      	b.n	8006f76 <_printf_float+0xb6>
 800726e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007270:	2a01      	cmp	r2, #1
 8007272:	dc01      	bgt.n	8007278 <_printf_float+0x3b8>
 8007274:	07db      	lsls	r3, r3, #31
 8007276:	d539      	bpl.n	80072ec <_printf_float+0x42c>
 8007278:	2301      	movs	r3, #1
 800727a:	4642      	mov	r2, r8
 800727c:	4631      	mov	r1, r6
 800727e:	4628      	mov	r0, r5
 8007280:	47b8      	blx	r7
 8007282:	3001      	adds	r0, #1
 8007284:	f43f ae77 	beq.w	8006f76 <_printf_float+0xb6>
 8007288:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800728c:	4631      	mov	r1, r6
 800728e:	4628      	mov	r0, r5
 8007290:	47b8      	blx	r7
 8007292:	3001      	adds	r0, #1
 8007294:	f43f ae6f 	beq.w	8006f76 <_printf_float+0xb6>
 8007298:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800729c:	2200      	movs	r2, #0
 800729e:	2300      	movs	r3, #0
 80072a0:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 80072a4:	f7f9 fb80 	bl	80009a8 <__aeabi_dcmpeq>
 80072a8:	b9d8      	cbnz	r0, 80072e2 <_printf_float+0x422>
 80072aa:	f109 33ff 	add.w	r3, r9, #4294967295
 80072ae:	f108 0201 	add.w	r2, r8, #1
 80072b2:	4631      	mov	r1, r6
 80072b4:	4628      	mov	r0, r5
 80072b6:	47b8      	blx	r7
 80072b8:	3001      	adds	r0, #1
 80072ba:	d10e      	bne.n	80072da <_printf_float+0x41a>
 80072bc:	e65b      	b.n	8006f76 <_printf_float+0xb6>
 80072be:	2301      	movs	r3, #1
 80072c0:	464a      	mov	r2, r9
 80072c2:	4631      	mov	r1, r6
 80072c4:	4628      	mov	r0, r5
 80072c6:	47b8      	blx	r7
 80072c8:	3001      	adds	r0, #1
 80072ca:	f43f ae54 	beq.w	8006f76 <_printf_float+0xb6>
 80072ce:	f108 0801 	add.w	r8, r8, #1
 80072d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80072d4:	3b01      	subs	r3, #1
 80072d6:	4543      	cmp	r3, r8
 80072d8:	dcf1      	bgt.n	80072be <_printf_float+0x3fe>
 80072da:	4653      	mov	r3, sl
 80072dc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80072e0:	e6de      	b.n	80070a0 <_printf_float+0x1e0>
 80072e2:	f04f 0800 	mov.w	r8, #0
 80072e6:	f104 091a 	add.w	r9, r4, #26
 80072ea:	e7f2      	b.n	80072d2 <_printf_float+0x412>
 80072ec:	2301      	movs	r3, #1
 80072ee:	4642      	mov	r2, r8
 80072f0:	e7df      	b.n	80072b2 <_printf_float+0x3f2>
 80072f2:	2301      	movs	r3, #1
 80072f4:	464a      	mov	r2, r9
 80072f6:	4631      	mov	r1, r6
 80072f8:	4628      	mov	r0, r5
 80072fa:	47b8      	blx	r7
 80072fc:	3001      	adds	r0, #1
 80072fe:	f43f ae3a 	beq.w	8006f76 <_printf_float+0xb6>
 8007302:	f108 0801 	add.w	r8, r8, #1
 8007306:	68e3      	ldr	r3, [r4, #12]
 8007308:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800730a:	1a5b      	subs	r3, r3, r1
 800730c:	4543      	cmp	r3, r8
 800730e:	dcf0      	bgt.n	80072f2 <_printf_float+0x432>
 8007310:	e6fb      	b.n	800710a <_printf_float+0x24a>
 8007312:	f04f 0800 	mov.w	r8, #0
 8007316:	f104 0919 	add.w	r9, r4, #25
 800731a:	e7f4      	b.n	8007306 <_printf_float+0x446>

0800731c <_printf_common>:
 800731c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007320:	4616      	mov	r6, r2
 8007322:	4699      	mov	r9, r3
 8007324:	688a      	ldr	r2, [r1, #8]
 8007326:	690b      	ldr	r3, [r1, #16]
 8007328:	4607      	mov	r7, r0
 800732a:	4293      	cmp	r3, r2
 800732c:	bfb8      	it	lt
 800732e:	4613      	movlt	r3, r2
 8007330:	6033      	str	r3, [r6, #0]
 8007332:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007336:	460c      	mov	r4, r1
 8007338:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800733c:	b10a      	cbz	r2, 8007342 <_printf_common+0x26>
 800733e:	3301      	adds	r3, #1
 8007340:	6033      	str	r3, [r6, #0]
 8007342:	6823      	ldr	r3, [r4, #0]
 8007344:	0699      	lsls	r1, r3, #26
 8007346:	bf42      	ittt	mi
 8007348:	6833      	ldrmi	r3, [r6, #0]
 800734a:	3302      	addmi	r3, #2
 800734c:	6033      	strmi	r3, [r6, #0]
 800734e:	6825      	ldr	r5, [r4, #0]
 8007350:	f015 0506 	ands.w	r5, r5, #6
 8007354:	d106      	bne.n	8007364 <_printf_common+0x48>
 8007356:	f104 0a19 	add.w	sl, r4, #25
 800735a:	68e3      	ldr	r3, [r4, #12]
 800735c:	6832      	ldr	r2, [r6, #0]
 800735e:	1a9b      	subs	r3, r3, r2
 8007360:	42ab      	cmp	r3, r5
 8007362:	dc2b      	bgt.n	80073bc <_printf_common+0xa0>
 8007364:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007368:	1e13      	subs	r3, r2, #0
 800736a:	6822      	ldr	r2, [r4, #0]
 800736c:	bf18      	it	ne
 800736e:	2301      	movne	r3, #1
 8007370:	0692      	lsls	r2, r2, #26
 8007372:	d430      	bmi.n	80073d6 <_printf_common+0xba>
 8007374:	4649      	mov	r1, r9
 8007376:	4638      	mov	r0, r7
 8007378:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800737c:	47c0      	blx	r8
 800737e:	3001      	adds	r0, #1
 8007380:	d023      	beq.n	80073ca <_printf_common+0xae>
 8007382:	6823      	ldr	r3, [r4, #0]
 8007384:	6922      	ldr	r2, [r4, #16]
 8007386:	f003 0306 	and.w	r3, r3, #6
 800738a:	2b04      	cmp	r3, #4
 800738c:	bf14      	ite	ne
 800738e:	2500      	movne	r5, #0
 8007390:	6833      	ldreq	r3, [r6, #0]
 8007392:	f04f 0600 	mov.w	r6, #0
 8007396:	bf08      	it	eq
 8007398:	68e5      	ldreq	r5, [r4, #12]
 800739a:	f104 041a 	add.w	r4, r4, #26
 800739e:	bf08      	it	eq
 80073a0:	1aed      	subeq	r5, r5, r3
 80073a2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80073a6:	bf08      	it	eq
 80073a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80073ac:	4293      	cmp	r3, r2
 80073ae:	bfc4      	itt	gt
 80073b0:	1a9b      	subgt	r3, r3, r2
 80073b2:	18ed      	addgt	r5, r5, r3
 80073b4:	42b5      	cmp	r5, r6
 80073b6:	d11a      	bne.n	80073ee <_printf_common+0xd2>
 80073b8:	2000      	movs	r0, #0
 80073ba:	e008      	b.n	80073ce <_printf_common+0xb2>
 80073bc:	2301      	movs	r3, #1
 80073be:	4652      	mov	r2, sl
 80073c0:	4649      	mov	r1, r9
 80073c2:	4638      	mov	r0, r7
 80073c4:	47c0      	blx	r8
 80073c6:	3001      	adds	r0, #1
 80073c8:	d103      	bne.n	80073d2 <_printf_common+0xb6>
 80073ca:	f04f 30ff 	mov.w	r0, #4294967295
 80073ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073d2:	3501      	adds	r5, #1
 80073d4:	e7c1      	b.n	800735a <_printf_common+0x3e>
 80073d6:	2030      	movs	r0, #48	; 0x30
 80073d8:	18e1      	adds	r1, r4, r3
 80073da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80073de:	1c5a      	adds	r2, r3, #1
 80073e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80073e4:	4422      	add	r2, r4
 80073e6:	3302      	adds	r3, #2
 80073e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80073ec:	e7c2      	b.n	8007374 <_printf_common+0x58>
 80073ee:	2301      	movs	r3, #1
 80073f0:	4622      	mov	r2, r4
 80073f2:	4649      	mov	r1, r9
 80073f4:	4638      	mov	r0, r7
 80073f6:	47c0      	blx	r8
 80073f8:	3001      	adds	r0, #1
 80073fa:	d0e6      	beq.n	80073ca <_printf_common+0xae>
 80073fc:	3601      	adds	r6, #1
 80073fe:	e7d9      	b.n	80073b4 <_printf_common+0x98>

08007400 <_printf_i>:
 8007400:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007404:	7e0f      	ldrb	r7, [r1, #24]
 8007406:	4691      	mov	r9, r2
 8007408:	2f78      	cmp	r7, #120	; 0x78
 800740a:	4680      	mov	r8, r0
 800740c:	460c      	mov	r4, r1
 800740e:	469a      	mov	sl, r3
 8007410:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007412:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007416:	d807      	bhi.n	8007428 <_printf_i+0x28>
 8007418:	2f62      	cmp	r7, #98	; 0x62
 800741a:	d80a      	bhi.n	8007432 <_printf_i+0x32>
 800741c:	2f00      	cmp	r7, #0
 800741e:	f000 80d5 	beq.w	80075cc <_printf_i+0x1cc>
 8007422:	2f58      	cmp	r7, #88	; 0x58
 8007424:	f000 80c1 	beq.w	80075aa <_printf_i+0x1aa>
 8007428:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800742c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007430:	e03a      	b.n	80074a8 <_printf_i+0xa8>
 8007432:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007436:	2b15      	cmp	r3, #21
 8007438:	d8f6      	bhi.n	8007428 <_printf_i+0x28>
 800743a:	a101      	add	r1, pc, #4	; (adr r1, 8007440 <_printf_i+0x40>)
 800743c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007440:	08007499 	.word	0x08007499
 8007444:	080074ad 	.word	0x080074ad
 8007448:	08007429 	.word	0x08007429
 800744c:	08007429 	.word	0x08007429
 8007450:	08007429 	.word	0x08007429
 8007454:	08007429 	.word	0x08007429
 8007458:	080074ad 	.word	0x080074ad
 800745c:	08007429 	.word	0x08007429
 8007460:	08007429 	.word	0x08007429
 8007464:	08007429 	.word	0x08007429
 8007468:	08007429 	.word	0x08007429
 800746c:	080075b3 	.word	0x080075b3
 8007470:	080074d9 	.word	0x080074d9
 8007474:	0800756d 	.word	0x0800756d
 8007478:	08007429 	.word	0x08007429
 800747c:	08007429 	.word	0x08007429
 8007480:	080075d5 	.word	0x080075d5
 8007484:	08007429 	.word	0x08007429
 8007488:	080074d9 	.word	0x080074d9
 800748c:	08007429 	.word	0x08007429
 8007490:	08007429 	.word	0x08007429
 8007494:	08007575 	.word	0x08007575
 8007498:	682b      	ldr	r3, [r5, #0]
 800749a:	1d1a      	adds	r2, r3, #4
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	602a      	str	r2, [r5, #0]
 80074a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80074a8:	2301      	movs	r3, #1
 80074aa:	e0a0      	b.n	80075ee <_printf_i+0x1ee>
 80074ac:	6820      	ldr	r0, [r4, #0]
 80074ae:	682b      	ldr	r3, [r5, #0]
 80074b0:	0607      	lsls	r7, r0, #24
 80074b2:	f103 0104 	add.w	r1, r3, #4
 80074b6:	6029      	str	r1, [r5, #0]
 80074b8:	d501      	bpl.n	80074be <_printf_i+0xbe>
 80074ba:	681e      	ldr	r6, [r3, #0]
 80074bc:	e003      	b.n	80074c6 <_printf_i+0xc6>
 80074be:	0646      	lsls	r6, r0, #25
 80074c0:	d5fb      	bpl.n	80074ba <_printf_i+0xba>
 80074c2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80074c6:	2e00      	cmp	r6, #0
 80074c8:	da03      	bge.n	80074d2 <_printf_i+0xd2>
 80074ca:	232d      	movs	r3, #45	; 0x2d
 80074cc:	4276      	negs	r6, r6
 80074ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074d2:	230a      	movs	r3, #10
 80074d4:	4859      	ldr	r0, [pc, #356]	; (800763c <_printf_i+0x23c>)
 80074d6:	e012      	b.n	80074fe <_printf_i+0xfe>
 80074d8:	682b      	ldr	r3, [r5, #0]
 80074da:	6820      	ldr	r0, [r4, #0]
 80074dc:	1d19      	adds	r1, r3, #4
 80074de:	6029      	str	r1, [r5, #0]
 80074e0:	0605      	lsls	r5, r0, #24
 80074e2:	d501      	bpl.n	80074e8 <_printf_i+0xe8>
 80074e4:	681e      	ldr	r6, [r3, #0]
 80074e6:	e002      	b.n	80074ee <_printf_i+0xee>
 80074e8:	0641      	lsls	r1, r0, #25
 80074ea:	d5fb      	bpl.n	80074e4 <_printf_i+0xe4>
 80074ec:	881e      	ldrh	r6, [r3, #0]
 80074ee:	2f6f      	cmp	r7, #111	; 0x6f
 80074f0:	bf0c      	ite	eq
 80074f2:	2308      	moveq	r3, #8
 80074f4:	230a      	movne	r3, #10
 80074f6:	4851      	ldr	r0, [pc, #324]	; (800763c <_printf_i+0x23c>)
 80074f8:	2100      	movs	r1, #0
 80074fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80074fe:	6865      	ldr	r5, [r4, #4]
 8007500:	2d00      	cmp	r5, #0
 8007502:	bfa8      	it	ge
 8007504:	6821      	ldrge	r1, [r4, #0]
 8007506:	60a5      	str	r5, [r4, #8]
 8007508:	bfa4      	itt	ge
 800750a:	f021 0104 	bicge.w	r1, r1, #4
 800750e:	6021      	strge	r1, [r4, #0]
 8007510:	b90e      	cbnz	r6, 8007516 <_printf_i+0x116>
 8007512:	2d00      	cmp	r5, #0
 8007514:	d04b      	beq.n	80075ae <_printf_i+0x1ae>
 8007516:	4615      	mov	r5, r2
 8007518:	fbb6 f1f3 	udiv	r1, r6, r3
 800751c:	fb03 6711 	mls	r7, r3, r1, r6
 8007520:	5dc7      	ldrb	r7, [r0, r7]
 8007522:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007526:	4637      	mov	r7, r6
 8007528:	42bb      	cmp	r3, r7
 800752a:	460e      	mov	r6, r1
 800752c:	d9f4      	bls.n	8007518 <_printf_i+0x118>
 800752e:	2b08      	cmp	r3, #8
 8007530:	d10b      	bne.n	800754a <_printf_i+0x14a>
 8007532:	6823      	ldr	r3, [r4, #0]
 8007534:	07de      	lsls	r6, r3, #31
 8007536:	d508      	bpl.n	800754a <_printf_i+0x14a>
 8007538:	6923      	ldr	r3, [r4, #16]
 800753a:	6861      	ldr	r1, [r4, #4]
 800753c:	4299      	cmp	r1, r3
 800753e:	bfde      	ittt	le
 8007540:	2330      	movle	r3, #48	; 0x30
 8007542:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007546:	f105 35ff 	addle.w	r5, r5, #4294967295
 800754a:	1b52      	subs	r2, r2, r5
 800754c:	6122      	str	r2, [r4, #16]
 800754e:	464b      	mov	r3, r9
 8007550:	4621      	mov	r1, r4
 8007552:	4640      	mov	r0, r8
 8007554:	f8cd a000 	str.w	sl, [sp]
 8007558:	aa03      	add	r2, sp, #12
 800755a:	f7ff fedf 	bl	800731c <_printf_common>
 800755e:	3001      	adds	r0, #1
 8007560:	d14a      	bne.n	80075f8 <_printf_i+0x1f8>
 8007562:	f04f 30ff 	mov.w	r0, #4294967295
 8007566:	b004      	add	sp, #16
 8007568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800756c:	6823      	ldr	r3, [r4, #0]
 800756e:	f043 0320 	orr.w	r3, r3, #32
 8007572:	6023      	str	r3, [r4, #0]
 8007574:	2778      	movs	r7, #120	; 0x78
 8007576:	4832      	ldr	r0, [pc, #200]	; (8007640 <_printf_i+0x240>)
 8007578:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800757c:	6823      	ldr	r3, [r4, #0]
 800757e:	6829      	ldr	r1, [r5, #0]
 8007580:	061f      	lsls	r7, r3, #24
 8007582:	f851 6b04 	ldr.w	r6, [r1], #4
 8007586:	d402      	bmi.n	800758e <_printf_i+0x18e>
 8007588:	065f      	lsls	r7, r3, #25
 800758a:	bf48      	it	mi
 800758c:	b2b6      	uxthmi	r6, r6
 800758e:	07df      	lsls	r7, r3, #31
 8007590:	bf48      	it	mi
 8007592:	f043 0320 	orrmi.w	r3, r3, #32
 8007596:	6029      	str	r1, [r5, #0]
 8007598:	bf48      	it	mi
 800759a:	6023      	strmi	r3, [r4, #0]
 800759c:	b91e      	cbnz	r6, 80075a6 <_printf_i+0x1a6>
 800759e:	6823      	ldr	r3, [r4, #0]
 80075a0:	f023 0320 	bic.w	r3, r3, #32
 80075a4:	6023      	str	r3, [r4, #0]
 80075a6:	2310      	movs	r3, #16
 80075a8:	e7a6      	b.n	80074f8 <_printf_i+0xf8>
 80075aa:	4824      	ldr	r0, [pc, #144]	; (800763c <_printf_i+0x23c>)
 80075ac:	e7e4      	b.n	8007578 <_printf_i+0x178>
 80075ae:	4615      	mov	r5, r2
 80075b0:	e7bd      	b.n	800752e <_printf_i+0x12e>
 80075b2:	682b      	ldr	r3, [r5, #0]
 80075b4:	6826      	ldr	r6, [r4, #0]
 80075b6:	1d18      	adds	r0, r3, #4
 80075b8:	6961      	ldr	r1, [r4, #20]
 80075ba:	6028      	str	r0, [r5, #0]
 80075bc:	0635      	lsls	r5, r6, #24
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	d501      	bpl.n	80075c6 <_printf_i+0x1c6>
 80075c2:	6019      	str	r1, [r3, #0]
 80075c4:	e002      	b.n	80075cc <_printf_i+0x1cc>
 80075c6:	0670      	lsls	r0, r6, #25
 80075c8:	d5fb      	bpl.n	80075c2 <_printf_i+0x1c2>
 80075ca:	8019      	strh	r1, [r3, #0]
 80075cc:	2300      	movs	r3, #0
 80075ce:	4615      	mov	r5, r2
 80075d0:	6123      	str	r3, [r4, #16]
 80075d2:	e7bc      	b.n	800754e <_printf_i+0x14e>
 80075d4:	682b      	ldr	r3, [r5, #0]
 80075d6:	2100      	movs	r1, #0
 80075d8:	1d1a      	adds	r2, r3, #4
 80075da:	602a      	str	r2, [r5, #0]
 80075dc:	681d      	ldr	r5, [r3, #0]
 80075de:	6862      	ldr	r2, [r4, #4]
 80075e0:	4628      	mov	r0, r5
 80075e2:	f000 fc7e 	bl	8007ee2 <memchr>
 80075e6:	b108      	cbz	r0, 80075ec <_printf_i+0x1ec>
 80075e8:	1b40      	subs	r0, r0, r5
 80075ea:	6060      	str	r0, [r4, #4]
 80075ec:	6863      	ldr	r3, [r4, #4]
 80075ee:	6123      	str	r3, [r4, #16]
 80075f0:	2300      	movs	r3, #0
 80075f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075f6:	e7aa      	b.n	800754e <_printf_i+0x14e>
 80075f8:	462a      	mov	r2, r5
 80075fa:	4649      	mov	r1, r9
 80075fc:	4640      	mov	r0, r8
 80075fe:	6923      	ldr	r3, [r4, #16]
 8007600:	47d0      	blx	sl
 8007602:	3001      	adds	r0, #1
 8007604:	d0ad      	beq.n	8007562 <_printf_i+0x162>
 8007606:	6823      	ldr	r3, [r4, #0]
 8007608:	079b      	lsls	r3, r3, #30
 800760a:	d413      	bmi.n	8007634 <_printf_i+0x234>
 800760c:	68e0      	ldr	r0, [r4, #12]
 800760e:	9b03      	ldr	r3, [sp, #12]
 8007610:	4298      	cmp	r0, r3
 8007612:	bfb8      	it	lt
 8007614:	4618      	movlt	r0, r3
 8007616:	e7a6      	b.n	8007566 <_printf_i+0x166>
 8007618:	2301      	movs	r3, #1
 800761a:	4632      	mov	r2, r6
 800761c:	4649      	mov	r1, r9
 800761e:	4640      	mov	r0, r8
 8007620:	47d0      	blx	sl
 8007622:	3001      	adds	r0, #1
 8007624:	d09d      	beq.n	8007562 <_printf_i+0x162>
 8007626:	3501      	adds	r5, #1
 8007628:	68e3      	ldr	r3, [r4, #12]
 800762a:	9903      	ldr	r1, [sp, #12]
 800762c:	1a5b      	subs	r3, r3, r1
 800762e:	42ab      	cmp	r3, r5
 8007630:	dcf2      	bgt.n	8007618 <_printf_i+0x218>
 8007632:	e7eb      	b.n	800760c <_printf_i+0x20c>
 8007634:	2500      	movs	r5, #0
 8007636:	f104 0619 	add.w	r6, r4, #25
 800763a:	e7f5      	b.n	8007628 <_printf_i+0x228>
 800763c:	0800a913 	.word	0x0800a913
 8007640:	0800a924 	.word	0x0800a924

08007644 <_scanf_float>:
 8007644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007648:	b087      	sub	sp, #28
 800764a:	9303      	str	r3, [sp, #12]
 800764c:	688b      	ldr	r3, [r1, #8]
 800764e:	4617      	mov	r7, r2
 8007650:	1e5a      	subs	r2, r3, #1
 8007652:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007656:	bf85      	ittet	hi
 8007658:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800765c:	195b      	addhi	r3, r3, r5
 800765e:	2300      	movls	r3, #0
 8007660:	9302      	strhi	r3, [sp, #8]
 8007662:	bf88      	it	hi
 8007664:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007668:	468b      	mov	fp, r1
 800766a:	f04f 0500 	mov.w	r5, #0
 800766e:	bf8c      	ite	hi
 8007670:	608b      	strhi	r3, [r1, #8]
 8007672:	9302      	strls	r3, [sp, #8]
 8007674:	680b      	ldr	r3, [r1, #0]
 8007676:	4680      	mov	r8, r0
 8007678:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800767c:	f84b 3b1c 	str.w	r3, [fp], #28
 8007680:	460c      	mov	r4, r1
 8007682:	465e      	mov	r6, fp
 8007684:	46aa      	mov	sl, r5
 8007686:	46a9      	mov	r9, r5
 8007688:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800768c:	9501      	str	r5, [sp, #4]
 800768e:	68a2      	ldr	r2, [r4, #8]
 8007690:	b152      	cbz	r2, 80076a8 <_scanf_float+0x64>
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	2b4e      	cmp	r3, #78	; 0x4e
 8007698:	d864      	bhi.n	8007764 <_scanf_float+0x120>
 800769a:	2b40      	cmp	r3, #64	; 0x40
 800769c:	d83c      	bhi.n	8007718 <_scanf_float+0xd4>
 800769e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80076a2:	b2c8      	uxtb	r0, r1
 80076a4:	280e      	cmp	r0, #14
 80076a6:	d93a      	bls.n	800771e <_scanf_float+0xda>
 80076a8:	f1b9 0f00 	cmp.w	r9, #0
 80076ac:	d003      	beq.n	80076b6 <_scanf_float+0x72>
 80076ae:	6823      	ldr	r3, [r4, #0]
 80076b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076b4:	6023      	str	r3, [r4, #0]
 80076b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80076ba:	f1ba 0f01 	cmp.w	sl, #1
 80076be:	f200 8113 	bhi.w	80078e8 <_scanf_float+0x2a4>
 80076c2:	455e      	cmp	r6, fp
 80076c4:	f200 8105 	bhi.w	80078d2 <_scanf_float+0x28e>
 80076c8:	2501      	movs	r5, #1
 80076ca:	4628      	mov	r0, r5
 80076cc:	b007      	add	sp, #28
 80076ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076d2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80076d6:	2a0d      	cmp	r2, #13
 80076d8:	d8e6      	bhi.n	80076a8 <_scanf_float+0x64>
 80076da:	a101      	add	r1, pc, #4	; (adr r1, 80076e0 <_scanf_float+0x9c>)
 80076dc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80076e0:	0800781f 	.word	0x0800781f
 80076e4:	080076a9 	.word	0x080076a9
 80076e8:	080076a9 	.word	0x080076a9
 80076ec:	080076a9 	.word	0x080076a9
 80076f0:	0800787f 	.word	0x0800787f
 80076f4:	08007857 	.word	0x08007857
 80076f8:	080076a9 	.word	0x080076a9
 80076fc:	080076a9 	.word	0x080076a9
 8007700:	0800782d 	.word	0x0800782d
 8007704:	080076a9 	.word	0x080076a9
 8007708:	080076a9 	.word	0x080076a9
 800770c:	080076a9 	.word	0x080076a9
 8007710:	080076a9 	.word	0x080076a9
 8007714:	080077e5 	.word	0x080077e5
 8007718:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800771c:	e7db      	b.n	80076d6 <_scanf_float+0x92>
 800771e:	290e      	cmp	r1, #14
 8007720:	d8c2      	bhi.n	80076a8 <_scanf_float+0x64>
 8007722:	a001      	add	r0, pc, #4	; (adr r0, 8007728 <_scanf_float+0xe4>)
 8007724:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007728:	080077d7 	.word	0x080077d7
 800772c:	080076a9 	.word	0x080076a9
 8007730:	080077d7 	.word	0x080077d7
 8007734:	0800786b 	.word	0x0800786b
 8007738:	080076a9 	.word	0x080076a9
 800773c:	08007785 	.word	0x08007785
 8007740:	080077c1 	.word	0x080077c1
 8007744:	080077c1 	.word	0x080077c1
 8007748:	080077c1 	.word	0x080077c1
 800774c:	080077c1 	.word	0x080077c1
 8007750:	080077c1 	.word	0x080077c1
 8007754:	080077c1 	.word	0x080077c1
 8007758:	080077c1 	.word	0x080077c1
 800775c:	080077c1 	.word	0x080077c1
 8007760:	080077c1 	.word	0x080077c1
 8007764:	2b6e      	cmp	r3, #110	; 0x6e
 8007766:	d809      	bhi.n	800777c <_scanf_float+0x138>
 8007768:	2b60      	cmp	r3, #96	; 0x60
 800776a:	d8b2      	bhi.n	80076d2 <_scanf_float+0x8e>
 800776c:	2b54      	cmp	r3, #84	; 0x54
 800776e:	d077      	beq.n	8007860 <_scanf_float+0x21c>
 8007770:	2b59      	cmp	r3, #89	; 0x59
 8007772:	d199      	bne.n	80076a8 <_scanf_float+0x64>
 8007774:	2d07      	cmp	r5, #7
 8007776:	d197      	bne.n	80076a8 <_scanf_float+0x64>
 8007778:	2508      	movs	r5, #8
 800777a:	e029      	b.n	80077d0 <_scanf_float+0x18c>
 800777c:	2b74      	cmp	r3, #116	; 0x74
 800777e:	d06f      	beq.n	8007860 <_scanf_float+0x21c>
 8007780:	2b79      	cmp	r3, #121	; 0x79
 8007782:	e7f6      	b.n	8007772 <_scanf_float+0x12e>
 8007784:	6821      	ldr	r1, [r4, #0]
 8007786:	05c8      	lsls	r0, r1, #23
 8007788:	d51a      	bpl.n	80077c0 <_scanf_float+0x17c>
 800778a:	9b02      	ldr	r3, [sp, #8]
 800778c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007790:	6021      	str	r1, [r4, #0]
 8007792:	f109 0901 	add.w	r9, r9, #1
 8007796:	b11b      	cbz	r3, 80077a0 <_scanf_float+0x15c>
 8007798:	3b01      	subs	r3, #1
 800779a:	3201      	adds	r2, #1
 800779c:	9302      	str	r3, [sp, #8]
 800779e:	60a2      	str	r2, [r4, #8]
 80077a0:	68a3      	ldr	r3, [r4, #8]
 80077a2:	3b01      	subs	r3, #1
 80077a4:	60a3      	str	r3, [r4, #8]
 80077a6:	6923      	ldr	r3, [r4, #16]
 80077a8:	3301      	adds	r3, #1
 80077aa:	6123      	str	r3, [r4, #16]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	3b01      	subs	r3, #1
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	607b      	str	r3, [r7, #4]
 80077b4:	f340 8084 	ble.w	80078c0 <_scanf_float+0x27c>
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	3301      	adds	r3, #1
 80077bc:	603b      	str	r3, [r7, #0]
 80077be:	e766      	b.n	800768e <_scanf_float+0x4a>
 80077c0:	eb1a 0f05 	cmn.w	sl, r5
 80077c4:	f47f af70 	bne.w	80076a8 <_scanf_float+0x64>
 80077c8:	6822      	ldr	r2, [r4, #0]
 80077ca:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80077ce:	6022      	str	r2, [r4, #0]
 80077d0:	f806 3b01 	strb.w	r3, [r6], #1
 80077d4:	e7e4      	b.n	80077a0 <_scanf_float+0x15c>
 80077d6:	6822      	ldr	r2, [r4, #0]
 80077d8:	0610      	lsls	r0, r2, #24
 80077da:	f57f af65 	bpl.w	80076a8 <_scanf_float+0x64>
 80077de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80077e2:	e7f4      	b.n	80077ce <_scanf_float+0x18a>
 80077e4:	f1ba 0f00 	cmp.w	sl, #0
 80077e8:	d10e      	bne.n	8007808 <_scanf_float+0x1c4>
 80077ea:	f1b9 0f00 	cmp.w	r9, #0
 80077ee:	d10e      	bne.n	800780e <_scanf_float+0x1ca>
 80077f0:	6822      	ldr	r2, [r4, #0]
 80077f2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80077f6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80077fa:	d108      	bne.n	800780e <_scanf_float+0x1ca>
 80077fc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007800:	f04f 0a01 	mov.w	sl, #1
 8007804:	6022      	str	r2, [r4, #0]
 8007806:	e7e3      	b.n	80077d0 <_scanf_float+0x18c>
 8007808:	f1ba 0f02 	cmp.w	sl, #2
 800780c:	d055      	beq.n	80078ba <_scanf_float+0x276>
 800780e:	2d01      	cmp	r5, #1
 8007810:	d002      	beq.n	8007818 <_scanf_float+0x1d4>
 8007812:	2d04      	cmp	r5, #4
 8007814:	f47f af48 	bne.w	80076a8 <_scanf_float+0x64>
 8007818:	3501      	adds	r5, #1
 800781a:	b2ed      	uxtb	r5, r5
 800781c:	e7d8      	b.n	80077d0 <_scanf_float+0x18c>
 800781e:	f1ba 0f01 	cmp.w	sl, #1
 8007822:	f47f af41 	bne.w	80076a8 <_scanf_float+0x64>
 8007826:	f04f 0a02 	mov.w	sl, #2
 800782a:	e7d1      	b.n	80077d0 <_scanf_float+0x18c>
 800782c:	b97d      	cbnz	r5, 800784e <_scanf_float+0x20a>
 800782e:	f1b9 0f00 	cmp.w	r9, #0
 8007832:	f47f af3c 	bne.w	80076ae <_scanf_float+0x6a>
 8007836:	6822      	ldr	r2, [r4, #0]
 8007838:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800783c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007840:	f47f af39 	bne.w	80076b6 <_scanf_float+0x72>
 8007844:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007848:	2501      	movs	r5, #1
 800784a:	6022      	str	r2, [r4, #0]
 800784c:	e7c0      	b.n	80077d0 <_scanf_float+0x18c>
 800784e:	2d03      	cmp	r5, #3
 8007850:	d0e2      	beq.n	8007818 <_scanf_float+0x1d4>
 8007852:	2d05      	cmp	r5, #5
 8007854:	e7de      	b.n	8007814 <_scanf_float+0x1d0>
 8007856:	2d02      	cmp	r5, #2
 8007858:	f47f af26 	bne.w	80076a8 <_scanf_float+0x64>
 800785c:	2503      	movs	r5, #3
 800785e:	e7b7      	b.n	80077d0 <_scanf_float+0x18c>
 8007860:	2d06      	cmp	r5, #6
 8007862:	f47f af21 	bne.w	80076a8 <_scanf_float+0x64>
 8007866:	2507      	movs	r5, #7
 8007868:	e7b2      	b.n	80077d0 <_scanf_float+0x18c>
 800786a:	6822      	ldr	r2, [r4, #0]
 800786c:	0591      	lsls	r1, r2, #22
 800786e:	f57f af1b 	bpl.w	80076a8 <_scanf_float+0x64>
 8007872:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007876:	6022      	str	r2, [r4, #0]
 8007878:	f8cd 9004 	str.w	r9, [sp, #4]
 800787c:	e7a8      	b.n	80077d0 <_scanf_float+0x18c>
 800787e:	6822      	ldr	r2, [r4, #0]
 8007880:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007884:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007888:	d006      	beq.n	8007898 <_scanf_float+0x254>
 800788a:	0550      	lsls	r0, r2, #21
 800788c:	f57f af0c 	bpl.w	80076a8 <_scanf_float+0x64>
 8007890:	f1b9 0f00 	cmp.w	r9, #0
 8007894:	f43f af0f 	beq.w	80076b6 <_scanf_float+0x72>
 8007898:	0591      	lsls	r1, r2, #22
 800789a:	bf58      	it	pl
 800789c:	9901      	ldrpl	r1, [sp, #4]
 800789e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80078a2:	bf58      	it	pl
 80078a4:	eba9 0101 	subpl.w	r1, r9, r1
 80078a8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80078ac:	f04f 0900 	mov.w	r9, #0
 80078b0:	bf58      	it	pl
 80078b2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80078b6:	6022      	str	r2, [r4, #0]
 80078b8:	e78a      	b.n	80077d0 <_scanf_float+0x18c>
 80078ba:	f04f 0a03 	mov.w	sl, #3
 80078be:	e787      	b.n	80077d0 <_scanf_float+0x18c>
 80078c0:	4639      	mov	r1, r7
 80078c2:	4640      	mov	r0, r8
 80078c4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80078c8:	4798      	blx	r3
 80078ca:	2800      	cmp	r0, #0
 80078cc:	f43f aedf 	beq.w	800768e <_scanf_float+0x4a>
 80078d0:	e6ea      	b.n	80076a8 <_scanf_float+0x64>
 80078d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80078d6:	463a      	mov	r2, r7
 80078d8:	4640      	mov	r0, r8
 80078da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80078de:	4798      	blx	r3
 80078e0:	6923      	ldr	r3, [r4, #16]
 80078e2:	3b01      	subs	r3, #1
 80078e4:	6123      	str	r3, [r4, #16]
 80078e6:	e6ec      	b.n	80076c2 <_scanf_float+0x7e>
 80078e8:	1e6b      	subs	r3, r5, #1
 80078ea:	2b06      	cmp	r3, #6
 80078ec:	d825      	bhi.n	800793a <_scanf_float+0x2f6>
 80078ee:	2d02      	cmp	r5, #2
 80078f0:	d836      	bhi.n	8007960 <_scanf_float+0x31c>
 80078f2:	455e      	cmp	r6, fp
 80078f4:	f67f aee8 	bls.w	80076c8 <_scanf_float+0x84>
 80078f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80078fc:	463a      	mov	r2, r7
 80078fe:	4640      	mov	r0, r8
 8007900:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007904:	4798      	blx	r3
 8007906:	6923      	ldr	r3, [r4, #16]
 8007908:	3b01      	subs	r3, #1
 800790a:	6123      	str	r3, [r4, #16]
 800790c:	e7f1      	b.n	80078f2 <_scanf_float+0x2ae>
 800790e:	9802      	ldr	r0, [sp, #8]
 8007910:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007914:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007918:	463a      	mov	r2, r7
 800791a:	9002      	str	r0, [sp, #8]
 800791c:	4640      	mov	r0, r8
 800791e:	4798      	blx	r3
 8007920:	6923      	ldr	r3, [r4, #16]
 8007922:	3b01      	subs	r3, #1
 8007924:	6123      	str	r3, [r4, #16]
 8007926:	f10a 3aff 	add.w	sl, sl, #4294967295
 800792a:	fa5f fa8a 	uxtb.w	sl, sl
 800792e:	f1ba 0f02 	cmp.w	sl, #2
 8007932:	d1ec      	bne.n	800790e <_scanf_float+0x2ca>
 8007934:	3d03      	subs	r5, #3
 8007936:	b2ed      	uxtb	r5, r5
 8007938:	1b76      	subs	r6, r6, r5
 800793a:	6823      	ldr	r3, [r4, #0]
 800793c:	05da      	lsls	r2, r3, #23
 800793e:	d52f      	bpl.n	80079a0 <_scanf_float+0x35c>
 8007940:	055b      	lsls	r3, r3, #21
 8007942:	d510      	bpl.n	8007966 <_scanf_float+0x322>
 8007944:	455e      	cmp	r6, fp
 8007946:	f67f aebf 	bls.w	80076c8 <_scanf_float+0x84>
 800794a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800794e:	463a      	mov	r2, r7
 8007950:	4640      	mov	r0, r8
 8007952:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007956:	4798      	blx	r3
 8007958:	6923      	ldr	r3, [r4, #16]
 800795a:	3b01      	subs	r3, #1
 800795c:	6123      	str	r3, [r4, #16]
 800795e:	e7f1      	b.n	8007944 <_scanf_float+0x300>
 8007960:	46aa      	mov	sl, r5
 8007962:	9602      	str	r6, [sp, #8]
 8007964:	e7df      	b.n	8007926 <_scanf_float+0x2e2>
 8007966:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800796a:	6923      	ldr	r3, [r4, #16]
 800796c:	2965      	cmp	r1, #101	; 0x65
 800796e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007972:	f106 35ff 	add.w	r5, r6, #4294967295
 8007976:	6123      	str	r3, [r4, #16]
 8007978:	d00c      	beq.n	8007994 <_scanf_float+0x350>
 800797a:	2945      	cmp	r1, #69	; 0x45
 800797c:	d00a      	beq.n	8007994 <_scanf_float+0x350>
 800797e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007982:	463a      	mov	r2, r7
 8007984:	4640      	mov	r0, r8
 8007986:	4798      	blx	r3
 8007988:	6923      	ldr	r3, [r4, #16]
 800798a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800798e:	3b01      	subs	r3, #1
 8007990:	1eb5      	subs	r5, r6, #2
 8007992:	6123      	str	r3, [r4, #16]
 8007994:	463a      	mov	r2, r7
 8007996:	4640      	mov	r0, r8
 8007998:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800799c:	4798      	blx	r3
 800799e:	462e      	mov	r6, r5
 80079a0:	6825      	ldr	r5, [r4, #0]
 80079a2:	f015 0510 	ands.w	r5, r5, #16
 80079a6:	d155      	bne.n	8007a54 <_scanf_float+0x410>
 80079a8:	7035      	strb	r5, [r6, #0]
 80079aa:	6823      	ldr	r3, [r4, #0]
 80079ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80079b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079b4:	d11d      	bne.n	80079f2 <_scanf_float+0x3ae>
 80079b6:	9b01      	ldr	r3, [sp, #4]
 80079b8:	454b      	cmp	r3, r9
 80079ba:	eba3 0209 	sub.w	r2, r3, r9
 80079be:	d125      	bne.n	8007a0c <_scanf_float+0x3c8>
 80079c0:	2200      	movs	r2, #0
 80079c2:	4659      	mov	r1, fp
 80079c4:	4640      	mov	r0, r8
 80079c6:	f7ff f8f7 	bl	8006bb8 <_strtod_r>
 80079ca:	9b03      	ldr	r3, [sp, #12]
 80079cc:	f8d4 c000 	ldr.w	ip, [r4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f01c 0f02 	tst.w	ip, #2
 80079d6:	4606      	mov	r6, r0
 80079d8:	460f      	mov	r7, r1
 80079da:	f103 0204 	add.w	r2, r3, #4
 80079de:	d020      	beq.n	8007a22 <_scanf_float+0x3de>
 80079e0:	9903      	ldr	r1, [sp, #12]
 80079e2:	600a      	str	r2, [r1, #0]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	e9c3 6700 	strd	r6, r7, [r3]
 80079ea:	68e3      	ldr	r3, [r4, #12]
 80079ec:	3301      	adds	r3, #1
 80079ee:	60e3      	str	r3, [r4, #12]
 80079f0:	e66b      	b.n	80076ca <_scanf_float+0x86>
 80079f2:	9b04      	ldr	r3, [sp, #16]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d0e3      	beq.n	80079c0 <_scanf_float+0x37c>
 80079f8:	9905      	ldr	r1, [sp, #20]
 80079fa:	230a      	movs	r3, #10
 80079fc:	462a      	mov	r2, r5
 80079fe:	4640      	mov	r0, r8
 8007a00:	3101      	adds	r1, #1
 8007a02:	f7ff f9b5 	bl	8006d70 <_strtol_r>
 8007a06:	9b04      	ldr	r3, [sp, #16]
 8007a08:	9e05      	ldr	r6, [sp, #20]
 8007a0a:	1ac2      	subs	r2, r0, r3
 8007a0c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007a10:	429e      	cmp	r6, r3
 8007a12:	bf28      	it	cs
 8007a14:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007a18:	4630      	mov	r0, r6
 8007a1a:	490f      	ldr	r1, [pc, #60]	; (8007a58 <_scanf_float+0x414>)
 8007a1c:	f000 f8e2 	bl	8007be4 <siprintf>
 8007a20:	e7ce      	b.n	80079c0 <_scanf_float+0x37c>
 8007a22:	f01c 0f04 	tst.w	ip, #4
 8007a26:	d1db      	bne.n	80079e0 <_scanf_float+0x39c>
 8007a28:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8007a2c:	f8cc 2000 	str.w	r2, [ip]
 8007a30:	f8d3 8000 	ldr.w	r8, [r3]
 8007a34:	4602      	mov	r2, r0
 8007a36:	460b      	mov	r3, r1
 8007a38:	f7f8 ffe8 	bl	8000a0c <__aeabi_dcmpun>
 8007a3c:	b128      	cbz	r0, 8007a4a <_scanf_float+0x406>
 8007a3e:	4807      	ldr	r0, [pc, #28]	; (8007a5c <_scanf_float+0x418>)
 8007a40:	f000 fa72 	bl	8007f28 <nanf>
 8007a44:	f8c8 0000 	str.w	r0, [r8]
 8007a48:	e7cf      	b.n	80079ea <_scanf_float+0x3a6>
 8007a4a:	4630      	mov	r0, r6
 8007a4c:	4639      	mov	r1, r7
 8007a4e:	f7f9 f83b 	bl	8000ac8 <__aeabi_d2f>
 8007a52:	e7f7      	b.n	8007a44 <_scanf_float+0x400>
 8007a54:	2500      	movs	r5, #0
 8007a56:	e638      	b.n	80076ca <_scanf_float+0x86>
 8007a58:	0800a935 	.word	0x0800a935
 8007a5c:	0800a9ee 	.word	0x0800a9ee

08007a60 <std>:
 8007a60:	2300      	movs	r3, #0
 8007a62:	b510      	push	{r4, lr}
 8007a64:	4604      	mov	r4, r0
 8007a66:	e9c0 3300 	strd	r3, r3, [r0]
 8007a6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007a6e:	6083      	str	r3, [r0, #8]
 8007a70:	8181      	strh	r1, [r0, #12]
 8007a72:	6643      	str	r3, [r0, #100]	; 0x64
 8007a74:	81c2      	strh	r2, [r0, #14]
 8007a76:	6183      	str	r3, [r0, #24]
 8007a78:	4619      	mov	r1, r3
 8007a7a:	2208      	movs	r2, #8
 8007a7c:	305c      	adds	r0, #92	; 0x5c
 8007a7e:	f000 f914 	bl	8007caa <memset>
 8007a82:	4b0d      	ldr	r3, [pc, #52]	; (8007ab8 <std+0x58>)
 8007a84:	6224      	str	r4, [r4, #32]
 8007a86:	6263      	str	r3, [r4, #36]	; 0x24
 8007a88:	4b0c      	ldr	r3, [pc, #48]	; (8007abc <std+0x5c>)
 8007a8a:	62a3      	str	r3, [r4, #40]	; 0x28
 8007a8c:	4b0c      	ldr	r3, [pc, #48]	; (8007ac0 <std+0x60>)
 8007a8e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007a90:	4b0c      	ldr	r3, [pc, #48]	; (8007ac4 <std+0x64>)
 8007a92:	6323      	str	r3, [r4, #48]	; 0x30
 8007a94:	4b0c      	ldr	r3, [pc, #48]	; (8007ac8 <std+0x68>)
 8007a96:	429c      	cmp	r4, r3
 8007a98:	d006      	beq.n	8007aa8 <std+0x48>
 8007a9a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007a9e:	4294      	cmp	r4, r2
 8007aa0:	d002      	beq.n	8007aa8 <std+0x48>
 8007aa2:	33d0      	adds	r3, #208	; 0xd0
 8007aa4:	429c      	cmp	r4, r3
 8007aa6:	d105      	bne.n	8007ab4 <std+0x54>
 8007aa8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007aac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ab0:	f000 ba0c 	b.w	8007ecc <__retarget_lock_init_recursive>
 8007ab4:	bd10      	pop	{r4, pc}
 8007ab6:	bf00      	nop
 8007ab8:	08007c25 	.word	0x08007c25
 8007abc:	08007c47 	.word	0x08007c47
 8007ac0:	08007c7f 	.word	0x08007c7f
 8007ac4:	08007ca3 	.word	0x08007ca3
 8007ac8:	200005e8 	.word	0x200005e8

08007acc <stdio_exit_handler>:
 8007acc:	4a02      	ldr	r2, [pc, #8]	; (8007ad8 <stdio_exit_handler+0xc>)
 8007ace:	4903      	ldr	r1, [pc, #12]	; (8007adc <stdio_exit_handler+0x10>)
 8007ad0:	4803      	ldr	r0, [pc, #12]	; (8007ae0 <stdio_exit_handler+0x14>)
 8007ad2:	f000 b869 	b.w	8007ba8 <_fwalk_sglue>
 8007ad6:	bf00      	nop
 8007ad8:	2000000c 	.word	0x2000000c
 8007adc:	0800a0b9 	.word	0x0800a0b9
 8007ae0:	20000184 	.word	0x20000184

08007ae4 <cleanup_stdio>:
 8007ae4:	6841      	ldr	r1, [r0, #4]
 8007ae6:	4b0c      	ldr	r3, [pc, #48]	; (8007b18 <cleanup_stdio+0x34>)
 8007ae8:	b510      	push	{r4, lr}
 8007aea:	4299      	cmp	r1, r3
 8007aec:	4604      	mov	r4, r0
 8007aee:	d001      	beq.n	8007af4 <cleanup_stdio+0x10>
 8007af0:	f002 fae2 	bl	800a0b8 <_fflush_r>
 8007af4:	68a1      	ldr	r1, [r4, #8]
 8007af6:	4b09      	ldr	r3, [pc, #36]	; (8007b1c <cleanup_stdio+0x38>)
 8007af8:	4299      	cmp	r1, r3
 8007afa:	d002      	beq.n	8007b02 <cleanup_stdio+0x1e>
 8007afc:	4620      	mov	r0, r4
 8007afe:	f002 fadb 	bl	800a0b8 <_fflush_r>
 8007b02:	68e1      	ldr	r1, [r4, #12]
 8007b04:	4b06      	ldr	r3, [pc, #24]	; (8007b20 <cleanup_stdio+0x3c>)
 8007b06:	4299      	cmp	r1, r3
 8007b08:	d004      	beq.n	8007b14 <cleanup_stdio+0x30>
 8007b0a:	4620      	mov	r0, r4
 8007b0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b10:	f002 bad2 	b.w	800a0b8 <_fflush_r>
 8007b14:	bd10      	pop	{r4, pc}
 8007b16:	bf00      	nop
 8007b18:	200005e8 	.word	0x200005e8
 8007b1c:	20000650 	.word	0x20000650
 8007b20:	200006b8 	.word	0x200006b8

08007b24 <global_stdio_init.part.0>:
 8007b24:	b510      	push	{r4, lr}
 8007b26:	4b0b      	ldr	r3, [pc, #44]	; (8007b54 <global_stdio_init.part.0+0x30>)
 8007b28:	4c0b      	ldr	r4, [pc, #44]	; (8007b58 <global_stdio_init.part.0+0x34>)
 8007b2a:	4a0c      	ldr	r2, [pc, #48]	; (8007b5c <global_stdio_init.part.0+0x38>)
 8007b2c:	4620      	mov	r0, r4
 8007b2e:	601a      	str	r2, [r3, #0]
 8007b30:	2104      	movs	r1, #4
 8007b32:	2200      	movs	r2, #0
 8007b34:	f7ff ff94 	bl	8007a60 <std>
 8007b38:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	2109      	movs	r1, #9
 8007b40:	f7ff ff8e 	bl	8007a60 <std>
 8007b44:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007b48:	2202      	movs	r2, #2
 8007b4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b4e:	2112      	movs	r1, #18
 8007b50:	f7ff bf86 	b.w	8007a60 <std>
 8007b54:	20000720 	.word	0x20000720
 8007b58:	200005e8 	.word	0x200005e8
 8007b5c:	08007acd 	.word	0x08007acd

08007b60 <__sfp_lock_acquire>:
 8007b60:	4801      	ldr	r0, [pc, #4]	; (8007b68 <__sfp_lock_acquire+0x8>)
 8007b62:	f000 b9b4 	b.w	8007ece <__retarget_lock_acquire_recursive>
 8007b66:	bf00      	nop
 8007b68:	20000729 	.word	0x20000729

08007b6c <__sfp_lock_release>:
 8007b6c:	4801      	ldr	r0, [pc, #4]	; (8007b74 <__sfp_lock_release+0x8>)
 8007b6e:	f000 b9af 	b.w	8007ed0 <__retarget_lock_release_recursive>
 8007b72:	bf00      	nop
 8007b74:	20000729 	.word	0x20000729

08007b78 <__sinit>:
 8007b78:	b510      	push	{r4, lr}
 8007b7a:	4604      	mov	r4, r0
 8007b7c:	f7ff fff0 	bl	8007b60 <__sfp_lock_acquire>
 8007b80:	6a23      	ldr	r3, [r4, #32]
 8007b82:	b11b      	cbz	r3, 8007b8c <__sinit+0x14>
 8007b84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b88:	f7ff bff0 	b.w	8007b6c <__sfp_lock_release>
 8007b8c:	4b04      	ldr	r3, [pc, #16]	; (8007ba0 <__sinit+0x28>)
 8007b8e:	6223      	str	r3, [r4, #32]
 8007b90:	4b04      	ldr	r3, [pc, #16]	; (8007ba4 <__sinit+0x2c>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d1f5      	bne.n	8007b84 <__sinit+0xc>
 8007b98:	f7ff ffc4 	bl	8007b24 <global_stdio_init.part.0>
 8007b9c:	e7f2      	b.n	8007b84 <__sinit+0xc>
 8007b9e:	bf00      	nop
 8007ba0:	08007ae5 	.word	0x08007ae5
 8007ba4:	20000720 	.word	0x20000720

08007ba8 <_fwalk_sglue>:
 8007ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bac:	4607      	mov	r7, r0
 8007bae:	4688      	mov	r8, r1
 8007bb0:	4614      	mov	r4, r2
 8007bb2:	2600      	movs	r6, #0
 8007bb4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007bb8:	f1b9 0901 	subs.w	r9, r9, #1
 8007bbc:	d505      	bpl.n	8007bca <_fwalk_sglue+0x22>
 8007bbe:	6824      	ldr	r4, [r4, #0]
 8007bc0:	2c00      	cmp	r4, #0
 8007bc2:	d1f7      	bne.n	8007bb4 <_fwalk_sglue+0xc>
 8007bc4:	4630      	mov	r0, r6
 8007bc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bca:	89ab      	ldrh	r3, [r5, #12]
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d907      	bls.n	8007be0 <_fwalk_sglue+0x38>
 8007bd0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007bd4:	3301      	adds	r3, #1
 8007bd6:	d003      	beq.n	8007be0 <_fwalk_sglue+0x38>
 8007bd8:	4629      	mov	r1, r5
 8007bda:	4638      	mov	r0, r7
 8007bdc:	47c0      	blx	r8
 8007bde:	4306      	orrs	r6, r0
 8007be0:	3568      	adds	r5, #104	; 0x68
 8007be2:	e7e9      	b.n	8007bb8 <_fwalk_sglue+0x10>

08007be4 <siprintf>:
 8007be4:	b40e      	push	{r1, r2, r3}
 8007be6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007bea:	b500      	push	{lr}
 8007bec:	b09c      	sub	sp, #112	; 0x70
 8007bee:	ab1d      	add	r3, sp, #116	; 0x74
 8007bf0:	9002      	str	r0, [sp, #8]
 8007bf2:	9006      	str	r0, [sp, #24]
 8007bf4:	9107      	str	r1, [sp, #28]
 8007bf6:	9104      	str	r1, [sp, #16]
 8007bf8:	4808      	ldr	r0, [pc, #32]	; (8007c1c <siprintf+0x38>)
 8007bfa:	4909      	ldr	r1, [pc, #36]	; (8007c20 <siprintf+0x3c>)
 8007bfc:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c00:	9105      	str	r1, [sp, #20]
 8007c02:	6800      	ldr	r0, [r0, #0]
 8007c04:	a902      	add	r1, sp, #8
 8007c06:	9301      	str	r3, [sp, #4]
 8007c08:	f002 f8d6 	bl	8009db8 <_svfiprintf_r>
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	9b02      	ldr	r3, [sp, #8]
 8007c10:	701a      	strb	r2, [r3, #0]
 8007c12:	b01c      	add	sp, #112	; 0x70
 8007c14:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c18:	b003      	add	sp, #12
 8007c1a:	4770      	bx	lr
 8007c1c:	200001d0 	.word	0x200001d0
 8007c20:	ffff0208 	.word	0xffff0208

08007c24 <__sread>:
 8007c24:	b510      	push	{r4, lr}
 8007c26:	460c      	mov	r4, r1
 8007c28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c2c:	f000 f8f0 	bl	8007e10 <_read_r>
 8007c30:	2800      	cmp	r0, #0
 8007c32:	bfab      	itete	ge
 8007c34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007c36:	89a3      	ldrhlt	r3, [r4, #12]
 8007c38:	181b      	addge	r3, r3, r0
 8007c3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007c3e:	bfac      	ite	ge
 8007c40:	6563      	strge	r3, [r4, #84]	; 0x54
 8007c42:	81a3      	strhlt	r3, [r4, #12]
 8007c44:	bd10      	pop	{r4, pc}

08007c46 <__swrite>:
 8007c46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c4a:	461f      	mov	r7, r3
 8007c4c:	898b      	ldrh	r3, [r1, #12]
 8007c4e:	4605      	mov	r5, r0
 8007c50:	05db      	lsls	r3, r3, #23
 8007c52:	460c      	mov	r4, r1
 8007c54:	4616      	mov	r6, r2
 8007c56:	d505      	bpl.n	8007c64 <__swrite+0x1e>
 8007c58:	2302      	movs	r3, #2
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c60:	f000 f8c4 	bl	8007dec <_lseek_r>
 8007c64:	89a3      	ldrh	r3, [r4, #12]
 8007c66:	4632      	mov	r2, r6
 8007c68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c6c:	81a3      	strh	r3, [r4, #12]
 8007c6e:	4628      	mov	r0, r5
 8007c70:	463b      	mov	r3, r7
 8007c72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c7a:	f000 b8eb 	b.w	8007e54 <_write_r>

08007c7e <__sseek>:
 8007c7e:	b510      	push	{r4, lr}
 8007c80:	460c      	mov	r4, r1
 8007c82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c86:	f000 f8b1 	bl	8007dec <_lseek_r>
 8007c8a:	1c43      	adds	r3, r0, #1
 8007c8c:	89a3      	ldrh	r3, [r4, #12]
 8007c8e:	bf15      	itete	ne
 8007c90:	6560      	strne	r0, [r4, #84]	; 0x54
 8007c92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007c96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007c9a:	81a3      	strheq	r3, [r4, #12]
 8007c9c:	bf18      	it	ne
 8007c9e:	81a3      	strhne	r3, [r4, #12]
 8007ca0:	bd10      	pop	{r4, pc}

08007ca2 <__sclose>:
 8007ca2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ca6:	f000 b891 	b.w	8007dcc <_close_r>

08007caa <memset>:
 8007caa:	4603      	mov	r3, r0
 8007cac:	4402      	add	r2, r0
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d100      	bne.n	8007cb4 <memset+0xa>
 8007cb2:	4770      	bx	lr
 8007cb4:	f803 1b01 	strb.w	r1, [r3], #1
 8007cb8:	e7f9      	b.n	8007cae <memset+0x4>

08007cba <strncmp>:
 8007cba:	b510      	push	{r4, lr}
 8007cbc:	b16a      	cbz	r2, 8007cda <strncmp+0x20>
 8007cbe:	3901      	subs	r1, #1
 8007cc0:	1884      	adds	r4, r0, r2
 8007cc2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007cc6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	d103      	bne.n	8007cd6 <strncmp+0x1c>
 8007cce:	42a0      	cmp	r0, r4
 8007cd0:	d001      	beq.n	8007cd6 <strncmp+0x1c>
 8007cd2:	2a00      	cmp	r2, #0
 8007cd4:	d1f5      	bne.n	8007cc2 <strncmp+0x8>
 8007cd6:	1ad0      	subs	r0, r2, r3
 8007cd8:	bd10      	pop	{r4, pc}
 8007cda:	4610      	mov	r0, r2
 8007cdc:	e7fc      	b.n	8007cd8 <strncmp+0x1e>
	...

08007ce0 <strtok>:
 8007ce0:	4b16      	ldr	r3, [pc, #88]	; (8007d3c <strtok+0x5c>)
 8007ce2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ce6:	681f      	ldr	r7, [r3, #0]
 8007ce8:	4605      	mov	r5, r0
 8007cea:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8007cec:	460e      	mov	r6, r1
 8007cee:	b9ec      	cbnz	r4, 8007d2c <strtok+0x4c>
 8007cf0:	2050      	movs	r0, #80	; 0x50
 8007cf2:	f7fe f88f 	bl	8005e14 <malloc>
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	6478      	str	r0, [r7, #68]	; 0x44
 8007cfa:	b920      	cbnz	r0, 8007d06 <strtok+0x26>
 8007cfc:	215b      	movs	r1, #91	; 0x5b
 8007cfe:	4b10      	ldr	r3, [pc, #64]	; (8007d40 <strtok+0x60>)
 8007d00:	4810      	ldr	r0, [pc, #64]	; (8007d44 <strtok+0x64>)
 8007d02:	f000 f915 	bl	8007f30 <__assert_func>
 8007d06:	e9c0 4400 	strd	r4, r4, [r0]
 8007d0a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8007d0e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8007d12:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8007d16:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8007d1a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8007d1e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8007d22:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8007d26:	6184      	str	r4, [r0, #24]
 8007d28:	7704      	strb	r4, [r0, #28]
 8007d2a:	6244      	str	r4, [r0, #36]	; 0x24
 8007d2c:	4631      	mov	r1, r6
 8007d2e:	4628      	mov	r0, r5
 8007d30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d32:	2301      	movs	r3, #1
 8007d34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d38:	f000 b806 	b.w	8007d48 <__strtok_r>
 8007d3c:	200001d0 	.word	0x200001d0
 8007d40:	0800a93a 	.word	0x0800a93a
 8007d44:	0800a951 	.word	0x0800a951

08007d48 <__strtok_r>:
 8007d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d4a:	b908      	cbnz	r0, 8007d50 <__strtok_r+0x8>
 8007d4c:	6810      	ldr	r0, [r2, #0]
 8007d4e:	b188      	cbz	r0, 8007d74 <__strtok_r+0x2c>
 8007d50:	4604      	mov	r4, r0
 8007d52:	460f      	mov	r7, r1
 8007d54:	4620      	mov	r0, r4
 8007d56:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007d5a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007d5e:	b91e      	cbnz	r6, 8007d68 <__strtok_r+0x20>
 8007d60:	b965      	cbnz	r5, 8007d7c <__strtok_r+0x34>
 8007d62:	4628      	mov	r0, r5
 8007d64:	6015      	str	r5, [r2, #0]
 8007d66:	e005      	b.n	8007d74 <__strtok_r+0x2c>
 8007d68:	42b5      	cmp	r5, r6
 8007d6a:	d1f6      	bne.n	8007d5a <__strtok_r+0x12>
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d1f0      	bne.n	8007d52 <__strtok_r+0xa>
 8007d70:	6014      	str	r4, [r2, #0]
 8007d72:	7003      	strb	r3, [r0, #0]
 8007d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d76:	461c      	mov	r4, r3
 8007d78:	e00c      	b.n	8007d94 <__strtok_r+0x4c>
 8007d7a:	b915      	cbnz	r5, 8007d82 <__strtok_r+0x3a>
 8007d7c:	460e      	mov	r6, r1
 8007d7e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007d82:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007d86:	42ab      	cmp	r3, r5
 8007d88:	d1f7      	bne.n	8007d7a <__strtok_r+0x32>
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d0f3      	beq.n	8007d76 <__strtok_r+0x2e>
 8007d8e:	2300      	movs	r3, #0
 8007d90:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007d94:	6014      	str	r4, [r2, #0]
 8007d96:	e7ed      	b.n	8007d74 <__strtok_r+0x2c>

08007d98 <strstr>:
 8007d98:	780a      	ldrb	r2, [r1, #0]
 8007d9a:	b570      	push	{r4, r5, r6, lr}
 8007d9c:	b96a      	cbnz	r2, 8007dba <strstr+0x22>
 8007d9e:	bd70      	pop	{r4, r5, r6, pc}
 8007da0:	429a      	cmp	r2, r3
 8007da2:	d109      	bne.n	8007db8 <strstr+0x20>
 8007da4:	460c      	mov	r4, r1
 8007da6:	4605      	mov	r5, r0
 8007da8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d0f6      	beq.n	8007d9e <strstr+0x6>
 8007db0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007db4:	429e      	cmp	r6, r3
 8007db6:	d0f7      	beq.n	8007da8 <strstr+0x10>
 8007db8:	3001      	adds	r0, #1
 8007dba:	7803      	ldrb	r3, [r0, #0]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d1ef      	bne.n	8007da0 <strstr+0x8>
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	e7ec      	b.n	8007d9e <strstr+0x6>

08007dc4 <_localeconv_r>:
 8007dc4:	4800      	ldr	r0, [pc, #0]	; (8007dc8 <_localeconv_r+0x4>)
 8007dc6:	4770      	bx	lr
 8007dc8:	20000108 	.word	0x20000108

08007dcc <_close_r>:
 8007dcc:	b538      	push	{r3, r4, r5, lr}
 8007dce:	2300      	movs	r3, #0
 8007dd0:	4d05      	ldr	r5, [pc, #20]	; (8007de8 <_close_r+0x1c>)
 8007dd2:	4604      	mov	r4, r0
 8007dd4:	4608      	mov	r0, r1
 8007dd6:	602b      	str	r3, [r5, #0]
 8007dd8:	f7f9 fe5c 	bl	8001a94 <_close>
 8007ddc:	1c43      	adds	r3, r0, #1
 8007dde:	d102      	bne.n	8007de6 <_close_r+0x1a>
 8007de0:	682b      	ldr	r3, [r5, #0]
 8007de2:	b103      	cbz	r3, 8007de6 <_close_r+0x1a>
 8007de4:	6023      	str	r3, [r4, #0]
 8007de6:	bd38      	pop	{r3, r4, r5, pc}
 8007de8:	20000724 	.word	0x20000724

08007dec <_lseek_r>:
 8007dec:	b538      	push	{r3, r4, r5, lr}
 8007dee:	4604      	mov	r4, r0
 8007df0:	4608      	mov	r0, r1
 8007df2:	4611      	mov	r1, r2
 8007df4:	2200      	movs	r2, #0
 8007df6:	4d05      	ldr	r5, [pc, #20]	; (8007e0c <_lseek_r+0x20>)
 8007df8:	602a      	str	r2, [r5, #0]
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	f7f9 fe6e 	bl	8001adc <_lseek>
 8007e00:	1c43      	adds	r3, r0, #1
 8007e02:	d102      	bne.n	8007e0a <_lseek_r+0x1e>
 8007e04:	682b      	ldr	r3, [r5, #0]
 8007e06:	b103      	cbz	r3, 8007e0a <_lseek_r+0x1e>
 8007e08:	6023      	str	r3, [r4, #0]
 8007e0a:	bd38      	pop	{r3, r4, r5, pc}
 8007e0c:	20000724 	.word	0x20000724

08007e10 <_read_r>:
 8007e10:	b538      	push	{r3, r4, r5, lr}
 8007e12:	4604      	mov	r4, r0
 8007e14:	4608      	mov	r0, r1
 8007e16:	4611      	mov	r1, r2
 8007e18:	2200      	movs	r2, #0
 8007e1a:	4d05      	ldr	r5, [pc, #20]	; (8007e30 <_read_r+0x20>)
 8007e1c:	602a      	str	r2, [r5, #0]
 8007e1e:	461a      	mov	r2, r3
 8007e20:	f7f9 fdff 	bl	8001a22 <_read>
 8007e24:	1c43      	adds	r3, r0, #1
 8007e26:	d102      	bne.n	8007e2e <_read_r+0x1e>
 8007e28:	682b      	ldr	r3, [r5, #0]
 8007e2a:	b103      	cbz	r3, 8007e2e <_read_r+0x1e>
 8007e2c:	6023      	str	r3, [r4, #0]
 8007e2e:	bd38      	pop	{r3, r4, r5, pc}
 8007e30:	20000724 	.word	0x20000724

08007e34 <_sbrk_r>:
 8007e34:	b538      	push	{r3, r4, r5, lr}
 8007e36:	2300      	movs	r3, #0
 8007e38:	4d05      	ldr	r5, [pc, #20]	; (8007e50 <_sbrk_r+0x1c>)
 8007e3a:	4604      	mov	r4, r0
 8007e3c:	4608      	mov	r0, r1
 8007e3e:	602b      	str	r3, [r5, #0]
 8007e40:	f7f9 fe58 	bl	8001af4 <_sbrk>
 8007e44:	1c43      	adds	r3, r0, #1
 8007e46:	d102      	bne.n	8007e4e <_sbrk_r+0x1a>
 8007e48:	682b      	ldr	r3, [r5, #0]
 8007e4a:	b103      	cbz	r3, 8007e4e <_sbrk_r+0x1a>
 8007e4c:	6023      	str	r3, [r4, #0]
 8007e4e:	bd38      	pop	{r3, r4, r5, pc}
 8007e50:	20000724 	.word	0x20000724

08007e54 <_write_r>:
 8007e54:	b538      	push	{r3, r4, r5, lr}
 8007e56:	4604      	mov	r4, r0
 8007e58:	4608      	mov	r0, r1
 8007e5a:	4611      	mov	r1, r2
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	4d05      	ldr	r5, [pc, #20]	; (8007e74 <_write_r+0x20>)
 8007e60:	602a      	str	r2, [r5, #0]
 8007e62:	461a      	mov	r2, r3
 8007e64:	f7f9 fdfa 	bl	8001a5c <_write>
 8007e68:	1c43      	adds	r3, r0, #1
 8007e6a:	d102      	bne.n	8007e72 <_write_r+0x1e>
 8007e6c:	682b      	ldr	r3, [r5, #0]
 8007e6e:	b103      	cbz	r3, 8007e72 <_write_r+0x1e>
 8007e70:	6023      	str	r3, [r4, #0]
 8007e72:	bd38      	pop	{r3, r4, r5, pc}
 8007e74:	20000724 	.word	0x20000724

08007e78 <__errno>:
 8007e78:	4b01      	ldr	r3, [pc, #4]	; (8007e80 <__errno+0x8>)
 8007e7a:	6818      	ldr	r0, [r3, #0]
 8007e7c:	4770      	bx	lr
 8007e7e:	bf00      	nop
 8007e80:	200001d0 	.word	0x200001d0

08007e84 <__libc_init_array>:
 8007e84:	b570      	push	{r4, r5, r6, lr}
 8007e86:	2600      	movs	r6, #0
 8007e88:	4d0c      	ldr	r5, [pc, #48]	; (8007ebc <__libc_init_array+0x38>)
 8007e8a:	4c0d      	ldr	r4, [pc, #52]	; (8007ec0 <__libc_init_array+0x3c>)
 8007e8c:	1b64      	subs	r4, r4, r5
 8007e8e:	10a4      	asrs	r4, r4, #2
 8007e90:	42a6      	cmp	r6, r4
 8007e92:	d109      	bne.n	8007ea8 <__libc_init_array+0x24>
 8007e94:	f002 fc56 	bl	800a744 <_init>
 8007e98:	2600      	movs	r6, #0
 8007e9a:	4d0a      	ldr	r5, [pc, #40]	; (8007ec4 <__libc_init_array+0x40>)
 8007e9c:	4c0a      	ldr	r4, [pc, #40]	; (8007ec8 <__libc_init_array+0x44>)
 8007e9e:	1b64      	subs	r4, r4, r5
 8007ea0:	10a4      	asrs	r4, r4, #2
 8007ea2:	42a6      	cmp	r6, r4
 8007ea4:	d105      	bne.n	8007eb2 <__libc_init_array+0x2e>
 8007ea6:	bd70      	pop	{r4, r5, r6, pc}
 8007ea8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007eac:	4798      	blx	r3
 8007eae:	3601      	adds	r6, #1
 8007eb0:	e7ee      	b.n	8007e90 <__libc_init_array+0xc>
 8007eb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007eb6:	4798      	blx	r3
 8007eb8:	3601      	adds	r6, #1
 8007eba:	e7f2      	b.n	8007ea2 <__libc_init_array+0x1e>
 8007ebc:	0800ac30 	.word	0x0800ac30
 8007ec0:	0800ac30 	.word	0x0800ac30
 8007ec4:	0800ac30 	.word	0x0800ac30
 8007ec8:	0800ac34 	.word	0x0800ac34

08007ecc <__retarget_lock_init_recursive>:
 8007ecc:	4770      	bx	lr

08007ece <__retarget_lock_acquire_recursive>:
 8007ece:	4770      	bx	lr

08007ed0 <__retarget_lock_release_recursive>:
 8007ed0:	4770      	bx	lr

08007ed2 <strcpy>:
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ed8:	f803 2b01 	strb.w	r2, [r3], #1
 8007edc:	2a00      	cmp	r2, #0
 8007ede:	d1f9      	bne.n	8007ed4 <strcpy+0x2>
 8007ee0:	4770      	bx	lr

08007ee2 <memchr>:
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	b510      	push	{r4, lr}
 8007ee6:	b2c9      	uxtb	r1, r1
 8007ee8:	4402      	add	r2, r0
 8007eea:	4293      	cmp	r3, r2
 8007eec:	4618      	mov	r0, r3
 8007eee:	d101      	bne.n	8007ef4 <memchr+0x12>
 8007ef0:	2000      	movs	r0, #0
 8007ef2:	e003      	b.n	8007efc <memchr+0x1a>
 8007ef4:	7804      	ldrb	r4, [r0, #0]
 8007ef6:	3301      	adds	r3, #1
 8007ef8:	428c      	cmp	r4, r1
 8007efa:	d1f6      	bne.n	8007eea <memchr+0x8>
 8007efc:	bd10      	pop	{r4, pc}

08007efe <memcpy>:
 8007efe:	440a      	add	r2, r1
 8007f00:	4291      	cmp	r1, r2
 8007f02:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f06:	d100      	bne.n	8007f0a <memcpy+0xc>
 8007f08:	4770      	bx	lr
 8007f0a:	b510      	push	{r4, lr}
 8007f0c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f10:	4291      	cmp	r1, r2
 8007f12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f16:	d1f9      	bne.n	8007f0c <memcpy+0xe>
 8007f18:	bd10      	pop	{r4, pc}
	...

08007f1c <nan>:
 8007f1c:	2000      	movs	r0, #0
 8007f1e:	4901      	ldr	r1, [pc, #4]	; (8007f24 <nan+0x8>)
 8007f20:	4770      	bx	lr
 8007f22:	bf00      	nop
 8007f24:	7ff80000 	.word	0x7ff80000

08007f28 <nanf>:
 8007f28:	4800      	ldr	r0, [pc, #0]	; (8007f2c <nanf+0x4>)
 8007f2a:	4770      	bx	lr
 8007f2c:	7fc00000 	.word	0x7fc00000

08007f30 <__assert_func>:
 8007f30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007f32:	4614      	mov	r4, r2
 8007f34:	461a      	mov	r2, r3
 8007f36:	4b09      	ldr	r3, [pc, #36]	; (8007f5c <__assert_func+0x2c>)
 8007f38:	4605      	mov	r5, r0
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	68d8      	ldr	r0, [r3, #12]
 8007f3e:	b14c      	cbz	r4, 8007f54 <__assert_func+0x24>
 8007f40:	4b07      	ldr	r3, [pc, #28]	; (8007f60 <__assert_func+0x30>)
 8007f42:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007f46:	9100      	str	r1, [sp, #0]
 8007f48:	462b      	mov	r3, r5
 8007f4a:	4906      	ldr	r1, [pc, #24]	; (8007f64 <__assert_func+0x34>)
 8007f4c:	f002 f8dc 	bl	800a108 <fiprintf>
 8007f50:	f002 f906 	bl	800a160 <abort>
 8007f54:	4b04      	ldr	r3, [pc, #16]	; (8007f68 <__assert_func+0x38>)
 8007f56:	461c      	mov	r4, r3
 8007f58:	e7f3      	b.n	8007f42 <__assert_func+0x12>
 8007f5a:	bf00      	nop
 8007f5c:	200001d0 	.word	0x200001d0
 8007f60:	0800a9b3 	.word	0x0800a9b3
 8007f64:	0800a9c0 	.word	0x0800a9c0
 8007f68:	0800a9ee 	.word	0x0800a9ee

08007f6c <quorem>:
 8007f6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f70:	6903      	ldr	r3, [r0, #16]
 8007f72:	690c      	ldr	r4, [r1, #16]
 8007f74:	4607      	mov	r7, r0
 8007f76:	42a3      	cmp	r3, r4
 8007f78:	db7f      	blt.n	800807a <quorem+0x10e>
 8007f7a:	3c01      	subs	r4, #1
 8007f7c:	f100 0514 	add.w	r5, r0, #20
 8007f80:	f101 0814 	add.w	r8, r1, #20
 8007f84:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f88:	9301      	str	r3, [sp, #4]
 8007f8a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007f8e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f92:	3301      	adds	r3, #1
 8007f94:	429a      	cmp	r2, r3
 8007f96:	fbb2 f6f3 	udiv	r6, r2, r3
 8007f9a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007f9e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007fa2:	d331      	bcc.n	8008008 <quorem+0x9c>
 8007fa4:	f04f 0e00 	mov.w	lr, #0
 8007fa8:	4640      	mov	r0, r8
 8007faa:	46ac      	mov	ip, r5
 8007fac:	46f2      	mov	sl, lr
 8007fae:	f850 2b04 	ldr.w	r2, [r0], #4
 8007fb2:	b293      	uxth	r3, r2
 8007fb4:	fb06 e303 	mla	r3, r6, r3, lr
 8007fb8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007fbc:	0c1a      	lsrs	r2, r3, #16
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	fb06 220e 	mla	r2, r6, lr, r2
 8007fc4:	ebaa 0303 	sub.w	r3, sl, r3
 8007fc8:	f8dc a000 	ldr.w	sl, [ip]
 8007fcc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007fd0:	fa1f fa8a 	uxth.w	sl, sl
 8007fd4:	4453      	add	r3, sl
 8007fd6:	f8dc a000 	ldr.w	sl, [ip]
 8007fda:	b292      	uxth	r2, r2
 8007fdc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007fe0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007fea:	4581      	cmp	r9, r0
 8007fec:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007ff0:	f84c 3b04 	str.w	r3, [ip], #4
 8007ff4:	d2db      	bcs.n	8007fae <quorem+0x42>
 8007ff6:	f855 300b 	ldr.w	r3, [r5, fp]
 8007ffa:	b92b      	cbnz	r3, 8008008 <quorem+0x9c>
 8007ffc:	9b01      	ldr	r3, [sp, #4]
 8007ffe:	3b04      	subs	r3, #4
 8008000:	429d      	cmp	r5, r3
 8008002:	461a      	mov	r2, r3
 8008004:	d32d      	bcc.n	8008062 <quorem+0xf6>
 8008006:	613c      	str	r4, [r7, #16]
 8008008:	4638      	mov	r0, r7
 800800a:	f001 fc95 	bl	8009938 <__mcmp>
 800800e:	2800      	cmp	r0, #0
 8008010:	db23      	blt.n	800805a <quorem+0xee>
 8008012:	4629      	mov	r1, r5
 8008014:	2000      	movs	r0, #0
 8008016:	3601      	adds	r6, #1
 8008018:	f858 2b04 	ldr.w	r2, [r8], #4
 800801c:	f8d1 c000 	ldr.w	ip, [r1]
 8008020:	b293      	uxth	r3, r2
 8008022:	1ac3      	subs	r3, r0, r3
 8008024:	0c12      	lsrs	r2, r2, #16
 8008026:	fa1f f08c 	uxth.w	r0, ip
 800802a:	4403      	add	r3, r0
 800802c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008030:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008034:	b29b      	uxth	r3, r3
 8008036:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800803a:	45c1      	cmp	r9, r8
 800803c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008040:	f841 3b04 	str.w	r3, [r1], #4
 8008044:	d2e8      	bcs.n	8008018 <quorem+0xac>
 8008046:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800804a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800804e:	b922      	cbnz	r2, 800805a <quorem+0xee>
 8008050:	3b04      	subs	r3, #4
 8008052:	429d      	cmp	r5, r3
 8008054:	461a      	mov	r2, r3
 8008056:	d30a      	bcc.n	800806e <quorem+0x102>
 8008058:	613c      	str	r4, [r7, #16]
 800805a:	4630      	mov	r0, r6
 800805c:	b003      	add	sp, #12
 800805e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008062:	6812      	ldr	r2, [r2, #0]
 8008064:	3b04      	subs	r3, #4
 8008066:	2a00      	cmp	r2, #0
 8008068:	d1cd      	bne.n	8008006 <quorem+0x9a>
 800806a:	3c01      	subs	r4, #1
 800806c:	e7c8      	b.n	8008000 <quorem+0x94>
 800806e:	6812      	ldr	r2, [r2, #0]
 8008070:	3b04      	subs	r3, #4
 8008072:	2a00      	cmp	r2, #0
 8008074:	d1f0      	bne.n	8008058 <quorem+0xec>
 8008076:	3c01      	subs	r4, #1
 8008078:	e7eb      	b.n	8008052 <quorem+0xe6>
 800807a:	2000      	movs	r0, #0
 800807c:	e7ee      	b.n	800805c <quorem+0xf0>
	...

08008080 <_dtoa_r>:
 8008080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008084:	4616      	mov	r6, r2
 8008086:	461f      	mov	r7, r3
 8008088:	69c4      	ldr	r4, [r0, #28]
 800808a:	b099      	sub	sp, #100	; 0x64
 800808c:	4605      	mov	r5, r0
 800808e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008092:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8008096:	b974      	cbnz	r4, 80080b6 <_dtoa_r+0x36>
 8008098:	2010      	movs	r0, #16
 800809a:	f7fd febb 	bl	8005e14 <malloc>
 800809e:	4602      	mov	r2, r0
 80080a0:	61e8      	str	r0, [r5, #28]
 80080a2:	b920      	cbnz	r0, 80080ae <_dtoa_r+0x2e>
 80080a4:	21ef      	movs	r1, #239	; 0xef
 80080a6:	4bac      	ldr	r3, [pc, #688]	; (8008358 <_dtoa_r+0x2d8>)
 80080a8:	48ac      	ldr	r0, [pc, #688]	; (800835c <_dtoa_r+0x2dc>)
 80080aa:	f7ff ff41 	bl	8007f30 <__assert_func>
 80080ae:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80080b2:	6004      	str	r4, [r0, #0]
 80080b4:	60c4      	str	r4, [r0, #12]
 80080b6:	69eb      	ldr	r3, [r5, #28]
 80080b8:	6819      	ldr	r1, [r3, #0]
 80080ba:	b151      	cbz	r1, 80080d2 <_dtoa_r+0x52>
 80080bc:	685a      	ldr	r2, [r3, #4]
 80080be:	2301      	movs	r3, #1
 80080c0:	4093      	lsls	r3, r2
 80080c2:	604a      	str	r2, [r1, #4]
 80080c4:	608b      	str	r3, [r1, #8]
 80080c6:	4628      	mov	r0, r5
 80080c8:	f001 f9b2 	bl	8009430 <_Bfree>
 80080cc:	2200      	movs	r2, #0
 80080ce:	69eb      	ldr	r3, [r5, #28]
 80080d0:	601a      	str	r2, [r3, #0]
 80080d2:	1e3b      	subs	r3, r7, #0
 80080d4:	bfaf      	iteee	ge
 80080d6:	2300      	movge	r3, #0
 80080d8:	2201      	movlt	r2, #1
 80080da:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80080de:	9305      	strlt	r3, [sp, #20]
 80080e0:	bfa8      	it	ge
 80080e2:	f8c8 3000 	strge.w	r3, [r8]
 80080e6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80080ea:	4b9d      	ldr	r3, [pc, #628]	; (8008360 <_dtoa_r+0x2e0>)
 80080ec:	bfb8      	it	lt
 80080ee:	f8c8 2000 	strlt.w	r2, [r8]
 80080f2:	ea33 0309 	bics.w	r3, r3, r9
 80080f6:	d119      	bne.n	800812c <_dtoa_r+0xac>
 80080f8:	f242 730f 	movw	r3, #9999	; 0x270f
 80080fc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80080fe:	6013      	str	r3, [r2, #0]
 8008100:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008104:	4333      	orrs	r3, r6
 8008106:	f000 8589 	beq.w	8008c1c <_dtoa_r+0xb9c>
 800810a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800810c:	b953      	cbnz	r3, 8008124 <_dtoa_r+0xa4>
 800810e:	4b95      	ldr	r3, [pc, #596]	; (8008364 <_dtoa_r+0x2e4>)
 8008110:	e023      	b.n	800815a <_dtoa_r+0xda>
 8008112:	4b95      	ldr	r3, [pc, #596]	; (8008368 <_dtoa_r+0x2e8>)
 8008114:	9303      	str	r3, [sp, #12]
 8008116:	3308      	adds	r3, #8
 8008118:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800811a:	6013      	str	r3, [r2, #0]
 800811c:	9803      	ldr	r0, [sp, #12]
 800811e:	b019      	add	sp, #100	; 0x64
 8008120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008124:	4b8f      	ldr	r3, [pc, #572]	; (8008364 <_dtoa_r+0x2e4>)
 8008126:	9303      	str	r3, [sp, #12]
 8008128:	3303      	adds	r3, #3
 800812a:	e7f5      	b.n	8008118 <_dtoa_r+0x98>
 800812c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008130:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8008134:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008138:	2200      	movs	r2, #0
 800813a:	2300      	movs	r3, #0
 800813c:	f7f8 fc34 	bl	80009a8 <__aeabi_dcmpeq>
 8008140:	4680      	mov	r8, r0
 8008142:	b160      	cbz	r0, 800815e <_dtoa_r+0xde>
 8008144:	2301      	movs	r3, #1
 8008146:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008148:	6013      	str	r3, [r2, #0]
 800814a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800814c:	2b00      	cmp	r3, #0
 800814e:	f000 8562 	beq.w	8008c16 <_dtoa_r+0xb96>
 8008152:	4b86      	ldr	r3, [pc, #536]	; (800836c <_dtoa_r+0x2ec>)
 8008154:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008156:	6013      	str	r3, [r2, #0]
 8008158:	3b01      	subs	r3, #1
 800815a:	9303      	str	r3, [sp, #12]
 800815c:	e7de      	b.n	800811c <_dtoa_r+0x9c>
 800815e:	ab16      	add	r3, sp, #88	; 0x58
 8008160:	9301      	str	r3, [sp, #4]
 8008162:	ab17      	add	r3, sp, #92	; 0x5c
 8008164:	9300      	str	r3, [sp, #0]
 8008166:	4628      	mov	r0, r5
 8008168:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800816c:	f001 fcf4 	bl	8009b58 <__d2b>
 8008170:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008174:	4682      	mov	sl, r0
 8008176:	2c00      	cmp	r4, #0
 8008178:	d07e      	beq.n	8008278 <_dtoa_r+0x1f8>
 800817a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800817e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008180:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8008184:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008188:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800818c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008190:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8008194:	4619      	mov	r1, r3
 8008196:	2200      	movs	r2, #0
 8008198:	4b75      	ldr	r3, [pc, #468]	; (8008370 <_dtoa_r+0x2f0>)
 800819a:	f7f7 ffe5 	bl	8000168 <__aeabi_dsub>
 800819e:	a368      	add	r3, pc, #416	; (adr r3, 8008340 <_dtoa_r+0x2c0>)
 80081a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a4:	f7f8 f998 	bl	80004d8 <__aeabi_dmul>
 80081a8:	a367      	add	r3, pc, #412	; (adr r3, 8008348 <_dtoa_r+0x2c8>)
 80081aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ae:	f7f7 ffdd 	bl	800016c <__adddf3>
 80081b2:	4606      	mov	r6, r0
 80081b4:	4620      	mov	r0, r4
 80081b6:	460f      	mov	r7, r1
 80081b8:	f7f8 f924 	bl	8000404 <__aeabi_i2d>
 80081bc:	a364      	add	r3, pc, #400	; (adr r3, 8008350 <_dtoa_r+0x2d0>)
 80081be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c2:	f7f8 f989 	bl	80004d8 <__aeabi_dmul>
 80081c6:	4602      	mov	r2, r0
 80081c8:	460b      	mov	r3, r1
 80081ca:	4630      	mov	r0, r6
 80081cc:	4639      	mov	r1, r7
 80081ce:	f7f7 ffcd 	bl	800016c <__adddf3>
 80081d2:	4606      	mov	r6, r0
 80081d4:	460f      	mov	r7, r1
 80081d6:	f7f8 fc2f 	bl	8000a38 <__aeabi_d2iz>
 80081da:	2200      	movs	r2, #0
 80081dc:	4683      	mov	fp, r0
 80081de:	2300      	movs	r3, #0
 80081e0:	4630      	mov	r0, r6
 80081e2:	4639      	mov	r1, r7
 80081e4:	f7f8 fbea 	bl	80009bc <__aeabi_dcmplt>
 80081e8:	b148      	cbz	r0, 80081fe <_dtoa_r+0x17e>
 80081ea:	4658      	mov	r0, fp
 80081ec:	f7f8 f90a 	bl	8000404 <__aeabi_i2d>
 80081f0:	4632      	mov	r2, r6
 80081f2:	463b      	mov	r3, r7
 80081f4:	f7f8 fbd8 	bl	80009a8 <__aeabi_dcmpeq>
 80081f8:	b908      	cbnz	r0, 80081fe <_dtoa_r+0x17e>
 80081fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80081fe:	f1bb 0f16 	cmp.w	fp, #22
 8008202:	d857      	bhi.n	80082b4 <_dtoa_r+0x234>
 8008204:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008208:	4b5a      	ldr	r3, [pc, #360]	; (8008374 <_dtoa_r+0x2f4>)
 800820a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800820e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008212:	f7f8 fbd3 	bl	80009bc <__aeabi_dcmplt>
 8008216:	2800      	cmp	r0, #0
 8008218:	d04e      	beq.n	80082b8 <_dtoa_r+0x238>
 800821a:	2300      	movs	r3, #0
 800821c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008220:	930f      	str	r3, [sp, #60]	; 0x3c
 8008222:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008224:	1b1b      	subs	r3, r3, r4
 8008226:	1e5a      	subs	r2, r3, #1
 8008228:	bf46      	itte	mi
 800822a:	f1c3 0901 	rsbmi	r9, r3, #1
 800822e:	2300      	movmi	r3, #0
 8008230:	f04f 0900 	movpl.w	r9, #0
 8008234:	9209      	str	r2, [sp, #36]	; 0x24
 8008236:	bf48      	it	mi
 8008238:	9309      	strmi	r3, [sp, #36]	; 0x24
 800823a:	f1bb 0f00 	cmp.w	fp, #0
 800823e:	db3d      	blt.n	80082bc <_dtoa_r+0x23c>
 8008240:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008242:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8008246:	445b      	add	r3, fp
 8008248:	9309      	str	r3, [sp, #36]	; 0x24
 800824a:	2300      	movs	r3, #0
 800824c:	930a      	str	r3, [sp, #40]	; 0x28
 800824e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008250:	2b09      	cmp	r3, #9
 8008252:	d867      	bhi.n	8008324 <_dtoa_r+0x2a4>
 8008254:	2b05      	cmp	r3, #5
 8008256:	bfc4      	itt	gt
 8008258:	3b04      	subgt	r3, #4
 800825a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800825c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800825e:	bfc8      	it	gt
 8008260:	2400      	movgt	r4, #0
 8008262:	f1a3 0302 	sub.w	r3, r3, #2
 8008266:	bfd8      	it	le
 8008268:	2401      	movle	r4, #1
 800826a:	2b03      	cmp	r3, #3
 800826c:	f200 8086 	bhi.w	800837c <_dtoa_r+0x2fc>
 8008270:	e8df f003 	tbb	[pc, r3]
 8008274:	5637392c 	.word	0x5637392c
 8008278:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800827c:	441c      	add	r4, r3
 800827e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8008282:	2b20      	cmp	r3, #32
 8008284:	bfc1      	itttt	gt
 8008286:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800828a:	fa09 f903 	lslgt.w	r9, r9, r3
 800828e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8008292:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008296:	bfd6      	itet	le
 8008298:	f1c3 0320 	rsble	r3, r3, #32
 800829c:	ea49 0003 	orrgt.w	r0, r9, r3
 80082a0:	fa06 f003 	lslle.w	r0, r6, r3
 80082a4:	f7f8 f89e 	bl	80003e4 <__aeabi_ui2d>
 80082a8:	2201      	movs	r2, #1
 80082aa:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80082ae:	3c01      	subs	r4, #1
 80082b0:	9213      	str	r2, [sp, #76]	; 0x4c
 80082b2:	e76f      	b.n	8008194 <_dtoa_r+0x114>
 80082b4:	2301      	movs	r3, #1
 80082b6:	e7b3      	b.n	8008220 <_dtoa_r+0x1a0>
 80082b8:	900f      	str	r0, [sp, #60]	; 0x3c
 80082ba:	e7b2      	b.n	8008222 <_dtoa_r+0x1a2>
 80082bc:	f1cb 0300 	rsb	r3, fp, #0
 80082c0:	930a      	str	r3, [sp, #40]	; 0x28
 80082c2:	2300      	movs	r3, #0
 80082c4:	eba9 090b 	sub.w	r9, r9, fp
 80082c8:	930e      	str	r3, [sp, #56]	; 0x38
 80082ca:	e7c0      	b.n	800824e <_dtoa_r+0x1ce>
 80082cc:	2300      	movs	r3, #0
 80082ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80082d0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	dc55      	bgt.n	8008382 <_dtoa_r+0x302>
 80082d6:	2301      	movs	r3, #1
 80082d8:	461a      	mov	r2, r3
 80082da:	9306      	str	r3, [sp, #24]
 80082dc:	9308      	str	r3, [sp, #32]
 80082de:	9223      	str	r2, [sp, #140]	; 0x8c
 80082e0:	e00b      	b.n	80082fa <_dtoa_r+0x27a>
 80082e2:	2301      	movs	r3, #1
 80082e4:	e7f3      	b.n	80082ce <_dtoa_r+0x24e>
 80082e6:	2300      	movs	r3, #0
 80082e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80082ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80082ec:	445b      	add	r3, fp
 80082ee:	9306      	str	r3, [sp, #24]
 80082f0:	3301      	adds	r3, #1
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	9308      	str	r3, [sp, #32]
 80082f6:	bfb8      	it	lt
 80082f8:	2301      	movlt	r3, #1
 80082fa:	2100      	movs	r1, #0
 80082fc:	2204      	movs	r2, #4
 80082fe:	69e8      	ldr	r0, [r5, #28]
 8008300:	f102 0614 	add.w	r6, r2, #20
 8008304:	429e      	cmp	r6, r3
 8008306:	d940      	bls.n	800838a <_dtoa_r+0x30a>
 8008308:	6041      	str	r1, [r0, #4]
 800830a:	4628      	mov	r0, r5
 800830c:	f001 f850 	bl	80093b0 <_Balloc>
 8008310:	9003      	str	r0, [sp, #12]
 8008312:	2800      	cmp	r0, #0
 8008314:	d13c      	bne.n	8008390 <_dtoa_r+0x310>
 8008316:	4602      	mov	r2, r0
 8008318:	f240 11af 	movw	r1, #431	; 0x1af
 800831c:	4b16      	ldr	r3, [pc, #88]	; (8008378 <_dtoa_r+0x2f8>)
 800831e:	e6c3      	b.n	80080a8 <_dtoa_r+0x28>
 8008320:	2301      	movs	r3, #1
 8008322:	e7e1      	b.n	80082e8 <_dtoa_r+0x268>
 8008324:	2401      	movs	r4, #1
 8008326:	2300      	movs	r3, #0
 8008328:	940b      	str	r4, [sp, #44]	; 0x2c
 800832a:	9322      	str	r3, [sp, #136]	; 0x88
 800832c:	f04f 33ff 	mov.w	r3, #4294967295
 8008330:	2200      	movs	r2, #0
 8008332:	9306      	str	r3, [sp, #24]
 8008334:	9308      	str	r3, [sp, #32]
 8008336:	2312      	movs	r3, #18
 8008338:	e7d1      	b.n	80082de <_dtoa_r+0x25e>
 800833a:	bf00      	nop
 800833c:	f3af 8000 	nop.w
 8008340:	636f4361 	.word	0x636f4361
 8008344:	3fd287a7 	.word	0x3fd287a7
 8008348:	8b60c8b3 	.word	0x8b60c8b3
 800834c:	3fc68a28 	.word	0x3fc68a28
 8008350:	509f79fb 	.word	0x509f79fb
 8008354:	3fd34413 	.word	0x3fd34413
 8008358:	0800a93a 	.word	0x0800a93a
 800835c:	0800a9fc 	.word	0x0800a9fc
 8008360:	7ff00000 	.word	0x7ff00000
 8008364:	0800a9f8 	.word	0x0800a9f8
 8008368:	0800a9ef 	.word	0x0800a9ef
 800836c:	0800a912 	.word	0x0800a912
 8008370:	3ff80000 	.word	0x3ff80000
 8008374:	0800ab48 	.word	0x0800ab48
 8008378:	0800aa54 	.word	0x0800aa54
 800837c:	2301      	movs	r3, #1
 800837e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008380:	e7d4      	b.n	800832c <_dtoa_r+0x2ac>
 8008382:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008384:	9306      	str	r3, [sp, #24]
 8008386:	9308      	str	r3, [sp, #32]
 8008388:	e7b7      	b.n	80082fa <_dtoa_r+0x27a>
 800838a:	3101      	adds	r1, #1
 800838c:	0052      	lsls	r2, r2, #1
 800838e:	e7b7      	b.n	8008300 <_dtoa_r+0x280>
 8008390:	69eb      	ldr	r3, [r5, #28]
 8008392:	9a03      	ldr	r2, [sp, #12]
 8008394:	601a      	str	r2, [r3, #0]
 8008396:	9b08      	ldr	r3, [sp, #32]
 8008398:	2b0e      	cmp	r3, #14
 800839a:	f200 80a8 	bhi.w	80084ee <_dtoa_r+0x46e>
 800839e:	2c00      	cmp	r4, #0
 80083a0:	f000 80a5 	beq.w	80084ee <_dtoa_r+0x46e>
 80083a4:	f1bb 0f00 	cmp.w	fp, #0
 80083a8:	dd34      	ble.n	8008414 <_dtoa_r+0x394>
 80083aa:	4b9a      	ldr	r3, [pc, #616]	; (8008614 <_dtoa_r+0x594>)
 80083ac:	f00b 020f 	and.w	r2, fp, #15
 80083b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80083b4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80083b8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80083bc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80083c0:	ea4f 142b 	mov.w	r4, fp, asr #4
 80083c4:	d016      	beq.n	80083f4 <_dtoa_r+0x374>
 80083c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80083ca:	4b93      	ldr	r3, [pc, #588]	; (8008618 <_dtoa_r+0x598>)
 80083cc:	2703      	movs	r7, #3
 80083ce:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80083d2:	f7f8 f9ab 	bl	800072c <__aeabi_ddiv>
 80083d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80083da:	f004 040f 	and.w	r4, r4, #15
 80083de:	4e8e      	ldr	r6, [pc, #568]	; (8008618 <_dtoa_r+0x598>)
 80083e0:	b954      	cbnz	r4, 80083f8 <_dtoa_r+0x378>
 80083e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80083e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80083ea:	f7f8 f99f 	bl	800072c <__aeabi_ddiv>
 80083ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80083f2:	e029      	b.n	8008448 <_dtoa_r+0x3c8>
 80083f4:	2702      	movs	r7, #2
 80083f6:	e7f2      	b.n	80083de <_dtoa_r+0x35e>
 80083f8:	07e1      	lsls	r1, r4, #31
 80083fa:	d508      	bpl.n	800840e <_dtoa_r+0x38e>
 80083fc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008400:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008404:	f7f8 f868 	bl	80004d8 <__aeabi_dmul>
 8008408:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800840c:	3701      	adds	r7, #1
 800840e:	1064      	asrs	r4, r4, #1
 8008410:	3608      	adds	r6, #8
 8008412:	e7e5      	b.n	80083e0 <_dtoa_r+0x360>
 8008414:	f000 80a5 	beq.w	8008562 <_dtoa_r+0x4e2>
 8008418:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800841c:	f1cb 0400 	rsb	r4, fp, #0
 8008420:	4b7c      	ldr	r3, [pc, #496]	; (8008614 <_dtoa_r+0x594>)
 8008422:	f004 020f 	and.w	r2, r4, #15
 8008426:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800842a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800842e:	f7f8 f853 	bl	80004d8 <__aeabi_dmul>
 8008432:	2702      	movs	r7, #2
 8008434:	2300      	movs	r3, #0
 8008436:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800843a:	4e77      	ldr	r6, [pc, #476]	; (8008618 <_dtoa_r+0x598>)
 800843c:	1124      	asrs	r4, r4, #4
 800843e:	2c00      	cmp	r4, #0
 8008440:	f040 8084 	bne.w	800854c <_dtoa_r+0x4cc>
 8008444:	2b00      	cmp	r3, #0
 8008446:	d1d2      	bne.n	80083ee <_dtoa_r+0x36e>
 8008448:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800844c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008450:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008452:	2b00      	cmp	r3, #0
 8008454:	f000 8087 	beq.w	8008566 <_dtoa_r+0x4e6>
 8008458:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800845c:	2200      	movs	r2, #0
 800845e:	4b6f      	ldr	r3, [pc, #444]	; (800861c <_dtoa_r+0x59c>)
 8008460:	f7f8 faac 	bl	80009bc <__aeabi_dcmplt>
 8008464:	2800      	cmp	r0, #0
 8008466:	d07e      	beq.n	8008566 <_dtoa_r+0x4e6>
 8008468:	9b08      	ldr	r3, [sp, #32]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d07b      	beq.n	8008566 <_dtoa_r+0x4e6>
 800846e:	9b06      	ldr	r3, [sp, #24]
 8008470:	2b00      	cmp	r3, #0
 8008472:	dd38      	ble.n	80084e6 <_dtoa_r+0x466>
 8008474:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008478:	2200      	movs	r2, #0
 800847a:	4b69      	ldr	r3, [pc, #420]	; (8008620 <_dtoa_r+0x5a0>)
 800847c:	f7f8 f82c 	bl	80004d8 <__aeabi_dmul>
 8008480:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008484:	9c06      	ldr	r4, [sp, #24]
 8008486:	f10b 38ff 	add.w	r8, fp, #4294967295
 800848a:	3701      	adds	r7, #1
 800848c:	4638      	mov	r0, r7
 800848e:	f7f7 ffb9 	bl	8000404 <__aeabi_i2d>
 8008492:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008496:	f7f8 f81f 	bl	80004d8 <__aeabi_dmul>
 800849a:	2200      	movs	r2, #0
 800849c:	4b61      	ldr	r3, [pc, #388]	; (8008624 <_dtoa_r+0x5a4>)
 800849e:	f7f7 fe65 	bl	800016c <__adddf3>
 80084a2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80084a6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80084aa:	9611      	str	r6, [sp, #68]	; 0x44
 80084ac:	2c00      	cmp	r4, #0
 80084ae:	d15d      	bne.n	800856c <_dtoa_r+0x4ec>
 80084b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80084b4:	2200      	movs	r2, #0
 80084b6:	4b5c      	ldr	r3, [pc, #368]	; (8008628 <_dtoa_r+0x5a8>)
 80084b8:	f7f7 fe56 	bl	8000168 <__aeabi_dsub>
 80084bc:	4602      	mov	r2, r0
 80084be:	460b      	mov	r3, r1
 80084c0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80084c4:	4633      	mov	r3, r6
 80084c6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80084c8:	f7f8 fa96 	bl	80009f8 <__aeabi_dcmpgt>
 80084cc:	2800      	cmp	r0, #0
 80084ce:	f040 8295 	bne.w	80089fc <_dtoa_r+0x97c>
 80084d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80084d6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80084d8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80084dc:	f7f8 fa6e 	bl	80009bc <__aeabi_dcmplt>
 80084e0:	2800      	cmp	r0, #0
 80084e2:	f040 8289 	bne.w	80089f8 <_dtoa_r+0x978>
 80084e6:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80084ea:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80084ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	f2c0 8151 	blt.w	8008798 <_dtoa_r+0x718>
 80084f6:	f1bb 0f0e 	cmp.w	fp, #14
 80084fa:	f300 814d 	bgt.w	8008798 <_dtoa_r+0x718>
 80084fe:	4b45      	ldr	r3, [pc, #276]	; (8008614 <_dtoa_r+0x594>)
 8008500:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008504:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008508:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800850c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800850e:	2b00      	cmp	r3, #0
 8008510:	f280 80da 	bge.w	80086c8 <_dtoa_r+0x648>
 8008514:	9b08      	ldr	r3, [sp, #32]
 8008516:	2b00      	cmp	r3, #0
 8008518:	f300 80d6 	bgt.w	80086c8 <_dtoa_r+0x648>
 800851c:	f040 826b 	bne.w	80089f6 <_dtoa_r+0x976>
 8008520:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008524:	2200      	movs	r2, #0
 8008526:	4b40      	ldr	r3, [pc, #256]	; (8008628 <_dtoa_r+0x5a8>)
 8008528:	f7f7 ffd6 	bl	80004d8 <__aeabi_dmul>
 800852c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008530:	f7f8 fa58 	bl	80009e4 <__aeabi_dcmpge>
 8008534:	9c08      	ldr	r4, [sp, #32]
 8008536:	4626      	mov	r6, r4
 8008538:	2800      	cmp	r0, #0
 800853a:	f040 8241 	bne.w	80089c0 <_dtoa_r+0x940>
 800853e:	2331      	movs	r3, #49	; 0x31
 8008540:	9f03      	ldr	r7, [sp, #12]
 8008542:	f10b 0b01 	add.w	fp, fp, #1
 8008546:	f807 3b01 	strb.w	r3, [r7], #1
 800854a:	e23d      	b.n	80089c8 <_dtoa_r+0x948>
 800854c:	07e2      	lsls	r2, r4, #31
 800854e:	d505      	bpl.n	800855c <_dtoa_r+0x4dc>
 8008550:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008554:	f7f7 ffc0 	bl	80004d8 <__aeabi_dmul>
 8008558:	2301      	movs	r3, #1
 800855a:	3701      	adds	r7, #1
 800855c:	1064      	asrs	r4, r4, #1
 800855e:	3608      	adds	r6, #8
 8008560:	e76d      	b.n	800843e <_dtoa_r+0x3be>
 8008562:	2702      	movs	r7, #2
 8008564:	e770      	b.n	8008448 <_dtoa_r+0x3c8>
 8008566:	46d8      	mov	r8, fp
 8008568:	9c08      	ldr	r4, [sp, #32]
 800856a:	e78f      	b.n	800848c <_dtoa_r+0x40c>
 800856c:	9903      	ldr	r1, [sp, #12]
 800856e:	4b29      	ldr	r3, [pc, #164]	; (8008614 <_dtoa_r+0x594>)
 8008570:	4421      	add	r1, r4
 8008572:	9112      	str	r1, [sp, #72]	; 0x48
 8008574:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008576:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800857a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800857e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008582:	2900      	cmp	r1, #0
 8008584:	d054      	beq.n	8008630 <_dtoa_r+0x5b0>
 8008586:	2000      	movs	r0, #0
 8008588:	4928      	ldr	r1, [pc, #160]	; (800862c <_dtoa_r+0x5ac>)
 800858a:	f7f8 f8cf 	bl	800072c <__aeabi_ddiv>
 800858e:	463b      	mov	r3, r7
 8008590:	4632      	mov	r2, r6
 8008592:	f7f7 fde9 	bl	8000168 <__aeabi_dsub>
 8008596:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800859a:	9f03      	ldr	r7, [sp, #12]
 800859c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80085a0:	f7f8 fa4a 	bl	8000a38 <__aeabi_d2iz>
 80085a4:	4604      	mov	r4, r0
 80085a6:	f7f7 ff2d 	bl	8000404 <__aeabi_i2d>
 80085aa:	4602      	mov	r2, r0
 80085ac:	460b      	mov	r3, r1
 80085ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80085b2:	f7f7 fdd9 	bl	8000168 <__aeabi_dsub>
 80085b6:	4602      	mov	r2, r0
 80085b8:	460b      	mov	r3, r1
 80085ba:	3430      	adds	r4, #48	; 0x30
 80085bc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80085c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80085c4:	f807 4b01 	strb.w	r4, [r7], #1
 80085c8:	f7f8 f9f8 	bl	80009bc <__aeabi_dcmplt>
 80085cc:	2800      	cmp	r0, #0
 80085ce:	d173      	bne.n	80086b8 <_dtoa_r+0x638>
 80085d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085d4:	2000      	movs	r0, #0
 80085d6:	4911      	ldr	r1, [pc, #68]	; (800861c <_dtoa_r+0x59c>)
 80085d8:	f7f7 fdc6 	bl	8000168 <__aeabi_dsub>
 80085dc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80085e0:	f7f8 f9ec 	bl	80009bc <__aeabi_dcmplt>
 80085e4:	2800      	cmp	r0, #0
 80085e6:	f040 80b6 	bne.w	8008756 <_dtoa_r+0x6d6>
 80085ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80085ec:	429f      	cmp	r7, r3
 80085ee:	f43f af7a 	beq.w	80084e6 <_dtoa_r+0x466>
 80085f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80085f6:	2200      	movs	r2, #0
 80085f8:	4b09      	ldr	r3, [pc, #36]	; (8008620 <_dtoa_r+0x5a0>)
 80085fa:	f7f7 ff6d 	bl	80004d8 <__aeabi_dmul>
 80085fe:	2200      	movs	r2, #0
 8008600:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008604:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008608:	4b05      	ldr	r3, [pc, #20]	; (8008620 <_dtoa_r+0x5a0>)
 800860a:	f7f7 ff65 	bl	80004d8 <__aeabi_dmul>
 800860e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008612:	e7c3      	b.n	800859c <_dtoa_r+0x51c>
 8008614:	0800ab48 	.word	0x0800ab48
 8008618:	0800ab20 	.word	0x0800ab20
 800861c:	3ff00000 	.word	0x3ff00000
 8008620:	40240000 	.word	0x40240000
 8008624:	401c0000 	.word	0x401c0000
 8008628:	40140000 	.word	0x40140000
 800862c:	3fe00000 	.word	0x3fe00000
 8008630:	4630      	mov	r0, r6
 8008632:	4639      	mov	r1, r7
 8008634:	f7f7 ff50 	bl	80004d8 <__aeabi_dmul>
 8008638:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800863a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800863e:	9c03      	ldr	r4, [sp, #12]
 8008640:	9314      	str	r3, [sp, #80]	; 0x50
 8008642:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008646:	f7f8 f9f7 	bl	8000a38 <__aeabi_d2iz>
 800864a:	9015      	str	r0, [sp, #84]	; 0x54
 800864c:	f7f7 feda 	bl	8000404 <__aeabi_i2d>
 8008650:	4602      	mov	r2, r0
 8008652:	460b      	mov	r3, r1
 8008654:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008658:	f7f7 fd86 	bl	8000168 <__aeabi_dsub>
 800865c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800865e:	4606      	mov	r6, r0
 8008660:	3330      	adds	r3, #48	; 0x30
 8008662:	f804 3b01 	strb.w	r3, [r4], #1
 8008666:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008668:	460f      	mov	r7, r1
 800866a:	429c      	cmp	r4, r3
 800866c:	f04f 0200 	mov.w	r2, #0
 8008670:	d124      	bne.n	80086bc <_dtoa_r+0x63c>
 8008672:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008676:	4baf      	ldr	r3, [pc, #700]	; (8008934 <_dtoa_r+0x8b4>)
 8008678:	f7f7 fd78 	bl	800016c <__adddf3>
 800867c:	4602      	mov	r2, r0
 800867e:	460b      	mov	r3, r1
 8008680:	4630      	mov	r0, r6
 8008682:	4639      	mov	r1, r7
 8008684:	f7f8 f9b8 	bl	80009f8 <__aeabi_dcmpgt>
 8008688:	2800      	cmp	r0, #0
 800868a:	d163      	bne.n	8008754 <_dtoa_r+0x6d4>
 800868c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008690:	2000      	movs	r0, #0
 8008692:	49a8      	ldr	r1, [pc, #672]	; (8008934 <_dtoa_r+0x8b4>)
 8008694:	f7f7 fd68 	bl	8000168 <__aeabi_dsub>
 8008698:	4602      	mov	r2, r0
 800869a:	460b      	mov	r3, r1
 800869c:	4630      	mov	r0, r6
 800869e:	4639      	mov	r1, r7
 80086a0:	f7f8 f98c 	bl	80009bc <__aeabi_dcmplt>
 80086a4:	2800      	cmp	r0, #0
 80086a6:	f43f af1e 	beq.w	80084e6 <_dtoa_r+0x466>
 80086aa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80086ac:	1e7b      	subs	r3, r7, #1
 80086ae:	9314      	str	r3, [sp, #80]	; 0x50
 80086b0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80086b4:	2b30      	cmp	r3, #48	; 0x30
 80086b6:	d0f8      	beq.n	80086aa <_dtoa_r+0x62a>
 80086b8:	46c3      	mov	fp, r8
 80086ba:	e03b      	b.n	8008734 <_dtoa_r+0x6b4>
 80086bc:	4b9e      	ldr	r3, [pc, #632]	; (8008938 <_dtoa_r+0x8b8>)
 80086be:	f7f7 ff0b 	bl	80004d8 <__aeabi_dmul>
 80086c2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80086c6:	e7bc      	b.n	8008642 <_dtoa_r+0x5c2>
 80086c8:	9f03      	ldr	r7, [sp, #12]
 80086ca:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80086ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80086d2:	4640      	mov	r0, r8
 80086d4:	4649      	mov	r1, r9
 80086d6:	f7f8 f829 	bl	800072c <__aeabi_ddiv>
 80086da:	f7f8 f9ad 	bl	8000a38 <__aeabi_d2iz>
 80086de:	4604      	mov	r4, r0
 80086e0:	f7f7 fe90 	bl	8000404 <__aeabi_i2d>
 80086e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80086e8:	f7f7 fef6 	bl	80004d8 <__aeabi_dmul>
 80086ec:	4602      	mov	r2, r0
 80086ee:	460b      	mov	r3, r1
 80086f0:	4640      	mov	r0, r8
 80086f2:	4649      	mov	r1, r9
 80086f4:	f7f7 fd38 	bl	8000168 <__aeabi_dsub>
 80086f8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80086fc:	f807 6b01 	strb.w	r6, [r7], #1
 8008700:	9e03      	ldr	r6, [sp, #12]
 8008702:	f8dd c020 	ldr.w	ip, [sp, #32]
 8008706:	1bbe      	subs	r6, r7, r6
 8008708:	45b4      	cmp	ip, r6
 800870a:	4602      	mov	r2, r0
 800870c:	460b      	mov	r3, r1
 800870e:	d136      	bne.n	800877e <_dtoa_r+0x6fe>
 8008710:	f7f7 fd2c 	bl	800016c <__adddf3>
 8008714:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008718:	4680      	mov	r8, r0
 800871a:	4689      	mov	r9, r1
 800871c:	f7f8 f96c 	bl	80009f8 <__aeabi_dcmpgt>
 8008720:	bb58      	cbnz	r0, 800877a <_dtoa_r+0x6fa>
 8008722:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008726:	4640      	mov	r0, r8
 8008728:	4649      	mov	r1, r9
 800872a:	f7f8 f93d 	bl	80009a8 <__aeabi_dcmpeq>
 800872e:	b108      	cbz	r0, 8008734 <_dtoa_r+0x6b4>
 8008730:	07e3      	lsls	r3, r4, #31
 8008732:	d422      	bmi.n	800877a <_dtoa_r+0x6fa>
 8008734:	4651      	mov	r1, sl
 8008736:	4628      	mov	r0, r5
 8008738:	f000 fe7a 	bl	8009430 <_Bfree>
 800873c:	2300      	movs	r3, #0
 800873e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008740:	703b      	strb	r3, [r7, #0]
 8008742:	f10b 0301 	add.w	r3, fp, #1
 8008746:	6013      	str	r3, [r2, #0]
 8008748:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800874a:	2b00      	cmp	r3, #0
 800874c:	f43f ace6 	beq.w	800811c <_dtoa_r+0x9c>
 8008750:	601f      	str	r7, [r3, #0]
 8008752:	e4e3      	b.n	800811c <_dtoa_r+0x9c>
 8008754:	4627      	mov	r7, r4
 8008756:	463b      	mov	r3, r7
 8008758:	461f      	mov	r7, r3
 800875a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800875e:	2a39      	cmp	r2, #57	; 0x39
 8008760:	d107      	bne.n	8008772 <_dtoa_r+0x6f2>
 8008762:	9a03      	ldr	r2, [sp, #12]
 8008764:	429a      	cmp	r2, r3
 8008766:	d1f7      	bne.n	8008758 <_dtoa_r+0x6d8>
 8008768:	2230      	movs	r2, #48	; 0x30
 800876a:	9903      	ldr	r1, [sp, #12]
 800876c:	f108 0801 	add.w	r8, r8, #1
 8008770:	700a      	strb	r2, [r1, #0]
 8008772:	781a      	ldrb	r2, [r3, #0]
 8008774:	3201      	adds	r2, #1
 8008776:	701a      	strb	r2, [r3, #0]
 8008778:	e79e      	b.n	80086b8 <_dtoa_r+0x638>
 800877a:	46d8      	mov	r8, fp
 800877c:	e7eb      	b.n	8008756 <_dtoa_r+0x6d6>
 800877e:	2200      	movs	r2, #0
 8008780:	4b6d      	ldr	r3, [pc, #436]	; (8008938 <_dtoa_r+0x8b8>)
 8008782:	f7f7 fea9 	bl	80004d8 <__aeabi_dmul>
 8008786:	2200      	movs	r2, #0
 8008788:	2300      	movs	r3, #0
 800878a:	4680      	mov	r8, r0
 800878c:	4689      	mov	r9, r1
 800878e:	f7f8 f90b 	bl	80009a8 <__aeabi_dcmpeq>
 8008792:	2800      	cmp	r0, #0
 8008794:	d09b      	beq.n	80086ce <_dtoa_r+0x64e>
 8008796:	e7cd      	b.n	8008734 <_dtoa_r+0x6b4>
 8008798:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800879a:	2a00      	cmp	r2, #0
 800879c:	f000 80c4 	beq.w	8008928 <_dtoa_r+0x8a8>
 80087a0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80087a2:	2a01      	cmp	r2, #1
 80087a4:	f300 80a8 	bgt.w	80088f8 <_dtoa_r+0x878>
 80087a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80087aa:	2a00      	cmp	r2, #0
 80087ac:	f000 80a0 	beq.w	80088f0 <_dtoa_r+0x870>
 80087b0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80087b4:	464f      	mov	r7, r9
 80087b6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80087b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087ba:	2101      	movs	r1, #1
 80087bc:	441a      	add	r2, r3
 80087be:	4628      	mov	r0, r5
 80087c0:	4499      	add	r9, r3
 80087c2:	9209      	str	r2, [sp, #36]	; 0x24
 80087c4:	f000 ff34 	bl	8009630 <__i2b>
 80087c8:	4606      	mov	r6, r0
 80087ca:	b15f      	cbz	r7, 80087e4 <_dtoa_r+0x764>
 80087cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	dd08      	ble.n	80087e4 <_dtoa_r+0x764>
 80087d2:	42bb      	cmp	r3, r7
 80087d4:	bfa8      	it	ge
 80087d6:	463b      	movge	r3, r7
 80087d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087da:	eba9 0903 	sub.w	r9, r9, r3
 80087de:	1aff      	subs	r7, r7, r3
 80087e0:	1ad3      	subs	r3, r2, r3
 80087e2:	9309      	str	r3, [sp, #36]	; 0x24
 80087e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087e6:	b1f3      	cbz	r3, 8008826 <_dtoa_r+0x7a6>
 80087e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	f000 80a0 	beq.w	8008930 <_dtoa_r+0x8b0>
 80087f0:	2c00      	cmp	r4, #0
 80087f2:	dd10      	ble.n	8008816 <_dtoa_r+0x796>
 80087f4:	4631      	mov	r1, r6
 80087f6:	4622      	mov	r2, r4
 80087f8:	4628      	mov	r0, r5
 80087fa:	f000 ffd7 	bl	80097ac <__pow5mult>
 80087fe:	4652      	mov	r2, sl
 8008800:	4601      	mov	r1, r0
 8008802:	4606      	mov	r6, r0
 8008804:	4628      	mov	r0, r5
 8008806:	f000 ff29 	bl	800965c <__multiply>
 800880a:	4680      	mov	r8, r0
 800880c:	4651      	mov	r1, sl
 800880e:	4628      	mov	r0, r5
 8008810:	f000 fe0e 	bl	8009430 <_Bfree>
 8008814:	46c2      	mov	sl, r8
 8008816:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008818:	1b1a      	subs	r2, r3, r4
 800881a:	d004      	beq.n	8008826 <_dtoa_r+0x7a6>
 800881c:	4651      	mov	r1, sl
 800881e:	4628      	mov	r0, r5
 8008820:	f000 ffc4 	bl	80097ac <__pow5mult>
 8008824:	4682      	mov	sl, r0
 8008826:	2101      	movs	r1, #1
 8008828:	4628      	mov	r0, r5
 800882a:	f000 ff01 	bl	8009630 <__i2b>
 800882e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008830:	4604      	mov	r4, r0
 8008832:	2b00      	cmp	r3, #0
 8008834:	f340 8082 	ble.w	800893c <_dtoa_r+0x8bc>
 8008838:	461a      	mov	r2, r3
 800883a:	4601      	mov	r1, r0
 800883c:	4628      	mov	r0, r5
 800883e:	f000 ffb5 	bl	80097ac <__pow5mult>
 8008842:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008844:	4604      	mov	r4, r0
 8008846:	2b01      	cmp	r3, #1
 8008848:	dd7b      	ble.n	8008942 <_dtoa_r+0x8c2>
 800884a:	f04f 0800 	mov.w	r8, #0
 800884e:	6923      	ldr	r3, [r4, #16]
 8008850:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008854:	6918      	ldr	r0, [r3, #16]
 8008856:	f000 fe9d 	bl	8009594 <__hi0bits>
 800885a:	f1c0 0020 	rsb	r0, r0, #32
 800885e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008860:	4418      	add	r0, r3
 8008862:	f010 001f 	ands.w	r0, r0, #31
 8008866:	f000 8092 	beq.w	800898e <_dtoa_r+0x90e>
 800886a:	f1c0 0320 	rsb	r3, r0, #32
 800886e:	2b04      	cmp	r3, #4
 8008870:	f340 8085 	ble.w	800897e <_dtoa_r+0x8fe>
 8008874:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008876:	f1c0 001c 	rsb	r0, r0, #28
 800887a:	4403      	add	r3, r0
 800887c:	4481      	add	r9, r0
 800887e:	4407      	add	r7, r0
 8008880:	9309      	str	r3, [sp, #36]	; 0x24
 8008882:	f1b9 0f00 	cmp.w	r9, #0
 8008886:	dd05      	ble.n	8008894 <_dtoa_r+0x814>
 8008888:	4651      	mov	r1, sl
 800888a:	464a      	mov	r2, r9
 800888c:	4628      	mov	r0, r5
 800888e:	f000 ffe7 	bl	8009860 <__lshift>
 8008892:	4682      	mov	sl, r0
 8008894:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008896:	2b00      	cmp	r3, #0
 8008898:	dd05      	ble.n	80088a6 <_dtoa_r+0x826>
 800889a:	4621      	mov	r1, r4
 800889c:	461a      	mov	r2, r3
 800889e:	4628      	mov	r0, r5
 80088a0:	f000 ffde 	bl	8009860 <__lshift>
 80088a4:	4604      	mov	r4, r0
 80088a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d072      	beq.n	8008992 <_dtoa_r+0x912>
 80088ac:	4621      	mov	r1, r4
 80088ae:	4650      	mov	r0, sl
 80088b0:	f001 f842 	bl	8009938 <__mcmp>
 80088b4:	2800      	cmp	r0, #0
 80088b6:	da6c      	bge.n	8008992 <_dtoa_r+0x912>
 80088b8:	2300      	movs	r3, #0
 80088ba:	4651      	mov	r1, sl
 80088bc:	220a      	movs	r2, #10
 80088be:	4628      	mov	r0, r5
 80088c0:	f000 fdd8 	bl	8009474 <__multadd>
 80088c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088c6:	4682      	mov	sl, r0
 80088c8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	f000 81ac 	beq.w	8008c2a <_dtoa_r+0xbaa>
 80088d2:	2300      	movs	r3, #0
 80088d4:	4631      	mov	r1, r6
 80088d6:	220a      	movs	r2, #10
 80088d8:	4628      	mov	r0, r5
 80088da:	f000 fdcb 	bl	8009474 <__multadd>
 80088de:	9b06      	ldr	r3, [sp, #24]
 80088e0:	4606      	mov	r6, r0
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	f300 8093 	bgt.w	8008a0e <_dtoa_r+0x98e>
 80088e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80088ea:	2b02      	cmp	r3, #2
 80088ec:	dc59      	bgt.n	80089a2 <_dtoa_r+0x922>
 80088ee:	e08e      	b.n	8008a0e <_dtoa_r+0x98e>
 80088f0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80088f2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80088f6:	e75d      	b.n	80087b4 <_dtoa_r+0x734>
 80088f8:	9b08      	ldr	r3, [sp, #32]
 80088fa:	1e5c      	subs	r4, r3, #1
 80088fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088fe:	42a3      	cmp	r3, r4
 8008900:	bfbf      	itttt	lt
 8008902:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008904:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8008906:	1ae3      	sublt	r3, r4, r3
 8008908:	18d2      	addlt	r2, r2, r3
 800890a:	bfa8      	it	ge
 800890c:	1b1c      	subge	r4, r3, r4
 800890e:	9b08      	ldr	r3, [sp, #32]
 8008910:	bfbe      	ittt	lt
 8008912:	940a      	strlt	r4, [sp, #40]	; 0x28
 8008914:	920e      	strlt	r2, [sp, #56]	; 0x38
 8008916:	2400      	movlt	r4, #0
 8008918:	2b00      	cmp	r3, #0
 800891a:	bfb5      	itete	lt
 800891c:	eba9 0703 	sublt.w	r7, r9, r3
 8008920:	464f      	movge	r7, r9
 8008922:	2300      	movlt	r3, #0
 8008924:	9b08      	ldrge	r3, [sp, #32]
 8008926:	e747      	b.n	80087b8 <_dtoa_r+0x738>
 8008928:	464f      	mov	r7, r9
 800892a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800892c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800892e:	e74c      	b.n	80087ca <_dtoa_r+0x74a>
 8008930:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008932:	e773      	b.n	800881c <_dtoa_r+0x79c>
 8008934:	3fe00000 	.word	0x3fe00000
 8008938:	40240000 	.word	0x40240000
 800893c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800893e:	2b01      	cmp	r3, #1
 8008940:	dc18      	bgt.n	8008974 <_dtoa_r+0x8f4>
 8008942:	9b04      	ldr	r3, [sp, #16]
 8008944:	b9b3      	cbnz	r3, 8008974 <_dtoa_r+0x8f4>
 8008946:	9b05      	ldr	r3, [sp, #20]
 8008948:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800894c:	b993      	cbnz	r3, 8008974 <_dtoa_r+0x8f4>
 800894e:	9b05      	ldr	r3, [sp, #20]
 8008950:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008954:	0d1b      	lsrs	r3, r3, #20
 8008956:	051b      	lsls	r3, r3, #20
 8008958:	b17b      	cbz	r3, 800897a <_dtoa_r+0x8fa>
 800895a:	f04f 0801 	mov.w	r8, #1
 800895e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008960:	f109 0901 	add.w	r9, r9, #1
 8008964:	3301      	adds	r3, #1
 8008966:	9309      	str	r3, [sp, #36]	; 0x24
 8008968:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800896a:	2b00      	cmp	r3, #0
 800896c:	f47f af6f 	bne.w	800884e <_dtoa_r+0x7ce>
 8008970:	2001      	movs	r0, #1
 8008972:	e774      	b.n	800885e <_dtoa_r+0x7de>
 8008974:	f04f 0800 	mov.w	r8, #0
 8008978:	e7f6      	b.n	8008968 <_dtoa_r+0x8e8>
 800897a:	4698      	mov	r8, r3
 800897c:	e7f4      	b.n	8008968 <_dtoa_r+0x8e8>
 800897e:	d080      	beq.n	8008882 <_dtoa_r+0x802>
 8008980:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008982:	331c      	adds	r3, #28
 8008984:	441a      	add	r2, r3
 8008986:	4499      	add	r9, r3
 8008988:	441f      	add	r7, r3
 800898a:	9209      	str	r2, [sp, #36]	; 0x24
 800898c:	e779      	b.n	8008882 <_dtoa_r+0x802>
 800898e:	4603      	mov	r3, r0
 8008990:	e7f6      	b.n	8008980 <_dtoa_r+0x900>
 8008992:	9b08      	ldr	r3, [sp, #32]
 8008994:	2b00      	cmp	r3, #0
 8008996:	dc34      	bgt.n	8008a02 <_dtoa_r+0x982>
 8008998:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800899a:	2b02      	cmp	r3, #2
 800899c:	dd31      	ble.n	8008a02 <_dtoa_r+0x982>
 800899e:	9b08      	ldr	r3, [sp, #32]
 80089a0:	9306      	str	r3, [sp, #24]
 80089a2:	9b06      	ldr	r3, [sp, #24]
 80089a4:	b963      	cbnz	r3, 80089c0 <_dtoa_r+0x940>
 80089a6:	4621      	mov	r1, r4
 80089a8:	2205      	movs	r2, #5
 80089aa:	4628      	mov	r0, r5
 80089ac:	f000 fd62 	bl	8009474 <__multadd>
 80089b0:	4601      	mov	r1, r0
 80089b2:	4604      	mov	r4, r0
 80089b4:	4650      	mov	r0, sl
 80089b6:	f000 ffbf 	bl	8009938 <__mcmp>
 80089ba:	2800      	cmp	r0, #0
 80089bc:	f73f adbf 	bgt.w	800853e <_dtoa_r+0x4be>
 80089c0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80089c2:	9f03      	ldr	r7, [sp, #12]
 80089c4:	ea6f 0b03 	mvn.w	fp, r3
 80089c8:	f04f 0800 	mov.w	r8, #0
 80089cc:	4621      	mov	r1, r4
 80089ce:	4628      	mov	r0, r5
 80089d0:	f000 fd2e 	bl	8009430 <_Bfree>
 80089d4:	2e00      	cmp	r6, #0
 80089d6:	f43f aead 	beq.w	8008734 <_dtoa_r+0x6b4>
 80089da:	f1b8 0f00 	cmp.w	r8, #0
 80089de:	d005      	beq.n	80089ec <_dtoa_r+0x96c>
 80089e0:	45b0      	cmp	r8, r6
 80089e2:	d003      	beq.n	80089ec <_dtoa_r+0x96c>
 80089e4:	4641      	mov	r1, r8
 80089e6:	4628      	mov	r0, r5
 80089e8:	f000 fd22 	bl	8009430 <_Bfree>
 80089ec:	4631      	mov	r1, r6
 80089ee:	4628      	mov	r0, r5
 80089f0:	f000 fd1e 	bl	8009430 <_Bfree>
 80089f4:	e69e      	b.n	8008734 <_dtoa_r+0x6b4>
 80089f6:	2400      	movs	r4, #0
 80089f8:	4626      	mov	r6, r4
 80089fa:	e7e1      	b.n	80089c0 <_dtoa_r+0x940>
 80089fc:	46c3      	mov	fp, r8
 80089fe:	4626      	mov	r6, r4
 8008a00:	e59d      	b.n	800853e <_dtoa_r+0x4be>
 8008a02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	f000 80c8 	beq.w	8008b9a <_dtoa_r+0xb1a>
 8008a0a:	9b08      	ldr	r3, [sp, #32]
 8008a0c:	9306      	str	r3, [sp, #24]
 8008a0e:	2f00      	cmp	r7, #0
 8008a10:	dd05      	ble.n	8008a1e <_dtoa_r+0x99e>
 8008a12:	4631      	mov	r1, r6
 8008a14:	463a      	mov	r2, r7
 8008a16:	4628      	mov	r0, r5
 8008a18:	f000 ff22 	bl	8009860 <__lshift>
 8008a1c:	4606      	mov	r6, r0
 8008a1e:	f1b8 0f00 	cmp.w	r8, #0
 8008a22:	d05b      	beq.n	8008adc <_dtoa_r+0xa5c>
 8008a24:	4628      	mov	r0, r5
 8008a26:	6871      	ldr	r1, [r6, #4]
 8008a28:	f000 fcc2 	bl	80093b0 <_Balloc>
 8008a2c:	4607      	mov	r7, r0
 8008a2e:	b928      	cbnz	r0, 8008a3c <_dtoa_r+0x9bc>
 8008a30:	4602      	mov	r2, r0
 8008a32:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008a36:	4b81      	ldr	r3, [pc, #516]	; (8008c3c <_dtoa_r+0xbbc>)
 8008a38:	f7ff bb36 	b.w	80080a8 <_dtoa_r+0x28>
 8008a3c:	6932      	ldr	r2, [r6, #16]
 8008a3e:	f106 010c 	add.w	r1, r6, #12
 8008a42:	3202      	adds	r2, #2
 8008a44:	0092      	lsls	r2, r2, #2
 8008a46:	300c      	adds	r0, #12
 8008a48:	f7ff fa59 	bl	8007efe <memcpy>
 8008a4c:	2201      	movs	r2, #1
 8008a4e:	4639      	mov	r1, r7
 8008a50:	4628      	mov	r0, r5
 8008a52:	f000 ff05 	bl	8009860 <__lshift>
 8008a56:	46b0      	mov	r8, r6
 8008a58:	4606      	mov	r6, r0
 8008a5a:	9b03      	ldr	r3, [sp, #12]
 8008a5c:	9a03      	ldr	r2, [sp, #12]
 8008a5e:	3301      	adds	r3, #1
 8008a60:	9308      	str	r3, [sp, #32]
 8008a62:	9b06      	ldr	r3, [sp, #24]
 8008a64:	4413      	add	r3, r2
 8008a66:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a68:	9b04      	ldr	r3, [sp, #16]
 8008a6a:	f003 0301 	and.w	r3, r3, #1
 8008a6e:	930a      	str	r3, [sp, #40]	; 0x28
 8008a70:	9b08      	ldr	r3, [sp, #32]
 8008a72:	4621      	mov	r1, r4
 8008a74:	3b01      	subs	r3, #1
 8008a76:	4650      	mov	r0, sl
 8008a78:	9304      	str	r3, [sp, #16]
 8008a7a:	f7ff fa77 	bl	8007f6c <quorem>
 8008a7e:	4641      	mov	r1, r8
 8008a80:	9006      	str	r0, [sp, #24]
 8008a82:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008a86:	4650      	mov	r0, sl
 8008a88:	f000 ff56 	bl	8009938 <__mcmp>
 8008a8c:	4632      	mov	r2, r6
 8008a8e:	9009      	str	r0, [sp, #36]	; 0x24
 8008a90:	4621      	mov	r1, r4
 8008a92:	4628      	mov	r0, r5
 8008a94:	f000 ff6c 	bl	8009970 <__mdiff>
 8008a98:	68c2      	ldr	r2, [r0, #12]
 8008a9a:	4607      	mov	r7, r0
 8008a9c:	bb02      	cbnz	r2, 8008ae0 <_dtoa_r+0xa60>
 8008a9e:	4601      	mov	r1, r0
 8008aa0:	4650      	mov	r0, sl
 8008aa2:	f000 ff49 	bl	8009938 <__mcmp>
 8008aa6:	4602      	mov	r2, r0
 8008aa8:	4639      	mov	r1, r7
 8008aaa:	4628      	mov	r0, r5
 8008aac:	920c      	str	r2, [sp, #48]	; 0x30
 8008aae:	f000 fcbf 	bl	8009430 <_Bfree>
 8008ab2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008ab4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008ab6:	9f08      	ldr	r7, [sp, #32]
 8008ab8:	ea43 0102 	orr.w	r1, r3, r2
 8008abc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008abe:	4319      	orrs	r1, r3
 8008ac0:	d110      	bne.n	8008ae4 <_dtoa_r+0xa64>
 8008ac2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008ac6:	d029      	beq.n	8008b1c <_dtoa_r+0xa9c>
 8008ac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	dd02      	ble.n	8008ad4 <_dtoa_r+0xa54>
 8008ace:	9b06      	ldr	r3, [sp, #24]
 8008ad0:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008ad4:	9b04      	ldr	r3, [sp, #16]
 8008ad6:	f883 9000 	strb.w	r9, [r3]
 8008ada:	e777      	b.n	80089cc <_dtoa_r+0x94c>
 8008adc:	4630      	mov	r0, r6
 8008ade:	e7ba      	b.n	8008a56 <_dtoa_r+0x9d6>
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	e7e1      	b.n	8008aa8 <_dtoa_r+0xa28>
 8008ae4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	db04      	blt.n	8008af4 <_dtoa_r+0xa74>
 8008aea:	9922      	ldr	r1, [sp, #136]	; 0x88
 8008aec:	430b      	orrs	r3, r1
 8008aee:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008af0:	430b      	orrs	r3, r1
 8008af2:	d120      	bne.n	8008b36 <_dtoa_r+0xab6>
 8008af4:	2a00      	cmp	r2, #0
 8008af6:	dded      	ble.n	8008ad4 <_dtoa_r+0xa54>
 8008af8:	4651      	mov	r1, sl
 8008afa:	2201      	movs	r2, #1
 8008afc:	4628      	mov	r0, r5
 8008afe:	f000 feaf 	bl	8009860 <__lshift>
 8008b02:	4621      	mov	r1, r4
 8008b04:	4682      	mov	sl, r0
 8008b06:	f000 ff17 	bl	8009938 <__mcmp>
 8008b0a:	2800      	cmp	r0, #0
 8008b0c:	dc03      	bgt.n	8008b16 <_dtoa_r+0xa96>
 8008b0e:	d1e1      	bne.n	8008ad4 <_dtoa_r+0xa54>
 8008b10:	f019 0f01 	tst.w	r9, #1
 8008b14:	d0de      	beq.n	8008ad4 <_dtoa_r+0xa54>
 8008b16:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008b1a:	d1d8      	bne.n	8008ace <_dtoa_r+0xa4e>
 8008b1c:	2339      	movs	r3, #57	; 0x39
 8008b1e:	9a04      	ldr	r2, [sp, #16]
 8008b20:	7013      	strb	r3, [r2, #0]
 8008b22:	463b      	mov	r3, r7
 8008b24:	461f      	mov	r7, r3
 8008b26:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8008b2a:	3b01      	subs	r3, #1
 8008b2c:	2a39      	cmp	r2, #57	; 0x39
 8008b2e:	d06b      	beq.n	8008c08 <_dtoa_r+0xb88>
 8008b30:	3201      	adds	r2, #1
 8008b32:	701a      	strb	r2, [r3, #0]
 8008b34:	e74a      	b.n	80089cc <_dtoa_r+0x94c>
 8008b36:	2a00      	cmp	r2, #0
 8008b38:	dd07      	ble.n	8008b4a <_dtoa_r+0xaca>
 8008b3a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008b3e:	d0ed      	beq.n	8008b1c <_dtoa_r+0xa9c>
 8008b40:	9a04      	ldr	r2, [sp, #16]
 8008b42:	f109 0301 	add.w	r3, r9, #1
 8008b46:	7013      	strb	r3, [r2, #0]
 8008b48:	e740      	b.n	80089cc <_dtoa_r+0x94c>
 8008b4a:	9b08      	ldr	r3, [sp, #32]
 8008b4c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008b4e:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d042      	beq.n	8008bdc <_dtoa_r+0xb5c>
 8008b56:	4651      	mov	r1, sl
 8008b58:	2300      	movs	r3, #0
 8008b5a:	220a      	movs	r2, #10
 8008b5c:	4628      	mov	r0, r5
 8008b5e:	f000 fc89 	bl	8009474 <__multadd>
 8008b62:	45b0      	cmp	r8, r6
 8008b64:	4682      	mov	sl, r0
 8008b66:	f04f 0300 	mov.w	r3, #0
 8008b6a:	f04f 020a 	mov.w	r2, #10
 8008b6e:	4641      	mov	r1, r8
 8008b70:	4628      	mov	r0, r5
 8008b72:	d107      	bne.n	8008b84 <_dtoa_r+0xb04>
 8008b74:	f000 fc7e 	bl	8009474 <__multadd>
 8008b78:	4680      	mov	r8, r0
 8008b7a:	4606      	mov	r6, r0
 8008b7c:	9b08      	ldr	r3, [sp, #32]
 8008b7e:	3301      	adds	r3, #1
 8008b80:	9308      	str	r3, [sp, #32]
 8008b82:	e775      	b.n	8008a70 <_dtoa_r+0x9f0>
 8008b84:	f000 fc76 	bl	8009474 <__multadd>
 8008b88:	4631      	mov	r1, r6
 8008b8a:	4680      	mov	r8, r0
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	220a      	movs	r2, #10
 8008b90:	4628      	mov	r0, r5
 8008b92:	f000 fc6f 	bl	8009474 <__multadd>
 8008b96:	4606      	mov	r6, r0
 8008b98:	e7f0      	b.n	8008b7c <_dtoa_r+0xafc>
 8008b9a:	9b08      	ldr	r3, [sp, #32]
 8008b9c:	9306      	str	r3, [sp, #24]
 8008b9e:	9f03      	ldr	r7, [sp, #12]
 8008ba0:	4621      	mov	r1, r4
 8008ba2:	4650      	mov	r0, sl
 8008ba4:	f7ff f9e2 	bl	8007f6c <quorem>
 8008ba8:	9b03      	ldr	r3, [sp, #12]
 8008baa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008bae:	f807 9b01 	strb.w	r9, [r7], #1
 8008bb2:	1afa      	subs	r2, r7, r3
 8008bb4:	9b06      	ldr	r3, [sp, #24]
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	dd07      	ble.n	8008bca <_dtoa_r+0xb4a>
 8008bba:	4651      	mov	r1, sl
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	220a      	movs	r2, #10
 8008bc0:	4628      	mov	r0, r5
 8008bc2:	f000 fc57 	bl	8009474 <__multadd>
 8008bc6:	4682      	mov	sl, r0
 8008bc8:	e7ea      	b.n	8008ba0 <_dtoa_r+0xb20>
 8008bca:	9b06      	ldr	r3, [sp, #24]
 8008bcc:	f04f 0800 	mov.w	r8, #0
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	bfcc      	ite	gt
 8008bd4:	461f      	movgt	r7, r3
 8008bd6:	2701      	movle	r7, #1
 8008bd8:	9b03      	ldr	r3, [sp, #12]
 8008bda:	441f      	add	r7, r3
 8008bdc:	4651      	mov	r1, sl
 8008bde:	2201      	movs	r2, #1
 8008be0:	4628      	mov	r0, r5
 8008be2:	f000 fe3d 	bl	8009860 <__lshift>
 8008be6:	4621      	mov	r1, r4
 8008be8:	4682      	mov	sl, r0
 8008bea:	f000 fea5 	bl	8009938 <__mcmp>
 8008bee:	2800      	cmp	r0, #0
 8008bf0:	dc97      	bgt.n	8008b22 <_dtoa_r+0xaa2>
 8008bf2:	d102      	bne.n	8008bfa <_dtoa_r+0xb7a>
 8008bf4:	f019 0f01 	tst.w	r9, #1
 8008bf8:	d193      	bne.n	8008b22 <_dtoa_r+0xaa2>
 8008bfa:	463b      	mov	r3, r7
 8008bfc:	461f      	mov	r7, r3
 8008bfe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c02:	2a30      	cmp	r2, #48	; 0x30
 8008c04:	d0fa      	beq.n	8008bfc <_dtoa_r+0xb7c>
 8008c06:	e6e1      	b.n	80089cc <_dtoa_r+0x94c>
 8008c08:	9a03      	ldr	r2, [sp, #12]
 8008c0a:	429a      	cmp	r2, r3
 8008c0c:	d18a      	bne.n	8008b24 <_dtoa_r+0xaa4>
 8008c0e:	2331      	movs	r3, #49	; 0x31
 8008c10:	f10b 0b01 	add.w	fp, fp, #1
 8008c14:	e797      	b.n	8008b46 <_dtoa_r+0xac6>
 8008c16:	4b0a      	ldr	r3, [pc, #40]	; (8008c40 <_dtoa_r+0xbc0>)
 8008c18:	f7ff ba9f 	b.w	800815a <_dtoa_r+0xda>
 8008c1c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	f47f aa77 	bne.w	8008112 <_dtoa_r+0x92>
 8008c24:	4b07      	ldr	r3, [pc, #28]	; (8008c44 <_dtoa_r+0xbc4>)
 8008c26:	f7ff ba98 	b.w	800815a <_dtoa_r+0xda>
 8008c2a:	9b06      	ldr	r3, [sp, #24]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	dcb6      	bgt.n	8008b9e <_dtoa_r+0xb1e>
 8008c30:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008c32:	2b02      	cmp	r3, #2
 8008c34:	f73f aeb5 	bgt.w	80089a2 <_dtoa_r+0x922>
 8008c38:	e7b1      	b.n	8008b9e <_dtoa_r+0xb1e>
 8008c3a:	bf00      	nop
 8008c3c:	0800aa54 	.word	0x0800aa54
 8008c40:	0800a911 	.word	0x0800a911
 8008c44:	0800a9ef 	.word	0x0800a9ef

08008c48 <_free_r>:
 8008c48:	b538      	push	{r3, r4, r5, lr}
 8008c4a:	4605      	mov	r5, r0
 8008c4c:	2900      	cmp	r1, #0
 8008c4e:	d040      	beq.n	8008cd2 <_free_r+0x8a>
 8008c50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c54:	1f0c      	subs	r4, r1, #4
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	bfb8      	it	lt
 8008c5a:	18e4      	addlt	r4, r4, r3
 8008c5c:	f7fd f98a 	bl	8005f74 <__malloc_lock>
 8008c60:	4a1c      	ldr	r2, [pc, #112]	; (8008cd4 <_free_r+0x8c>)
 8008c62:	6813      	ldr	r3, [r2, #0]
 8008c64:	b933      	cbnz	r3, 8008c74 <_free_r+0x2c>
 8008c66:	6063      	str	r3, [r4, #4]
 8008c68:	6014      	str	r4, [r2, #0]
 8008c6a:	4628      	mov	r0, r5
 8008c6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c70:	f7fd b986 	b.w	8005f80 <__malloc_unlock>
 8008c74:	42a3      	cmp	r3, r4
 8008c76:	d908      	bls.n	8008c8a <_free_r+0x42>
 8008c78:	6820      	ldr	r0, [r4, #0]
 8008c7a:	1821      	adds	r1, r4, r0
 8008c7c:	428b      	cmp	r3, r1
 8008c7e:	bf01      	itttt	eq
 8008c80:	6819      	ldreq	r1, [r3, #0]
 8008c82:	685b      	ldreq	r3, [r3, #4]
 8008c84:	1809      	addeq	r1, r1, r0
 8008c86:	6021      	streq	r1, [r4, #0]
 8008c88:	e7ed      	b.n	8008c66 <_free_r+0x1e>
 8008c8a:	461a      	mov	r2, r3
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	b10b      	cbz	r3, 8008c94 <_free_r+0x4c>
 8008c90:	42a3      	cmp	r3, r4
 8008c92:	d9fa      	bls.n	8008c8a <_free_r+0x42>
 8008c94:	6811      	ldr	r1, [r2, #0]
 8008c96:	1850      	adds	r0, r2, r1
 8008c98:	42a0      	cmp	r0, r4
 8008c9a:	d10b      	bne.n	8008cb4 <_free_r+0x6c>
 8008c9c:	6820      	ldr	r0, [r4, #0]
 8008c9e:	4401      	add	r1, r0
 8008ca0:	1850      	adds	r0, r2, r1
 8008ca2:	4283      	cmp	r3, r0
 8008ca4:	6011      	str	r1, [r2, #0]
 8008ca6:	d1e0      	bne.n	8008c6a <_free_r+0x22>
 8008ca8:	6818      	ldr	r0, [r3, #0]
 8008caa:	685b      	ldr	r3, [r3, #4]
 8008cac:	4408      	add	r0, r1
 8008cae:	6010      	str	r0, [r2, #0]
 8008cb0:	6053      	str	r3, [r2, #4]
 8008cb2:	e7da      	b.n	8008c6a <_free_r+0x22>
 8008cb4:	d902      	bls.n	8008cbc <_free_r+0x74>
 8008cb6:	230c      	movs	r3, #12
 8008cb8:	602b      	str	r3, [r5, #0]
 8008cba:	e7d6      	b.n	8008c6a <_free_r+0x22>
 8008cbc:	6820      	ldr	r0, [r4, #0]
 8008cbe:	1821      	adds	r1, r4, r0
 8008cc0:	428b      	cmp	r3, r1
 8008cc2:	bf01      	itttt	eq
 8008cc4:	6819      	ldreq	r1, [r3, #0]
 8008cc6:	685b      	ldreq	r3, [r3, #4]
 8008cc8:	1809      	addeq	r1, r1, r0
 8008cca:	6021      	streq	r1, [r4, #0]
 8008ccc:	6063      	str	r3, [r4, #4]
 8008cce:	6054      	str	r4, [r2, #4]
 8008cd0:	e7cb      	b.n	8008c6a <_free_r+0x22>
 8008cd2:	bd38      	pop	{r3, r4, r5, pc}
 8008cd4:	200005e0 	.word	0x200005e0

08008cd8 <rshift>:
 8008cd8:	6903      	ldr	r3, [r0, #16]
 8008cda:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008cde:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008ce2:	f100 0414 	add.w	r4, r0, #20
 8008ce6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008cea:	dd46      	ble.n	8008d7a <rshift+0xa2>
 8008cec:	f011 011f 	ands.w	r1, r1, #31
 8008cf0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008cf4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008cf8:	d10c      	bne.n	8008d14 <rshift+0x3c>
 8008cfa:	4629      	mov	r1, r5
 8008cfc:	f100 0710 	add.w	r7, r0, #16
 8008d00:	42b1      	cmp	r1, r6
 8008d02:	d335      	bcc.n	8008d70 <rshift+0x98>
 8008d04:	1a9b      	subs	r3, r3, r2
 8008d06:	009b      	lsls	r3, r3, #2
 8008d08:	1eea      	subs	r2, r5, #3
 8008d0a:	4296      	cmp	r6, r2
 8008d0c:	bf38      	it	cc
 8008d0e:	2300      	movcc	r3, #0
 8008d10:	4423      	add	r3, r4
 8008d12:	e015      	b.n	8008d40 <rshift+0x68>
 8008d14:	46a1      	mov	r9, r4
 8008d16:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008d1a:	f1c1 0820 	rsb	r8, r1, #32
 8008d1e:	40cf      	lsrs	r7, r1
 8008d20:	f105 0e04 	add.w	lr, r5, #4
 8008d24:	4576      	cmp	r6, lr
 8008d26:	46f4      	mov	ip, lr
 8008d28:	d816      	bhi.n	8008d58 <rshift+0x80>
 8008d2a:	1a9a      	subs	r2, r3, r2
 8008d2c:	0092      	lsls	r2, r2, #2
 8008d2e:	3a04      	subs	r2, #4
 8008d30:	3501      	adds	r5, #1
 8008d32:	42ae      	cmp	r6, r5
 8008d34:	bf38      	it	cc
 8008d36:	2200      	movcc	r2, #0
 8008d38:	18a3      	adds	r3, r4, r2
 8008d3a:	50a7      	str	r7, [r4, r2]
 8008d3c:	b107      	cbz	r7, 8008d40 <rshift+0x68>
 8008d3e:	3304      	adds	r3, #4
 8008d40:	42a3      	cmp	r3, r4
 8008d42:	eba3 0204 	sub.w	r2, r3, r4
 8008d46:	bf08      	it	eq
 8008d48:	2300      	moveq	r3, #0
 8008d4a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008d4e:	6102      	str	r2, [r0, #16]
 8008d50:	bf08      	it	eq
 8008d52:	6143      	streq	r3, [r0, #20]
 8008d54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d58:	f8dc c000 	ldr.w	ip, [ip]
 8008d5c:	fa0c fc08 	lsl.w	ip, ip, r8
 8008d60:	ea4c 0707 	orr.w	r7, ip, r7
 8008d64:	f849 7b04 	str.w	r7, [r9], #4
 8008d68:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008d6c:	40cf      	lsrs	r7, r1
 8008d6e:	e7d9      	b.n	8008d24 <rshift+0x4c>
 8008d70:	f851 cb04 	ldr.w	ip, [r1], #4
 8008d74:	f847 cf04 	str.w	ip, [r7, #4]!
 8008d78:	e7c2      	b.n	8008d00 <rshift+0x28>
 8008d7a:	4623      	mov	r3, r4
 8008d7c:	e7e0      	b.n	8008d40 <rshift+0x68>

08008d7e <__hexdig_fun>:
 8008d7e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008d82:	2b09      	cmp	r3, #9
 8008d84:	d802      	bhi.n	8008d8c <__hexdig_fun+0xe>
 8008d86:	3820      	subs	r0, #32
 8008d88:	b2c0      	uxtb	r0, r0
 8008d8a:	4770      	bx	lr
 8008d8c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008d90:	2b05      	cmp	r3, #5
 8008d92:	d801      	bhi.n	8008d98 <__hexdig_fun+0x1a>
 8008d94:	3847      	subs	r0, #71	; 0x47
 8008d96:	e7f7      	b.n	8008d88 <__hexdig_fun+0xa>
 8008d98:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008d9c:	2b05      	cmp	r3, #5
 8008d9e:	d801      	bhi.n	8008da4 <__hexdig_fun+0x26>
 8008da0:	3827      	subs	r0, #39	; 0x27
 8008da2:	e7f1      	b.n	8008d88 <__hexdig_fun+0xa>
 8008da4:	2000      	movs	r0, #0
 8008da6:	4770      	bx	lr

08008da8 <__gethex>:
 8008da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dac:	4681      	mov	r9, r0
 8008dae:	468a      	mov	sl, r1
 8008db0:	4617      	mov	r7, r2
 8008db2:	680a      	ldr	r2, [r1, #0]
 8008db4:	b085      	sub	sp, #20
 8008db6:	f102 0b02 	add.w	fp, r2, #2
 8008dba:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008dbe:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008dc2:	9302      	str	r3, [sp, #8]
 8008dc4:	32fe      	adds	r2, #254	; 0xfe
 8008dc6:	eb02 030b 	add.w	r3, r2, fp
 8008dca:	46d8      	mov	r8, fp
 8008dcc:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8008dd0:	9301      	str	r3, [sp, #4]
 8008dd2:	2830      	cmp	r0, #48	; 0x30
 8008dd4:	d0f7      	beq.n	8008dc6 <__gethex+0x1e>
 8008dd6:	f7ff ffd2 	bl	8008d7e <__hexdig_fun>
 8008dda:	4604      	mov	r4, r0
 8008ddc:	2800      	cmp	r0, #0
 8008dde:	d138      	bne.n	8008e52 <__gethex+0xaa>
 8008de0:	2201      	movs	r2, #1
 8008de2:	4640      	mov	r0, r8
 8008de4:	49a7      	ldr	r1, [pc, #668]	; (8009084 <__gethex+0x2dc>)
 8008de6:	f7fe ff68 	bl	8007cba <strncmp>
 8008dea:	4606      	mov	r6, r0
 8008dec:	2800      	cmp	r0, #0
 8008dee:	d169      	bne.n	8008ec4 <__gethex+0x11c>
 8008df0:	f898 0001 	ldrb.w	r0, [r8, #1]
 8008df4:	465d      	mov	r5, fp
 8008df6:	f7ff ffc2 	bl	8008d7e <__hexdig_fun>
 8008dfa:	2800      	cmp	r0, #0
 8008dfc:	d064      	beq.n	8008ec8 <__gethex+0x120>
 8008dfe:	465a      	mov	r2, fp
 8008e00:	7810      	ldrb	r0, [r2, #0]
 8008e02:	4690      	mov	r8, r2
 8008e04:	2830      	cmp	r0, #48	; 0x30
 8008e06:	f102 0201 	add.w	r2, r2, #1
 8008e0a:	d0f9      	beq.n	8008e00 <__gethex+0x58>
 8008e0c:	f7ff ffb7 	bl	8008d7e <__hexdig_fun>
 8008e10:	2301      	movs	r3, #1
 8008e12:	fab0 f480 	clz	r4, r0
 8008e16:	465e      	mov	r6, fp
 8008e18:	0964      	lsrs	r4, r4, #5
 8008e1a:	9301      	str	r3, [sp, #4]
 8008e1c:	4642      	mov	r2, r8
 8008e1e:	4615      	mov	r5, r2
 8008e20:	7828      	ldrb	r0, [r5, #0]
 8008e22:	3201      	adds	r2, #1
 8008e24:	f7ff ffab 	bl	8008d7e <__hexdig_fun>
 8008e28:	2800      	cmp	r0, #0
 8008e2a:	d1f8      	bne.n	8008e1e <__gethex+0x76>
 8008e2c:	2201      	movs	r2, #1
 8008e2e:	4628      	mov	r0, r5
 8008e30:	4994      	ldr	r1, [pc, #592]	; (8009084 <__gethex+0x2dc>)
 8008e32:	f7fe ff42 	bl	8007cba <strncmp>
 8008e36:	b978      	cbnz	r0, 8008e58 <__gethex+0xb0>
 8008e38:	b946      	cbnz	r6, 8008e4c <__gethex+0xa4>
 8008e3a:	1c6e      	adds	r6, r5, #1
 8008e3c:	4632      	mov	r2, r6
 8008e3e:	4615      	mov	r5, r2
 8008e40:	7828      	ldrb	r0, [r5, #0]
 8008e42:	3201      	adds	r2, #1
 8008e44:	f7ff ff9b 	bl	8008d7e <__hexdig_fun>
 8008e48:	2800      	cmp	r0, #0
 8008e4a:	d1f8      	bne.n	8008e3e <__gethex+0x96>
 8008e4c:	1b73      	subs	r3, r6, r5
 8008e4e:	009e      	lsls	r6, r3, #2
 8008e50:	e004      	b.n	8008e5c <__gethex+0xb4>
 8008e52:	2400      	movs	r4, #0
 8008e54:	4626      	mov	r6, r4
 8008e56:	e7e1      	b.n	8008e1c <__gethex+0x74>
 8008e58:	2e00      	cmp	r6, #0
 8008e5a:	d1f7      	bne.n	8008e4c <__gethex+0xa4>
 8008e5c:	782b      	ldrb	r3, [r5, #0]
 8008e5e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008e62:	2b50      	cmp	r3, #80	; 0x50
 8008e64:	d13d      	bne.n	8008ee2 <__gethex+0x13a>
 8008e66:	786b      	ldrb	r3, [r5, #1]
 8008e68:	2b2b      	cmp	r3, #43	; 0x2b
 8008e6a:	d02f      	beq.n	8008ecc <__gethex+0x124>
 8008e6c:	2b2d      	cmp	r3, #45	; 0x2d
 8008e6e:	d031      	beq.n	8008ed4 <__gethex+0x12c>
 8008e70:	f04f 0b00 	mov.w	fp, #0
 8008e74:	1c69      	adds	r1, r5, #1
 8008e76:	7808      	ldrb	r0, [r1, #0]
 8008e78:	f7ff ff81 	bl	8008d7e <__hexdig_fun>
 8008e7c:	1e42      	subs	r2, r0, #1
 8008e7e:	b2d2      	uxtb	r2, r2
 8008e80:	2a18      	cmp	r2, #24
 8008e82:	d82e      	bhi.n	8008ee2 <__gethex+0x13a>
 8008e84:	f1a0 0210 	sub.w	r2, r0, #16
 8008e88:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008e8c:	f7ff ff77 	bl	8008d7e <__hexdig_fun>
 8008e90:	f100 3cff 	add.w	ip, r0, #4294967295
 8008e94:	fa5f fc8c 	uxtb.w	ip, ip
 8008e98:	f1bc 0f18 	cmp.w	ip, #24
 8008e9c:	d91d      	bls.n	8008eda <__gethex+0x132>
 8008e9e:	f1bb 0f00 	cmp.w	fp, #0
 8008ea2:	d000      	beq.n	8008ea6 <__gethex+0xfe>
 8008ea4:	4252      	negs	r2, r2
 8008ea6:	4416      	add	r6, r2
 8008ea8:	f8ca 1000 	str.w	r1, [sl]
 8008eac:	b1dc      	cbz	r4, 8008ee6 <__gethex+0x13e>
 8008eae:	9b01      	ldr	r3, [sp, #4]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	bf14      	ite	ne
 8008eb4:	f04f 0800 	movne.w	r8, #0
 8008eb8:	f04f 0806 	moveq.w	r8, #6
 8008ebc:	4640      	mov	r0, r8
 8008ebe:	b005      	add	sp, #20
 8008ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ec4:	4645      	mov	r5, r8
 8008ec6:	4626      	mov	r6, r4
 8008ec8:	2401      	movs	r4, #1
 8008eca:	e7c7      	b.n	8008e5c <__gethex+0xb4>
 8008ecc:	f04f 0b00 	mov.w	fp, #0
 8008ed0:	1ca9      	adds	r1, r5, #2
 8008ed2:	e7d0      	b.n	8008e76 <__gethex+0xce>
 8008ed4:	f04f 0b01 	mov.w	fp, #1
 8008ed8:	e7fa      	b.n	8008ed0 <__gethex+0x128>
 8008eda:	230a      	movs	r3, #10
 8008edc:	fb03 0002 	mla	r0, r3, r2, r0
 8008ee0:	e7d0      	b.n	8008e84 <__gethex+0xdc>
 8008ee2:	4629      	mov	r1, r5
 8008ee4:	e7e0      	b.n	8008ea8 <__gethex+0x100>
 8008ee6:	4621      	mov	r1, r4
 8008ee8:	eba5 0308 	sub.w	r3, r5, r8
 8008eec:	3b01      	subs	r3, #1
 8008eee:	2b07      	cmp	r3, #7
 8008ef0:	dc0a      	bgt.n	8008f08 <__gethex+0x160>
 8008ef2:	4648      	mov	r0, r9
 8008ef4:	f000 fa5c 	bl	80093b0 <_Balloc>
 8008ef8:	4604      	mov	r4, r0
 8008efa:	b940      	cbnz	r0, 8008f0e <__gethex+0x166>
 8008efc:	4602      	mov	r2, r0
 8008efe:	21e4      	movs	r1, #228	; 0xe4
 8008f00:	4b61      	ldr	r3, [pc, #388]	; (8009088 <__gethex+0x2e0>)
 8008f02:	4862      	ldr	r0, [pc, #392]	; (800908c <__gethex+0x2e4>)
 8008f04:	f7ff f814 	bl	8007f30 <__assert_func>
 8008f08:	3101      	adds	r1, #1
 8008f0a:	105b      	asrs	r3, r3, #1
 8008f0c:	e7ef      	b.n	8008eee <__gethex+0x146>
 8008f0e:	2300      	movs	r3, #0
 8008f10:	469b      	mov	fp, r3
 8008f12:	f100 0a14 	add.w	sl, r0, #20
 8008f16:	f8cd a004 	str.w	sl, [sp, #4]
 8008f1a:	45a8      	cmp	r8, r5
 8008f1c:	d344      	bcc.n	8008fa8 <__gethex+0x200>
 8008f1e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008f22:	4658      	mov	r0, fp
 8008f24:	f848 bb04 	str.w	fp, [r8], #4
 8008f28:	eba8 080a 	sub.w	r8, r8, sl
 8008f2c:	ea4f 02a8 	mov.w	r2, r8, asr #2
 8008f30:	6122      	str	r2, [r4, #16]
 8008f32:	ea4f 1842 	mov.w	r8, r2, lsl #5
 8008f36:	f000 fb2d 	bl	8009594 <__hi0bits>
 8008f3a:	683d      	ldr	r5, [r7, #0]
 8008f3c:	eba8 0800 	sub.w	r8, r8, r0
 8008f40:	45a8      	cmp	r8, r5
 8008f42:	dd59      	ble.n	8008ff8 <__gethex+0x250>
 8008f44:	eba8 0805 	sub.w	r8, r8, r5
 8008f48:	4641      	mov	r1, r8
 8008f4a:	4620      	mov	r0, r4
 8008f4c:	f000 feab 	bl	8009ca6 <__any_on>
 8008f50:	4683      	mov	fp, r0
 8008f52:	b1b8      	cbz	r0, 8008f84 <__gethex+0x1dc>
 8008f54:	f04f 0b01 	mov.w	fp, #1
 8008f58:	f108 33ff 	add.w	r3, r8, #4294967295
 8008f5c:	1159      	asrs	r1, r3, #5
 8008f5e:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008f62:	f003 021f 	and.w	r2, r3, #31
 8008f66:	fa0b f202 	lsl.w	r2, fp, r2
 8008f6a:	420a      	tst	r2, r1
 8008f6c:	d00a      	beq.n	8008f84 <__gethex+0x1dc>
 8008f6e:	455b      	cmp	r3, fp
 8008f70:	dd06      	ble.n	8008f80 <__gethex+0x1d8>
 8008f72:	4620      	mov	r0, r4
 8008f74:	f1a8 0102 	sub.w	r1, r8, #2
 8008f78:	f000 fe95 	bl	8009ca6 <__any_on>
 8008f7c:	2800      	cmp	r0, #0
 8008f7e:	d138      	bne.n	8008ff2 <__gethex+0x24a>
 8008f80:	f04f 0b02 	mov.w	fp, #2
 8008f84:	4641      	mov	r1, r8
 8008f86:	4620      	mov	r0, r4
 8008f88:	f7ff fea6 	bl	8008cd8 <rshift>
 8008f8c:	4446      	add	r6, r8
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	42b3      	cmp	r3, r6
 8008f92:	da41      	bge.n	8009018 <__gethex+0x270>
 8008f94:	4621      	mov	r1, r4
 8008f96:	4648      	mov	r0, r9
 8008f98:	f000 fa4a 	bl	8009430 <_Bfree>
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008fa0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8008fa4:	6013      	str	r3, [r2, #0]
 8008fa6:	e789      	b.n	8008ebc <__gethex+0x114>
 8008fa8:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8008fac:	2a2e      	cmp	r2, #46	; 0x2e
 8008fae:	d014      	beq.n	8008fda <__gethex+0x232>
 8008fb0:	2b20      	cmp	r3, #32
 8008fb2:	d106      	bne.n	8008fc2 <__gethex+0x21a>
 8008fb4:	9b01      	ldr	r3, [sp, #4]
 8008fb6:	f843 bb04 	str.w	fp, [r3], #4
 8008fba:	f04f 0b00 	mov.w	fp, #0
 8008fbe:	9301      	str	r3, [sp, #4]
 8008fc0:	465b      	mov	r3, fp
 8008fc2:	7828      	ldrb	r0, [r5, #0]
 8008fc4:	9303      	str	r3, [sp, #12]
 8008fc6:	f7ff feda 	bl	8008d7e <__hexdig_fun>
 8008fca:	9b03      	ldr	r3, [sp, #12]
 8008fcc:	f000 000f 	and.w	r0, r0, #15
 8008fd0:	4098      	lsls	r0, r3
 8008fd2:	ea4b 0b00 	orr.w	fp, fp, r0
 8008fd6:	3304      	adds	r3, #4
 8008fd8:	e79f      	b.n	8008f1a <__gethex+0x172>
 8008fda:	45a8      	cmp	r8, r5
 8008fdc:	d8e8      	bhi.n	8008fb0 <__gethex+0x208>
 8008fde:	2201      	movs	r2, #1
 8008fe0:	4628      	mov	r0, r5
 8008fe2:	4928      	ldr	r1, [pc, #160]	; (8009084 <__gethex+0x2dc>)
 8008fe4:	9303      	str	r3, [sp, #12]
 8008fe6:	f7fe fe68 	bl	8007cba <strncmp>
 8008fea:	9b03      	ldr	r3, [sp, #12]
 8008fec:	2800      	cmp	r0, #0
 8008fee:	d1df      	bne.n	8008fb0 <__gethex+0x208>
 8008ff0:	e793      	b.n	8008f1a <__gethex+0x172>
 8008ff2:	f04f 0b03 	mov.w	fp, #3
 8008ff6:	e7c5      	b.n	8008f84 <__gethex+0x1dc>
 8008ff8:	da0b      	bge.n	8009012 <__gethex+0x26a>
 8008ffa:	eba5 0808 	sub.w	r8, r5, r8
 8008ffe:	4621      	mov	r1, r4
 8009000:	4642      	mov	r2, r8
 8009002:	4648      	mov	r0, r9
 8009004:	f000 fc2c 	bl	8009860 <__lshift>
 8009008:	4604      	mov	r4, r0
 800900a:	eba6 0608 	sub.w	r6, r6, r8
 800900e:	f100 0a14 	add.w	sl, r0, #20
 8009012:	f04f 0b00 	mov.w	fp, #0
 8009016:	e7ba      	b.n	8008f8e <__gethex+0x1e6>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	42b3      	cmp	r3, r6
 800901c:	dd74      	ble.n	8009108 <__gethex+0x360>
 800901e:	1b9e      	subs	r6, r3, r6
 8009020:	42b5      	cmp	r5, r6
 8009022:	dc35      	bgt.n	8009090 <__gethex+0x2e8>
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	2b02      	cmp	r3, #2
 8009028:	d023      	beq.n	8009072 <__gethex+0x2ca>
 800902a:	2b03      	cmp	r3, #3
 800902c:	d025      	beq.n	800907a <__gethex+0x2d2>
 800902e:	2b01      	cmp	r3, #1
 8009030:	d115      	bne.n	800905e <__gethex+0x2b6>
 8009032:	42b5      	cmp	r5, r6
 8009034:	d113      	bne.n	800905e <__gethex+0x2b6>
 8009036:	2d01      	cmp	r5, #1
 8009038:	d10b      	bne.n	8009052 <__gethex+0x2aa>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	9a02      	ldr	r2, [sp, #8]
 800903e:	f04f 0862 	mov.w	r8, #98	; 0x62
 8009042:	6013      	str	r3, [r2, #0]
 8009044:	2301      	movs	r3, #1
 8009046:	6123      	str	r3, [r4, #16]
 8009048:	f8ca 3000 	str.w	r3, [sl]
 800904c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800904e:	601c      	str	r4, [r3, #0]
 8009050:	e734      	b.n	8008ebc <__gethex+0x114>
 8009052:	4620      	mov	r0, r4
 8009054:	1e69      	subs	r1, r5, #1
 8009056:	f000 fe26 	bl	8009ca6 <__any_on>
 800905a:	2800      	cmp	r0, #0
 800905c:	d1ed      	bne.n	800903a <__gethex+0x292>
 800905e:	4621      	mov	r1, r4
 8009060:	4648      	mov	r0, r9
 8009062:	f000 f9e5 	bl	8009430 <_Bfree>
 8009066:	2300      	movs	r3, #0
 8009068:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800906a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800906e:	6013      	str	r3, [r2, #0]
 8009070:	e724      	b.n	8008ebc <__gethex+0x114>
 8009072:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009074:	2b00      	cmp	r3, #0
 8009076:	d1f2      	bne.n	800905e <__gethex+0x2b6>
 8009078:	e7df      	b.n	800903a <__gethex+0x292>
 800907a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800907c:	2b00      	cmp	r3, #0
 800907e:	d1dc      	bne.n	800903a <__gethex+0x292>
 8009080:	e7ed      	b.n	800905e <__gethex+0x2b6>
 8009082:	bf00      	nop
 8009084:	0800a7ae 	.word	0x0800a7ae
 8009088:	0800aa54 	.word	0x0800aa54
 800908c:	0800aa65 	.word	0x0800aa65
 8009090:	f106 38ff 	add.w	r8, r6, #4294967295
 8009094:	f1bb 0f00 	cmp.w	fp, #0
 8009098:	d133      	bne.n	8009102 <__gethex+0x35a>
 800909a:	f1b8 0f00 	cmp.w	r8, #0
 800909e:	d004      	beq.n	80090aa <__gethex+0x302>
 80090a0:	4641      	mov	r1, r8
 80090a2:	4620      	mov	r0, r4
 80090a4:	f000 fdff 	bl	8009ca6 <__any_on>
 80090a8:	4683      	mov	fp, r0
 80090aa:	2301      	movs	r3, #1
 80090ac:	ea4f 1268 	mov.w	r2, r8, asr #5
 80090b0:	f008 081f 	and.w	r8, r8, #31
 80090b4:	fa03 f308 	lsl.w	r3, r3, r8
 80090b8:	f04f 0802 	mov.w	r8, #2
 80090bc:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80090c0:	4631      	mov	r1, r6
 80090c2:	4213      	tst	r3, r2
 80090c4:	4620      	mov	r0, r4
 80090c6:	bf18      	it	ne
 80090c8:	f04b 0b02 	orrne.w	fp, fp, #2
 80090cc:	1bad      	subs	r5, r5, r6
 80090ce:	f7ff fe03 	bl	8008cd8 <rshift>
 80090d2:	687e      	ldr	r6, [r7, #4]
 80090d4:	f1bb 0f00 	cmp.w	fp, #0
 80090d8:	d04a      	beq.n	8009170 <__gethex+0x3c8>
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	2b02      	cmp	r3, #2
 80090de:	d016      	beq.n	800910e <__gethex+0x366>
 80090e0:	2b03      	cmp	r3, #3
 80090e2:	d018      	beq.n	8009116 <__gethex+0x36e>
 80090e4:	2b01      	cmp	r3, #1
 80090e6:	d109      	bne.n	80090fc <__gethex+0x354>
 80090e8:	f01b 0f02 	tst.w	fp, #2
 80090ec:	d006      	beq.n	80090fc <__gethex+0x354>
 80090ee:	f8da 3000 	ldr.w	r3, [sl]
 80090f2:	ea4b 0b03 	orr.w	fp, fp, r3
 80090f6:	f01b 0f01 	tst.w	fp, #1
 80090fa:	d10f      	bne.n	800911c <__gethex+0x374>
 80090fc:	f048 0810 	orr.w	r8, r8, #16
 8009100:	e036      	b.n	8009170 <__gethex+0x3c8>
 8009102:	f04f 0b01 	mov.w	fp, #1
 8009106:	e7d0      	b.n	80090aa <__gethex+0x302>
 8009108:	f04f 0801 	mov.w	r8, #1
 800910c:	e7e2      	b.n	80090d4 <__gethex+0x32c>
 800910e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009110:	f1c3 0301 	rsb	r3, r3, #1
 8009114:	930f      	str	r3, [sp, #60]	; 0x3c
 8009116:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009118:	2b00      	cmp	r3, #0
 800911a:	d0ef      	beq.n	80090fc <__gethex+0x354>
 800911c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009120:	f104 0214 	add.w	r2, r4, #20
 8009124:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8009128:	9301      	str	r3, [sp, #4]
 800912a:	2300      	movs	r3, #0
 800912c:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8009130:	4694      	mov	ip, r2
 8009132:	f852 1b04 	ldr.w	r1, [r2], #4
 8009136:	f1b1 3fff 	cmp.w	r1, #4294967295
 800913a:	d01e      	beq.n	800917a <__gethex+0x3d2>
 800913c:	3101      	adds	r1, #1
 800913e:	f8cc 1000 	str.w	r1, [ip]
 8009142:	f1b8 0f02 	cmp.w	r8, #2
 8009146:	f104 0214 	add.w	r2, r4, #20
 800914a:	d13d      	bne.n	80091c8 <__gethex+0x420>
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	3b01      	subs	r3, #1
 8009150:	42ab      	cmp	r3, r5
 8009152:	d10b      	bne.n	800916c <__gethex+0x3c4>
 8009154:	2301      	movs	r3, #1
 8009156:	1169      	asrs	r1, r5, #5
 8009158:	f005 051f 	and.w	r5, r5, #31
 800915c:	fa03 f505 	lsl.w	r5, r3, r5
 8009160:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009164:	421d      	tst	r5, r3
 8009166:	bf18      	it	ne
 8009168:	f04f 0801 	movne.w	r8, #1
 800916c:	f048 0820 	orr.w	r8, r8, #32
 8009170:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009172:	601c      	str	r4, [r3, #0]
 8009174:	9b02      	ldr	r3, [sp, #8]
 8009176:	601e      	str	r6, [r3, #0]
 8009178:	e6a0      	b.n	8008ebc <__gethex+0x114>
 800917a:	4290      	cmp	r0, r2
 800917c:	f842 3c04 	str.w	r3, [r2, #-4]
 8009180:	d8d6      	bhi.n	8009130 <__gethex+0x388>
 8009182:	68a2      	ldr	r2, [r4, #8]
 8009184:	4593      	cmp	fp, r2
 8009186:	db17      	blt.n	80091b8 <__gethex+0x410>
 8009188:	6861      	ldr	r1, [r4, #4]
 800918a:	4648      	mov	r0, r9
 800918c:	3101      	adds	r1, #1
 800918e:	f000 f90f 	bl	80093b0 <_Balloc>
 8009192:	4682      	mov	sl, r0
 8009194:	b918      	cbnz	r0, 800919e <__gethex+0x3f6>
 8009196:	4602      	mov	r2, r0
 8009198:	2184      	movs	r1, #132	; 0x84
 800919a:	4b1a      	ldr	r3, [pc, #104]	; (8009204 <__gethex+0x45c>)
 800919c:	e6b1      	b.n	8008f02 <__gethex+0x15a>
 800919e:	6922      	ldr	r2, [r4, #16]
 80091a0:	f104 010c 	add.w	r1, r4, #12
 80091a4:	3202      	adds	r2, #2
 80091a6:	0092      	lsls	r2, r2, #2
 80091a8:	300c      	adds	r0, #12
 80091aa:	f7fe fea8 	bl	8007efe <memcpy>
 80091ae:	4621      	mov	r1, r4
 80091b0:	4648      	mov	r0, r9
 80091b2:	f000 f93d 	bl	8009430 <_Bfree>
 80091b6:	4654      	mov	r4, sl
 80091b8:	6922      	ldr	r2, [r4, #16]
 80091ba:	1c51      	adds	r1, r2, #1
 80091bc:	6121      	str	r1, [r4, #16]
 80091be:	2101      	movs	r1, #1
 80091c0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80091c4:	6151      	str	r1, [r2, #20]
 80091c6:	e7bc      	b.n	8009142 <__gethex+0x39a>
 80091c8:	6921      	ldr	r1, [r4, #16]
 80091ca:	4559      	cmp	r1, fp
 80091cc:	dd0b      	ble.n	80091e6 <__gethex+0x43e>
 80091ce:	2101      	movs	r1, #1
 80091d0:	4620      	mov	r0, r4
 80091d2:	f7ff fd81 	bl	8008cd8 <rshift>
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	3601      	adds	r6, #1
 80091da:	42b3      	cmp	r3, r6
 80091dc:	f6ff aeda 	blt.w	8008f94 <__gethex+0x1ec>
 80091e0:	f04f 0801 	mov.w	r8, #1
 80091e4:	e7c2      	b.n	800916c <__gethex+0x3c4>
 80091e6:	f015 051f 	ands.w	r5, r5, #31
 80091ea:	d0f9      	beq.n	80091e0 <__gethex+0x438>
 80091ec:	9b01      	ldr	r3, [sp, #4]
 80091ee:	f1c5 0520 	rsb	r5, r5, #32
 80091f2:	441a      	add	r2, r3
 80091f4:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80091f8:	f000 f9cc 	bl	8009594 <__hi0bits>
 80091fc:	42a8      	cmp	r0, r5
 80091fe:	dbe6      	blt.n	80091ce <__gethex+0x426>
 8009200:	e7ee      	b.n	80091e0 <__gethex+0x438>
 8009202:	bf00      	nop
 8009204:	0800aa54 	.word	0x0800aa54

08009208 <L_shift>:
 8009208:	f1c2 0208 	rsb	r2, r2, #8
 800920c:	0092      	lsls	r2, r2, #2
 800920e:	b570      	push	{r4, r5, r6, lr}
 8009210:	f1c2 0620 	rsb	r6, r2, #32
 8009214:	6843      	ldr	r3, [r0, #4]
 8009216:	6804      	ldr	r4, [r0, #0]
 8009218:	fa03 f506 	lsl.w	r5, r3, r6
 800921c:	432c      	orrs	r4, r5
 800921e:	40d3      	lsrs	r3, r2
 8009220:	6004      	str	r4, [r0, #0]
 8009222:	f840 3f04 	str.w	r3, [r0, #4]!
 8009226:	4288      	cmp	r0, r1
 8009228:	d3f4      	bcc.n	8009214 <L_shift+0xc>
 800922a:	bd70      	pop	{r4, r5, r6, pc}

0800922c <__match>:
 800922c:	b530      	push	{r4, r5, lr}
 800922e:	6803      	ldr	r3, [r0, #0]
 8009230:	3301      	adds	r3, #1
 8009232:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009236:	b914      	cbnz	r4, 800923e <__match+0x12>
 8009238:	6003      	str	r3, [r0, #0]
 800923a:	2001      	movs	r0, #1
 800923c:	bd30      	pop	{r4, r5, pc}
 800923e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009242:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009246:	2d19      	cmp	r5, #25
 8009248:	bf98      	it	ls
 800924a:	3220      	addls	r2, #32
 800924c:	42a2      	cmp	r2, r4
 800924e:	d0f0      	beq.n	8009232 <__match+0x6>
 8009250:	2000      	movs	r0, #0
 8009252:	e7f3      	b.n	800923c <__match+0x10>

08009254 <__hexnan>:
 8009254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009258:	2500      	movs	r5, #0
 800925a:	680b      	ldr	r3, [r1, #0]
 800925c:	4682      	mov	sl, r0
 800925e:	115e      	asrs	r6, r3, #5
 8009260:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009264:	f013 031f 	ands.w	r3, r3, #31
 8009268:	bf18      	it	ne
 800926a:	3604      	addne	r6, #4
 800926c:	1f37      	subs	r7, r6, #4
 800926e:	4690      	mov	r8, r2
 8009270:	46b9      	mov	r9, r7
 8009272:	463c      	mov	r4, r7
 8009274:	46ab      	mov	fp, r5
 8009276:	b087      	sub	sp, #28
 8009278:	6801      	ldr	r1, [r0, #0]
 800927a:	9301      	str	r3, [sp, #4]
 800927c:	f846 5c04 	str.w	r5, [r6, #-4]
 8009280:	9502      	str	r5, [sp, #8]
 8009282:	784a      	ldrb	r2, [r1, #1]
 8009284:	1c4b      	adds	r3, r1, #1
 8009286:	9303      	str	r3, [sp, #12]
 8009288:	b342      	cbz	r2, 80092dc <__hexnan+0x88>
 800928a:	4610      	mov	r0, r2
 800928c:	9105      	str	r1, [sp, #20]
 800928e:	9204      	str	r2, [sp, #16]
 8009290:	f7ff fd75 	bl	8008d7e <__hexdig_fun>
 8009294:	2800      	cmp	r0, #0
 8009296:	d14f      	bne.n	8009338 <__hexnan+0xe4>
 8009298:	9a04      	ldr	r2, [sp, #16]
 800929a:	9905      	ldr	r1, [sp, #20]
 800929c:	2a20      	cmp	r2, #32
 800929e:	d818      	bhi.n	80092d2 <__hexnan+0x7e>
 80092a0:	9b02      	ldr	r3, [sp, #8]
 80092a2:	459b      	cmp	fp, r3
 80092a4:	dd13      	ble.n	80092ce <__hexnan+0x7a>
 80092a6:	454c      	cmp	r4, r9
 80092a8:	d206      	bcs.n	80092b8 <__hexnan+0x64>
 80092aa:	2d07      	cmp	r5, #7
 80092ac:	dc04      	bgt.n	80092b8 <__hexnan+0x64>
 80092ae:	462a      	mov	r2, r5
 80092b0:	4649      	mov	r1, r9
 80092b2:	4620      	mov	r0, r4
 80092b4:	f7ff ffa8 	bl	8009208 <L_shift>
 80092b8:	4544      	cmp	r4, r8
 80092ba:	d950      	bls.n	800935e <__hexnan+0x10a>
 80092bc:	2300      	movs	r3, #0
 80092be:	f1a4 0904 	sub.w	r9, r4, #4
 80092c2:	f844 3c04 	str.w	r3, [r4, #-4]
 80092c6:	461d      	mov	r5, r3
 80092c8:	464c      	mov	r4, r9
 80092ca:	f8cd b008 	str.w	fp, [sp, #8]
 80092ce:	9903      	ldr	r1, [sp, #12]
 80092d0:	e7d7      	b.n	8009282 <__hexnan+0x2e>
 80092d2:	2a29      	cmp	r2, #41	; 0x29
 80092d4:	d155      	bne.n	8009382 <__hexnan+0x12e>
 80092d6:	3102      	adds	r1, #2
 80092d8:	f8ca 1000 	str.w	r1, [sl]
 80092dc:	f1bb 0f00 	cmp.w	fp, #0
 80092e0:	d04f      	beq.n	8009382 <__hexnan+0x12e>
 80092e2:	454c      	cmp	r4, r9
 80092e4:	d206      	bcs.n	80092f4 <__hexnan+0xa0>
 80092e6:	2d07      	cmp	r5, #7
 80092e8:	dc04      	bgt.n	80092f4 <__hexnan+0xa0>
 80092ea:	462a      	mov	r2, r5
 80092ec:	4649      	mov	r1, r9
 80092ee:	4620      	mov	r0, r4
 80092f0:	f7ff ff8a 	bl	8009208 <L_shift>
 80092f4:	4544      	cmp	r4, r8
 80092f6:	d934      	bls.n	8009362 <__hexnan+0x10e>
 80092f8:	4623      	mov	r3, r4
 80092fa:	f1a8 0204 	sub.w	r2, r8, #4
 80092fe:	f853 1b04 	ldr.w	r1, [r3], #4
 8009302:	429f      	cmp	r7, r3
 8009304:	f842 1f04 	str.w	r1, [r2, #4]!
 8009308:	d2f9      	bcs.n	80092fe <__hexnan+0xaa>
 800930a:	1b3b      	subs	r3, r7, r4
 800930c:	f023 0303 	bic.w	r3, r3, #3
 8009310:	3304      	adds	r3, #4
 8009312:	3e03      	subs	r6, #3
 8009314:	3401      	adds	r4, #1
 8009316:	42a6      	cmp	r6, r4
 8009318:	bf38      	it	cc
 800931a:	2304      	movcc	r3, #4
 800931c:	2200      	movs	r2, #0
 800931e:	4443      	add	r3, r8
 8009320:	f843 2b04 	str.w	r2, [r3], #4
 8009324:	429f      	cmp	r7, r3
 8009326:	d2fb      	bcs.n	8009320 <__hexnan+0xcc>
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	b91b      	cbnz	r3, 8009334 <__hexnan+0xe0>
 800932c:	4547      	cmp	r7, r8
 800932e:	d126      	bne.n	800937e <__hexnan+0x12a>
 8009330:	2301      	movs	r3, #1
 8009332:	603b      	str	r3, [r7, #0]
 8009334:	2005      	movs	r0, #5
 8009336:	e025      	b.n	8009384 <__hexnan+0x130>
 8009338:	3501      	adds	r5, #1
 800933a:	2d08      	cmp	r5, #8
 800933c:	f10b 0b01 	add.w	fp, fp, #1
 8009340:	dd06      	ble.n	8009350 <__hexnan+0xfc>
 8009342:	4544      	cmp	r4, r8
 8009344:	d9c3      	bls.n	80092ce <__hexnan+0x7a>
 8009346:	2300      	movs	r3, #0
 8009348:	2501      	movs	r5, #1
 800934a:	f844 3c04 	str.w	r3, [r4, #-4]
 800934e:	3c04      	subs	r4, #4
 8009350:	6822      	ldr	r2, [r4, #0]
 8009352:	f000 000f 	and.w	r0, r0, #15
 8009356:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800935a:	6020      	str	r0, [r4, #0]
 800935c:	e7b7      	b.n	80092ce <__hexnan+0x7a>
 800935e:	2508      	movs	r5, #8
 8009360:	e7b5      	b.n	80092ce <__hexnan+0x7a>
 8009362:	9b01      	ldr	r3, [sp, #4]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d0df      	beq.n	8009328 <__hexnan+0xd4>
 8009368:	f04f 32ff 	mov.w	r2, #4294967295
 800936c:	f1c3 0320 	rsb	r3, r3, #32
 8009370:	40da      	lsrs	r2, r3
 8009372:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009376:	4013      	ands	r3, r2
 8009378:	f846 3c04 	str.w	r3, [r6, #-4]
 800937c:	e7d4      	b.n	8009328 <__hexnan+0xd4>
 800937e:	3f04      	subs	r7, #4
 8009380:	e7d2      	b.n	8009328 <__hexnan+0xd4>
 8009382:	2004      	movs	r0, #4
 8009384:	b007      	add	sp, #28
 8009386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800938a <__ascii_mbtowc>:
 800938a:	b082      	sub	sp, #8
 800938c:	b901      	cbnz	r1, 8009390 <__ascii_mbtowc+0x6>
 800938e:	a901      	add	r1, sp, #4
 8009390:	b142      	cbz	r2, 80093a4 <__ascii_mbtowc+0x1a>
 8009392:	b14b      	cbz	r3, 80093a8 <__ascii_mbtowc+0x1e>
 8009394:	7813      	ldrb	r3, [r2, #0]
 8009396:	600b      	str	r3, [r1, #0]
 8009398:	7812      	ldrb	r2, [r2, #0]
 800939a:	1e10      	subs	r0, r2, #0
 800939c:	bf18      	it	ne
 800939e:	2001      	movne	r0, #1
 80093a0:	b002      	add	sp, #8
 80093a2:	4770      	bx	lr
 80093a4:	4610      	mov	r0, r2
 80093a6:	e7fb      	b.n	80093a0 <__ascii_mbtowc+0x16>
 80093a8:	f06f 0001 	mvn.w	r0, #1
 80093ac:	e7f8      	b.n	80093a0 <__ascii_mbtowc+0x16>
	...

080093b0 <_Balloc>:
 80093b0:	b570      	push	{r4, r5, r6, lr}
 80093b2:	69c6      	ldr	r6, [r0, #28]
 80093b4:	4604      	mov	r4, r0
 80093b6:	460d      	mov	r5, r1
 80093b8:	b976      	cbnz	r6, 80093d8 <_Balloc+0x28>
 80093ba:	2010      	movs	r0, #16
 80093bc:	f7fc fd2a 	bl	8005e14 <malloc>
 80093c0:	4602      	mov	r2, r0
 80093c2:	61e0      	str	r0, [r4, #28]
 80093c4:	b920      	cbnz	r0, 80093d0 <_Balloc+0x20>
 80093c6:	216b      	movs	r1, #107	; 0x6b
 80093c8:	4b17      	ldr	r3, [pc, #92]	; (8009428 <_Balloc+0x78>)
 80093ca:	4818      	ldr	r0, [pc, #96]	; (800942c <_Balloc+0x7c>)
 80093cc:	f7fe fdb0 	bl	8007f30 <__assert_func>
 80093d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80093d4:	6006      	str	r6, [r0, #0]
 80093d6:	60c6      	str	r6, [r0, #12]
 80093d8:	69e6      	ldr	r6, [r4, #28]
 80093da:	68f3      	ldr	r3, [r6, #12]
 80093dc:	b183      	cbz	r3, 8009400 <_Balloc+0x50>
 80093de:	69e3      	ldr	r3, [r4, #28]
 80093e0:	68db      	ldr	r3, [r3, #12]
 80093e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80093e6:	b9b8      	cbnz	r0, 8009418 <_Balloc+0x68>
 80093e8:	2101      	movs	r1, #1
 80093ea:	fa01 f605 	lsl.w	r6, r1, r5
 80093ee:	1d72      	adds	r2, r6, #5
 80093f0:	4620      	mov	r0, r4
 80093f2:	0092      	lsls	r2, r2, #2
 80093f4:	f000 febb 	bl	800a16e <_calloc_r>
 80093f8:	b160      	cbz	r0, 8009414 <_Balloc+0x64>
 80093fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80093fe:	e00e      	b.n	800941e <_Balloc+0x6e>
 8009400:	2221      	movs	r2, #33	; 0x21
 8009402:	2104      	movs	r1, #4
 8009404:	4620      	mov	r0, r4
 8009406:	f000 feb2 	bl	800a16e <_calloc_r>
 800940a:	69e3      	ldr	r3, [r4, #28]
 800940c:	60f0      	str	r0, [r6, #12]
 800940e:	68db      	ldr	r3, [r3, #12]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d1e4      	bne.n	80093de <_Balloc+0x2e>
 8009414:	2000      	movs	r0, #0
 8009416:	bd70      	pop	{r4, r5, r6, pc}
 8009418:	6802      	ldr	r2, [r0, #0]
 800941a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800941e:	2300      	movs	r3, #0
 8009420:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009424:	e7f7      	b.n	8009416 <_Balloc+0x66>
 8009426:	bf00      	nop
 8009428:	0800a93a 	.word	0x0800a93a
 800942c:	0800aac5 	.word	0x0800aac5

08009430 <_Bfree>:
 8009430:	b570      	push	{r4, r5, r6, lr}
 8009432:	69c6      	ldr	r6, [r0, #28]
 8009434:	4605      	mov	r5, r0
 8009436:	460c      	mov	r4, r1
 8009438:	b976      	cbnz	r6, 8009458 <_Bfree+0x28>
 800943a:	2010      	movs	r0, #16
 800943c:	f7fc fcea 	bl	8005e14 <malloc>
 8009440:	4602      	mov	r2, r0
 8009442:	61e8      	str	r0, [r5, #28]
 8009444:	b920      	cbnz	r0, 8009450 <_Bfree+0x20>
 8009446:	218f      	movs	r1, #143	; 0x8f
 8009448:	4b08      	ldr	r3, [pc, #32]	; (800946c <_Bfree+0x3c>)
 800944a:	4809      	ldr	r0, [pc, #36]	; (8009470 <_Bfree+0x40>)
 800944c:	f7fe fd70 	bl	8007f30 <__assert_func>
 8009450:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009454:	6006      	str	r6, [r0, #0]
 8009456:	60c6      	str	r6, [r0, #12]
 8009458:	b13c      	cbz	r4, 800946a <_Bfree+0x3a>
 800945a:	69eb      	ldr	r3, [r5, #28]
 800945c:	6862      	ldr	r2, [r4, #4]
 800945e:	68db      	ldr	r3, [r3, #12]
 8009460:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009464:	6021      	str	r1, [r4, #0]
 8009466:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800946a:	bd70      	pop	{r4, r5, r6, pc}
 800946c:	0800a93a 	.word	0x0800a93a
 8009470:	0800aac5 	.word	0x0800aac5

08009474 <__multadd>:
 8009474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009478:	4607      	mov	r7, r0
 800947a:	460c      	mov	r4, r1
 800947c:	461e      	mov	r6, r3
 800947e:	2000      	movs	r0, #0
 8009480:	690d      	ldr	r5, [r1, #16]
 8009482:	f101 0c14 	add.w	ip, r1, #20
 8009486:	f8dc 3000 	ldr.w	r3, [ip]
 800948a:	3001      	adds	r0, #1
 800948c:	b299      	uxth	r1, r3
 800948e:	fb02 6101 	mla	r1, r2, r1, r6
 8009492:	0c1e      	lsrs	r6, r3, #16
 8009494:	0c0b      	lsrs	r3, r1, #16
 8009496:	fb02 3306 	mla	r3, r2, r6, r3
 800949a:	b289      	uxth	r1, r1
 800949c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80094a0:	4285      	cmp	r5, r0
 80094a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80094a6:	f84c 1b04 	str.w	r1, [ip], #4
 80094aa:	dcec      	bgt.n	8009486 <__multadd+0x12>
 80094ac:	b30e      	cbz	r6, 80094f2 <__multadd+0x7e>
 80094ae:	68a3      	ldr	r3, [r4, #8]
 80094b0:	42ab      	cmp	r3, r5
 80094b2:	dc19      	bgt.n	80094e8 <__multadd+0x74>
 80094b4:	6861      	ldr	r1, [r4, #4]
 80094b6:	4638      	mov	r0, r7
 80094b8:	3101      	adds	r1, #1
 80094ba:	f7ff ff79 	bl	80093b0 <_Balloc>
 80094be:	4680      	mov	r8, r0
 80094c0:	b928      	cbnz	r0, 80094ce <__multadd+0x5a>
 80094c2:	4602      	mov	r2, r0
 80094c4:	21ba      	movs	r1, #186	; 0xba
 80094c6:	4b0c      	ldr	r3, [pc, #48]	; (80094f8 <__multadd+0x84>)
 80094c8:	480c      	ldr	r0, [pc, #48]	; (80094fc <__multadd+0x88>)
 80094ca:	f7fe fd31 	bl	8007f30 <__assert_func>
 80094ce:	6922      	ldr	r2, [r4, #16]
 80094d0:	f104 010c 	add.w	r1, r4, #12
 80094d4:	3202      	adds	r2, #2
 80094d6:	0092      	lsls	r2, r2, #2
 80094d8:	300c      	adds	r0, #12
 80094da:	f7fe fd10 	bl	8007efe <memcpy>
 80094de:	4621      	mov	r1, r4
 80094e0:	4638      	mov	r0, r7
 80094e2:	f7ff ffa5 	bl	8009430 <_Bfree>
 80094e6:	4644      	mov	r4, r8
 80094e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80094ec:	3501      	adds	r5, #1
 80094ee:	615e      	str	r6, [r3, #20]
 80094f0:	6125      	str	r5, [r4, #16]
 80094f2:	4620      	mov	r0, r4
 80094f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094f8:	0800aa54 	.word	0x0800aa54
 80094fc:	0800aac5 	.word	0x0800aac5

08009500 <__s2b>:
 8009500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009504:	4615      	mov	r5, r2
 8009506:	2209      	movs	r2, #9
 8009508:	461f      	mov	r7, r3
 800950a:	3308      	adds	r3, #8
 800950c:	460c      	mov	r4, r1
 800950e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009512:	4606      	mov	r6, r0
 8009514:	2201      	movs	r2, #1
 8009516:	2100      	movs	r1, #0
 8009518:	429a      	cmp	r2, r3
 800951a:	db09      	blt.n	8009530 <__s2b+0x30>
 800951c:	4630      	mov	r0, r6
 800951e:	f7ff ff47 	bl	80093b0 <_Balloc>
 8009522:	b940      	cbnz	r0, 8009536 <__s2b+0x36>
 8009524:	4602      	mov	r2, r0
 8009526:	21d3      	movs	r1, #211	; 0xd3
 8009528:	4b18      	ldr	r3, [pc, #96]	; (800958c <__s2b+0x8c>)
 800952a:	4819      	ldr	r0, [pc, #100]	; (8009590 <__s2b+0x90>)
 800952c:	f7fe fd00 	bl	8007f30 <__assert_func>
 8009530:	0052      	lsls	r2, r2, #1
 8009532:	3101      	adds	r1, #1
 8009534:	e7f0      	b.n	8009518 <__s2b+0x18>
 8009536:	9b08      	ldr	r3, [sp, #32]
 8009538:	2d09      	cmp	r5, #9
 800953a:	6143      	str	r3, [r0, #20]
 800953c:	f04f 0301 	mov.w	r3, #1
 8009540:	6103      	str	r3, [r0, #16]
 8009542:	dd16      	ble.n	8009572 <__s2b+0x72>
 8009544:	f104 0909 	add.w	r9, r4, #9
 8009548:	46c8      	mov	r8, r9
 800954a:	442c      	add	r4, r5
 800954c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009550:	4601      	mov	r1, r0
 8009552:	220a      	movs	r2, #10
 8009554:	4630      	mov	r0, r6
 8009556:	3b30      	subs	r3, #48	; 0x30
 8009558:	f7ff ff8c 	bl	8009474 <__multadd>
 800955c:	45a0      	cmp	r8, r4
 800955e:	d1f5      	bne.n	800954c <__s2b+0x4c>
 8009560:	f1a5 0408 	sub.w	r4, r5, #8
 8009564:	444c      	add	r4, r9
 8009566:	1b2d      	subs	r5, r5, r4
 8009568:	1963      	adds	r3, r4, r5
 800956a:	42bb      	cmp	r3, r7
 800956c:	db04      	blt.n	8009578 <__s2b+0x78>
 800956e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009572:	2509      	movs	r5, #9
 8009574:	340a      	adds	r4, #10
 8009576:	e7f6      	b.n	8009566 <__s2b+0x66>
 8009578:	f814 3b01 	ldrb.w	r3, [r4], #1
 800957c:	4601      	mov	r1, r0
 800957e:	220a      	movs	r2, #10
 8009580:	4630      	mov	r0, r6
 8009582:	3b30      	subs	r3, #48	; 0x30
 8009584:	f7ff ff76 	bl	8009474 <__multadd>
 8009588:	e7ee      	b.n	8009568 <__s2b+0x68>
 800958a:	bf00      	nop
 800958c:	0800aa54 	.word	0x0800aa54
 8009590:	0800aac5 	.word	0x0800aac5

08009594 <__hi0bits>:
 8009594:	0c02      	lsrs	r2, r0, #16
 8009596:	0412      	lsls	r2, r2, #16
 8009598:	4603      	mov	r3, r0
 800959a:	b9ca      	cbnz	r2, 80095d0 <__hi0bits+0x3c>
 800959c:	0403      	lsls	r3, r0, #16
 800959e:	2010      	movs	r0, #16
 80095a0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80095a4:	bf04      	itt	eq
 80095a6:	021b      	lsleq	r3, r3, #8
 80095a8:	3008      	addeq	r0, #8
 80095aa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80095ae:	bf04      	itt	eq
 80095b0:	011b      	lsleq	r3, r3, #4
 80095b2:	3004      	addeq	r0, #4
 80095b4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80095b8:	bf04      	itt	eq
 80095ba:	009b      	lsleq	r3, r3, #2
 80095bc:	3002      	addeq	r0, #2
 80095be:	2b00      	cmp	r3, #0
 80095c0:	db05      	blt.n	80095ce <__hi0bits+0x3a>
 80095c2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80095c6:	f100 0001 	add.w	r0, r0, #1
 80095ca:	bf08      	it	eq
 80095cc:	2020      	moveq	r0, #32
 80095ce:	4770      	bx	lr
 80095d0:	2000      	movs	r0, #0
 80095d2:	e7e5      	b.n	80095a0 <__hi0bits+0xc>

080095d4 <__lo0bits>:
 80095d4:	6803      	ldr	r3, [r0, #0]
 80095d6:	4602      	mov	r2, r0
 80095d8:	f013 0007 	ands.w	r0, r3, #7
 80095dc:	d00b      	beq.n	80095f6 <__lo0bits+0x22>
 80095de:	07d9      	lsls	r1, r3, #31
 80095e0:	d421      	bmi.n	8009626 <__lo0bits+0x52>
 80095e2:	0798      	lsls	r0, r3, #30
 80095e4:	bf49      	itett	mi
 80095e6:	085b      	lsrmi	r3, r3, #1
 80095e8:	089b      	lsrpl	r3, r3, #2
 80095ea:	2001      	movmi	r0, #1
 80095ec:	6013      	strmi	r3, [r2, #0]
 80095ee:	bf5c      	itt	pl
 80095f0:	2002      	movpl	r0, #2
 80095f2:	6013      	strpl	r3, [r2, #0]
 80095f4:	4770      	bx	lr
 80095f6:	b299      	uxth	r1, r3
 80095f8:	b909      	cbnz	r1, 80095fe <__lo0bits+0x2a>
 80095fa:	2010      	movs	r0, #16
 80095fc:	0c1b      	lsrs	r3, r3, #16
 80095fe:	b2d9      	uxtb	r1, r3
 8009600:	b909      	cbnz	r1, 8009606 <__lo0bits+0x32>
 8009602:	3008      	adds	r0, #8
 8009604:	0a1b      	lsrs	r3, r3, #8
 8009606:	0719      	lsls	r1, r3, #28
 8009608:	bf04      	itt	eq
 800960a:	091b      	lsreq	r3, r3, #4
 800960c:	3004      	addeq	r0, #4
 800960e:	0799      	lsls	r1, r3, #30
 8009610:	bf04      	itt	eq
 8009612:	089b      	lsreq	r3, r3, #2
 8009614:	3002      	addeq	r0, #2
 8009616:	07d9      	lsls	r1, r3, #31
 8009618:	d403      	bmi.n	8009622 <__lo0bits+0x4e>
 800961a:	085b      	lsrs	r3, r3, #1
 800961c:	f100 0001 	add.w	r0, r0, #1
 8009620:	d003      	beq.n	800962a <__lo0bits+0x56>
 8009622:	6013      	str	r3, [r2, #0]
 8009624:	4770      	bx	lr
 8009626:	2000      	movs	r0, #0
 8009628:	4770      	bx	lr
 800962a:	2020      	movs	r0, #32
 800962c:	4770      	bx	lr
	...

08009630 <__i2b>:
 8009630:	b510      	push	{r4, lr}
 8009632:	460c      	mov	r4, r1
 8009634:	2101      	movs	r1, #1
 8009636:	f7ff febb 	bl	80093b0 <_Balloc>
 800963a:	4602      	mov	r2, r0
 800963c:	b928      	cbnz	r0, 800964a <__i2b+0x1a>
 800963e:	f240 1145 	movw	r1, #325	; 0x145
 8009642:	4b04      	ldr	r3, [pc, #16]	; (8009654 <__i2b+0x24>)
 8009644:	4804      	ldr	r0, [pc, #16]	; (8009658 <__i2b+0x28>)
 8009646:	f7fe fc73 	bl	8007f30 <__assert_func>
 800964a:	2301      	movs	r3, #1
 800964c:	6144      	str	r4, [r0, #20]
 800964e:	6103      	str	r3, [r0, #16]
 8009650:	bd10      	pop	{r4, pc}
 8009652:	bf00      	nop
 8009654:	0800aa54 	.word	0x0800aa54
 8009658:	0800aac5 	.word	0x0800aac5

0800965c <__multiply>:
 800965c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009660:	4691      	mov	r9, r2
 8009662:	690a      	ldr	r2, [r1, #16]
 8009664:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009668:	460c      	mov	r4, r1
 800966a:	429a      	cmp	r2, r3
 800966c:	bfbe      	ittt	lt
 800966e:	460b      	movlt	r3, r1
 8009670:	464c      	movlt	r4, r9
 8009672:	4699      	movlt	r9, r3
 8009674:	6927      	ldr	r7, [r4, #16]
 8009676:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800967a:	68a3      	ldr	r3, [r4, #8]
 800967c:	6861      	ldr	r1, [r4, #4]
 800967e:	eb07 060a 	add.w	r6, r7, sl
 8009682:	42b3      	cmp	r3, r6
 8009684:	b085      	sub	sp, #20
 8009686:	bfb8      	it	lt
 8009688:	3101      	addlt	r1, #1
 800968a:	f7ff fe91 	bl	80093b0 <_Balloc>
 800968e:	b930      	cbnz	r0, 800969e <__multiply+0x42>
 8009690:	4602      	mov	r2, r0
 8009692:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009696:	4b43      	ldr	r3, [pc, #268]	; (80097a4 <__multiply+0x148>)
 8009698:	4843      	ldr	r0, [pc, #268]	; (80097a8 <__multiply+0x14c>)
 800969a:	f7fe fc49 	bl	8007f30 <__assert_func>
 800969e:	f100 0514 	add.w	r5, r0, #20
 80096a2:	462b      	mov	r3, r5
 80096a4:	2200      	movs	r2, #0
 80096a6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80096aa:	4543      	cmp	r3, r8
 80096ac:	d321      	bcc.n	80096f2 <__multiply+0x96>
 80096ae:	f104 0314 	add.w	r3, r4, #20
 80096b2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80096b6:	f109 0314 	add.w	r3, r9, #20
 80096ba:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80096be:	9202      	str	r2, [sp, #8]
 80096c0:	1b3a      	subs	r2, r7, r4
 80096c2:	3a15      	subs	r2, #21
 80096c4:	f022 0203 	bic.w	r2, r2, #3
 80096c8:	3204      	adds	r2, #4
 80096ca:	f104 0115 	add.w	r1, r4, #21
 80096ce:	428f      	cmp	r7, r1
 80096d0:	bf38      	it	cc
 80096d2:	2204      	movcc	r2, #4
 80096d4:	9201      	str	r2, [sp, #4]
 80096d6:	9a02      	ldr	r2, [sp, #8]
 80096d8:	9303      	str	r3, [sp, #12]
 80096da:	429a      	cmp	r2, r3
 80096dc:	d80c      	bhi.n	80096f8 <__multiply+0x9c>
 80096de:	2e00      	cmp	r6, #0
 80096e0:	dd03      	ble.n	80096ea <__multiply+0x8e>
 80096e2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d05a      	beq.n	80097a0 <__multiply+0x144>
 80096ea:	6106      	str	r6, [r0, #16]
 80096ec:	b005      	add	sp, #20
 80096ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096f2:	f843 2b04 	str.w	r2, [r3], #4
 80096f6:	e7d8      	b.n	80096aa <__multiply+0x4e>
 80096f8:	f8b3 a000 	ldrh.w	sl, [r3]
 80096fc:	f1ba 0f00 	cmp.w	sl, #0
 8009700:	d023      	beq.n	800974a <__multiply+0xee>
 8009702:	46a9      	mov	r9, r5
 8009704:	f04f 0c00 	mov.w	ip, #0
 8009708:	f104 0e14 	add.w	lr, r4, #20
 800970c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009710:	f8d9 1000 	ldr.w	r1, [r9]
 8009714:	fa1f fb82 	uxth.w	fp, r2
 8009718:	b289      	uxth	r1, r1
 800971a:	fb0a 110b 	mla	r1, sl, fp, r1
 800971e:	4461      	add	r1, ip
 8009720:	f8d9 c000 	ldr.w	ip, [r9]
 8009724:	0c12      	lsrs	r2, r2, #16
 8009726:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800972a:	fb0a c202 	mla	r2, sl, r2, ip
 800972e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009732:	b289      	uxth	r1, r1
 8009734:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009738:	4577      	cmp	r7, lr
 800973a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800973e:	f849 1b04 	str.w	r1, [r9], #4
 8009742:	d8e3      	bhi.n	800970c <__multiply+0xb0>
 8009744:	9a01      	ldr	r2, [sp, #4]
 8009746:	f845 c002 	str.w	ip, [r5, r2]
 800974a:	9a03      	ldr	r2, [sp, #12]
 800974c:	3304      	adds	r3, #4
 800974e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009752:	f1b9 0f00 	cmp.w	r9, #0
 8009756:	d021      	beq.n	800979c <__multiply+0x140>
 8009758:	46ae      	mov	lr, r5
 800975a:	f04f 0a00 	mov.w	sl, #0
 800975e:	6829      	ldr	r1, [r5, #0]
 8009760:	f104 0c14 	add.w	ip, r4, #20
 8009764:	f8bc b000 	ldrh.w	fp, [ip]
 8009768:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800976c:	b289      	uxth	r1, r1
 800976e:	fb09 220b 	mla	r2, r9, fp, r2
 8009772:	4452      	add	r2, sl
 8009774:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009778:	f84e 1b04 	str.w	r1, [lr], #4
 800977c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009780:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009784:	f8be 1000 	ldrh.w	r1, [lr]
 8009788:	4567      	cmp	r7, ip
 800978a:	fb09 110a 	mla	r1, r9, sl, r1
 800978e:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009792:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009796:	d8e5      	bhi.n	8009764 <__multiply+0x108>
 8009798:	9a01      	ldr	r2, [sp, #4]
 800979a:	50a9      	str	r1, [r5, r2]
 800979c:	3504      	adds	r5, #4
 800979e:	e79a      	b.n	80096d6 <__multiply+0x7a>
 80097a0:	3e01      	subs	r6, #1
 80097a2:	e79c      	b.n	80096de <__multiply+0x82>
 80097a4:	0800aa54 	.word	0x0800aa54
 80097a8:	0800aac5 	.word	0x0800aac5

080097ac <__pow5mult>:
 80097ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097b0:	4615      	mov	r5, r2
 80097b2:	f012 0203 	ands.w	r2, r2, #3
 80097b6:	4606      	mov	r6, r0
 80097b8:	460f      	mov	r7, r1
 80097ba:	d007      	beq.n	80097cc <__pow5mult+0x20>
 80097bc:	4c25      	ldr	r4, [pc, #148]	; (8009854 <__pow5mult+0xa8>)
 80097be:	3a01      	subs	r2, #1
 80097c0:	2300      	movs	r3, #0
 80097c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80097c6:	f7ff fe55 	bl	8009474 <__multadd>
 80097ca:	4607      	mov	r7, r0
 80097cc:	10ad      	asrs	r5, r5, #2
 80097ce:	d03d      	beq.n	800984c <__pow5mult+0xa0>
 80097d0:	69f4      	ldr	r4, [r6, #28]
 80097d2:	b97c      	cbnz	r4, 80097f4 <__pow5mult+0x48>
 80097d4:	2010      	movs	r0, #16
 80097d6:	f7fc fb1d 	bl	8005e14 <malloc>
 80097da:	4602      	mov	r2, r0
 80097dc:	61f0      	str	r0, [r6, #28]
 80097de:	b928      	cbnz	r0, 80097ec <__pow5mult+0x40>
 80097e0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80097e4:	4b1c      	ldr	r3, [pc, #112]	; (8009858 <__pow5mult+0xac>)
 80097e6:	481d      	ldr	r0, [pc, #116]	; (800985c <__pow5mult+0xb0>)
 80097e8:	f7fe fba2 	bl	8007f30 <__assert_func>
 80097ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80097f0:	6004      	str	r4, [r0, #0]
 80097f2:	60c4      	str	r4, [r0, #12]
 80097f4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80097f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80097fc:	b94c      	cbnz	r4, 8009812 <__pow5mult+0x66>
 80097fe:	f240 2171 	movw	r1, #625	; 0x271
 8009802:	4630      	mov	r0, r6
 8009804:	f7ff ff14 	bl	8009630 <__i2b>
 8009808:	2300      	movs	r3, #0
 800980a:	4604      	mov	r4, r0
 800980c:	f8c8 0008 	str.w	r0, [r8, #8]
 8009810:	6003      	str	r3, [r0, #0]
 8009812:	f04f 0900 	mov.w	r9, #0
 8009816:	07eb      	lsls	r3, r5, #31
 8009818:	d50a      	bpl.n	8009830 <__pow5mult+0x84>
 800981a:	4639      	mov	r1, r7
 800981c:	4622      	mov	r2, r4
 800981e:	4630      	mov	r0, r6
 8009820:	f7ff ff1c 	bl	800965c <__multiply>
 8009824:	4680      	mov	r8, r0
 8009826:	4639      	mov	r1, r7
 8009828:	4630      	mov	r0, r6
 800982a:	f7ff fe01 	bl	8009430 <_Bfree>
 800982e:	4647      	mov	r7, r8
 8009830:	106d      	asrs	r5, r5, #1
 8009832:	d00b      	beq.n	800984c <__pow5mult+0xa0>
 8009834:	6820      	ldr	r0, [r4, #0]
 8009836:	b938      	cbnz	r0, 8009848 <__pow5mult+0x9c>
 8009838:	4622      	mov	r2, r4
 800983a:	4621      	mov	r1, r4
 800983c:	4630      	mov	r0, r6
 800983e:	f7ff ff0d 	bl	800965c <__multiply>
 8009842:	6020      	str	r0, [r4, #0]
 8009844:	f8c0 9000 	str.w	r9, [r0]
 8009848:	4604      	mov	r4, r0
 800984a:	e7e4      	b.n	8009816 <__pow5mult+0x6a>
 800984c:	4638      	mov	r0, r7
 800984e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009852:	bf00      	nop
 8009854:	0800ac10 	.word	0x0800ac10
 8009858:	0800a93a 	.word	0x0800a93a
 800985c:	0800aac5 	.word	0x0800aac5

08009860 <__lshift>:
 8009860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009864:	460c      	mov	r4, r1
 8009866:	4607      	mov	r7, r0
 8009868:	4691      	mov	r9, r2
 800986a:	6923      	ldr	r3, [r4, #16]
 800986c:	6849      	ldr	r1, [r1, #4]
 800986e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009872:	68a3      	ldr	r3, [r4, #8]
 8009874:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009878:	f108 0601 	add.w	r6, r8, #1
 800987c:	42b3      	cmp	r3, r6
 800987e:	db0b      	blt.n	8009898 <__lshift+0x38>
 8009880:	4638      	mov	r0, r7
 8009882:	f7ff fd95 	bl	80093b0 <_Balloc>
 8009886:	4605      	mov	r5, r0
 8009888:	b948      	cbnz	r0, 800989e <__lshift+0x3e>
 800988a:	4602      	mov	r2, r0
 800988c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009890:	4b27      	ldr	r3, [pc, #156]	; (8009930 <__lshift+0xd0>)
 8009892:	4828      	ldr	r0, [pc, #160]	; (8009934 <__lshift+0xd4>)
 8009894:	f7fe fb4c 	bl	8007f30 <__assert_func>
 8009898:	3101      	adds	r1, #1
 800989a:	005b      	lsls	r3, r3, #1
 800989c:	e7ee      	b.n	800987c <__lshift+0x1c>
 800989e:	2300      	movs	r3, #0
 80098a0:	f100 0114 	add.w	r1, r0, #20
 80098a4:	f100 0210 	add.w	r2, r0, #16
 80098a8:	4618      	mov	r0, r3
 80098aa:	4553      	cmp	r3, sl
 80098ac:	db33      	blt.n	8009916 <__lshift+0xb6>
 80098ae:	6920      	ldr	r0, [r4, #16]
 80098b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80098b4:	f104 0314 	add.w	r3, r4, #20
 80098b8:	f019 091f 	ands.w	r9, r9, #31
 80098bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80098c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80098c4:	d02b      	beq.n	800991e <__lshift+0xbe>
 80098c6:	468a      	mov	sl, r1
 80098c8:	2200      	movs	r2, #0
 80098ca:	f1c9 0e20 	rsb	lr, r9, #32
 80098ce:	6818      	ldr	r0, [r3, #0]
 80098d0:	fa00 f009 	lsl.w	r0, r0, r9
 80098d4:	4310      	orrs	r0, r2
 80098d6:	f84a 0b04 	str.w	r0, [sl], #4
 80098da:	f853 2b04 	ldr.w	r2, [r3], #4
 80098de:	459c      	cmp	ip, r3
 80098e0:	fa22 f20e 	lsr.w	r2, r2, lr
 80098e4:	d8f3      	bhi.n	80098ce <__lshift+0x6e>
 80098e6:	ebac 0304 	sub.w	r3, ip, r4
 80098ea:	3b15      	subs	r3, #21
 80098ec:	f023 0303 	bic.w	r3, r3, #3
 80098f0:	3304      	adds	r3, #4
 80098f2:	f104 0015 	add.w	r0, r4, #21
 80098f6:	4584      	cmp	ip, r0
 80098f8:	bf38      	it	cc
 80098fa:	2304      	movcc	r3, #4
 80098fc:	50ca      	str	r2, [r1, r3]
 80098fe:	b10a      	cbz	r2, 8009904 <__lshift+0xa4>
 8009900:	f108 0602 	add.w	r6, r8, #2
 8009904:	3e01      	subs	r6, #1
 8009906:	4638      	mov	r0, r7
 8009908:	4621      	mov	r1, r4
 800990a:	612e      	str	r6, [r5, #16]
 800990c:	f7ff fd90 	bl	8009430 <_Bfree>
 8009910:	4628      	mov	r0, r5
 8009912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009916:	f842 0f04 	str.w	r0, [r2, #4]!
 800991a:	3301      	adds	r3, #1
 800991c:	e7c5      	b.n	80098aa <__lshift+0x4a>
 800991e:	3904      	subs	r1, #4
 8009920:	f853 2b04 	ldr.w	r2, [r3], #4
 8009924:	459c      	cmp	ip, r3
 8009926:	f841 2f04 	str.w	r2, [r1, #4]!
 800992a:	d8f9      	bhi.n	8009920 <__lshift+0xc0>
 800992c:	e7ea      	b.n	8009904 <__lshift+0xa4>
 800992e:	bf00      	nop
 8009930:	0800aa54 	.word	0x0800aa54
 8009934:	0800aac5 	.word	0x0800aac5

08009938 <__mcmp>:
 8009938:	4603      	mov	r3, r0
 800993a:	690a      	ldr	r2, [r1, #16]
 800993c:	6900      	ldr	r0, [r0, #16]
 800993e:	b530      	push	{r4, r5, lr}
 8009940:	1a80      	subs	r0, r0, r2
 8009942:	d10d      	bne.n	8009960 <__mcmp+0x28>
 8009944:	3314      	adds	r3, #20
 8009946:	3114      	adds	r1, #20
 8009948:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800994c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009950:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009954:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009958:	4295      	cmp	r5, r2
 800995a:	d002      	beq.n	8009962 <__mcmp+0x2a>
 800995c:	d304      	bcc.n	8009968 <__mcmp+0x30>
 800995e:	2001      	movs	r0, #1
 8009960:	bd30      	pop	{r4, r5, pc}
 8009962:	42a3      	cmp	r3, r4
 8009964:	d3f4      	bcc.n	8009950 <__mcmp+0x18>
 8009966:	e7fb      	b.n	8009960 <__mcmp+0x28>
 8009968:	f04f 30ff 	mov.w	r0, #4294967295
 800996c:	e7f8      	b.n	8009960 <__mcmp+0x28>
	...

08009970 <__mdiff>:
 8009970:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009974:	460d      	mov	r5, r1
 8009976:	4607      	mov	r7, r0
 8009978:	4611      	mov	r1, r2
 800997a:	4628      	mov	r0, r5
 800997c:	4614      	mov	r4, r2
 800997e:	f7ff ffdb 	bl	8009938 <__mcmp>
 8009982:	1e06      	subs	r6, r0, #0
 8009984:	d111      	bne.n	80099aa <__mdiff+0x3a>
 8009986:	4631      	mov	r1, r6
 8009988:	4638      	mov	r0, r7
 800998a:	f7ff fd11 	bl	80093b0 <_Balloc>
 800998e:	4602      	mov	r2, r0
 8009990:	b928      	cbnz	r0, 800999e <__mdiff+0x2e>
 8009992:	f240 2137 	movw	r1, #567	; 0x237
 8009996:	4b3a      	ldr	r3, [pc, #232]	; (8009a80 <__mdiff+0x110>)
 8009998:	483a      	ldr	r0, [pc, #232]	; (8009a84 <__mdiff+0x114>)
 800999a:	f7fe fac9 	bl	8007f30 <__assert_func>
 800999e:	2301      	movs	r3, #1
 80099a0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80099a4:	4610      	mov	r0, r2
 80099a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099aa:	bfa4      	itt	ge
 80099ac:	4623      	movge	r3, r4
 80099ae:	462c      	movge	r4, r5
 80099b0:	4638      	mov	r0, r7
 80099b2:	6861      	ldr	r1, [r4, #4]
 80099b4:	bfa6      	itte	ge
 80099b6:	461d      	movge	r5, r3
 80099b8:	2600      	movge	r6, #0
 80099ba:	2601      	movlt	r6, #1
 80099bc:	f7ff fcf8 	bl	80093b0 <_Balloc>
 80099c0:	4602      	mov	r2, r0
 80099c2:	b918      	cbnz	r0, 80099cc <__mdiff+0x5c>
 80099c4:	f240 2145 	movw	r1, #581	; 0x245
 80099c8:	4b2d      	ldr	r3, [pc, #180]	; (8009a80 <__mdiff+0x110>)
 80099ca:	e7e5      	b.n	8009998 <__mdiff+0x28>
 80099cc:	f102 0814 	add.w	r8, r2, #20
 80099d0:	46c2      	mov	sl, r8
 80099d2:	f04f 0c00 	mov.w	ip, #0
 80099d6:	6927      	ldr	r7, [r4, #16]
 80099d8:	60c6      	str	r6, [r0, #12]
 80099da:	692e      	ldr	r6, [r5, #16]
 80099dc:	f104 0014 	add.w	r0, r4, #20
 80099e0:	f105 0914 	add.w	r9, r5, #20
 80099e4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80099e8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80099ec:	3410      	adds	r4, #16
 80099ee:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80099f2:	f859 3b04 	ldr.w	r3, [r9], #4
 80099f6:	fa1f f18b 	uxth.w	r1, fp
 80099fa:	4461      	add	r1, ip
 80099fc:	fa1f fc83 	uxth.w	ip, r3
 8009a00:	0c1b      	lsrs	r3, r3, #16
 8009a02:	eba1 010c 	sub.w	r1, r1, ip
 8009a06:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009a0a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009a0e:	b289      	uxth	r1, r1
 8009a10:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8009a14:	454e      	cmp	r6, r9
 8009a16:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009a1a:	f84a 1b04 	str.w	r1, [sl], #4
 8009a1e:	d8e6      	bhi.n	80099ee <__mdiff+0x7e>
 8009a20:	1b73      	subs	r3, r6, r5
 8009a22:	3b15      	subs	r3, #21
 8009a24:	f023 0303 	bic.w	r3, r3, #3
 8009a28:	3515      	adds	r5, #21
 8009a2a:	3304      	adds	r3, #4
 8009a2c:	42ae      	cmp	r6, r5
 8009a2e:	bf38      	it	cc
 8009a30:	2304      	movcc	r3, #4
 8009a32:	4418      	add	r0, r3
 8009a34:	4443      	add	r3, r8
 8009a36:	461e      	mov	r6, r3
 8009a38:	4605      	mov	r5, r0
 8009a3a:	4575      	cmp	r5, lr
 8009a3c:	d30e      	bcc.n	8009a5c <__mdiff+0xec>
 8009a3e:	f10e 0103 	add.w	r1, lr, #3
 8009a42:	1a09      	subs	r1, r1, r0
 8009a44:	f021 0103 	bic.w	r1, r1, #3
 8009a48:	3803      	subs	r0, #3
 8009a4a:	4586      	cmp	lr, r0
 8009a4c:	bf38      	it	cc
 8009a4e:	2100      	movcc	r1, #0
 8009a50:	440b      	add	r3, r1
 8009a52:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009a56:	b189      	cbz	r1, 8009a7c <__mdiff+0x10c>
 8009a58:	6117      	str	r7, [r2, #16]
 8009a5a:	e7a3      	b.n	80099a4 <__mdiff+0x34>
 8009a5c:	f855 8b04 	ldr.w	r8, [r5], #4
 8009a60:	fa1f f188 	uxth.w	r1, r8
 8009a64:	4461      	add	r1, ip
 8009a66:	140c      	asrs	r4, r1, #16
 8009a68:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009a6c:	b289      	uxth	r1, r1
 8009a6e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009a72:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8009a76:	f846 1b04 	str.w	r1, [r6], #4
 8009a7a:	e7de      	b.n	8009a3a <__mdiff+0xca>
 8009a7c:	3f01      	subs	r7, #1
 8009a7e:	e7e8      	b.n	8009a52 <__mdiff+0xe2>
 8009a80:	0800aa54 	.word	0x0800aa54
 8009a84:	0800aac5 	.word	0x0800aac5

08009a88 <__ulp>:
 8009a88:	4b0e      	ldr	r3, [pc, #56]	; (8009ac4 <__ulp+0x3c>)
 8009a8a:	400b      	ands	r3, r1
 8009a8c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	dc08      	bgt.n	8009aa6 <__ulp+0x1e>
 8009a94:	425b      	negs	r3, r3
 8009a96:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8009a9a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009a9e:	da04      	bge.n	8009aaa <__ulp+0x22>
 8009aa0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009aa4:	4113      	asrs	r3, r2
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	e008      	b.n	8009abc <__ulp+0x34>
 8009aaa:	f1a2 0314 	sub.w	r3, r2, #20
 8009aae:	2b1e      	cmp	r3, #30
 8009ab0:	bfd6      	itet	le
 8009ab2:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8009ab6:	2201      	movgt	r2, #1
 8009ab8:	40da      	lsrle	r2, r3
 8009aba:	2300      	movs	r3, #0
 8009abc:	4619      	mov	r1, r3
 8009abe:	4610      	mov	r0, r2
 8009ac0:	4770      	bx	lr
 8009ac2:	bf00      	nop
 8009ac4:	7ff00000 	.word	0x7ff00000

08009ac8 <__b2d>:
 8009ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aca:	6905      	ldr	r5, [r0, #16]
 8009acc:	f100 0714 	add.w	r7, r0, #20
 8009ad0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009ad4:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009ad8:	1f2e      	subs	r6, r5, #4
 8009ada:	4620      	mov	r0, r4
 8009adc:	f7ff fd5a 	bl	8009594 <__hi0bits>
 8009ae0:	f1c0 0220 	rsb	r2, r0, #32
 8009ae4:	280a      	cmp	r0, #10
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	f8df c068 	ldr.w	ip, [pc, #104]	; 8009b54 <__b2d+0x8c>
 8009aec:	600a      	str	r2, [r1, #0]
 8009aee:	dc12      	bgt.n	8009b16 <__b2d+0x4e>
 8009af0:	f1c0 0e0b 	rsb	lr, r0, #11
 8009af4:	fa24 f20e 	lsr.w	r2, r4, lr
 8009af8:	42b7      	cmp	r7, r6
 8009afa:	ea42 010c 	orr.w	r1, r2, ip
 8009afe:	bf2c      	ite	cs
 8009b00:	2200      	movcs	r2, #0
 8009b02:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8009b06:	3315      	adds	r3, #21
 8009b08:	fa04 f303 	lsl.w	r3, r4, r3
 8009b0c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009b10:	431a      	orrs	r2, r3
 8009b12:	4610      	mov	r0, r2
 8009b14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b16:	42b7      	cmp	r7, r6
 8009b18:	bf2e      	itee	cs
 8009b1a:	2200      	movcs	r2, #0
 8009b1c:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8009b20:	f1a5 0608 	subcc.w	r6, r5, #8
 8009b24:	3b0b      	subs	r3, #11
 8009b26:	d012      	beq.n	8009b4e <__b2d+0x86>
 8009b28:	f1c3 0520 	rsb	r5, r3, #32
 8009b2c:	fa22 f105 	lsr.w	r1, r2, r5
 8009b30:	409c      	lsls	r4, r3
 8009b32:	430c      	orrs	r4, r1
 8009b34:	42be      	cmp	r6, r7
 8009b36:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 8009b3a:	bf94      	ite	ls
 8009b3c:	2400      	movls	r4, #0
 8009b3e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009b42:	409a      	lsls	r2, r3
 8009b44:	40ec      	lsrs	r4, r5
 8009b46:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8009b4a:	4322      	orrs	r2, r4
 8009b4c:	e7e1      	b.n	8009b12 <__b2d+0x4a>
 8009b4e:	ea44 010c 	orr.w	r1, r4, ip
 8009b52:	e7de      	b.n	8009b12 <__b2d+0x4a>
 8009b54:	3ff00000 	.word	0x3ff00000

08009b58 <__d2b>:
 8009b58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b5a:	2101      	movs	r1, #1
 8009b5c:	4617      	mov	r7, r2
 8009b5e:	461c      	mov	r4, r3
 8009b60:	9e08      	ldr	r6, [sp, #32]
 8009b62:	f7ff fc25 	bl	80093b0 <_Balloc>
 8009b66:	4605      	mov	r5, r0
 8009b68:	b930      	cbnz	r0, 8009b78 <__d2b+0x20>
 8009b6a:	4602      	mov	r2, r0
 8009b6c:	f240 310f 	movw	r1, #783	; 0x30f
 8009b70:	4b22      	ldr	r3, [pc, #136]	; (8009bfc <__d2b+0xa4>)
 8009b72:	4823      	ldr	r0, [pc, #140]	; (8009c00 <__d2b+0xa8>)
 8009b74:	f7fe f9dc 	bl	8007f30 <__assert_func>
 8009b78:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8009b7c:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8009b80:	bb24      	cbnz	r4, 8009bcc <__d2b+0x74>
 8009b82:	2f00      	cmp	r7, #0
 8009b84:	9301      	str	r3, [sp, #4]
 8009b86:	d026      	beq.n	8009bd6 <__d2b+0x7e>
 8009b88:	4668      	mov	r0, sp
 8009b8a:	9700      	str	r7, [sp, #0]
 8009b8c:	f7ff fd22 	bl	80095d4 <__lo0bits>
 8009b90:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009b94:	b1e8      	cbz	r0, 8009bd2 <__d2b+0x7a>
 8009b96:	f1c0 0320 	rsb	r3, r0, #32
 8009b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8009b9e:	430b      	orrs	r3, r1
 8009ba0:	40c2      	lsrs	r2, r0
 8009ba2:	616b      	str	r3, [r5, #20]
 8009ba4:	9201      	str	r2, [sp, #4]
 8009ba6:	9b01      	ldr	r3, [sp, #4]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	bf14      	ite	ne
 8009bac:	2102      	movne	r1, #2
 8009bae:	2101      	moveq	r1, #1
 8009bb0:	61ab      	str	r3, [r5, #24]
 8009bb2:	6129      	str	r1, [r5, #16]
 8009bb4:	b1bc      	cbz	r4, 8009be6 <__d2b+0x8e>
 8009bb6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009bba:	4404      	add	r4, r0
 8009bbc:	6034      	str	r4, [r6, #0]
 8009bbe:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009bc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bc4:	6018      	str	r0, [r3, #0]
 8009bc6:	4628      	mov	r0, r5
 8009bc8:	b003      	add	sp, #12
 8009bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009bcc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009bd0:	e7d7      	b.n	8009b82 <__d2b+0x2a>
 8009bd2:	6169      	str	r1, [r5, #20]
 8009bd4:	e7e7      	b.n	8009ba6 <__d2b+0x4e>
 8009bd6:	a801      	add	r0, sp, #4
 8009bd8:	f7ff fcfc 	bl	80095d4 <__lo0bits>
 8009bdc:	9b01      	ldr	r3, [sp, #4]
 8009bde:	2101      	movs	r1, #1
 8009be0:	616b      	str	r3, [r5, #20]
 8009be2:	3020      	adds	r0, #32
 8009be4:	e7e5      	b.n	8009bb2 <__d2b+0x5a>
 8009be6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009bea:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8009bee:	6030      	str	r0, [r6, #0]
 8009bf0:	6918      	ldr	r0, [r3, #16]
 8009bf2:	f7ff fccf 	bl	8009594 <__hi0bits>
 8009bf6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009bfa:	e7e2      	b.n	8009bc2 <__d2b+0x6a>
 8009bfc:	0800aa54 	.word	0x0800aa54
 8009c00:	0800aac5 	.word	0x0800aac5

08009c04 <__ratio>:
 8009c04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c08:	4688      	mov	r8, r1
 8009c0a:	4669      	mov	r1, sp
 8009c0c:	4681      	mov	r9, r0
 8009c0e:	f7ff ff5b 	bl	8009ac8 <__b2d>
 8009c12:	460f      	mov	r7, r1
 8009c14:	4604      	mov	r4, r0
 8009c16:	460d      	mov	r5, r1
 8009c18:	4640      	mov	r0, r8
 8009c1a:	a901      	add	r1, sp, #4
 8009c1c:	f7ff ff54 	bl	8009ac8 <__b2d>
 8009c20:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009c24:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009c28:	468b      	mov	fp, r1
 8009c2a:	eba3 0c02 	sub.w	ip, r3, r2
 8009c2e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009c32:	1a9b      	subs	r3, r3, r2
 8009c34:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	bfd5      	itete	le
 8009c3c:	460a      	movle	r2, r1
 8009c3e:	462a      	movgt	r2, r5
 8009c40:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009c44:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009c48:	bfd8      	it	le
 8009c4a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009c4e:	465b      	mov	r3, fp
 8009c50:	4602      	mov	r2, r0
 8009c52:	4639      	mov	r1, r7
 8009c54:	4620      	mov	r0, r4
 8009c56:	f7f6 fd69 	bl	800072c <__aeabi_ddiv>
 8009c5a:	b003      	add	sp, #12
 8009c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009c60 <__copybits>:
 8009c60:	3901      	subs	r1, #1
 8009c62:	b570      	push	{r4, r5, r6, lr}
 8009c64:	1149      	asrs	r1, r1, #5
 8009c66:	6914      	ldr	r4, [r2, #16]
 8009c68:	3101      	adds	r1, #1
 8009c6a:	f102 0314 	add.w	r3, r2, #20
 8009c6e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009c72:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009c76:	1f05      	subs	r5, r0, #4
 8009c78:	42a3      	cmp	r3, r4
 8009c7a:	d30c      	bcc.n	8009c96 <__copybits+0x36>
 8009c7c:	1aa3      	subs	r3, r4, r2
 8009c7e:	3b11      	subs	r3, #17
 8009c80:	f023 0303 	bic.w	r3, r3, #3
 8009c84:	3211      	adds	r2, #17
 8009c86:	42a2      	cmp	r2, r4
 8009c88:	bf88      	it	hi
 8009c8a:	2300      	movhi	r3, #0
 8009c8c:	4418      	add	r0, r3
 8009c8e:	2300      	movs	r3, #0
 8009c90:	4288      	cmp	r0, r1
 8009c92:	d305      	bcc.n	8009ca0 <__copybits+0x40>
 8009c94:	bd70      	pop	{r4, r5, r6, pc}
 8009c96:	f853 6b04 	ldr.w	r6, [r3], #4
 8009c9a:	f845 6f04 	str.w	r6, [r5, #4]!
 8009c9e:	e7eb      	b.n	8009c78 <__copybits+0x18>
 8009ca0:	f840 3b04 	str.w	r3, [r0], #4
 8009ca4:	e7f4      	b.n	8009c90 <__copybits+0x30>

08009ca6 <__any_on>:
 8009ca6:	f100 0214 	add.w	r2, r0, #20
 8009caa:	6900      	ldr	r0, [r0, #16]
 8009cac:	114b      	asrs	r3, r1, #5
 8009cae:	4298      	cmp	r0, r3
 8009cb0:	b510      	push	{r4, lr}
 8009cb2:	db11      	blt.n	8009cd8 <__any_on+0x32>
 8009cb4:	dd0a      	ble.n	8009ccc <__any_on+0x26>
 8009cb6:	f011 011f 	ands.w	r1, r1, #31
 8009cba:	d007      	beq.n	8009ccc <__any_on+0x26>
 8009cbc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009cc0:	fa24 f001 	lsr.w	r0, r4, r1
 8009cc4:	fa00 f101 	lsl.w	r1, r0, r1
 8009cc8:	428c      	cmp	r4, r1
 8009cca:	d10b      	bne.n	8009ce4 <__any_on+0x3e>
 8009ccc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009cd0:	4293      	cmp	r3, r2
 8009cd2:	d803      	bhi.n	8009cdc <__any_on+0x36>
 8009cd4:	2000      	movs	r0, #0
 8009cd6:	bd10      	pop	{r4, pc}
 8009cd8:	4603      	mov	r3, r0
 8009cda:	e7f7      	b.n	8009ccc <__any_on+0x26>
 8009cdc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009ce0:	2900      	cmp	r1, #0
 8009ce2:	d0f5      	beq.n	8009cd0 <__any_on+0x2a>
 8009ce4:	2001      	movs	r0, #1
 8009ce6:	e7f6      	b.n	8009cd6 <__any_on+0x30>

08009ce8 <__ascii_wctomb>:
 8009ce8:	4603      	mov	r3, r0
 8009cea:	4608      	mov	r0, r1
 8009cec:	b141      	cbz	r1, 8009d00 <__ascii_wctomb+0x18>
 8009cee:	2aff      	cmp	r2, #255	; 0xff
 8009cf0:	d904      	bls.n	8009cfc <__ascii_wctomb+0x14>
 8009cf2:	228a      	movs	r2, #138	; 0x8a
 8009cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8009cf8:	601a      	str	r2, [r3, #0]
 8009cfa:	4770      	bx	lr
 8009cfc:	2001      	movs	r0, #1
 8009cfe:	700a      	strb	r2, [r1, #0]
 8009d00:	4770      	bx	lr

08009d02 <__ssputs_r>:
 8009d02:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d06:	461f      	mov	r7, r3
 8009d08:	688e      	ldr	r6, [r1, #8]
 8009d0a:	4682      	mov	sl, r0
 8009d0c:	42be      	cmp	r6, r7
 8009d0e:	460c      	mov	r4, r1
 8009d10:	4690      	mov	r8, r2
 8009d12:	680b      	ldr	r3, [r1, #0]
 8009d14:	d82c      	bhi.n	8009d70 <__ssputs_r+0x6e>
 8009d16:	898a      	ldrh	r2, [r1, #12]
 8009d18:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009d1c:	d026      	beq.n	8009d6c <__ssputs_r+0x6a>
 8009d1e:	6965      	ldr	r5, [r4, #20]
 8009d20:	6909      	ldr	r1, [r1, #16]
 8009d22:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009d26:	eba3 0901 	sub.w	r9, r3, r1
 8009d2a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009d2e:	1c7b      	adds	r3, r7, #1
 8009d30:	444b      	add	r3, r9
 8009d32:	106d      	asrs	r5, r5, #1
 8009d34:	429d      	cmp	r5, r3
 8009d36:	bf38      	it	cc
 8009d38:	461d      	movcc	r5, r3
 8009d3a:	0553      	lsls	r3, r2, #21
 8009d3c:	d527      	bpl.n	8009d8e <__ssputs_r+0x8c>
 8009d3e:	4629      	mov	r1, r5
 8009d40:	f7fc f898 	bl	8005e74 <_malloc_r>
 8009d44:	4606      	mov	r6, r0
 8009d46:	b360      	cbz	r0, 8009da2 <__ssputs_r+0xa0>
 8009d48:	464a      	mov	r2, r9
 8009d4a:	6921      	ldr	r1, [r4, #16]
 8009d4c:	f7fe f8d7 	bl	8007efe <memcpy>
 8009d50:	89a3      	ldrh	r3, [r4, #12]
 8009d52:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009d56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d5a:	81a3      	strh	r3, [r4, #12]
 8009d5c:	6126      	str	r6, [r4, #16]
 8009d5e:	444e      	add	r6, r9
 8009d60:	6026      	str	r6, [r4, #0]
 8009d62:	463e      	mov	r6, r7
 8009d64:	6165      	str	r5, [r4, #20]
 8009d66:	eba5 0509 	sub.w	r5, r5, r9
 8009d6a:	60a5      	str	r5, [r4, #8]
 8009d6c:	42be      	cmp	r6, r7
 8009d6e:	d900      	bls.n	8009d72 <__ssputs_r+0x70>
 8009d70:	463e      	mov	r6, r7
 8009d72:	4632      	mov	r2, r6
 8009d74:	4641      	mov	r1, r8
 8009d76:	6820      	ldr	r0, [r4, #0]
 8009d78:	f000 f9d8 	bl	800a12c <memmove>
 8009d7c:	2000      	movs	r0, #0
 8009d7e:	68a3      	ldr	r3, [r4, #8]
 8009d80:	1b9b      	subs	r3, r3, r6
 8009d82:	60a3      	str	r3, [r4, #8]
 8009d84:	6823      	ldr	r3, [r4, #0]
 8009d86:	4433      	add	r3, r6
 8009d88:	6023      	str	r3, [r4, #0]
 8009d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d8e:	462a      	mov	r2, r5
 8009d90:	f000 fa01 	bl	800a196 <_realloc_r>
 8009d94:	4606      	mov	r6, r0
 8009d96:	2800      	cmp	r0, #0
 8009d98:	d1e0      	bne.n	8009d5c <__ssputs_r+0x5a>
 8009d9a:	4650      	mov	r0, sl
 8009d9c:	6921      	ldr	r1, [r4, #16]
 8009d9e:	f7fe ff53 	bl	8008c48 <_free_r>
 8009da2:	230c      	movs	r3, #12
 8009da4:	f8ca 3000 	str.w	r3, [sl]
 8009da8:	89a3      	ldrh	r3, [r4, #12]
 8009daa:	f04f 30ff 	mov.w	r0, #4294967295
 8009dae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009db2:	81a3      	strh	r3, [r4, #12]
 8009db4:	e7e9      	b.n	8009d8a <__ssputs_r+0x88>
	...

08009db8 <_svfiprintf_r>:
 8009db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dbc:	4698      	mov	r8, r3
 8009dbe:	898b      	ldrh	r3, [r1, #12]
 8009dc0:	4607      	mov	r7, r0
 8009dc2:	061b      	lsls	r3, r3, #24
 8009dc4:	460d      	mov	r5, r1
 8009dc6:	4614      	mov	r4, r2
 8009dc8:	b09d      	sub	sp, #116	; 0x74
 8009dca:	d50e      	bpl.n	8009dea <_svfiprintf_r+0x32>
 8009dcc:	690b      	ldr	r3, [r1, #16]
 8009dce:	b963      	cbnz	r3, 8009dea <_svfiprintf_r+0x32>
 8009dd0:	2140      	movs	r1, #64	; 0x40
 8009dd2:	f7fc f84f 	bl	8005e74 <_malloc_r>
 8009dd6:	6028      	str	r0, [r5, #0]
 8009dd8:	6128      	str	r0, [r5, #16]
 8009dda:	b920      	cbnz	r0, 8009de6 <_svfiprintf_r+0x2e>
 8009ddc:	230c      	movs	r3, #12
 8009dde:	603b      	str	r3, [r7, #0]
 8009de0:	f04f 30ff 	mov.w	r0, #4294967295
 8009de4:	e0d0      	b.n	8009f88 <_svfiprintf_r+0x1d0>
 8009de6:	2340      	movs	r3, #64	; 0x40
 8009de8:	616b      	str	r3, [r5, #20]
 8009dea:	2300      	movs	r3, #0
 8009dec:	9309      	str	r3, [sp, #36]	; 0x24
 8009dee:	2320      	movs	r3, #32
 8009df0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009df4:	2330      	movs	r3, #48	; 0x30
 8009df6:	f04f 0901 	mov.w	r9, #1
 8009dfa:	f8cd 800c 	str.w	r8, [sp, #12]
 8009dfe:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8009fa0 <_svfiprintf_r+0x1e8>
 8009e02:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e06:	4623      	mov	r3, r4
 8009e08:	469a      	mov	sl, r3
 8009e0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e0e:	b10a      	cbz	r2, 8009e14 <_svfiprintf_r+0x5c>
 8009e10:	2a25      	cmp	r2, #37	; 0x25
 8009e12:	d1f9      	bne.n	8009e08 <_svfiprintf_r+0x50>
 8009e14:	ebba 0b04 	subs.w	fp, sl, r4
 8009e18:	d00b      	beq.n	8009e32 <_svfiprintf_r+0x7a>
 8009e1a:	465b      	mov	r3, fp
 8009e1c:	4622      	mov	r2, r4
 8009e1e:	4629      	mov	r1, r5
 8009e20:	4638      	mov	r0, r7
 8009e22:	f7ff ff6e 	bl	8009d02 <__ssputs_r>
 8009e26:	3001      	adds	r0, #1
 8009e28:	f000 80a9 	beq.w	8009f7e <_svfiprintf_r+0x1c6>
 8009e2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e2e:	445a      	add	r2, fp
 8009e30:	9209      	str	r2, [sp, #36]	; 0x24
 8009e32:	f89a 3000 	ldrb.w	r3, [sl]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	f000 80a1 	beq.w	8009f7e <_svfiprintf_r+0x1c6>
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	f04f 32ff 	mov.w	r2, #4294967295
 8009e42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e46:	f10a 0a01 	add.w	sl, sl, #1
 8009e4a:	9304      	str	r3, [sp, #16]
 8009e4c:	9307      	str	r3, [sp, #28]
 8009e4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e52:	931a      	str	r3, [sp, #104]	; 0x68
 8009e54:	4654      	mov	r4, sl
 8009e56:	2205      	movs	r2, #5
 8009e58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e5c:	4850      	ldr	r0, [pc, #320]	; (8009fa0 <_svfiprintf_r+0x1e8>)
 8009e5e:	f7fe f840 	bl	8007ee2 <memchr>
 8009e62:	9a04      	ldr	r2, [sp, #16]
 8009e64:	b9d8      	cbnz	r0, 8009e9e <_svfiprintf_r+0xe6>
 8009e66:	06d0      	lsls	r0, r2, #27
 8009e68:	bf44      	itt	mi
 8009e6a:	2320      	movmi	r3, #32
 8009e6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e70:	0711      	lsls	r1, r2, #28
 8009e72:	bf44      	itt	mi
 8009e74:	232b      	movmi	r3, #43	; 0x2b
 8009e76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e7a:	f89a 3000 	ldrb.w	r3, [sl]
 8009e7e:	2b2a      	cmp	r3, #42	; 0x2a
 8009e80:	d015      	beq.n	8009eae <_svfiprintf_r+0xf6>
 8009e82:	4654      	mov	r4, sl
 8009e84:	2000      	movs	r0, #0
 8009e86:	f04f 0c0a 	mov.w	ip, #10
 8009e8a:	9a07      	ldr	r2, [sp, #28]
 8009e8c:	4621      	mov	r1, r4
 8009e8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e92:	3b30      	subs	r3, #48	; 0x30
 8009e94:	2b09      	cmp	r3, #9
 8009e96:	d94d      	bls.n	8009f34 <_svfiprintf_r+0x17c>
 8009e98:	b1b0      	cbz	r0, 8009ec8 <_svfiprintf_r+0x110>
 8009e9a:	9207      	str	r2, [sp, #28]
 8009e9c:	e014      	b.n	8009ec8 <_svfiprintf_r+0x110>
 8009e9e:	eba0 0308 	sub.w	r3, r0, r8
 8009ea2:	fa09 f303 	lsl.w	r3, r9, r3
 8009ea6:	4313      	orrs	r3, r2
 8009ea8:	46a2      	mov	sl, r4
 8009eaa:	9304      	str	r3, [sp, #16]
 8009eac:	e7d2      	b.n	8009e54 <_svfiprintf_r+0x9c>
 8009eae:	9b03      	ldr	r3, [sp, #12]
 8009eb0:	1d19      	adds	r1, r3, #4
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	9103      	str	r1, [sp, #12]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	bfbb      	ittet	lt
 8009eba:	425b      	neglt	r3, r3
 8009ebc:	f042 0202 	orrlt.w	r2, r2, #2
 8009ec0:	9307      	strge	r3, [sp, #28]
 8009ec2:	9307      	strlt	r3, [sp, #28]
 8009ec4:	bfb8      	it	lt
 8009ec6:	9204      	strlt	r2, [sp, #16]
 8009ec8:	7823      	ldrb	r3, [r4, #0]
 8009eca:	2b2e      	cmp	r3, #46	; 0x2e
 8009ecc:	d10c      	bne.n	8009ee8 <_svfiprintf_r+0x130>
 8009ece:	7863      	ldrb	r3, [r4, #1]
 8009ed0:	2b2a      	cmp	r3, #42	; 0x2a
 8009ed2:	d134      	bne.n	8009f3e <_svfiprintf_r+0x186>
 8009ed4:	9b03      	ldr	r3, [sp, #12]
 8009ed6:	3402      	adds	r4, #2
 8009ed8:	1d1a      	adds	r2, r3, #4
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	9203      	str	r2, [sp, #12]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	bfb8      	it	lt
 8009ee2:	f04f 33ff 	movlt.w	r3, #4294967295
 8009ee6:	9305      	str	r3, [sp, #20]
 8009ee8:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8009fa4 <_svfiprintf_r+0x1ec>
 8009eec:	2203      	movs	r2, #3
 8009eee:	4650      	mov	r0, sl
 8009ef0:	7821      	ldrb	r1, [r4, #0]
 8009ef2:	f7fd fff6 	bl	8007ee2 <memchr>
 8009ef6:	b138      	cbz	r0, 8009f08 <_svfiprintf_r+0x150>
 8009ef8:	2240      	movs	r2, #64	; 0x40
 8009efa:	9b04      	ldr	r3, [sp, #16]
 8009efc:	eba0 000a 	sub.w	r0, r0, sl
 8009f00:	4082      	lsls	r2, r0
 8009f02:	4313      	orrs	r3, r2
 8009f04:	3401      	adds	r4, #1
 8009f06:	9304      	str	r3, [sp, #16]
 8009f08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f0c:	2206      	movs	r2, #6
 8009f0e:	4826      	ldr	r0, [pc, #152]	; (8009fa8 <_svfiprintf_r+0x1f0>)
 8009f10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f14:	f7fd ffe5 	bl	8007ee2 <memchr>
 8009f18:	2800      	cmp	r0, #0
 8009f1a:	d038      	beq.n	8009f8e <_svfiprintf_r+0x1d6>
 8009f1c:	4b23      	ldr	r3, [pc, #140]	; (8009fac <_svfiprintf_r+0x1f4>)
 8009f1e:	bb1b      	cbnz	r3, 8009f68 <_svfiprintf_r+0x1b0>
 8009f20:	9b03      	ldr	r3, [sp, #12]
 8009f22:	3307      	adds	r3, #7
 8009f24:	f023 0307 	bic.w	r3, r3, #7
 8009f28:	3308      	adds	r3, #8
 8009f2a:	9303      	str	r3, [sp, #12]
 8009f2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f2e:	4433      	add	r3, r6
 8009f30:	9309      	str	r3, [sp, #36]	; 0x24
 8009f32:	e768      	b.n	8009e06 <_svfiprintf_r+0x4e>
 8009f34:	460c      	mov	r4, r1
 8009f36:	2001      	movs	r0, #1
 8009f38:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f3c:	e7a6      	b.n	8009e8c <_svfiprintf_r+0xd4>
 8009f3e:	2300      	movs	r3, #0
 8009f40:	f04f 0c0a 	mov.w	ip, #10
 8009f44:	4619      	mov	r1, r3
 8009f46:	3401      	adds	r4, #1
 8009f48:	9305      	str	r3, [sp, #20]
 8009f4a:	4620      	mov	r0, r4
 8009f4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f50:	3a30      	subs	r2, #48	; 0x30
 8009f52:	2a09      	cmp	r2, #9
 8009f54:	d903      	bls.n	8009f5e <_svfiprintf_r+0x1a6>
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d0c6      	beq.n	8009ee8 <_svfiprintf_r+0x130>
 8009f5a:	9105      	str	r1, [sp, #20]
 8009f5c:	e7c4      	b.n	8009ee8 <_svfiprintf_r+0x130>
 8009f5e:	4604      	mov	r4, r0
 8009f60:	2301      	movs	r3, #1
 8009f62:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f66:	e7f0      	b.n	8009f4a <_svfiprintf_r+0x192>
 8009f68:	ab03      	add	r3, sp, #12
 8009f6a:	9300      	str	r3, [sp, #0]
 8009f6c:	462a      	mov	r2, r5
 8009f6e:	4638      	mov	r0, r7
 8009f70:	4b0f      	ldr	r3, [pc, #60]	; (8009fb0 <_svfiprintf_r+0x1f8>)
 8009f72:	a904      	add	r1, sp, #16
 8009f74:	f7fc ffa4 	bl	8006ec0 <_printf_float>
 8009f78:	1c42      	adds	r2, r0, #1
 8009f7a:	4606      	mov	r6, r0
 8009f7c:	d1d6      	bne.n	8009f2c <_svfiprintf_r+0x174>
 8009f7e:	89ab      	ldrh	r3, [r5, #12]
 8009f80:	065b      	lsls	r3, r3, #25
 8009f82:	f53f af2d 	bmi.w	8009de0 <_svfiprintf_r+0x28>
 8009f86:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f88:	b01d      	add	sp, #116	; 0x74
 8009f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f8e:	ab03      	add	r3, sp, #12
 8009f90:	9300      	str	r3, [sp, #0]
 8009f92:	462a      	mov	r2, r5
 8009f94:	4638      	mov	r0, r7
 8009f96:	4b06      	ldr	r3, [pc, #24]	; (8009fb0 <_svfiprintf_r+0x1f8>)
 8009f98:	a904      	add	r1, sp, #16
 8009f9a:	f7fd fa31 	bl	8007400 <_printf_i>
 8009f9e:	e7eb      	b.n	8009f78 <_svfiprintf_r+0x1c0>
 8009fa0:	0800ac1c 	.word	0x0800ac1c
 8009fa4:	0800ac22 	.word	0x0800ac22
 8009fa8:	0800ac26 	.word	0x0800ac26
 8009fac:	08006ec1 	.word	0x08006ec1
 8009fb0:	08009d03 	.word	0x08009d03

08009fb4 <__sflush_r>:
 8009fb4:	898a      	ldrh	r2, [r1, #12]
 8009fb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fb8:	4605      	mov	r5, r0
 8009fba:	0710      	lsls	r0, r2, #28
 8009fbc:	460c      	mov	r4, r1
 8009fbe:	d457      	bmi.n	800a070 <__sflush_r+0xbc>
 8009fc0:	684b      	ldr	r3, [r1, #4]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	dc04      	bgt.n	8009fd0 <__sflush_r+0x1c>
 8009fc6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	dc01      	bgt.n	8009fd0 <__sflush_r+0x1c>
 8009fcc:	2000      	movs	r0, #0
 8009fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009fd2:	2e00      	cmp	r6, #0
 8009fd4:	d0fa      	beq.n	8009fcc <__sflush_r+0x18>
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009fdc:	682f      	ldr	r7, [r5, #0]
 8009fde:	6a21      	ldr	r1, [r4, #32]
 8009fe0:	602b      	str	r3, [r5, #0]
 8009fe2:	d032      	beq.n	800a04a <__sflush_r+0x96>
 8009fe4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009fe6:	89a3      	ldrh	r3, [r4, #12]
 8009fe8:	075a      	lsls	r2, r3, #29
 8009fea:	d505      	bpl.n	8009ff8 <__sflush_r+0x44>
 8009fec:	6863      	ldr	r3, [r4, #4]
 8009fee:	1ac0      	subs	r0, r0, r3
 8009ff0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009ff2:	b10b      	cbz	r3, 8009ff8 <__sflush_r+0x44>
 8009ff4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009ff6:	1ac0      	subs	r0, r0, r3
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	4602      	mov	r2, r0
 8009ffc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009ffe:	4628      	mov	r0, r5
 800a000:	6a21      	ldr	r1, [r4, #32]
 800a002:	47b0      	blx	r6
 800a004:	1c43      	adds	r3, r0, #1
 800a006:	89a3      	ldrh	r3, [r4, #12]
 800a008:	d106      	bne.n	800a018 <__sflush_r+0x64>
 800a00a:	6829      	ldr	r1, [r5, #0]
 800a00c:	291d      	cmp	r1, #29
 800a00e:	d82b      	bhi.n	800a068 <__sflush_r+0xb4>
 800a010:	4a28      	ldr	r2, [pc, #160]	; (800a0b4 <__sflush_r+0x100>)
 800a012:	410a      	asrs	r2, r1
 800a014:	07d6      	lsls	r6, r2, #31
 800a016:	d427      	bmi.n	800a068 <__sflush_r+0xb4>
 800a018:	2200      	movs	r2, #0
 800a01a:	6062      	str	r2, [r4, #4]
 800a01c:	6922      	ldr	r2, [r4, #16]
 800a01e:	04d9      	lsls	r1, r3, #19
 800a020:	6022      	str	r2, [r4, #0]
 800a022:	d504      	bpl.n	800a02e <__sflush_r+0x7a>
 800a024:	1c42      	adds	r2, r0, #1
 800a026:	d101      	bne.n	800a02c <__sflush_r+0x78>
 800a028:	682b      	ldr	r3, [r5, #0]
 800a02a:	b903      	cbnz	r3, 800a02e <__sflush_r+0x7a>
 800a02c:	6560      	str	r0, [r4, #84]	; 0x54
 800a02e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a030:	602f      	str	r7, [r5, #0]
 800a032:	2900      	cmp	r1, #0
 800a034:	d0ca      	beq.n	8009fcc <__sflush_r+0x18>
 800a036:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a03a:	4299      	cmp	r1, r3
 800a03c:	d002      	beq.n	800a044 <__sflush_r+0x90>
 800a03e:	4628      	mov	r0, r5
 800a040:	f7fe fe02 	bl	8008c48 <_free_r>
 800a044:	2000      	movs	r0, #0
 800a046:	6360      	str	r0, [r4, #52]	; 0x34
 800a048:	e7c1      	b.n	8009fce <__sflush_r+0x1a>
 800a04a:	2301      	movs	r3, #1
 800a04c:	4628      	mov	r0, r5
 800a04e:	47b0      	blx	r6
 800a050:	1c41      	adds	r1, r0, #1
 800a052:	d1c8      	bne.n	8009fe6 <__sflush_r+0x32>
 800a054:	682b      	ldr	r3, [r5, #0]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d0c5      	beq.n	8009fe6 <__sflush_r+0x32>
 800a05a:	2b1d      	cmp	r3, #29
 800a05c:	d001      	beq.n	800a062 <__sflush_r+0xae>
 800a05e:	2b16      	cmp	r3, #22
 800a060:	d101      	bne.n	800a066 <__sflush_r+0xb2>
 800a062:	602f      	str	r7, [r5, #0]
 800a064:	e7b2      	b.n	8009fcc <__sflush_r+0x18>
 800a066:	89a3      	ldrh	r3, [r4, #12]
 800a068:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a06c:	81a3      	strh	r3, [r4, #12]
 800a06e:	e7ae      	b.n	8009fce <__sflush_r+0x1a>
 800a070:	690f      	ldr	r7, [r1, #16]
 800a072:	2f00      	cmp	r7, #0
 800a074:	d0aa      	beq.n	8009fcc <__sflush_r+0x18>
 800a076:	0793      	lsls	r3, r2, #30
 800a078:	bf18      	it	ne
 800a07a:	2300      	movne	r3, #0
 800a07c:	680e      	ldr	r6, [r1, #0]
 800a07e:	bf08      	it	eq
 800a080:	694b      	ldreq	r3, [r1, #20]
 800a082:	1bf6      	subs	r6, r6, r7
 800a084:	600f      	str	r7, [r1, #0]
 800a086:	608b      	str	r3, [r1, #8]
 800a088:	2e00      	cmp	r6, #0
 800a08a:	dd9f      	ble.n	8009fcc <__sflush_r+0x18>
 800a08c:	4633      	mov	r3, r6
 800a08e:	463a      	mov	r2, r7
 800a090:	4628      	mov	r0, r5
 800a092:	6a21      	ldr	r1, [r4, #32]
 800a094:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800a098:	47e0      	blx	ip
 800a09a:	2800      	cmp	r0, #0
 800a09c:	dc06      	bgt.n	800a0ac <__sflush_r+0xf8>
 800a09e:	89a3      	ldrh	r3, [r4, #12]
 800a0a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a0a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0a8:	81a3      	strh	r3, [r4, #12]
 800a0aa:	e790      	b.n	8009fce <__sflush_r+0x1a>
 800a0ac:	4407      	add	r7, r0
 800a0ae:	1a36      	subs	r6, r6, r0
 800a0b0:	e7ea      	b.n	800a088 <__sflush_r+0xd4>
 800a0b2:	bf00      	nop
 800a0b4:	dfbffffe 	.word	0xdfbffffe

0800a0b8 <_fflush_r>:
 800a0b8:	b538      	push	{r3, r4, r5, lr}
 800a0ba:	690b      	ldr	r3, [r1, #16]
 800a0bc:	4605      	mov	r5, r0
 800a0be:	460c      	mov	r4, r1
 800a0c0:	b913      	cbnz	r3, 800a0c8 <_fflush_r+0x10>
 800a0c2:	2500      	movs	r5, #0
 800a0c4:	4628      	mov	r0, r5
 800a0c6:	bd38      	pop	{r3, r4, r5, pc}
 800a0c8:	b118      	cbz	r0, 800a0d2 <_fflush_r+0x1a>
 800a0ca:	6a03      	ldr	r3, [r0, #32]
 800a0cc:	b90b      	cbnz	r3, 800a0d2 <_fflush_r+0x1a>
 800a0ce:	f7fd fd53 	bl	8007b78 <__sinit>
 800a0d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d0f3      	beq.n	800a0c2 <_fflush_r+0xa>
 800a0da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a0dc:	07d0      	lsls	r0, r2, #31
 800a0de:	d404      	bmi.n	800a0ea <_fflush_r+0x32>
 800a0e0:	0599      	lsls	r1, r3, #22
 800a0e2:	d402      	bmi.n	800a0ea <_fflush_r+0x32>
 800a0e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a0e6:	f7fd fef2 	bl	8007ece <__retarget_lock_acquire_recursive>
 800a0ea:	4628      	mov	r0, r5
 800a0ec:	4621      	mov	r1, r4
 800a0ee:	f7ff ff61 	bl	8009fb4 <__sflush_r>
 800a0f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a0f4:	4605      	mov	r5, r0
 800a0f6:	07da      	lsls	r2, r3, #31
 800a0f8:	d4e4      	bmi.n	800a0c4 <_fflush_r+0xc>
 800a0fa:	89a3      	ldrh	r3, [r4, #12]
 800a0fc:	059b      	lsls	r3, r3, #22
 800a0fe:	d4e1      	bmi.n	800a0c4 <_fflush_r+0xc>
 800a100:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a102:	f7fd fee5 	bl	8007ed0 <__retarget_lock_release_recursive>
 800a106:	e7dd      	b.n	800a0c4 <_fflush_r+0xc>

0800a108 <fiprintf>:
 800a108:	b40e      	push	{r1, r2, r3}
 800a10a:	b503      	push	{r0, r1, lr}
 800a10c:	4601      	mov	r1, r0
 800a10e:	ab03      	add	r3, sp, #12
 800a110:	4805      	ldr	r0, [pc, #20]	; (800a128 <fiprintf+0x20>)
 800a112:	f853 2b04 	ldr.w	r2, [r3], #4
 800a116:	6800      	ldr	r0, [r0, #0]
 800a118:	9301      	str	r3, [sp, #4]
 800a11a:	f000 f893 	bl	800a244 <_vfiprintf_r>
 800a11e:	b002      	add	sp, #8
 800a120:	f85d eb04 	ldr.w	lr, [sp], #4
 800a124:	b003      	add	sp, #12
 800a126:	4770      	bx	lr
 800a128:	200001d0 	.word	0x200001d0

0800a12c <memmove>:
 800a12c:	4288      	cmp	r0, r1
 800a12e:	b510      	push	{r4, lr}
 800a130:	eb01 0402 	add.w	r4, r1, r2
 800a134:	d902      	bls.n	800a13c <memmove+0x10>
 800a136:	4284      	cmp	r4, r0
 800a138:	4623      	mov	r3, r4
 800a13a:	d807      	bhi.n	800a14c <memmove+0x20>
 800a13c:	1e43      	subs	r3, r0, #1
 800a13e:	42a1      	cmp	r1, r4
 800a140:	d008      	beq.n	800a154 <memmove+0x28>
 800a142:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a146:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a14a:	e7f8      	b.n	800a13e <memmove+0x12>
 800a14c:	4601      	mov	r1, r0
 800a14e:	4402      	add	r2, r0
 800a150:	428a      	cmp	r2, r1
 800a152:	d100      	bne.n	800a156 <memmove+0x2a>
 800a154:	bd10      	pop	{r4, pc}
 800a156:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a15a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a15e:	e7f7      	b.n	800a150 <memmove+0x24>

0800a160 <abort>:
 800a160:	2006      	movs	r0, #6
 800a162:	b508      	push	{r3, lr}
 800a164:	f000 fa46 	bl	800a5f4 <raise>
 800a168:	2001      	movs	r0, #1
 800a16a:	f7f7 fc50 	bl	8001a0e <_exit>

0800a16e <_calloc_r>:
 800a16e:	b570      	push	{r4, r5, r6, lr}
 800a170:	fba1 5402 	umull	r5, r4, r1, r2
 800a174:	b934      	cbnz	r4, 800a184 <_calloc_r+0x16>
 800a176:	4629      	mov	r1, r5
 800a178:	f7fb fe7c 	bl	8005e74 <_malloc_r>
 800a17c:	4606      	mov	r6, r0
 800a17e:	b928      	cbnz	r0, 800a18c <_calloc_r+0x1e>
 800a180:	4630      	mov	r0, r6
 800a182:	bd70      	pop	{r4, r5, r6, pc}
 800a184:	220c      	movs	r2, #12
 800a186:	2600      	movs	r6, #0
 800a188:	6002      	str	r2, [r0, #0]
 800a18a:	e7f9      	b.n	800a180 <_calloc_r+0x12>
 800a18c:	462a      	mov	r2, r5
 800a18e:	4621      	mov	r1, r4
 800a190:	f7fd fd8b 	bl	8007caa <memset>
 800a194:	e7f4      	b.n	800a180 <_calloc_r+0x12>

0800a196 <_realloc_r>:
 800a196:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a19a:	4680      	mov	r8, r0
 800a19c:	4614      	mov	r4, r2
 800a19e:	460e      	mov	r6, r1
 800a1a0:	b921      	cbnz	r1, 800a1ac <_realloc_r+0x16>
 800a1a2:	4611      	mov	r1, r2
 800a1a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a1a8:	f7fb be64 	b.w	8005e74 <_malloc_r>
 800a1ac:	b92a      	cbnz	r2, 800a1ba <_realloc_r+0x24>
 800a1ae:	f7fe fd4b 	bl	8008c48 <_free_r>
 800a1b2:	4625      	mov	r5, r4
 800a1b4:	4628      	mov	r0, r5
 800a1b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1ba:	f000 fa37 	bl	800a62c <_malloc_usable_size_r>
 800a1be:	4284      	cmp	r4, r0
 800a1c0:	4607      	mov	r7, r0
 800a1c2:	d802      	bhi.n	800a1ca <_realloc_r+0x34>
 800a1c4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a1c8:	d812      	bhi.n	800a1f0 <_realloc_r+0x5a>
 800a1ca:	4621      	mov	r1, r4
 800a1cc:	4640      	mov	r0, r8
 800a1ce:	f7fb fe51 	bl	8005e74 <_malloc_r>
 800a1d2:	4605      	mov	r5, r0
 800a1d4:	2800      	cmp	r0, #0
 800a1d6:	d0ed      	beq.n	800a1b4 <_realloc_r+0x1e>
 800a1d8:	42bc      	cmp	r4, r7
 800a1da:	4622      	mov	r2, r4
 800a1dc:	4631      	mov	r1, r6
 800a1de:	bf28      	it	cs
 800a1e0:	463a      	movcs	r2, r7
 800a1e2:	f7fd fe8c 	bl	8007efe <memcpy>
 800a1e6:	4631      	mov	r1, r6
 800a1e8:	4640      	mov	r0, r8
 800a1ea:	f7fe fd2d 	bl	8008c48 <_free_r>
 800a1ee:	e7e1      	b.n	800a1b4 <_realloc_r+0x1e>
 800a1f0:	4635      	mov	r5, r6
 800a1f2:	e7df      	b.n	800a1b4 <_realloc_r+0x1e>

0800a1f4 <__sfputc_r>:
 800a1f4:	6893      	ldr	r3, [r2, #8]
 800a1f6:	b410      	push	{r4}
 800a1f8:	3b01      	subs	r3, #1
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	6093      	str	r3, [r2, #8]
 800a1fe:	da07      	bge.n	800a210 <__sfputc_r+0x1c>
 800a200:	6994      	ldr	r4, [r2, #24]
 800a202:	42a3      	cmp	r3, r4
 800a204:	db01      	blt.n	800a20a <__sfputc_r+0x16>
 800a206:	290a      	cmp	r1, #10
 800a208:	d102      	bne.n	800a210 <__sfputc_r+0x1c>
 800a20a:	bc10      	pop	{r4}
 800a20c:	f000 b934 	b.w	800a478 <__swbuf_r>
 800a210:	6813      	ldr	r3, [r2, #0]
 800a212:	1c58      	adds	r0, r3, #1
 800a214:	6010      	str	r0, [r2, #0]
 800a216:	7019      	strb	r1, [r3, #0]
 800a218:	4608      	mov	r0, r1
 800a21a:	bc10      	pop	{r4}
 800a21c:	4770      	bx	lr

0800a21e <__sfputs_r>:
 800a21e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a220:	4606      	mov	r6, r0
 800a222:	460f      	mov	r7, r1
 800a224:	4614      	mov	r4, r2
 800a226:	18d5      	adds	r5, r2, r3
 800a228:	42ac      	cmp	r4, r5
 800a22a:	d101      	bne.n	800a230 <__sfputs_r+0x12>
 800a22c:	2000      	movs	r0, #0
 800a22e:	e007      	b.n	800a240 <__sfputs_r+0x22>
 800a230:	463a      	mov	r2, r7
 800a232:	4630      	mov	r0, r6
 800a234:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a238:	f7ff ffdc 	bl	800a1f4 <__sfputc_r>
 800a23c:	1c43      	adds	r3, r0, #1
 800a23e:	d1f3      	bne.n	800a228 <__sfputs_r+0xa>
 800a240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a244 <_vfiprintf_r>:
 800a244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a248:	460d      	mov	r5, r1
 800a24a:	4614      	mov	r4, r2
 800a24c:	4698      	mov	r8, r3
 800a24e:	4606      	mov	r6, r0
 800a250:	b09d      	sub	sp, #116	; 0x74
 800a252:	b118      	cbz	r0, 800a25c <_vfiprintf_r+0x18>
 800a254:	6a03      	ldr	r3, [r0, #32]
 800a256:	b90b      	cbnz	r3, 800a25c <_vfiprintf_r+0x18>
 800a258:	f7fd fc8e 	bl	8007b78 <__sinit>
 800a25c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a25e:	07d9      	lsls	r1, r3, #31
 800a260:	d405      	bmi.n	800a26e <_vfiprintf_r+0x2a>
 800a262:	89ab      	ldrh	r3, [r5, #12]
 800a264:	059a      	lsls	r2, r3, #22
 800a266:	d402      	bmi.n	800a26e <_vfiprintf_r+0x2a>
 800a268:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a26a:	f7fd fe30 	bl	8007ece <__retarget_lock_acquire_recursive>
 800a26e:	89ab      	ldrh	r3, [r5, #12]
 800a270:	071b      	lsls	r3, r3, #28
 800a272:	d501      	bpl.n	800a278 <_vfiprintf_r+0x34>
 800a274:	692b      	ldr	r3, [r5, #16]
 800a276:	b99b      	cbnz	r3, 800a2a0 <_vfiprintf_r+0x5c>
 800a278:	4629      	mov	r1, r5
 800a27a:	4630      	mov	r0, r6
 800a27c:	f000 f93a 	bl	800a4f4 <__swsetup_r>
 800a280:	b170      	cbz	r0, 800a2a0 <_vfiprintf_r+0x5c>
 800a282:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a284:	07dc      	lsls	r4, r3, #31
 800a286:	d504      	bpl.n	800a292 <_vfiprintf_r+0x4e>
 800a288:	f04f 30ff 	mov.w	r0, #4294967295
 800a28c:	b01d      	add	sp, #116	; 0x74
 800a28e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a292:	89ab      	ldrh	r3, [r5, #12]
 800a294:	0598      	lsls	r0, r3, #22
 800a296:	d4f7      	bmi.n	800a288 <_vfiprintf_r+0x44>
 800a298:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a29a:	f7fd fe19 	bl	8007ed0 <__retarget_lock_release_recursive>
 800a29e:	e7f3      	b.n	800a288 <_vfiprintf_r+0x44>
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	9309      	str	r3, [sp, #36]	; 0x24
 800a2a4:	2320      	movs	r3, #32
 800a2a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a2aa:	2330      	movs	r3, #48	; 0x30
 800a2ac:	f04f 0901 	mov.w	r9, #1
 800a2b0:	f8cd 800c 	str.w	r8, [sp, #12]
 800a2b4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800a464 <_vfiprintf_r+0x220>
 800a2b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a2bc:	4623      	mov	r3, r4
 800a2be:	469a      	mov	sl, r3
 800a2c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a2c4:	b10a      	cbz	r2, 800a2ca <_vfiprintf_r+0x86>
 800a2c6:	2a25      	cmp	r2, #37	; 0x25
 800a2c8:	d1f9      	bne.n	800a2be <_vfiprintf_r+0x7a>
 800a2ca:	ebba 0b04 	subs.w	fp, sl, r4
 800a2ce:	d00b      	beq.n	800a2e8 <_vfiprintf_r+0xa4>
 800a2d0:	465b      	mov	r3, fp
 800a2d2:	4622      	mov	r2, r4
 800a2d4:	4629      	mov	r1, r5
 800a2d6:	4630      	mov	r0, r6
 800a2d8:	f7ff ffa1 	bl	800a21e <__sfputs_r>
 800a2dc:	3001      	adds	r0, #1
 800a2de:	f000 80a9 	beq.w	800a434 <_vfiprintf_r+0x1f0>
 800a2e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2e4:	445a      	add	r2, fp
 800a2e6:	9209      	str	r2, [sp, #36]	; 0x24
 800a2e8:	f89a 3000 	ldrb.w	r3, [sl]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	f000 80a1 	beq.w	800a434 <_vfiprintf_r+0x1f0>
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	f04f 32ff 	mov.w	r2, #4294967295
 800a2f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2fc:	f10a 0a01 	add.w	sl, sl, #1
 800a300:	9304      	str	r3, [sp, #16]
 800a302:	9307      	str	r3, [sp, #28]
 800a304:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a308:	931a      	str	r3, [sp, #104]	; 0x68
 800a30a:	4654      	mov	r4, sl
 800a30c:	2205      	movs	r2, #5
 800a30e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a312:	4854      	ldr	r0, [pc, #336]	; (800a464 <_vfiprintf_r+0x220>)
 800a314:	f7fd fde5 	bl	8007ee2 <memchr>
 800a318:	9a04      	ldr	r2, [sp, #16]
 800a31a:	b9d8      	cbnz	r0, 800a354 <_vfiprintf_r+0x110>
 800a31c:	06d1      	lsls	r1, r2, #27
 800a31e:	bf44      	itt	mi
 800a320:	2320      	movmi	r3, #32
 800a322:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a326:	0713      	lsls	r3, r2, #28
 800a328:	bf44      	itt	mi
 800a32a:	232b      	movmi	r3, #43	; 0x2b
 800a32c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a330:	f89a 3000 	ldrb.w	r3, [sl]
 800a334:	2b2a      	cmp	r3, #42	; 0x2a
 800a336:	d015      	beq.n	800a364 <_vfiprintf_r+0x120>
 800a338:	4654      	mov	r4, sl
 800a33a:	2000      	movs	r0, #0
 800a33c:	f04f 0c0a 	mov.w	ip, #10
 800a340:	9a07      	ldr	r2, [sp, #28]
 800a342:	4621      	mov	r1, r4
 800a344:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a348:	3b30      	subs	r3, #48	; 0x30
 800a34a:	2b09      	cmp	r3, #9
 800a34c:	d94d      	bls.n	800a3ea <_vfiprintf_r+0x1a6>
 800a34e:	b1b0      	cbz	r0, 800a37e <_vfiprintf_r+0x13a>
 800a350:	9207      	str	r2, [sp, #28]
 800a352:	e014      	b.n	800a37e <_vfiprintf_r+0x13a>
 800a354:	eba0 0308 	sub.w	r3, r0, r8
 800a358:	fa09 f303 	lsl.w	r3, r9, r3
 800a35c:	4313      	orrs	r3, r2
 800a35e:	46a2      	mov	sl, r4
 800a360:	9304      	str	r3, [sp, #16]
 800a362:	e7d2      	b.n	800a30a <_vfiprintf_r+0xc6>
 800a364:	9b03      	ldr	r3, [sp, #12]
 800a366:	1d19      	adds	r1, r3, #4
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	9103      	str	r1, [sp, #12]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	bfbb      	ittet	lt
 800a370:	425b      	neglt	r3, r3
 800a372:	f042 0202 	orrlt.w	r2, r2, #2
 800a376:	9307      	strge	r3, [sp, #28]
 800a378:	9307      	strlt	r3, [sp, #28]
 800a37a:	bfb8      	it	lt
 800a37c:	9204      	strlt	r2, [sp, #16]
 800a37e:	7823      	ldrb	r3, [r4, #0]
 800a380:	2b2e      	cmp	r3, #46	; 0x2e
 800a382:	d10c      	bne.n	800a39e <_vfiprintf_r+0x15a>
 800a384:	7863      	ldrb	r3, [r4, #1]
 800a386:	2b2a      	cmp	r3, #42	; 0x2a
 800a388:	d134      	bne.n	800a3f4 <_vfiprintf_r+0x1b0>
 800a38a:	9b03      	ldr	r3, [sp, #12]
 800a38c:	3402      	adds	r4, #2
 800a38e:	1d1a      	adds	r2, r3, #4
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	9203      	str	r2, [sp, #12]
 800a394:	2b00      	cmp	r3, #0
 800a396:	bfb8      	it	lt
 800a398:	f04f 33ff 	movlt.w	r3, #4294967295
 800a39c:	9305      	str	r3, [sp, #20]
 800a39e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a468 <_vfiprintf_r+0x224>
 800a3a2:	2203      	movs	r2, #3
 800a3a4:	4650      	mov	r0, sl
 800a3a6:	7821      	ldrb	r1, [r4, #0]
 800a3a8:	f7fd fd9b 	bl	8007ee2 <memchr>
 800a3ac:	b138      	cbz	r0, 800a3be <_vfiprintf_r+0x17a>
 800a3ae:	2240      	movs	r2, #64	; 0x40
 800a3b0:	9b04      	ldr	r3, [sp, #16]
 800a3b2:	eba0 000a 	sub.w	r0, r0, sl
 800a3b6:	4082      	lsls	r2, r0
 800a3b8:	4313      	orrs	r3, r2
 800a3ba:	3401      	adds	r4, #1
 800a3bc:	9304      	str	r3, [sp, #16]
 800a3be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3c2:	2206      	movs	r2, #6
 800a3c4:	4829      	ldr	r0, [pc, #164]	; (800a46c <_vfiprintf_r+0x228>)
 800a3c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a3ca:	f7fd fd8a 	bl	8007ee2 <memchr>
 800a3ce:	2800      	cmp	r0, #0
 800a3d0:	d03f      	beq.n	800a452 <_vfiprintf_r+0x20e>
 800a3d2:	4b27      	ldr	r3, [pc, #156]	; (800a470 <_vfiprintf_r+0x22c>)
 800a3d4:	bb1b      	cbnz	r3, 800a41e <_vfiprintf_r+0x1da>
 800a3d6:	9b03      	ldr	r3, [sp, #12]
 800a3d8:	3307      	adds	r3, #7
 800a3da:	f023 0307 	bic.w	r3, r3, #7
 800a3de:	3308      	adds	r3, #8
 800a3e0:	9303      	str	r3, [sp, #12]
 800a3e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3e4:	443b      	add	r3, r7
 800a3e6:	9309      	str	r3, [sp, #36]	; 0x24
 800a3e8:	e768      	b.n	800a2bc <_vfiprintf_r+0x78>
 800a3ea:	460c      	mov	r4, r1
 800a3ec:	2001      	movs	r0, #1
 800a3ee:	fb0c 3202 	mla	r2, ip, r2, r3
 800a3f2:	e7a6      	b.n	800a342 <_vfiprintf_r+0xfe>
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	f04f 0c0a 	mov.w	ip, #10
 800a3fa:	4619      	mov	r1, r3
 800a3fc:	3401      	adds	r4, #1
 800a3fe:	9305      	str	r3, [sp, #20]
 800a400:	4620      	mov	r0, r4
 800a402:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a406:	3a30      	subs	r2, #48	; 0x30
 800a408:	2a09      	cmp	r2, #9
 800a40a:	d903      	bls.n	800a414 <_vfiprintf_r+0x1d0>
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d0c6      	beq.n	800a39e <_vfiprintf_r+0x15a>
 800a410:	9105      	str	r1, [sp, #20]
 800a412:	e7c4      	b.n	800a39e <_vfiprintf_r+0x15a>
 800a414:	4604      	mov	r4, r0
 800a416:	2301      	movs	r3, #1
 800a418:	fb0c 2101 	mla	r1, ip, r1, r2
 800a41c:	e7f0      	b.n	800a400 <_vfiprintf_r+0x1bc>
 800a41e:	ab03      	add	r3, sp, #12
 800a420:	9300      	str	r3, [sp, #0]
 800a422:	462a      	mov	r2, r5
 800a424:	4630      	mov	r0, r6
 800a426:	4b13      	ldr	r3, [pc, #76]	; (800a474 <_vfiprintf_r+0x230>)
 800a428:	a904      	add	r1, sp, #16
 800a42a:	f7fc fd49 	bl	8006ec0 <_printf_float>
 800a42e:	4607      	mov	r7, r0
 800a430:	1c78      	adds	r0, r7, #1
 800a432:	d1d6      	bne.n	800a3e2 <_vfiprintf_r+0x19e>
 800a434:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a436:	07d9      	lsls	r1, r3, #31
 800a438:	d405      	bmi.n	800a446 <_vfiprintf_r+0x202>
 800a43a:	89ab      	ldrh	r3, [r5, #12]
 800a43c:	059a      	lsls	r2, r3, #22
 800a43e:	d402      	bmi.n	800a446 <_vfiprintf_r+0x202>
 800a440:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a442:	f7fd fd45 	bl	8007ed0 <__retarget_lock_release_recursive>
 800a446:	89ab      	ldrh	r3, [r5, #12]
 800a448:	065b      	lsls	r3, r3, #25
 800a44a:	f53f af1d 	bmi.w	800a288 <_vfiprintf_r+0x44>
 800a44e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a450:	e71c      	b.n	800a28c <_vfiprintf_r+0x48>
 800a452:	ab03      	add	r3, sp, #12
 800a454:	9300      	str	r3, [sp, #0]
 800a456:	462a      	mov	r2, r5
 800a458:	4630      	mov	r0, r6
 800a45a:	4b06      	ldr	r3, [pc, #24]	; (800a474 <_vfiprintf_r+0x230>)
 800a45c:	a904      	add	r1, sp, #16
 800a45e:	f7fc ffcf 	bl	8007400 <_printf_i>
 800a462:	e7e4      	b.n	800a42e <_vfiprintf_r+0x1ea>
 800a464:	0800ac1c 	.word	0x0800ac1c
 800a468:	0800ac22 	.word	0x0800ac22
 800a46c:	0800ac26 	.word	0x0800ac26
 800a470:	08006ec1 	.word	0x08006ec1
 800a474:	0800a21f 	.word	0x0800a21f

0800a478 <__swbuf_r>:
 800a478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a47a:	460e      	mov	r6, r1
 800a47c:	4614      	mov	r4, r2
 800a47e:	4605      	mov	r5, r0
 800a480:	b118      	cbz	r0, 800a48a <__swbuf_r+0x12>
 800a482:	6a03      	ldr	r3, [r0, #32]
 800a484:	b90b      	cbnz	r3, 800a48a <__swbuf_r+0x12>
 800a486:	f7fd fb77 	bl	8007b78 <__sinit>
 800a48a:	69a3      	ldr	r3, [r4, #24]
 800a48c:	60a3      	str	r3, [r4, #8]
 800a48e:	89a3      	ldrh	r3, [r4, #12]
 800a490:	071a      	lsls	r2, r3, #28
 800a492:	d525      	bpl.n	800a4e0 <__swbuf_r+0x68>
 800a494:	6923      	ldr	r3, [r4, #16]
 800a496:	b31b      	cbz	r3, 800a4e0 <__swbuf_r+0x68>
 800a498:	6823      	ldr	r3, [r4, #0]
 800a49a:	6922      	ldr	r2, [r4, #16]
 800a49c:	b2f6      	uxtb	r6, r6
 800a49e:	1a98      	subs	r0, r3, r2
 800a4a0:	6963      	ldr	r3, [r4, #20]
 800a4a2:	4637      	mov	r7, r6
 800a4a4:	4283      	cmp	r3, r0
 800a4a6:	dc04      	bgt.n	800a4b2 <__swbuf_r+0x3a>
 800a4a8:	4621      	mov	r1, r4
 800a4aa:	4628      	mov	r0, r5
 800a4ac:	f7ff fe04 	bl	800a0b8 <_fflush_r>
 800a4b0:	b9e0      	cbnz	r0, 800a4ec <__swbuf_r+0x74>
 800a4b2:	68a3      	ldr	r3, [r4, #8]
 800a4b4:	3b01      	subs	r3, #1
 800a4b6:	60a3      	str	r3, [r4, #8]
 800a4b8:	6823      	ldr	r3, [r4, #0]
 800a4ba:	1c5a      	adds	r2, r3, #1
 800a4bc:	6022      	str	r2, [r4, #0]
 800a4be:	701e      	strb	r6, [r3, #0]
 800a4c0:	6962      	ldr	r2, [r4, #20]
 800a4c2:	1c43      	adds	r3, r0, #1
 800a4c4:	429a      	cmp	r2, r3
 800a4c6:	d004      	beq.n	800a4d2 <__swbuf_r+0x5a>
 800a4c8:	89a3      	ldrh	r3, [r4, #12]
 800a4ca:	07db      	lsls	r3, r3, #31
 800a4cc:	d506      	bpl.n	800a4dc <__swbuf_r+0x64>
 800a4ce:	2e0a      	cmp	r6, #10
 800a4d0:	d104      	bne.n	800a4dc <__swbuf_r+0x64>
 800a4d2:	4621      	mov	r1, r4
 800a4d4:	4628      	mov	r0, r5
 800a4d6:	f7ff fdef 	bl	800a0b8 <_fflush_r>
 800a4da:	b938      	cbnz	r0, 800a4ec <__swbuf_r+0x74>
 800a4dc:	4638      	mov	r0, r7
 800a4de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4e0:	4621      	mov	r1, r4
 800a4e2:	4628      	mov	r0, r5
 800a4e4:	f000 f806 	bl	800a4f4 <__swsetup_r>
 800a4e8:	2800      	cmp	r0, #0
 800a4ea:	d0d5      	beq.n	800a498 <__swbuf_r+0x20>
 800a4ec:	f04f 37ff 	mov.w	r7, #4294967295
 800a4f0:	e7f4      	b.n	800a4dc <__swbuf_r+0x64>
	...

0800a4f4 <__swsetup_r>:
 800a4f4:	b538      	push	{r3, r4, r5, lr}
 800a4f6:	4b2a      	ldr	r3, [pc, #168]	; (800a5a0 <__swsetup_r+0xac>)
 800a4f8:	4605      	mov	r5, r0
 800a4fa:	6818      	ldr	r0, [r3, #0]
 800a4fc:	460c      	mov	r4, r1
 800a4fe:	b118      	cbz	r0, 800a508 <__swsetup_r+0x14>
 800a500:	6a03      	ldr	r3, [r0, #32]
 800a502:	b90b      	cbnz	r3, 800a508 <__swsetup_r+0x14>
 800a504:	f7fd fb38 	bl	8007b78 <__sinit>
 800a508:	89a3      	ldrh	r3, [r4, #12]
 800a50a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a50e:	0718      	lsls	r0, r3, #28
 800a510:	d422      	bmi.n	800a558 <__swsetup_r+0x64>
 800a512:	06d9      	lsls	r1, r3, #27
 800a514:	d407      	bmi.n	800a526 <__swsetup_r+0x32>
 800a516:	2309      	movs	r3, #9
 800a518:	602b      	str	r3, [r5, #0]
 800a51a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a51e:	f04f 30ff 	mov.w	r0, #4294967295
 800a522:	81a3      	strh	r3, [r4, #12]
 800a524:	e034      	b.n	800a590 <__swsetup_r+0x9c>
 800a526:	0758      	lsls	r0, r3, #29
 800a528:	d512      	bpl.n	800a550 <__swsetup_r+0x5c>
 800a52a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a52c:	b141      	cbz	r1, 800a540 <__swsetup_r+0x4c>
 800a52e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a532:	4299      	cmp	r1, r3
 800a534:	d002      	beq.n	800a53c <__swsetup_r+0x48>
 800a536:	4628      	mov	r0, r5
 800a538:	f7fe fb86 	bl	8008c48 <_free_r>
 800a53c:	2300      	movs	r3, #0
 800a53e:	6363      	str	r3, [r4, #52]	; 0x34
 800a540:	89a3      	ldrh	r3, [r4, #12]
 800a542:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a546:	81a3      	strh	r3, [r4, #12]
 800a548:	2300      	movs	r3, #0
 800a54a:	6063      	str	r3, [r4, #4]
 800a54c:	6923      	ldr	r3, [r4, #16]
 800a54e:	6023      	str	r3, [r4, #0]
 800a550:	89a3      	ldrh	r3, [r4, #12]
 800a552:	f043 0308 	orr.w	r3, r3, #8
 800a556:	81a3      	strh	r3, [r4, #12]
 800a558:	6923      	ldr	r3, [r4, #16]
 800a55a:	b94b      	cbnz	r3, 800a570 <__swsetup_r+0x7c>
 800a55c:	89a3      	ldrh	r3, [r4, #12]
 800a55e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a562:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a566:	d003      	beq.n	800a570 <__swsetup_r+0x7c>
 800a568:	4621      	mov	r1, r4
 800a56a:	4628      	mov	r0, r5
 800a56c:	f000 f88b 	bl	800a686 <__smakebuf_r>
 800a570:	89a0      	ldrh	r0, [r4, #12]
 800a572:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a576:	f010 0301 	ands.w	r3, r0, #1
 800a57a:	d00a      	beq.n	800a592 <__swsetup_r+0x9e>
 800a57c:	2300      	movs	r3, #0
 800a57e:	60a3      	str	r3, [r4, #8]
 800a580:	6963      	ldr	r3, [r4, #20]
 800a582:	425b      	negs	r3, r3
 800a584:	61a3      	str	r3, [r4, #24]
 800a586:	6923      	ldr	r3, [r4, #16]
 800a588:	b943      	cbnz	r3, 800a59c <__swsetup_r+0xa8>
 800a58a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a58e:	d1c4      	bne.n	800a51a <__swsetup_r+0x26>
 800a590:	bd38      	pop	{r3, r4, r5, pc}
 800a592:	0781      	lsls	r1, r0, #30
 800a594:	bf58      	it	pl
 800a596:	6963      	ldrpl	r3, [r4, #20]
 800a598:	60a3      	str	r3, [r4, #8]
 800a59a:	e7f4      	b.n	800a586 <__swsetup_r+0x92>
 800a59c:	2000      	movs	r0, #0
 800a59e:	e7f7      	b.n	800a590 <__swsetup_r+0x9c>
 800a5a0:	200001d0 	.word	0x200001d0

0800a5a4 <_raise_r>:
 800a5a4:	291f      	cmp	r1, #31
 800a5a6:	b538      	push	{r3, r4, r5, lr}
 800a5a8:	4604      	mov	r4, r0
 800a5aa:	460d      	mov	r5, r1
 800a5ac:	d904      	bls.n	800a5b8 <_raise_r+0x14>
 800a5ae:	2316      	movs	r3, #22
 800a5b0:	6003      	str	r3, [r0, #0]
 800a5b2:	f04f 30ff 	mov.w	r0, #4294967295
 800a5b6:	bd38      	pop	{r3, r4, r5, pc}
 800a5b8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a5ba:	b112      	cbz	r2, 800a5c2 <_raise_r+0x1e>
 800a5bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a5c0:	b94b      	cbnz	r3, 800a5d6 <_raise_r+0x32>
 800a5c2:	4620      	mov	r0, r4
 800a5c4:	f000 f830 	bl	800a628 <_getpid_r>
 800a5c8:	462a      	mov	r2, r5
 800a5ca:	4601      	mov	r1, r0
 800a5cc:	4620      	mov	r0, r4
 800a5ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a5d2:	f000 b817 	b.w	800a604 <_kill_r>
 800a5d6:	2b01      	cmp	r3, #1
 800a5d8:	d00a      	beq.n	800a5f0 <_raise_r+0x4c>
 800a5da:	1c59      	adds	r1, r3, #1
 800a5dc:	d103      	bne.n	800a5e6 <_raise_r+0x42>
 800a5de:	2316      	movs	r3, #22
 800a5e0:	6003      	str	r3, [r0, #0]
 800a5e2:	2001      	movs	r0, #1
 800a5e4:	e7e7      	b.n	800a5b6 <_raise_r+0x12>
 800a5e6:	2400      	movs	r4, #0
 800a5e8:	4628      	mov	r0, r5
 800a5ea:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a5ee:	4798      	blx	r3
 800a5f0:	2000      	movs	r0, #0
 800a5f2:	e7e0      	b.n	800a5b6 <_raise_r+0x12>

0800a5f4 <raise>:
 800a5f4:	4b02      	ldr	r3, [pc, #8]	; (800a600 <raise+0xc>)
 800a5f6:	4601      	mov	r1, r0
 800a5f8:	6818      	ldr	r0, [r3, #0]
 800a5fa:	f7ff bfd3 	b.w	800a5a4 <_raise_r>
 800a5fe:	bf00      	nop
 800a600:	200001d0 	.word	0x200001d0

0800a604 <_kill_r>:
 800a604:	b538      	push	{r3, r4, r5, lr}
 800a606:	2300      	movs	r3, #0
 800a608:	4d06      	ldr	r5, [pc, #24]	; (800a624 <_kill_r+0x20>)
 800a60a:	4604      	mov	r4, r0
 800a60c:	4608      	mov	r0, r1
 800a60e:	4611      	mov	r1, r2
 800a610:	602b      	str	r3, [r5, #0]
 800a612:	f7f7 f9ec 	bl	80019ee <_kill>
 800a616:	1c43      	adds	r3, r0, #1
 800a618:	d102      	bne.n	800a620 <_kill_r+0x1c>
 800a61a:	682b      	ldr	r3, [r5, #0]
 800a61c:	b103      	cbz	r3, 800a620 <_kill_r+0x1c>
 800a61e:	6023      	str	r3, [r4, #0]
 800a620:	bd38      	pop	{r3, r4, r5, pc}
 800a622:	bf00      	nop
 800a624:	20000724 	.word	0x20000724

0800a628 <_getpid_r>:
 800a628:	f7f7 b9da 	b.w	80019e0 <_getpid>

0800a62c <_malloc_usable_size_r>:
 800a62c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a630:	1f18      	subs	r0, r3, #4
 800a632:	2b00      	cmp	r3, #0
 800a634:	bfbc      	itt	lt
 800a636:	580b      	ldrlt	r3, [r1, r0]
 800a638:	18c0      	addlt	r0, r0, r3
 800a63a:	4770      	bx	lr

0800a63c <__swhatbuf_r>:
 800a63c:	b570      	push	{r4, r5, r6, lr}
 800a63e:	460c      	mov	r4, r1
 800a640:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a644:	4615      	mov	r5, r2
 800a646:	2900      	cmp	r1, #0
 800a648:	461e      	mov	r6, r3
 800a64a:	b096      	sub	sp, #88	; 0x58
 800a64c:	da0c      	bge.n	800a668 <__swhatbuf_r+0x2c>
 800a64e:	89a3      	ldrh	r3, [r4, #12]
 800a650:	2100      	movs	r1, #0
 800a652:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a656:	bf0c      	ite	eq
 800a658:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a65c:	2340      	movne	r3, #64	; 0x40
 800a65e:	2000      	movs	r0, #0
 800a660:	6031      	str	r1, [r6, #0]
 800a662:	602b      	str	r3, [r5, #0]
 800a664:	b016      	add	sp, #88	; 0x58
 800a666:	bd70      	pop	{r4, r5, r6, pc}
 800a668:	466a      	mov	r2, sp
 800a66a:	f000 f849 	bl	800a700 <_fstat_r>
 800a66e:	2800      	cmp	r0, #0
 800a670:	dbed      	blt.n	800a64e <__swhatbuf_r+0x12>
 800a672:	9901      	ldr	r1, [sp, #4]
 800a674:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a678:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a67c:	4259      	negs	r1, r3
 800a67e:	4159      	adcs	r1, r3
 800a680:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a684:	e7eb      	b.n	800a65e <__swhatbuf_r+0x22>

0800a686 <__smakebuf_r>:
 800a686:	898b      	ldrh	r3, [r1, #12]
 800a688:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a68a:	079d      	lsls	r5, r3, #30
 800a68c:	4606      	mov	r6, r0
 800a68e:	460c      	mov	r4, r1
 800a690:	d507      	bpl.n	800a6a2 <__smakebuf_r+0x1c>
 800a692:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a696:	6023      	str	r3, [r4, #0]
 800a698:	6123      	str	r3, [r4, #16]
 800a69a:	2301      	movs	r3, #1
 800a69c:	6163      	str	r3, [r4, #20]
 800a69e:	b002      	add	sp, #8
 800a6a0:	bd70      	pop	{r4, r5, r6, pc}
 800a6a2:	466a      	mov	r2, sp
 800a6a4:	ab01      	add	r3, sp, #4
 800a6a6:	f7ff ffc9 	bl	800a63c <__swhatbuf_r>
 800a6aa:	9900      	ldr	r1, [sp, #0]
 800a6ac:	4605      	mov	r5, r0
 800a6ae:	4630      	mov	r0, r6
 800a6b0:	f7fb fbe0 	bl	8005e74 <_malloc_r>
 800a6b4:	b948      	cbnz	r0, 800a6ca <__smakebuf_r+0x44>
 800a6b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6ba:	059a      	lsls	r2, r3, #22
 800a6bc:	d4ef      	bmi.n	800a69e <__smakebuf_r+0x18>
 800a6be:	f023 0303 	bic.w	r3, r3, #3
 800a6c2:	f043 0302 	orr.w	r3, r3, #2
 800a6c6:	81a3      	strh	r3, [r4, #12]
 800a6c8:	e7e3      	b.n	800a692 <__smakebuf_r+0xc>
 800a6ca:	89a3      	ldrh	r3, [r4, #12]
 800a6cc:	6020      	str	r0, [r4, #0]
 800a6ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6d2:	81a3      	strh	r3, [r4, #12]
 800a6d4:	9b00      	ldr	r3, [sp, #0]
 800a6d6:	6120      	str	r0, [r4, #16]
 800a6d8:	6163      	str	r3, [r4, #20]
 800a6da:	9b01      	ldr	r3, [sp, #4]
 800a6dc:	b15b      	cbz	r3, 800a6f6 <__smakebuf_r+0x70>
 800a6de:	4630      	mov	r0, r6
 800a6e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6e4:	f000 f81e 	bl	800a724 <_isatty_r>
 800a6e8:	b128      	cbz	r0, 800a6f6 <__smakebuf_r+0x70>
 800a6ea:	89a3      	ldrh	r3, [r4, #12]
 800a6ec:	f023 0303 	bic.w	r3, r3, #3
 800a6f0:	f043 0301 	orr.w	r3, r3, #1
 800a6f4:	81a3      	strh	r3, [r4, #12]
 800a6f6:	89a3      	ldrh	r3, [r4, #12]
 800a6f8:	431d      	orrs	r5, r3
 800a6fa:	81a5      	strh	r5, [r4, #12]
 800a6fc:	e7cf      	b.n	800a69e <__smakebuf_r+0x18>
	...

0800a700 <_fstat_r>:
 800a700:	b538      	push	{r3, r4, r5, lr}
 800a702:	2300      	movs	r3, #0
 800a704:	4d06      	ldr	r5, [pc, #24]	; (800a720 <_fstat_r+0x20>)
 800a706:	4604      	mov	r4, r0
 800a708:	4608      	mov	r0, r1
 800a70a:	4611      	mov	r1, r2
 800a70c:	602b      	str	r3, [r5, #0]
 800a70e:	f7f7 f9cc 	bl	8001aaa <_fstat>
 800a712:	1c43      	adds	r3, r0, #1
 800a714:	d102      	bne.n	800a71c <_fstat_r+0x1c>
 800a716:	682b      	ldr	r3, [r5, #0]
 800a718:	b103      	cbz	r3, 800a71c <_fstat_r+0x1c>
 800a71a:	6023      	str	r3, [r4, #0]
 800a71c:	bd38      	pop	{r3, r4, r5, pc}
 800a71e:	bf00      	nop
 800a720:	20000724 	.word	0x20000724

0800a724 <_isatty_r>:
 800a724:	b538      	push	{r3, r4, r5, lr}
 800a726:	2300      	movs	r3, #0
 800a728:	4d05      	ldr	r5, [pc, #20]	; (800a740 <_isatty_r+0x1c>)
 800a72a:	4604      	mov	r4, r0
 800a72c:	4608      	mov	r0, r1
 800a72e:	602b      	str	r3, [r5, #0]
 800a730:	f7f7 f9ca 	bl	8001ac8 <_isatty>
 800a734:	1c43      	adds	r3, r0, #1
 800a736:	d102      	bne.n	800a73e <_isatty_r+0x1a>
 800a738:	682b      	ldr	r3, [r5, #0]
 800a73a:	b103      	cbz	r3, 800a73e <_isatty_r+0x1a>
 800a73c:	6023      	str	r3, [r4, #0]
 800a73e:	bd38      	pop	{r3, r4, r5, pc}
 800a740:	20000724 	.word	0x20000724

0800a744 <_init>:
 800a744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a746:	bf00      	nop
 800a748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a74a:	bc08      	pop	{r3}
 800a74c:	469e      	mov	lr, r3
 800a74e:	4770      	bx	lr

0800a750 <_fini>:
 800a750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a752:	bf00      	nop
 800a754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a756:	bc08      	pop	{r3}
 800a758:	469e      	mov	lr, r3
 800a75a:	4770      	bx	lr
